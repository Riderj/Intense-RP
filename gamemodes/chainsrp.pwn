#define SERVER_GM_TEXT "Intense V.2.0"
#define SERVER_GM_UPDATER "Blade_Longwei"

/* Gamemode Created by Blade_Longwei
 GameMode Updated by Blade_Longwei & RiderJ. */





// Includes
#include <a_samp>
#include <a_players>
#include <dini>
#include <dudb>
//#include <mSelection>
#include <dutils>
//#include <anti_flood> Made by Blade_Longwei, Not including it in the server.
#pragma unused ret_memcpy
#include <foreach>
#include <sscanf2>
#include <zcmd>
#include <streamer>
#include <OPSP>
#include <progress>
#include <yom_buttons>
#include <gvc>
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)
#define ClearChat(%0) for(new i=0; i<20; i++) SendClientMessage(%0, -1, " ")
native WP_Hash(_buffer[], len, const str[]);
#pragma tabsize 0

#define MAX_CONNECTIONS_FROM_IP 2
// Marker Colors
#define TRANSPARENT_NG 0x9ACD3200
#define TCOLOR_NAVYBLUE 0x8D8DFF00
#define COLOR_NG 0x9ACD3200
#define TRANSPARENT_WHITE 0xFFFFFF00
#define TRANSPARENT_GREY 0xAFAFAF00
#define TRANSPARENT_BLUE 0x2641FE00
#define TRANSPARENT_ORANGE 0xFF990000
#define TRANSPARENT_PURPLE 0xC2A2DA00
#define TRANSPARENT_VIP 0xC93CCE00
// POLICE
#define MARKER_LIGHTBLUE 0x33CCFFFF

#define TOTAL_ITEMS         207
#define SELECTION_ITEMS 	21
#define ITEMS_PER_LINE  	7

#define HEADER_TEXT "Vehicles"
#define NEXT_TEXT   "Next"
#define PREV_TEXT   "Prev"

#define DIALOG_BASE_X   	75.0
#define DIALOG_BASE_Y   	130.0
#define DIALOG_WIDTH    	550.0
#define DIALOG_HEIGHT   	180.0
#define SPRITE_DIM_X    	60.0
#define SPRITE_DIM_Y    	70.0


new gTotalItems = TOTAL_ITEMS;
new PlayerText:gCurrentPageTextDrawId[MAX_PLAYERS];
new PlayerText:gHeaderTextDrawId[MAX_PLAYERS];
new PlayerText:gBackgroundTextDrawId[MAX_PLAYERS];
new PlayerText:gNextButtonTextDrawId[MAX_PLAYERS];
new PlayerText:gPrevButtonTextDrawId[MAX_PLAYERS];
new PlayerText:gSelectionItems[MAX_PLAYERS][SELECTION_ITEMS];
new gSelectionItemsTag[MAX_PLAYERS][SELECTION_ITEMS];
new gItemAt[MAX_PLAYERS];

//Zombie Beta Doors//
new zombielift;
new zombieliftdoorattached1;
new zombieliftdoorattached2;
new zombieliftdoornotattached1;
new zombieliftdoornotattached2;
new zombieliftdoornotattached3;
new zombieliftdoornotattached4;


new gItemList[TOTAL_ITEMS] = {
400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,
431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,450,451,452,453,454,455,456,457,458,459,460,461,
462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,
493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,
524,525,526,527,528,529,530,531,532,533,534,535,536,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,
555,556,557,558,559,560,561,562,563,564,565,566,567,568,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,
586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611
};


// Colors
#define COLOR_WHITE 0xFFFFFFFF
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_PM1 0xA65FC7FF
#define COLOR_PM2 0xD35FC7FF
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define TEAM_GROVE_COLOR 0x00AA00FF
#define COLOR_OOC 0xE0FFFFFF
#define COLOR_GREY 0xAFAFAFFF
#define COLOR_LIGHTGREEN 0xADFF2FFF
#define COLOR_LIGHTRED 0xFF6347FF
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_DARKRED 0xAA3333FF
#define COLOR_RED 0xFF0606FF
#define TCOLOR_YELLOW 0xFFFF0000
#define COLOR_TWPINK 0xE75480AA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define COLOR_DBLUE 0x2641FEAA
#define TEAM_CYAN_COLOR 0xFF8282AA
#define COLOR_LIGHTBLUE 0x33CCFFFF
#define COLOR_GREEN 0x33AA33FF
#define COLOR_INDIGO 0x4B00B000
#define COLOR_PINK 0xFF66FF00
#define COLOR_BLACK 0x00000000
#define COLOR_YELLOW 0xFFFF00FF
#define COLOR_PURPLE 0xC2A2DAFF
#define COLOR_ORANGE 0xFF9900FF
#define COLOR_REPORT 0xFFFF91FF
#define COLOR_RADIO 0x8D8DFFFF
#define COLOR_DEPTRADIO 0xFFD700FF
#define COLOR_BLUE 0x2641FEFF
#define COLOR_MEDIC 0xFF8282FF
#define COLOR_NEWBIE 0x7DAEFFFF
#define COLOR_LIME 0x00FF00FF
#define COLOR_NEWS 0x049C7100
#define COLOR_CYAN 0x01FCFFFF
#define COLOR_VIP 0xC93CCEFF

// Custom Defines
#define MAX_FACTIONS 8 // 0 = civilian | 1 = NYPD | 2 = Government | 3 = Hitman Agency | 4 = SA News | 5 = LSFMD | 6 = FBI
#define MAX_FAMILIES 11 // 1 to 10, ignore 0
#define MAX_BIZ 101 // Ignore 0
#define MAX_BUILDINGS 51//Ignore 0
#define MAX_HOUSES 501 // Ignore 0
#define MAX_GARAGES 501 //Ignore 0
#define MAX_DOORS 50
#define MAX_MAPICONS 20
#define MAX_MUSIC 24
#define MAX_ADS 50
#define MAX_CUSTOM_VEHICLES 20
#define MAX_POINTS 6
#define MAX_DVEHICLES 50
#define MAX_SPIKESTRIPS 30
#define MAX_BLOCKADES 10
#define MAX_GATES 50 // Ignore 0
#define MAX_OBJ 1001
#define MAX_gOBJ 1001
#define MAX_vvveh 50

//walkstyle defines
#define 					WALK_DEFAULT    					(0)
#define 					WALK_NORMAL     					(1)
#define 					WALK_PED       						(2)
#define 					WALK_GANGSTA   						(3)
#define 					WALK_GANGSTA2  						(4)
#define 					WALK_OLD       						(5)
#define 					WALK_FAT_OLD   						(6)
#define 					WALK_FAT      						(7)
#define 					WALK_LADY     						(8)
#define 					WALK_LADY2    						(9)
#define 					WALK_WHORE    						(10)
#define 					WALK_WHORE2   						(11)
#define 					WALK_DRUNK     						(12)
#define 					WALK_BLIND     						(13)

new walktime[MAX_PLAYERS];

// 911
new Call911[MAX_PLAYERS];

//FBI
new door1; // Door at the left when you enter
new door2; // Door at the left when you enter
new door3; // Door at the right when you enter
new door4; // Door at the right when you enter
new door5; // Celldoors downstairs
// Admin Fly

new
	bool:flying[MAX_PLAYERS];
// new textdraws
new Text:MainMenuTxtdraw[12];
new Text3D:aDutyText[MAX_PLAYERS];
new Text:TutTxtDraw[54];
//cellphone

new SpeakerPhone[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
//new RingTone[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new CalledMedics[MAX_PLAYERS];
new MedicsCallTime[MAX_PLAYERS];
new CalledCops[MAX_PLAYERS];
new CopsCallTime[MAX_PLAYERS];
//new Backup[MAX_PLAYERS];
//new WantedPoints[MAX_PLAYERS];
//C4
new BombPrice = 5000; //Price
new ExplosionRadius = 30; //Explosion Radius
new C4[MAX_PLAYERS];
/*new planelist = mS_INVALID_LISTID;
new skinlist = mS_INVALID_LISTID;*/
new Bomb[MAX_PLAYERS];
new Planted[MAX_PLAYERS];
new Float:bx[MAX_PLAYERS], Float:by[MAX_PLAYERS], Float:bz[MAX_PLAYERS];
new Pspawned[MAX_PLAYERS];

new aDuty[MAX_PLAYERS];
new mDuty[MAX_PLAYERS];

//flashlightsing stuff
new obj1[MAX_VEHICLES] = { INVALID_OBJECT_ID, ... };
new obj2[MAX_VEHICLES] = { INVALID_OBJECT_ID, ... };
new LightPwr[MAX_VEHICLES];
new Flasher[MAX_VEHICLES] = 0;
new FlasherState[MAX_VEHICLES];
new FlashTimer;
// Pilot Job
//phone fix
//new calledid;
/*new vehName[][] =
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "NYPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};*/
//trunks
new topened[MAX_PLAYERS];

//specials
new CarHop[MAX_PLAYERS];
new SpeedHack[MAX_PLAYERS];
new blowgun[MAX_PLAYERS];

//event stuff
new Float:eX, Float:eY, Float:eZ;
new Float:eHP, Float:eARMOR;
new eventdeath[MAX_PLAYERS];
new seatbelt[MAX_PLAYERS];
new zombielifttt[MAX_PLAYERS];
new dueldeath[MAX_PLAYERS];


//PB spawns
new Float:PaintballSpawns[7][3] = {
{-394.8027,2232.2317,42.4297},
{-430.8412,2240.5371,42.9834},
{-369.2361,2248.3127,42.4844},
{-350.8910,2218.0215,42.4912},
{-384.0544,2206.2908,42.4235},
{-395.7100,2214.9480,42.4297},
{-445.3718,2222.5481,42.4297}
};
//pb info
new PlayerPaintballing[MAX_PLAYERS];
new pbGuns[13][2];
new pbeGuns[13][MAX_PLAYERS];
new pbeGunsA[13][MAX_PLAYERS];
new pbHealth;

//neon
new neon[MAX_PLAYERS]; // 1-off; 0-on;
new vneon[MAX_PLAYERS];



// objects
new oEdit[MAX_PLAYERS];
new oEditID[MAX_PLAYERS]; // Object's ID
new Float:oPos[MAX_PLAYERS][3];
new Float:oRot[MAX_PLAYERS][3];
new oldoID;
new Float:oldodX, Float:oldodY, Float:oldodZ, Float:oldodRX, Float:oldodRY, Float:oldodRZ;


// Gates
// gedit: object - closed - opened - speed - password
new gEdit[MAX_PLAYERS]; // 1 = closed | 2 = opened
new gEditID[MAX_PLAYERS]; // Object's ID
new Float:gPos[MAX_PLAYERS][3];
new Float:gRot[MAX_PLAYERS][3];

// News
new NewsMoney;

// Refunding
new Refund[MAX_PLAYERS];

// Toys
new toyslot[MAX_PLAYERS];

// loyalty
new LHealth;
new LFix;
new LRefill;

// Stoned Timer
new StonedTimer[MAX_PLAYERS];

//special days
new DayNoDrops;
new DNDW[13][2];
new DayPaycheck;
new DayNoPD;
new DayNoShops;
new DayNoJobs;
new DayRespect;
new DayGrandOpening;
//new spdtdname[256];

// Fishes
new Fished[MAX_PLAYERS];
new FishTime[MAX_PLAYERS];

// Falseban fix
new FalseBan[MAX_PLAYERS];

// News
new LiveBy[MAX_PLAYERS];
new LiveRequest[MAX_PLAYERS];
new Live[MAX_PLAYERS];
new LiveConference;

// Bank Robbery
new Text:Textdraw0;
new Text:Textdraw1;
new Text:Textdraw2;
new Text:Textdraw3;
new Text:Textdraw4;
new Text:Textdraw5;
//new BankRobbery;
new BankRobbersCount;
new BankRobbers[5][MAX_PLAYER_NAME];
new BankRobber[MAX_PLAYERS];
new RobberyRequest[MAX_PLAYERS];
new BankC4;
new RobberyStarted;
new DeliverMoney[MAX_PLAYERS];
new TotalRobbers;
new TotalStolen;
new BankRobberyTime;
new BankBlock;


// Boxing
new Boxing[MAX_PLAYERS]; // Boxing[playerid] = 1;
new BoxBy[MAX_PLAYERS]; // BoxOffer[playerb] = playerid;
new Boxer[3]; // 1 = /fight | 2 = /accept
new pBoxer[MAX_PLAYERS]; // playerb = 1 | playerid = 2
new BoxTime; // Global boxing countdown
new BoxingMatch; // 1 = going on | 0 = none
new BoxerBid[3]; // 1 = /fight | 2 = /accept
new BidAmount[MAX_PLAYERS]; // /bid
new BidBoxer[MAX_PLAYERS]; // 1/2
new BoxTimer; // For SetTime

// Family skins
new pskin[MAX_PLAYERS], fskin[MAX_PLAYERS];

// Parachute
new Parachute;

// Join Messages
new JoinMessages[MAX_PLAYERS];

// GMX
new GMX[MAX_PLAYERS];

// Spikes
enum sInfo
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new SpikeInfo[MAX_SPIKESTRIPS][sInfo];

enum bbInfo
{
	bbCreated,
    Float:bbX,
    Float:bbY,
    Float:bbZ,
    bbObject,
};
new BlockadeInfo[MAX_BLOCKADES][bbInfo];
//Cellphone
enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];
// Sirens
new Siren[MAX_VEHICLES];
new SirenObject[MAX_VEHICLES];

// Truck Packages
new TruckPackages[MAX_VEHICLES];

// Fuel
new Fuel[MAX_VEHICLES];
new FuelVar[MAX_VEHICLES];
new fMeter[MAX_PLAYERS];
new Refill[MAX_PLAYERS];

// Family Vehicles
new Fam[MAX_VEHICLES];

// VIP Tag
new VIPTag[MAX_PLAYERS];
new Text3D:VIPText[MAX_PLAYERS];
// VIP Dialog
new VIP[MAX_PLAYERS];
// VIP Name
new VIPName[MAX_PLAYERS][MAX_PLAYER_NAME];
new PlayerName[MAX_PLAYERS][MAX_PLAYER_NAME];
new Approve[MAX_PLAYERS];

// Dragging
new Drag[MAX_PLAYERS];
new Dragged[MAX_PLAYERS];

// Anti CS
#define MAX_SLOTS 48
new NotMoving[MAX_PLAYERS];
new WeaponID[MAX_PLAYERS];
new CheckCrouch[MAX_PLAYERS];
new Ammo[MAX_PLAYERS][MAX_SLOTS];

// DMV
new DMVCar[5];
new DLCar[12];
new LicenseTest[MAX_PLAYERS];
new CP[MAX_PLAYERS];

// AntiAFK
new AFK[MAX_PLAYERS];
new Float:OldPos[MAX_PLAYERS][3];
new Float:NewPos[MAX_PLAYERS][3];
new IsAFK[MAX_PLAYERS];
new Text3D:AFKText[MAX_PLAYERS];

// Event
new Float:ePos[3];
new eInt, eVW;
new Event[MAX_PLAYERS];
new PollVoted[MAX_PLAYERS];
new PollY;
new PollOn;
new PollN;
new Duel[MAX_PLAYERS];
new EventOn;
new DuelOn;
new EventLocked;
new EventWep[3];
new Float:EventHealth;
new Float:EventArmor;

// Helper Chat
new Chat[MAX_PLAYERS];

// Speedlimit
new Speedlimit[MAX_PLAYERS];

// Listening
new Whispers[MAX_PLAYERS];
new SMSes[MAX_PLAYERS];
new PMs[MAX_PLAYERS];
//
new apt2;

// Points
new Capturer = -1;
new CapturerFam = -1;
//level system
new levelcost = 4000; //level cost
new levelexp = 4; //levelexp
// Alt-Tab Detection
new AltTabbed[MAX_PLAYERS];
new Tabbed[MAX_PLAYERS];
new Text3D:AltTabText[MAX_PLAYERS];
new HasText[MAX_PLAYERS];

// AntiTP
new AntiTP[MAX_PLAYERS];
new AntiTPTimer[MAX_PLAYERS];

// Paycheck
new PayChecks;

// HH Check
new HHcheckUsed = 0;
new Float:HHcheckFloats[MAX_PLAYERS][6];
new HHcheckInt[MAX_PLAYERS];
new HHcheckVW[MAX_PLAYERS];

// MOTDS
new ServerMOTD[128];
new NYPDMOTD[128];
new GOVMOTD[128];
new HAMOTD[128];
new AdminMOTD[128];
new LoginMOTD[128];
// Spam
new CommandSpamCount[MAX_PLAYERS];
new OldSpamCommand[MAX_PLAYERS][128];
new NewSpamCommand[MAX_PLAYERS][128];
new ChatSpamCount[MAX_PLAYERS];
new OldSpamChat[MAX_PLAYERS][128];
new NewSpamChat[MAX_PLAYERS][128];
// Drugs
new DrugTimeout[MAX_PLAYERS];

// Admin Mark
new Float:aMark[MAX_PLAYERS][3];
new aMarkInt[MAX_PLAYERS];
new aMarkVw[MAX_PLAYERS];

// Advertisements
#define TIMER_AD 60
new HasAD[MAX_PLAYERS];
new AdQueue;
new AD[MAX_ADS][128];
new iAD[MAX_ADS];
new iAdName[MAX_ADS][32];
new LastAd;
// Tutorial Timers
new Tut[MAX_PLAYERS];

// Job Defines
#define MAX_JOBS 13
#define JOB_NONE 0
#define JOB_MECHANIC 1
#define JOB_LAWYER 2
#define JOB_TRUCKER 3
#define JOB_FISHER 4
#define JOB_WDEALER 5
#define JOB_WSMUGGLER 6
#define JOB_DDEALER 7
#define JOB_DSMUGGLER 8
#define JOB_BODYGUARD 10
#define JOB_BOXER 11
// Weed and cocaine
new Weed;
new Text3D:WeedText;
new cocaine;
new Text3D:cocaineText;
// Products
new Products;
new Text3D:ProductsText;
// Website
new Text:WebTD;
//Login screen

//GenMotd

// Time System
new tsec,tmin,thour;
new Text:TimeTD;
new Seconds[MAX_PLAYERS];
// Tutorial TD
new Text:TutorialTD;
// Togging VIP
new VIPOff[MAX_PLAYERS];
// Togging Phone
new PhoneOff[MAX_PLAYERS];
// Tickets
new TicketBy[MAX_PLAYERS];
new TicketPrice[MAX_PLAYERS][MAX_PLAYERS];
// Prison Cells
new Float:RandomPrison[][4] =
{
	{1799.5365,-1552.8744,5700.4287},
	{1800.5876,-1557.7306,5700.4287},
	{1801.0743,-1567.4532,5700.4287},
	{1799.6096,-1571.7847,5700.4287},
	{1800.1125,-1576.5686,5700.4287},
	{1800.5441,-1581.1685,5700.4287},
	{1819.0645,-1581.6765,5700.4287},
	{1818.9888,-1577.1777,5700.4287},
	{1818.9377,-1571.7574,5700.4287},
	{1819.4902,-1567.8359,5700.4287},
	{1819.0591,-1562.2715,5700.4287},
	{1819.2585,-1558.4816,5700.4287},
	{1818.9005,-1553.8440,5700.4287},
	{1818.8922,-1553.1295,5703.9126},
	{1819.3290,-1557.4099,5703.9189},
	{1819.2858,-1562.6426,5703.9189},
	{1819.9828,-1567.6573,5703.9189},
	{1819.0760,-1571.9531,5703.9189},
	{1818.8298,-1576.5182,5703.9189},
	{1819.6375,-1581.4156,5703.9189},
	{1799.7904,-1581.3351,5703.9189},
	{1800.9388,-1577.2362,5703.9189},
	{1801.0305,-1571.7723,5703.9189},
	{1801.3362,-1567.6187,5703.9189},
	{1801.3494,-1562.5310,5703.9189},
	{1800.5774,-1557.7167,5703.9189},
	{1800.8252,-1553.4283,5703.9189}
};

// Public variables
new Invited[MAX_PLAYERS];
new Inviter[MAX_PLAYERS];
new Faction[MAX_PLAYERS];
new fInvited[MAX_PLAYERS];
new fInviter[MAX_PLAYERS];
new Family[MAX_PLAYERS];
new Tazer[MAX_PLAYERS];
new ReplaceTazer[MAX_PLAYERS];
new Float:fPos[3];
new TazeTimeout[MAX_PLAYERS];
new TazeCountDown[MAX_PLAYERS];
new Tracking[MAX_PLAYERS];
new CuffTimeout[MAX_PLAYERS];
new CuffCountDown[MAX_PLAYERS];
new Uncuffed[MAX_PLAYERS];
new GunsBeingRemoved[MAX_PLAYERS];
new TempGuns[13];
new TempGunsAmmo[13];
new Tazed[MAX_PLAYERS];
new Cuffed[MAX_PLAYERS];
new HospitalCountDown[MAX_PLAYERS];
new Hospital[MAX_PLAYERS];
new HospitalTime[MAX_PLAYERS];
new LastCar[MAX_PLAYERS];
new Spec[MAX_PLAYERS];
new Specid[MAX_PLAYERS];
new NewbieTime[MAX_PLAYERS];
new GarageTime[MAX_PLAYERS];
new ATMTime[MAX_PLAYERS];
new Calling[MAX_PLAYERS];
new Called[MAX_PLAYERS];
new BeingCalled[MAX_PLAYERS];
new Caller[MAX_PLAYERS];
new CallTime[MAX_PLAYERS];
new Speedo[MAX_PLAYERS];
new Tied[MAX_PLAYERS];
new Blindfolded[MAX_PLAYERS];
new OldGun[MAX_PLAYERS];
new OldAmmo[MAX_PLAYERS];
new NoSprunk[MAX_PLAYERS];
new ReportTime[MAX_PLAYERS];
new PackTime[MAX_PLAYERS];
new HelpTime[MAX_PLAYERS];
new Float:hPos[MAX_PLAYERS][3];
new hPOS[MAX_PLAYERS][2];
// Materials
new SellMaterialsTo[MAX_PLAYERS];
new BuyMaterialsFrom[MAX_PLAYERS];
new BuyMaterialsAmount[MAX_PLAYERS];
new BuyMaterialsPrice[MAX_PLAYERS];
new BeenOfferedMaterials[MAX_PLAYERS];
new BeenOfferedMMaterials[MAX_PLAYERS];
new BeenOfferedHMaterials[MAX_PLAYERS];
new sellgunmedmats[MAX_PLAYERS];
new sellgunlowmats[MAX_PLAYERS];
new sellgunhighmats[MAX_PLAYERS];
// Weapons
new SellWeaponTo[MAX_PLAYERS];
new BuyWeaponFrom[MAX_PLAYERS];
new BuyWeaponPrice[MAX_PLAYERS];
new BeenOfferedWeapon[MAX_PLAYERS];
// Drugs
new WeedSeller[MAX_PLAYERS];
new WeedPrice[MAX_PLAYERS][MAX_PLAYERS];
new WeedAmount[MAX_PLAYERS][MAX_PLAYERS];
new cocaineSeller[MAX_PLAYERS];
new cocainePrice[MAX_PLAYERS][MAX_PLAYERS];
new cocaineAmount[MAX_PLAYERS][MAX_PLAYERS];

// Hitman
new Hitman[MAX_PLAYERS];
// Defend and Free
new FreeBy[MAX_PLAYERS];
new FreePrice[MAX_PLAYERS][MAX_PLAYERS];
new FreeTime[MAX_PLAYERS];
new DefendBy[MAX_PLAYERS];
new DefendPrice[MAX_PLAYERS][MAX_PLAYERS];
new FreeTimeout[MAX_PLAYERS];
new DefendTimeout[MAX_PLAYERS];

// Vest
new VestPrice[MAX_PLAYERS][MAX_PLAYERS];
new VestBy[MAX_PLAYERS];


// Non-Player Variables
new NYPDLobby[4];
new NYPDLobbyStatus;
new NYPDCells[4];
new DoorsStatus;
new NYPDCellsStatus;
new NYPDBarrier;
new NYPDBarrierStatus;
new hitmangate;
new hitmangateStatus;
new FBIGate;
new FBIGateStatus;
new NYPDGate;
new NYPDGateStatus;
new NYPDOffice[2];
new NYPDOfficeStatus[2];
new NYPDChief[4];
new NYPDChiefStatus;
new OOCStatus;
new NewbieStatus = 1;
new BankVault;
new cVeh[MAX_CUSTOM_VEHICLES];
new TaxMoney;
new TaxPercent;
new TempTaxPercent;
new TaxRequester = -1;
new SAGate1;
new SAGateStatus1;
new SAGate2;
new SAGateStatus2;
new
pdoor1, pdoor2,
edoor5, edoor6;
new PrDoorStatus1;
new PrDoorStatus2;
/*new door1status;
new door2status;
new door3status;
new door4status;*/
//elevator
new ElDoor[2];
new ElDoorStatus;

// Animations
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new animation[MAX_PLAYERS];
new Text:txtAnimHelper;
#define SPECIAL_ACTION_PISSING 68
// Bars
new Bar:Download[MAX_PLAYERS];

// User settings
enum pInfo
{
	// Temp Values
	pLoggedIn,
	pSpawn,
	pZombie,
	pZInfected,
	// Permanent Values
	pIP[16],
	pOwner,
	pLevel,
	pArmorUpgrade,
	pUpgradePoints,
	pMinutes,
	pTMinutes,
	pHours,
	pGender,
	pAge,
	pMoney,
	pBank,
	pModel,
	pAdmin,
	pMapper,
	pBanned,
	Float:pX,
	Float:pY,
	Float:pZ,
	pInt,
	pVW,
	pVehVW,
	pWalkStyle,
	pNeon,
	pVNeon,
	pTGun[2],
	pTGunAmmo[2],
	pvTGun[2],
	pvTGunAmmo[2],
	pFac,
	pFacRank,
	pFacLeader,
	pWeapon[13],
	pWeaponAmmo[13],
	pHospital,
	pFacDuty,
	pFacDiv,
	pFacDivLeader,
	pBiz,
	pVBiz,
	pHouse,
	pVHouse,
	pGarage,
	pVGarage,
	pJob,
	pJobSkill[MAX_JOBS],
	pJackSkill,
	pTPackages,
	pMPackages,
	pDPackages,
	pMaterials,
	pMMaterials,
	pMMPackages,
	pHMaterials,
	pHPackages,
	pWeed,
	pcocaine,
	pTWeed,
	pTcocaine,
	pvTWeed,
	pvTcocaine,
	pHasCellphone,
	pCellphone,
	pPhonebook,
	pDice,
	pCigar,
	pSpeedo,
	pSprunk,
	pSpray,
	pRope,
	pBlindfold,
	pWT,
	pWTC,
	pGas,
	pRadio,
	Float:pHealth,
	Float:pArmor,
	pInternet,
	pPrison,
	pPrisonTime,
	pPrisonReason[64],
	pPrisonBy[32],
	pWanted,
	pWanted1[64],
	pWanted2[64],
	pWanted3[64],
	pWanted4[64],
	pWanted5[64],
	pWanted6[64],
	pCrimes,
	pArrested,
	pContract,
	pContractBy[32],
	pTutorial,
	pWarns,
	pWarn1[64],
	pWarn2[64],
	pWarn3[64],
	pFlag[65],
	pNMute,
	pRMute,
	pADMute,
	pSpawnFreeze,
	pFam,
	pFamRank,
	pCSuccess,
	pCFail,
	pDeath,
	pKill,
	pHelper,
	pExp,
	pVeh,
	pBugged,
	pNumber,
	vModel,
	Float:vX,
	Float:vY,
	Float:vZ,
	Float:vA,
	vC1,
	vC2,
	vPJ,
	pVehMod[14],
	vLocked,
	pGangMod,
	pFacMod,
	pBanAppealer,
	pCarLic,
	pFlyLic,
	pJetpack,
	pWepLic,
	pAccent[16],
	pDay,
	// VIP
	pVIP,
	pVIPDay,
	pVIPMonth,
	pVIPHour,
	pVIPTemp,
	// VIP Job
	pVIPJob,
	// VIP Car
	pVVeh,
	vVModel,
	Float:vVX,
	Float:vVY,
	Float:vVZ,
	Float:vVA,
	vVC1,
	vVC2,
	vVPJ,
	pVVehMod[14],
	vVLocked,
	pVVVeh,
	vVVModel,
	Float:vVVX,
	Float:vVVY,
	Float:vVVZ,
	Float:vVVA,
	vVVC1,
	vVVC2,
	vVVPJ,
	pVVVehMod[14],
	vVVLocked,
	pVIPBuddy,
	pDeliverTruck,
	pNew,
	pRefPoints,
	pTester,
	pFightStyle,
	pScope,
	pCookies,
	pOldskool,
	// Toys
	pToyModel[10],
	Float:pToyX[10],
	Float:pToyY[10],
	Float:pToyZ[10],
	Float:pToyRX[10],
	Float:pToyRY[10],
	Float:pToyRZ[10],
 	Float:pToySX[10],
    Float:pToySY[10],
    Float:pToySZ[10],
    pReward,
    pFish[5],
    pLoyal,
    pLoyalTag,
    pLPoints,
    pStoned,
    pGate[3],
    pSafeAdmin
}
new PlayerInfo[MAX_PLAYERS][pInfo];


stock ClearChar(playerid)
{
	// Toys
	for(new i=0; i<10; i++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        RemovePlayerAttachedObject(playerid, i);
	    }
	}
    // Bank Robbery
	if(BankRobber[playerid])
    {
	    new Rob = BankRobber[playerid]-1, string[128];
	    DisablePlayerCheckpoint(playerid);
		BankRobbersCount --;
		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
		DeliverMoney[playerid] = 0;
		//
		foreach(Player, i)
		{
		    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
		    {
				if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
				else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
				else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
				else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
				else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
			}
		}
		format(string, sizeof(string), "** %s has disconnected and has failed the robbery. **", RPN(playerid));
		SendRobberyMessage(COLOR_LIGHTRED, string);
		SendCopMessage(COLOR_LIGHTRED, string);
		BankRobber[playerid] = 0;
		if(BankRobbersCount == 0)
		{
			TextDrawHideForAll(Textdraw0);
			TextDrawHideForAll(Textdraw1);
			TextDrawHideForAll(Textdraw2);
			TextDrawHideForAll(Textdraw3);
			TextDrawHideForAll(Textdraw4);
			TextDrawHideForAll(Textdraw5);
			//BankRobbery = 01;
			RobberyStarted = 0;
			format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
			SendClientMessageToAll(COLOR_YELLOW, string);
			TotalRobbers = 0;
			new copsonline;
			foreach(Player, i)
			{
			    if(IsACop(i)) copsonline++;
			}
			foreach(Player, i)
			{
			    if(IsACop(i))
			    {
					new Saved = (TotalRobbers*10000-(TotalStolen*10000));
					GiveDodMoney(i, Saved/copsonline);
					format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
					SendClientMessage(i, COLOR_LIME, string);
			    }
			}
		}
    }
	// 3D Text
	/*Delete3DTextLabel(AltTabText[playerid]);
	Delete3DTextLabel(AFKText[playerid]);
	Delete3DTextLabel(aDutyText[playerid]);
	Delete3DTextLabel(VIPText[playerid]);*/
	if(IsValidDynamic3DTextLabel(AltTabText[playerid])) DestroyDynamic3DTextLabel(AltTabText[playerid]);
	if(IsValidDynamic3DTextLabel(AFKText[playerid]))DestroyDynamic3DTextLabel(AFKText[playerid]);
	if(IsValidDynamic3DTextLabel(VIPText[playerid]))DestroyDynamic3DTextLabel(VIPText[playerid]);
	// Timers
	KillTimer(CuffCountDown[playerid]);
	KillTimer(TazeCountDown[playerid]);
	KillTimer(Tut[playerid]);
	KillTimer(HospitalCountDown[playerid]);
	KillTimer(AntiTPTimer[playerid]);
	KillTimer(StonedTimer[playerid]);
	// Vehicles
	if(PlayerInfo[playerid][vModel])
	{
		DestroyVehicle(PlayerInfo[playerid][pVeh]);
	}
	if(PlayerInfo[playerid][vVModel])
	{
		DestroyVehicle(PlayerInfo[playerid][pVVeh]);
	}
	if(PlayerInfo[playerid][vVVModel])
	{
		DestroyVehicle(PlayerInfo[playerid][pVVVeh]);
	}
	// Tax Request
	if(TaxRequester == playerid) TaxRequester = -1;
	// Download bar
	DestroyProgressBar(Download[playerid]);
	// Prison Info
	format(PlayerInfo[playerid][pPrisonReason], 64, "");
	format(PlayerInfo[playerid][pPrisonBy], 32, "");
	format(PlayerInfo[playerid][pWanted1], 64, "");
	format(PlayerInfo[playerid][pWanted2], 64, "");
	format(PlayerInfo[playerid][pWanted3], 64, "");
	format(PlayerInfo[playerid][pWanted4], 64, "");
	format(PlayerInfo[playerid][pWanted5], 64, "");
	format(PlayerInfo[playerid][pWanted6], 64, "");
	// Contract
	format(PlayerInfo[playerid][pContractBy], 32, "");
	// Warns
	format(PlayerInfo[playerid][pWarn1], 64, "");
	format(PlayerInfo[playerid][pWarn2], 64, "");
	format(PlayerInfo[playerid][pWarn3], 64, "");
	// Spam
	format(OldSpamCommand[playerid], 128, "");
	format(NewSpamCommand[playerid], 128, "");
	format(OldSpamChat[playerid], 128, "");
	format(NewSpamChat[playerid], 128, "");
	// Flag
	format(PlayerInfo[playerid][pFlag], 64, "");
	// Accent
	format(PlayerInfo[playerid][pAccent], 16, "");
	// VIP Name
	format(VIPName[playerid], MAX_PLAYER_NAME, "");
	// Enum
    PlayerInfo[playerid][pLevel] = 1; PlayerInfo[playerid][pUpgradePoints] = 0; PlayerInfo[playerid][pArmorUpgrade] = 0; PlayerInfo[playerid][pMinutes] = 0; PlayerInfo[playerid][pExp] = 0; PlayerInfo[playerid][pTMinutes] = 0; PlayerInfo[playerid][pHours] = 0; PlayerInfo[playerid][pLoggedIn] = 0; PlayerInfo[playerid][pSpawn] = 0; PlayerInfo[playerid][pGender] = 0; PlayerInfo[playerid][pAge] = 0; PlayerInfo[playerid][pMoney] = 1250; PlayerInfo[playerid][pModel] = 0; PlayerInfo[playerid][pDay] = 0;
	PlayerInfo[playerid][pAdmin] = 0; PlayerInfo[playerid][pBanned] = 0; PlayerInfo[playerid][pX]  = 0; PlayerInfo[playerid][pY] = 0; PlayerInfo[playerid][pZ] = 0; PlayerInfo[playerid][pInt] = 0; PlayerInfo[playerid][pVIP] = 0; PlayerInfo[playerid][pVIPDay] = 0; PlayerInfo[playerid][pVIPMonth] = 0; PlayerInfo[playerid][pVIPHour] = 0; PlayerInfo[playerid][pZombie] = 0; PlayerInfo[playerid][pZInfected] = 0;
	PlayerInfo[playerid][pVW] = 0; PlayerInfo[playerid][pFac] = 0; PlayerInfo[playerid][pFacRank] = 0; PlayerInfo[playerid][pFacLeader] = 0; PlayerInfo[playerid][pHospital] = 0; PlayerInfo[playerid][pFacDuty] = 0; PlayerInfo[playerid][pFightStyle] = 0; PlayerInfo[playerid][pFacMod] = 0; PlayerInfo[playerid][pBanAppealer] = 0;
	PlayerInfo[playerid][pFacDiv] = 0; PlayerInfo[playerid][pFacDivLeader] = 0; PlayerInfo[playerid][pBiz] = 0; PlayerInfo[playerid][pVBiz] = 0; PlayerInfo[playerid][pJob] = 0; PlayerInfo[playerid][pVIPJob] = 0; PlayerInfo[playerid][pTPackages] = 0; PlayerInfo[playerid][pHasCellphone] = 0; PlayerInfo[playerid][pCookies] = 0;
	PlayerInfo[playerid][pCellphone] = 0; PlayerInfo[playerid][pPhonebook] = 0; PlayerInfo[playerid][pDice] = 0; PlayerInfo[playerid][pCigar] = 0; PlayerInfo[playerid][pSpeedo] = 0; PlayerInfo[playerid][pSprunk] = 0; PlayerInfo[playerid][pVIPTemp] = 0; PlayerInfo[playerid][pScope] = 0; PlayerInfo[playerid][pOldskool] = 0;
	PlayerInfo[playerid][pSpray] = 0; PlayerInfo[playerid][pRope] = 0; PlayerInfo[playerid][pBlindfold] = 0; PlayerInfo[playerid][pWT] = 0; PlayerInfo[playerid][pWTC] = 0; PlayerInfo[playerid][pGas] = 0; PlayerInfo[playerid][pRadio] = 0; PlayerInfo[playerid][pRefPoints] = 0; PlayerInfo[playerid][pReward] = 0; PlayerInfo[playerid][pLoyalTag] = 0;
	PlayerInfo[playerid][pInternet] = 0; PlayerInfo[playerid][pBank] = 0; PlayerInfo[playerid][pPrison] = 0; PlayerInfo[playerid][pPrisonTime] = 0; PlayerInfo[playerid][pWanted] = 0; PlayerInfo[playerid][pMPackages] = 0; PlayerInfo[playerid][pVIPBuddy] = 0; PlayerInfo[playerid][pTester] = 0; PlayerInfo[playerid][pLoyal] = 0;
	PlayerInfo[playerid][pMaterials] = 0; PlayerInfo[playerid][pOwner] = 0; PlayerInfo[playerid][pCrimes] = 0; PlayerInfo[playerid][pArrested] = 0; PlayerInfo[playerid][pHouse] = 0; PlayerInfo[playerid][pVHouse] = 0; PlayerInfo[playerid][pHelper] = 0; PlayerInfo[playerid][vPJ] = 0; PlayerInfo[playerid][pLPoints] = 0;
	PlayerInfo[playerid][pDPackages] = 0; PlayerInfo[playerid][pWeed] = 0; PlayerInfo[playerid][pcocaine] = 0; PlayerInfo[playerid][pContract] = 0; PlayerInfo[playerid][pVeh] = 0; PlayerInfo[playerid][pVVeh] = 0; PlayerInfo[playerid][pGangMod] = 0; PlayerInfo[playerid][pCarLic] = 0; PlayerInfo[playerid][pFlyLic] = 0; PlayerInfo[playerid][pWepLic] = 0; PlayerInfo[playerid][pJetpack] = 0; PlayerInfo[playerid][pTGun][0] = 0; PlayerInfo[playerid][pTGunAmmo][0] = 0;
	PlayerInfo[playerid][pTutorial] = 1; CellTime[playerid] = 0; Mobile[playerid] = INVALID_PLAYER_ID; PlayerInfo[playerid][pWarns] = 0; PlayerInfo[playerid][pNMute] = 0; PlayerInfo[playerid][pSpawnFreeze] = 0; PlayerInfo[playerid][pFam] = 0; PlayerInfo[playerid][pFamRank] = 0; PlayerInfo[playerid][pCSuccess] = 0; PlayerInfo[playerid][pCFail] = 0; PlayerInfo[playerid][pMapper] = 0;
	PlayerInfo[playerid][vModel] = 0; PlayerInfo[playerid][pKill] = 0; PlayerInfo[playerid][pDeath] = 0; PlayerInfo[playerid][vX] = 0; PlayerInfo[playerid][vY] = 0; PlayerInfo[playerid][vZ] = 0; PlayerInfo[playerid][vA] = 0; PlayerInfo[playerid][vC1] = 0; PlayerInfo[playerid][vC2] = 0; PlayerInfo[playerid][vLocked] = 0; PlayerInfo[playerid][pNew] = 0; neon[playerid] = 0; vneon[playerid] = 0;
	PlayerInfo[playerid][pGate][0] = 0; PlayerInfo[playerid][pGate][1] = 0; PlayerInfo[playerid][pGate][2] = 0; PlayerInfo[playerid][pSafeAdmin] = 0; PlayerInfo[playerid][pNumber] = 0; PlayerInfo[playerid][pJackSkill] = 0; PlayerInfo[playerid][pGarage] = 0; PlayerInfo[playerid][pVGarage] = 0; PlayerInfo[playerid][pVehVW] = 0; oEdit[playerid] = 0; oEditID[playerid] = 0; PlayerInfo[playerid][pNeon] = 0; PlayerInfo[playerid][pVNeon] = 0;
	PlayerInfo[playerid][pTWeed] = 0; PlayerInfo[playerid][pTcocaine] = 0; PlayerInfo[playerid][pTGun][1] = 0; PlayerInfo[playerid][pTGunAmmo][1] = 0; PlayerInfo[playerid][pvTWeed] = 0; PlayerInfo[playerid][pvTcocaine] = 0; PlayerInfo[playerid][pvTGun][1] = 0; PlayerInfo[playerid][pvTGunAmmo][1] = 0; PlayerInfo[playerid][pvTGun][0] = 0; PlayerInfo[playerid][pvTGunAmmo][0] = 0;
	PlayerInfo[playerid][pMMaterials] = 0; PlayerInfo[playerid][pMMPackages] = 0; PlayerInfo[playerid][pHMaterials] = 0; PlayerInfo[playerid][pHPackages] = 0; sellgunhighmats[playerid] = 0; sellgunmedmats[playerid] = 0; sellgunlowmats[playerid] = 0; SpeedHack[playerid] = 0; CarHop[playerid] = 0; PlayerInfo[playerid][pRMute] = 0; PlayerInfo[playerid][pADMute] = 0;
	for(new i=0; i<5; i++) // Fish
	{
	    PlayerInfo[playerid][pFish][i] = 0;
	}
    if(PlayerInfo[playerid][pDeliverTruck] != -1)
    {
	    TruckPackages[PlayerInfo[playerid][pDeliverTruck]] = -1;
		PlayerInfo[playerid][pDeliverTruck] = -1;
    }
    for(new i=0; i<10; i++) // Toys
    {
        PlayerInfo[playerid][pToyModel][i] = 0;
        PlayerInfo[playerid][pToyX][i] = 0;
		PlayerInfo[playerid][pToyY][i] = 0;
		PlayerInfo[playerid][pToyZ][i] = 0;
		PlayerInfo[playerid][pToyRX][i] = 0;
		PlayerInfo[playerid][pToyRY][i] = 0;
		PlayerInfo[playerid][pToyRZ][i] = 0;
	 	PlayerInfo[playerid][pToySX][i] = 0;
	    PlayerInfo[playerid][pToySY][i] = 0;
	    PlayerInfo[playerid][pToySZ][i] = 0;
    }
	for(new i=0; i<14; i++) // Vehicle Mods
	{
		PlayerInfo[playerid][pVehMod][i] = 0;
	}
	for(new i=0; i<13; i++) // Weapons
	{
	    PlayerInfo[playerid][pWeapon][i] = 0;
		TempGuns[i] = 0;
		TempGunsAmmo[i] = 0;
	}
	for(new i=0; i<13; i++) // Ammo
	{
	    PlayerInfo[playerid][pWeaponAmmo][i] = 0;
	}
	for(new i=0; i<MAX_JOBS; i++) // Jobs Skills
	{
	    PlayerInfo[playerid][pJobSkill][i] = 0;
	}
	for(new i=0; i<3; i++) // Admin Mark
	{
	    aMark[playerid][i] = 0;
	}
	// Public Variables
	Invited[playerid] = 0; Inviter[playerid] = 0; Faction[playerid] = 0; Tazer[playerid] = 0; ReplaceTazer[playerid] = 0; Chat[playerid] = -1; JoinMessages[playerid] = 0; Call911[playerid] = 0;
	fPos[0] = 0; fPos[1] = 0; fPos[2] = 0; TazeTimeout[playerid] = 0; TazeCountDown[playerid] = 0; Speedlimit[playerid] = 0; Drag[playerid] = -1; Dragged[playerid] = -1;
	Tracking[playerid] = -1; CuffTimeout[playerid] = 0; CuffCountDown[playerid] = 0; Uncuffed[playerid] = 0; GunsBeingRemoved[playerid] = 0; VIPOff[playerid] = 0; VIPTag[playerid] = 0;
	Tazed[playerid] = 0; Cuffed[playerid] = 0; HospitalCountDown[playerid] = 0; Hospital[playerid] = 0; HospitalTime[playerid] = 0; LastCar[playerid] = 0; Spec[playerid] = 0; Specid[playerid] = -1;
	gPlayerUsingLoopingAnim[playerid] = 0; gPlayerAnimLibsPreloaded[playerid] = 0; NewbieTime[playerid] = 0; Calling[playerid] = 0; Called[playerid] = -1; BeingCalled[playerid] = 0; Caller[playerid] = -1;
	CallTime[playerid] = 0; Speedo[playerid] = 0; Tied[playerid] = 0; Blindfolded[playerid] = 0; Seconds[playerid] = 0; HasAD[playerid] = 0; OldGun[playerid] = 0; OldAmmo[playerid] = 0;
	FreeBy[playerid] = 0; FreeTime[playerid] = 0; DefendBy[playerid] = 0; FreeTimeout[playerid] = 0; DefendTimeout[playerid] = 0; NoSprunk[playerid] = 0; Hitman[playerid] = -1; gEdit[playerid] = 0; gEditID[playerid] = 0;
    PhoneOff[playerid] = 0; TicketBy[playerid] = -1; CommandSpamCount[playerid] = 0; ChatSpamCount[playerid] = 0; aMarkInt[playerid] = 0; aMarkVw[playerid] = 0; DrugTimeout[playerid] = 0;
	fInvited[playerid] = 0; fInviter[playerid] = 0; Family[playerid] = 0; VestBy[playerid] = -1; hPos[playerid][0] = 0; hPos[playerid][1] = 0; hPos[playerid][2] = 0; hPOS[playerid][0] = 0; hPOS[playerid][1] = 0;
	Whispers[playerid] = 0; SMSes[playerid] = 0; PMs[playerid] = 0; HelpTime[playerid] = 0; ReportTime[playerid] = 0; LicenseTest[playerid] = 0; CP[playerid] = 0; Approve[playerid] = 0; GMX[playerid] = 0;
    Boxing[playerid] = 0; BoxBy[playerid] = 0; pBoxer[playerid] = 0; BidAmount[playerid] = 0; BidBoxer[playerid] = 0; pskin[playerid] = 0; fskin[playerid] = 0; Refund[playerid] = 0; AntiTP[playerid] = 0;
    BankRobber[playerid] = 0; RobberyRequest[playerid] = 0; DeliverMoney[playerid] = 0; LiveBy[playerid] = -1; LiveRequest[playerid] = 0; Live[playerid] = 0; Fished[playerid] = 0; FishTime[playerid] = 0;
    ATMTime[playerid] = 0; GarageTime[playerid] = 0;
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i))
		{
		    TicketPrice[playerid][i] = 0;
		    TicketPrice[i][playerid] = 0;
			if(WeedSeller[i] == playerid)
			{
			    WeedSeller[i] = -1; WeedPrice[playerid][i] = 0; WeedAmount[playerid][i] = 0;
			    SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you weed has disconnected from the server.");

			}
			if(cocaineSeller[i] == playerid)
			{
			    cocaineSeller[i] = -1; cocainePrice[playerid][i] = 0; cocaineAmount[playerid][i] = 0;
			    SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you cocaine has disconnected from the server.");

			}
		    if(SellMaterialsTo[playerid] == i && BuyMaterialsFrom[i] == playerid)
		    {
		        BuyMaterialsFrom[i] = -1; BuyMaterialsAmount[i] = 0; BuyMaterialsPrice[i] = 0; BeenOfferedMaterials[i] = 0; BeenOfferedMMaterials[i] = 0; BeenOfferedHMaterials[i] = 0;
		        SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you materials has disconnected from the server.");
		    }
		    if(SellWeaponTo[playerid] == i && BuyWeaponFrom[i] == playerid)
		    {
		        BuyWeaponFrom[i] = -1; BuyWeaponPrice[i] = 0; BeenOfferedWeapon[i] = 0;
		        SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you a weapon has disconnected from the server.");
		    }
		    if(VestBy[playerid] == i)
		    {
		        VestBy[i] = -1;
			    SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you a vest has disconnected from the server.");

		    }
		   	FreePrice[playerid][i] = 0;
			DefendPrice[playerid][i] = 0;
			VestPrice[playerid][i] = 0;
		}
	}
	SellMaterialsTo[playerid] = -1; BuyMaterialsFrom[playerid] = -1; BuyMaterialsAmount[playerid] = 0; BuyMaterialsPrice[playerid] = 0; BeenOfferedMaterials[playerid] = 0; BeenOfferedMMaterials[playerid] = 0; BeenOfferedHMaterials[playerid] = 0;
	SellWeaponTo[playerid] = -1; BuyWeaponFrom[playerid] = -1; BuyWeaponPrice[playerid] = 0; BeenOfferedWeapon[playerid] = 0; WeedSeller[playerid] = -1; cocaineSeller[playerid] = -1;
	ResetPlayerWeapons(playerid);
	ResetDodWeapons(playerid);
	return 1;
}

// Arrest Point
new Float:ap[3];
new Text3D:apt;

stock SaveArrestPoint()
{
	new file[16];
	format(file, sizeof(file), "arrest.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_FloatSet(file, "X", ap[0]);
	dini_FloatSet(file, "Y", ap[1]);
	dini_FloatSet(file, "Z", ap[2]);
	print("Arrest Point saved successfully.");
	return 1;
}

stock LoadArrestPoint()
{
	new file[16];
	format(file, sizeof(file), "arrest.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	ap[0] = dini_Float(file, "X");
	ap[1] = dini_Float(file, "Y");
	ap[2] = dini_Float(file, "Z");
	apt = CreateDynamic3DTextLabel("Arrest Point\n{FFFF00}/arrest to arrest a suspect", COLOR_RED, ap[0], ap[1], ap[2], 12);
	apt2 = CreatePickup(1314, 1, ap[0], ap[1], ap[2]);
	print("Arrest Point loaded successfully.");
	return 1;
}

// Factions Settings
enum facInfo
{
	facLeader[MAX_PLAYER_NAME],
	facMembers,
	facStrikes,
	fRank0[32],
	fRank1[32],
	fRank2[32],
	fRank3[32],
	fRank4[32],
	fRank5[32],
	fRank6[32],
	fCars[26],
	fDiv1[32],
	fDiv2[32],
	fDiv3[32],
	fDiv4[32]
}
new FacInfo[MAX_FACTIONS][facInfo];

stock SaveFactions()
{
	// NYPD
	new file[64];
	format(file, sizeof(file), "factions/NYPD.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "NYPDLeader", FacInfo[1][facLeader]);
	dini_Set(file, "NYPDMembers", FacInfo[1][facMembers]);
	dini_Set(file, "NYPDStrikes", FacInfo[1][facStrikes]);
	dini_Set(file, "Rank0", FacInfo[1][fRank0]);
	dini_Set(file, "Rank1", FacInfo[1][fRank1]);
	dini_Set(file, "Rank2", FacInfo[1][fRank2]);
	dini_Set(file, "Rank3", FacInfo[1][fRank3]);
	dini_Set(file, "Rank4", FacInfo[1][fRank4]);
	dini_Set(file, "Rank5", FacInfo[1][fRank5]);
	dini_Set(file, "Rank6", FacInfo[1][fRank6]);
	dini_Set(file, "Div1", FacInfo[1][fDiv1]);
	dini_Set(file, "Div2", FacInfo[1][fDiv2]);
	dini_Set(file, "Div3", FacInfo[1][fDiv3]);
	dini_Set(file, "Div4", FacInfo[1][fDiv4]);
	print("NYPD files saved successfully.");
	// Government
	format(file, sizeof(file), "factions/GOV.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "GovLeader", FacInfo[2][facLeader]);
	dini_Set(file, "GovMembers", FacInfo[2][facMembers]);
	dini_Set(file, "GovStrikes", FacInfo[2][facStrikes]);
	dini_Set(file, "Rank0", FacInfo[2][fRank0]);
	dini_Set(file, "Rank1", FacInfo[2][fRank1]);
	dini_Set(file, "Rank2", FacInfo[2][fRank2]);
	dini_Set(file, "Rank3", FacInfo[2][fRank3]);
	dini_Set(file, "Rank4", FacInfo[2][fRank4]);
	dini_Set(file, "Rank5", FacInfo[2][fRank5]);
	dini_Set(file, "Rank6", FacInfo[2][fRank6]);
    dini_IntSet(file, "TaxPercent", TaxPercent);
	dini_IntSet(file, "TaxVault", TaxMoney);
	print("Government files saved successfully.");
	// Hitman Agency
	format(file, sizeof(file), "factions/HA.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "HAMembers", FacInfo[3][facMembers]);
	dini_Set(file, "HAStrikes", FacInfo[3][facStrikes]);
	dini_Set(file, "Rank0", FacInfo[3][fRank0]);
	dini_Set(file, "Rank1", FacInfo[3][fRank1]);
	dini_Set(file, "Rank2", FacInfo[3][fRank2]);
	dini_Set(file, "Rank3", FacInfo[3][fRank3]);
	dini_Set(file, "Rank4", FacInfo[3][fRank4]);
	dini_Set(file, "Rank5", FacInfo[3][fRank5]);
	dini_Set(file, "Rank6", FacInfo[3][fRank6]);
	print("Hitman Agency files saved successfully.");
	// News Agency
	format(file, sizeof(file), "factions/NA.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "NewsLeader", FacInfo[4][facLeader]);
	dini_Set(file, "NewsMembers", FacInfo[4][facMembers]);
	dini_Set(file, "NewsStrikes", FacInfo[4][facStrikes]);
	dini_Set(file, "Rank0", FacInfo[4][fRank0]);
	dini_Set(file, "Rank1", FacInfo[4][fRank1]);
	dini_Set(file, "Rank2", FacInfo[4][fRank2]);
	dini_Set(file, "Rank3", FacInfo[4][fRank3]);
	dini_Set(file, "Rank4", FacInfo[4][fRank4]);
	dini_Set(file, "Rank5", FacInfo[4][fRank5]);
	dini_Set(file, "Rank6", FacInfo[4][fRank6]);
	dini_IntSet(file, "Vault", NewsMoney);
	print("News Agency files saved successfully.");
	// LSFMD.
	format(file, sizeof(file), "factions/LSFMD.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "LSFMDLeader", FacInfo[5][facLeader]);
	dini_Set(file, "LSFMDMembers", FacInfo[5][facMembers]);
	dini_Set(file, "LSFMDStrikes", FacInfo[5][facStrikes]);
	dini_Set(file, "Rank0", FacInfo[5][fRank0]);
	dini_Set(file, "Rank1", FacInfo[5][fRank1]);
	dini_Set(file, "Rank2", FacInfo[5][fRank2]);
	dini_Set(file, "Rank3", FacInfo[5][fRank3]);
	dini_Set(file, "Rank4", FacInfo[5][fRank4]);
	dini_Set(file, "Rank5", FacInfo[5][fRank5]);
	dini_Set(file, "Rank6", FacInfo[5][fRank6]);
	print("LSFMD files saved successfully.");
	// FBI
	format(file, sizeof(file), "factions/FBI.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "FBILeader", FacInfo[6][facLeader]);
	dini_Set(file, "FBIMembers", FacInfo[6][facMembers]);
	dini_Set(file, "FBIStrikes", FacInfo[6][facStrikes]);
	dini_Set(file, "Rank0", FacInfo[6][fRank0]);
	dini_Set(file, "Rank1", FacInfo[6][fRank1]);
	dini_Set(file, "Rank2", FacInfo[6][fRank2]);
	dini_Set(file, "Rank3", FacInfo[6][fRank3]);
	dini_Set(file, "Rank4", FacInfo[6][fRank4]);
	dini_Set(file, "Rank5", FacInfo[6][fRank5]);
	dini_Set(file, "Rank6", FacInfo[6][fRank6]);
	dini_Set(file, "Div1", FacInfo[6][fDiv1]);
	dini_Set(file, "Div2", FacInfo[6][fDiv2]);
	dini_Set(file, "Div3", FacInfo[6][fDiv3]);
	dini_Set(file, "Div4", FacInfo[6][fDiv4]);
	print("FBI files saved successfully.");
	// NG
	format(file, sizeof(file), "factions/NG.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "NGLeader", FacInfo[7][facLeader]);
	dini_Set(file, "NGMembers", FacInfo[7][facMembers]);
	dini_Set(file, "NGStrikes", FacInfo[7][facStrikes]);
	dini_Set(file, "Rank0", FacInfo[7][fRank0]);
	dini_Set(file, "Rank1", FacInfo[7][fRank1]);
	dini_Set(file, "Rank2", FacInfo[7][fRank2]);
	dini_Set(file, "Rank3", FacInfo[7][fRank3]);
	dini_Set(file, "Rank4", FacInfo[7][fRank4]);
	dini_Set(file, "Rank5", FacInfo[7][fRank5]);
	dini_Set(file, "Rank6", FacInfo[7][fRank6]);
	print("NG files saved successfully.");
	return 1;
}

stock LoadFactions()
{
	// NYPD
    new file[64];
	format(file, sizeof(file), "factions/NYPD.ini");
	format(FacInfo[1][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "NYPDLeader"));
	format(FacInfo[1][facMembers], 8, "%s", dini_Get(file, "NYPDMembers"));
	format(FacInfo[1][fRank0], 32, "%s", dini_Get(file, "Rank0"));
	format(FacInfo[1][fRank1], 32, "%s", dini_Get(file, "Rank1"));
	format(FacInfo[1][fRank2], 32, "%s", dini_Get(file, "Rank2"));
	format(FacInfo[1][fRank3], 32, "%s", dini_Get(file, "Rank3"));
	format(FacInfo[1][fRank4], 32, "%s", dini_Get(file, "Rank4"));
	format(FacInfo[1][fRank5], 32, "%s", dini_Get(file, "Rank5"));
	format(FacInfo[1][fRank6], 32, "%s", dini_Get(file, "Rank6"));
	format(FacInfo[1][fDiv1], 32, "%s", dini_Get(file, "Div1"));
	format(FacInfo[1][fDiv2], 32, "%s", dini_Get(file, "Div2"));
	format(FacInfo[1][fDiv3], 32, "%s", dini_Get(file, "Div3"));
	format(FacInfo[1][fDiv4], 32, "%s", dini_Get(file, "Div4"));
	print("NYPD files loaded successfully.");
	// Government
	format(file, sizeof(file), "factions/GOV.ini");
	format(FacInfo[2][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "GovLeader"));
	format(FacInfo[2][facMembers], 8, "%s", dini_Get(file, "GovMembers"));
	format(FacInfo[2][fRank0], 32, "%s", dini_Get(file, "Rank0"));
	format(FacInfo[2][fRank1], 32, "%s", dini_Get(file, "Rank1"));
	format(FacInfo[2][fRank2], 32, "%s", dini_Get(file, "Rank2"));
	format(FacInfo[2][fRank3], 32, "%s", dini_Get(file, "Rank3"));
	format(FacInfo[2][fRank4], 32, "%s", dini_Get(file, "Rank4"));
	format(FacInfo[2][fRank5], 32, "%s", dini_Get(file, "Rank5"));
	format(FacInfo[2][fRank6], 32, "%s", dini_Get(file, "Rank6"));
	TaxPercent = dini_Int(file, "TaxPercent");
	TaxMoney = dini_Int(file, "TaxVault");
	print("Government files loaded successfully.");
	// Hitman Agency
	format(file, sizeof(file), "factions/HA.ini");
	format(FacInfo[3][facMembers], 8, "%s", dini_Get(file, "HAMembers"));
	format(FacInfo[3][fRank0], 32, "%s", dini_Get(file, "Rank0"));
	format(FacInfo[3][fRank1], 32, "%s", dini_Get(file, "Rank1"));
	format(FacInfo[3][fRank2], 32, "%s", dini_Get(file, "Rank2"));
	format(FacInfo[3][fRank3], 32, "%s", dini_Get(file, "Rank3"));
	format(FacInfo[3][fRank4], 32, "%s", dini_Get(file, "Rank4"));
	format(FacInfo[3][fRank5], 32, "%s", dini_Get(file, "Rank5"));
	format(FacInfo[3][fRank6], 32, "%s", dini_Get(file, "Rank6"));
	print("Hitman Agency files loaded successfully.");
	// News Agency
	format(file, sizeof(file), "factions/NA.ini");
	format(FacInfo[4][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "NewsLeader"));
	format(FacInfo[4][facMembers], 8, "%s", dini_Get(file, "NewsMembers"));
	format(FacInfo[4][fRank0], 32, "%s", dini_Get(file, "Rank0"));
	format(FacInfo[4][fRank1], 32, "%s", dini_Get(file, "Rank1"));
	format(FacInfo[4][fRank2], 32, "%s", dini_Get(file, "Rank2"));
	format(FacInfo[4][fRank3], 32, "%s", dini_Get(file, "Rank3"));
	format(FacInfo[4][fRank4], 32, "%s", dini_Get(file, "Rank4"));
	format(FacInfo[4][fRank5], 32, "%s", dini_Get(file, "Rank5"));
	format(FacInfo[4][fRank6], 32, "%s", dini_Get(file, "Rank6"));
	NewsMoney = dini_Int(file, "Vault");
	print("News Agency files loaded successfully.");
	//LSFMD
	format(file, sizeof(file), "factions/LSFMD.ini");
	format(FacInfo[5][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "LSFMDLeader"));
	format(FacInfo[5][facMembers], 8, "%s", dini_Get(file, "LSFMDMembers"));
	format(FacInfo[5][fRank0], 32, "%s", dini_Get(file, "Rank0"));
	format(FacInfo[5][fRank1], 32, "%s", dini_Get(file, "Rank1"));
	format(FacInfo[5][fRank2], 32, "%s", dini_Get(file, "Rank2"));
	format(FacInfo[5][fRank3], 32, "%s", dini_Get(file, "Rank3"));
	format(FacInfo[5][fRank4], 32, "%s", dini_Get(file, "Rank4"));
	format(FacInfo[5][fRank5], 32, "%s", dini_Get(file, "Rank5"));
	format(FacInfo[5][fRank6], 32, "%s", dini_Get(file, "Rank6"));
	print("LSFMD files loaded successfully.");
	// FBI
	format(file, sizeof(file), "factions/FBI.ini");
	format(FacInfo[6][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "FBILeader"));
	format(FacInfo[6][facMembers], 8, "%s", dini_Get(file, "FBIMembers"));
	format(FacInfo[6][fRank0], 32, "%s", dini_Get(file, "Rank0"));
	format(FacInfo[6][fRank1], 32, "%s", dini_Get(file, "Rank1"));
	format(FacInfo[6][fRank2], 32, "%s", dini_Get(file, "Rank2"));
	format(FacInfo[6][fRank3], 32, "%s", dini_Get(file, "Rank3"));
	format(FacInfo[6][fRank4], 32, "%s", dini_Get(file, "Rank4"));
	format(FacInfo[6][fRank5], 32, "%s", dini_Get(file, "Rank5"));
	format(FacInfo[6][fRank6], 32, "%s", dini_Get(file, "Rank6"));
	format(FacInfo[6][fDiv1], 32, "%s", dini_Get(file, "Div1"));
	format(FacInfo[6][fDiv2], 32, "%s", dini_Get(file, "Div2"));
	format(FacInfo[6][fDiv3], 32, "%s", dini_Get(file, "Div3"));
	format(FacInfo[6][fDiv4], 32, "%s", dini_Get(file, "Div4"));
	print("FBI files loaded successfully.");
	//NG
	format(file, sizeof(file), "factions/NG.ini");
	format(FacInfo[7][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "NGLeader"));
	format(FacInfo[7][facMembers], 8, "%s", dini_Get(file, "NGMembers"));
	format(FacInfo[7][fRank0], 32, "%s", dini_Get(file, "Rank0"));
	format(FacInfo[7][fRank1], 32, "%s", dini_Get(file, "Rank1"));
	format(FacInfo[7][fRank2], 32, "%s", dini_Get(file, "Rank2"));
	format(FacInfo[7][fRank3], 32, "%s", dini_Get(file, "Rank3"));
	format(FacInfo[7][fRank4], 32, "%s", dini_Get(file, "Rank4"));
	format(FacInfo[7][fRank5], 32, "%s", dini_Get(file, "Rank5"));
	format(FacInfo[7][fRank6], 32, "%s", dini_Get(file, "Rank6"));
	print("NG files loaded successfully.");
	return 1;
}

// Families
enum famInfo
{
	fTaken,
	fName[32],
	fMOTD[64],
	fColor,
	fLeader[MAX_PLAYER_NAME],
	fMembers,
	Float:fSafeX,
	Float:fSafeY,
	Float:fSafeZ,
	fMoney,
	fMats,
	fWeed,
	fcocaine,
	fBd,
	fRank1[32],
	fRank2[32],
	fRank3[32],
	fRank4[32],
	fRank5[32],
	fRank6[32],
	fSkins[7],
	fStrikes,
	Text3D:fText,
	fPickup,
	fVeh[5],
	fVehType[5],
	Float:fVehCoX[5],
	Float:fVehCoY[5],
	Float:fVehCoZ[5],
	fVehCol1[5],
	fVehCol2[5],
	Float:fVehRot[5]
}
new FamInfo[MAX_FAMILIES][famInfo];


stock SaveFamilies()
{
	new idx = 1, File:file;
	new string[1300];
	while(idx < MAX_FAMILIES)
	{
	    format(string, sizeof(string), "%d|%s|%s|%d|%s|%d|%f|%f|%f|%d|%d|%d|%d|%s|%s|%s|%s|%s|%s|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\r\n",
		FamInfo[idx][fTaken],
		FamInfo[idx][fName],
		FamInfo[idx][fMOTD],
		FamInfo[idx][fColor],
		FamInfo[idx][fLeader],
		FamInfo[idx][fMembers],
		FamInfo[idx][fSafeX],
		FamInfo[idx][fSafeY],
		FamInfo[idx][fSafeZ],
		FamInfo[idx][fMoney],
		FamInfo[idx][fMats],
		FamInfo[idx][fWeed],
		FamInfo[idx][fcocaine],
		FamInfo[idx][fRank1],
		FamInfo[idx][fRank2],
		FamInfo[idx][fRank3],
		FamInfo[idx][fRank4],
		FamInfo[idx][fRank5],
		FamInfo[idx][fRank6],
		FamInfo[idx][fSkins][0],
		FamInfo[idx][fSkins][1],
		FamInfo[idx][fSkins][2],
		FamInfo[idx][fSkins][3],
		FamInfo[idx][fSkins][4],
		FamInfo[idx][fSkins][5],
		FamInfo[idx][fSkins][6],
		FamInfo[idx][fStrikes],
		FamInfo[idx][fVehType][0], // Veh 1
		FamInfo[idx][fVehType][1], // Veh 2
		FamInfo[idx][fVehType][2], // Veh 3
		FamInfo[idx][fVehType][3], // Veh 4
		FamInfo[idx][fVehType][4], // Veh 5
		FamInfo[idx][fVehCoX][0], // Veh 1 Coords
		FamInfo[idx][fVehCoY][0],
		FamInfo[idx][fVehCoZ][0],
		FamInfo[idx][fVehCoX][1], // Veh 2 Coords
		FamInfo[idx][fVehCoY][1],
		FamInfo[idx][fVehCoZ][1],
		FamInfo[idx][fVehCoX][2], // Veh 3 Coords
		FamInfo[idx][fVehCoY][2],
		FamInfo[idx][fVehCoZ][2],
		FamInfo[idx][fVehCoX][3], // Veh 4 Coords
		FamInfo[idx][fVehCoY][3],
		FamInfo[idx][fVehCoZ][3],
		FamInfo[idx][fVehCoX][4], // Veh 5 Coords
		FamInfo[idx][fVehCoY][4],
		FamInfo[idx][fVehCoZ][4],
		FamInfo[idx][fVehRot][0],
		FamInfo[idx][fVehRot][1],
		FamInfo[idx][fVehRot][2],
		FamInfo[idx][fVehRot][3],
		FamInfo[idx][fVehRot][4],
		FamInfo[idx][fVehCol1][0],
		FamInfo[idx][fVehCol1][1],
		FamInfo[idx][fVehCol1][2],
		FamInfo[idx][fVehCol1][3],
		FamInfo[idx][fVehCol1][4],
		FamInfo[idx][fVehCol2][0],
		FamInfo[idx][fVehCol2][1],
		FamInfo[idx][fVehCol2][2],
		FamInfo[idx][fVehCol2][3],
		FamInfo[idx][fVehCol2][4]);
	    if(idx == 1)
	    {
	        file = fopen("families.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("families.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Families saved successfully.");
}

stock LoadFamilies()
{
	new finfo[62][48];
	new string[512];
	new File:file = fopen("families.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_FAMILIES)
		{
		    fread(file, string);
		    split(string, finfo, '|');
			FamInfo[idx][fTaken] = strval(finfo[0]);
			format(FamInfo[idx][fName], 32, "%s", finfo[1]);
			format(FamInfo[idx][fMOTD], 64, "%s", finfo[2]);
			FamInfo[idx][fColor] = strval(finfo[3]);
			format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "%s", finfo[4]);
			FamInfo[idx][fMembers] = strval(finfo[5]);
			FamInfo[idx][fSafeX] = floatstr(finfo[6]);
			FamInfo[idx][fSafeY] = floatstr(finfo[7]);
			FamInfo[idx][fSafeZ] = floatstr(finfo[8]);
			FamInfo[idx][fMoney] = strval(finfo[9]);
			FamInfo[idx][fMats] = strval(finfo[10]);
			FamInfo[idx][fWeed] = strval(finfo[11]);
			FamInfo[idx][fcocaine] = strval(finfo[12]);
			format(FamInfo[idx][fRank1], 32, "%s", finfo[13]);
			format(FamInfo[idx][fRank2], 32, "%s", finfo[14]);
			format(FamInfo[idx][fRank3], 32, "%s", finfo[15]);
			format(FamInfo[idx][fRank4], 32, "%s", finfo[16]);
			format(FamInfo[idx][fRank5], 32, "%s", finfo[17]);
			format(FamInfo[idx][fRank6], 32, "%s", finfo[18]);
			FamInfo[idx][fSkins][0] = strval(finfo[19]);
			FamInfo[idx][fSkins][1] = strval(finfo[20]);
			FamInfo[idx][fSkins][2] = strval(finfo[21]);
			FamInfo[idx][fSkins][3] = strval(finfo[22]);
			FamInfo[idx][fSkins][4] = strval(finfo[23]);
			FamInfo[idx][fSkins][5] = strval(finfo[24]);
			FamInfo[idx][fSkins][6] = strval(finfo[25]);
			FamInfo[idx][fStrikes] = strval(finfo[26]);
			FamInfo[idx][fVehType][0] = strval(finfo[27]);
			FamInfo[idx][fVehType][1] = strval(finfo[28]);
			FamInfo[idx][fVehType][2] = strval(finfo[29]);
			FamInfo[idx][fVehType][3] = strval(finfo[30]);
			FamInfo[idx][fVehType][4] = strval(finfo[31]);
			FamInfo[idx][fVehCoX][0] = floatstr(finfo[32]);
			FamInfo[idx][fVehCoY][0] = floatstr(finfo[33]);
			FamInfo[idx][fVehCoZ][0] = floatstr(finfo[34]);
			FamInfo[idx][fVehCoX][1] = floatstr(finfo[35]);
			FamInfo[idx][fVehCoY][1] = floatstr(finfo[36]);
			FamInfo[idx][fVehCoZ][1] = floatstr(finfo[37]);
			FamInfo[idx][fVehCoX][2] = floatstr(finfo[38]);
			FamInfo[idx][fVehCoY][2] = floatstr(finfo[39]);
			FamInfo[idx][fVehCoZ][2] = floatstr(finfo[40]);
			FamInfo[idx][fVehCoX][3] = floatstr(finfo[41]);
			FamInfo[idx][fVehCoY][3] = floatstr(finfo[42]);
			FamInfo[idx][fVehCoZ][3] = floatstr(finfo[43]);
			FamInfo[idx][fVehCoX][4] = floatstr(finfo[44]);
			FamInfo[idx][fVehCoY][4] = floatstr(finfo[45]);
			FamInfo[idx][fVehCoZ][4] = floatstr(finfo[46]);
			FamInfo[idx][fVehRot][0] = strval(finfo[47]); // Rot
			FamInfo[idx][fVehRot][1] = strval(finfo[48]);
			FamInfo[idx][fVehRot][2] = strval(finfo[49]);
			FamInfo[idx][fVehRot][3] = strval(finfo[50]);
			FamInfo[idx][fVehRot][4] = strval(finfo[51]);
			FamInfo[idx][fVehCol1][0] = strval(finfo[52]); // Colors
			FamInfo[idx][fVehCol1][1] = strval(finfo[53]);
			FamInfo[idx][fVehCol1][2] = strval(finfo[54]);
			FamInfo[idx][fVehCol1][3] = strval(finfo[55]);
			FamInfo[idx][fVehCol1][4] = strval(finfo[56]);
			FamInfo[idx][fVehCol2][0] = strval(finfo[57]);
			FamInfo[idx][fVehCol2][1] = strval(finfo[58]);
			FamInfo[idx][fVehCol2][2] = strval(finfo[59]);
			FamInfo[idx][fVehCol2][3] = strval(finfo[60]);
			FamInfo[idx][fVehCol2][4] = strval(finfo[61]);

			if(FamInfo[idx][fSafeX] != 0 && FamInfo[idx][fSafeY] != 0 && FamInfo[idx][fSafeZ] != 0)
			{
			    FamInfo[idx][fPickup] = CreateDynamicPickup(1239, 1, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ], -1);
				format(string, sizeof(string), "%s's Safe", FamInfo[idx][fName]);
		    	FamInfo[idx][fText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ]+0.3, 15);
			}
			for(new i=0; i<5; i++)
			{
			    if(FamInfo[idx][fVehType][i])
			    {
			        FamInfo[idx][fVeh][i] = CreateVehicle(FamInfo[idx][fVehType][i], FamInfo[idx][fVehCoX][i], FamInfo[idx][fVehCoY][i], FamInfo[idx][fVehCoZ][i], FamInfo[idx][fVehRot][i], FamInfo[idx][fVehCol1][i], FamInfo[idx][fVehCol2][i], 1200);
                   	ChangeVehicleColor(FamInfo[idx][fVeh][i], FamInfo[idx][fVehCol1][i], FamInfo[idx][fVehCol2][i]);
                   	Fam[FamInfo[idx][fVeh][i]] = idx;
			    }
			}
			idx++;
	    }
	}
	print("Families loaded successfully.");
	return 1;
}

stock SaveChar(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
	    if(PlayerInfo[playerid][pTutorial])
	    {
		    new file[64];
			format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
			if(!dini_Exists(file)) dini_Create(file);
			if(!Event[playerid])
			{
				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
				GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
				GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
			}
			if(PlayerInfo[playerid][pLevel] == 0) PlayerInfo[playerid][pLevel] = 1;
			PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
			if(PlayerInfo[playerid][vModel])
			{
				GetVehiclePos(PlayerInfo[playerid][pVeh],PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVeh],PlayerInfo[playerid][vA]);
			}
   			if(PlayerInfo[playerid][vVModel])
			{
				GetVehiclePos(PlayerInfo[playerid][pVVeh],PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh],PlayerInfo[playerid][vVA]);
			}
			if(PlayerInfo[playerid][vVVModel])
			{
				GetVehiclePos(PlayerInfo[playerid][pVVVeh],PlayerInfo[playerid][vVVX], PlayerInfo[playerid][vVVY], PlayerInfo[playerid][vVVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVVeh],PlayerInfo[playerid][vVVA]);
			}
			SaveDodAmmo(playerid);
			// Save
			dini_Set(file, "IP", PlayerInfo[playerid][pIP]);
			dini_IntSet(file, "Gender", PlayerInfo[playerid][pGender]);
			dini_IntSet(file, "Level", PlayerInfo[playerid][pLevel]);
			dini_IntSet(file, "UpgradePoints", PlayerInfo[playerid][pUpgradePoints]);
			dini_IntSet(file, "ArmorUpgrade", PlayerInfo[playerid][pArmorUpgrade]);
			dini_IntSet(file, "Minutes", PlayerInfo[playerid][pMinutes]);
			dini_IntSet(file, "TMinutes", PlayerInfo[playerid][pTMinutes]);
			dini_IntSet(file, "Hours", PlayerInfo[playerid][pHours]);
			dini_IntSet(file, "Age", PlayerInfo[playerid][pAge]);
			dini_IntSet(file, "Cash", PlayerInfo[playerid][pMoney]);
			dini_IntSet(file, "Bank", PlayerInfo[playerid][pBank]);
			dini_IntSet(file, "Model", PlayerInfo[playerid][pModel]);
			dini_IntSet(file, "Admin", PlayerInfo[playerid][pAdmin]);
			dini_IntSet(file, "Mapper", PlayerInfo[playerid][pMapper]);
			dini_IntSet(file, "pBanned", PlayerInfo[playerid][pBanned]);
			dini_IntSet(file, "Phnumber", PlayerInfo[playerid][pNumber]);
			dini_IntSet(file, "AdMute", PlayerInfo[playerid][pADMute]);
			dini_IntSet(file, "JackSkill", PlayerInfo[playerid][pJackSkill]);
			dini_IntSet(file, "Death", PlayerInfo[playerid][pDeath]);
			dini_IntSet(file, "Kill", PlayerInfo[playerid][pKill]);
			dini_FloatSet(file, "X", PlayerInfo[playerid][pX]);
			dini_FloatSet(file, "Y", PlayerInfo[playerid][pY]);
			dini_FloatSet(file, "Z", PlayerInfo[playerid][pZ]);
			dini_IntSet(file, "Int", PlayerInfo[playerid][pInt]);
			dini_IntSet(file, "Hours", PlayerInfo[playerid][pExp]);
			dini_IntSet(file, "VW", PlayerInfo[playerid][pVW]);
			dini_IntSet(file, "VehVW", PlayerInfo[playerid][pVehVW]);
			dini_IntSet(file, "WalkStyle", PlayerInfo[playerid][pWalkStyle]);
			dini_IntSet(file, "Neon", PlayerInfo[playerid][pNeon]);
			dini_IntSet(file, "vNeon", PlayerInfo[playerid][pVNeon]);
			dini_IntSet(file, "Fac", PlayerInfo[playerid][pFac]);
			dini_IntSet(file, "FacRank", PlayerInfo[playerid][pFacRank]);
			dini_IntSet(file, "FacLeader", PlayerInfo[playerid][pFacLeader]);
			dini_IntSet(file, "FacDiv", PlayerInfo[playerid][pFacDiv]);
			dini_IntSet(file, "FacDivLeader", PlayerInfo[playerid][pFacDivLeader]);
			dini_IntSet(file, "Duty", PlayerInfo[playerid][pFacDuty]);
			dini_IntSet(file, "wSlot0", PlayerInfo[playerid][pWeapon][0]);
			dini_IntSet(file, "wSlot0Ammo", PlayerInfo[playerid][pWeaponAmmo][0]);
			dini_IntSet(file, "wSlot1", PlayerInfo[playerid][pWeapon][1]);
			dini_IntSet(file, "wSlot1Ammo", PlayerInfo[playerid][pWeaponAmmo][1]);
			dini_IntSet(file, "wSlot2", PlayerInfo[playerid][pWeapon][2]);
			dini_IntSet(file, "wSlot2Ammo", PlayerInfo[playerid][pWeaponAmmo][2]);
			dini_IntSet(file, "wSlot3", PlayerInfo[playerid][pWeapon][3]);
			dini_IntSet(file, "wSlot3Ammo", PlayerInfo[playerid][pWeaponAmmo][3]);
			dini_IntSet(file, "wSlot4", PlayerInfo[playerid][pWeapon][4]);
			dini_IntSet(file, "wSlot4Ammo", PlayerInfo[playerid][pWeaponAmmo][4]);
			dini_IntSet(file, "wSlot5", PlayerInfo[playerid][pWeapon][5]);
	        dini_IntSet(file, "wSlot5Ammo", PlayerInfo[playerid][pWeaponAmmo][5]);
			dini_IntSet(file, "wSlot6", PlayerInfo[playerid][pWeapon][6]);
			dini_IntSet(file, "wSlot6Ammo", PlayerInfo[playerid][pWeaponAmmo][6]);
			dini_IntSet(file, "wSlot7", PlayerInfo[playerid][pWeapon][7]);
			dini_IntSet(file, "wSlot7Ammo", PlayerInfo[playerid][pWeaponAmmo][7]);
			dini_IntSet(file, "wSlot8", PlayerInfo[playerid][pWeapon][8]);
			dini_IntSet(file, "wSlot8Ammo", PlayerInfo[playerid][pWeaponAmmo][8]);
			dini_IntSet(file, "wSlot9", PlayerInfo[playerid][pWeapon][9]);
			dini_IntSet(file, "wSlot9Ammo", PlayerInfo[playerid][pWeaponAmmo][9]);
			dini_IntSet(file, "wSlot10", PlayerInfo[playerid][pWeapon][10]);
			dini_IntSet(file, "wSlot10Ammo", PlayerInfo[playerid][pWeaponAmmo][10]);
			dini_IntSet(file, "wSlot11", PlayerInfo[playerid][pWeapon][11]);
			dini_IntSet(file, "wSlot11Ammo", PlayerInfo[playerid][pWeaponAmmo][11]);
			dini_IntSet(file, "wSlot12", PlayerInfo[playerid][pWeapon][12]);
			dini_IntSet(file, "wSlot12Ammo", PlayerInfo[playerid][pWeaponAmmo][12]);
			dini_IntSet(file, "Hospital", PlayerInfo[playerid][pHospital]);
			dini_IntSet(file, "Business", PlayerInfo[playerid][pBiz]);
			dini_IntSet(file, "VBusiness", PlayerInfo[playerid][pVBiz]);
			dini_IntSet(file, "House", PlayerInfo[playerid][pHouse]);
			dini_IntSet(file, "Garage", PlayerInfo[playerid][pGarage]);
			dini_IntSet(file, "wtSlot1", PlayerInfo[playerid][pTGun][0]);
			dini_IntSet(file, "wtSlot1Ammo", PlayerInfo[playerid][pTGunAmmo][0]);
			dini_IntSet(file, "wtSlot2", PlayerInfo[playerid][pTGun][1]);
			dini_IntSet(file, "wtSlot2Ammo", PlayerInfo[playerid][pTGunAmmo][1]);
			dini_IntSet(file, "vwtSlot1", PlayerInfo[playerid][pvTGun][0]);
			dini_IntSet(file, "vwtSlot1Ammo", PlayerInfo[playerid][pvTGunAmmo][0]);
			dini_IntSet(file, "vwtSlot2", PlayerInfo[playerid][pvTGun][1]);
			dini_IntSet(file, "vwtSlot2Ammo", PlayerInfo[playerid][pvTGunAmmo][1]);
			dini_IntSet(file, "HouseOwner", PlayerInfo[playerid][pSafeAdmin]);
			dini_IntSet(file, "vHouse", PlayerInfo[playerid][pVHouse]);
			dini_IntSet(file, "BizOwner", PlayerInfo[playerid][pOwner]);
			dini_IntSet(file, "Job", PlayerInfo[playerid][pJob]);
			dini_IntSet(file, "Mechanic", PlayerInfo[playerid][pJobSkill][JOB_MECHANIC]);
			dini_IntSet(file, "Lawyer", PlayerInfo[playerid][pJobSkill][JOB_LAWYER]);
			dini_IntSet(file, "Trucker", PlayerInfo[playerid][pJobSkill][JOB_TRUCKER]);
			dini_IntSet(file, "Fisher", PlayerInfo[playerid][pJobSkill][JOB_FISHER]);
			dini_IntSet(file, "WDealer", PlayerInfo[playerid][pJobSkill][JOB_WDEALER]);
			dini_IntSet(file, "WSmuggler", PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER]);
			dini_IntSet(file, "DDealer", PlayerInfo[playerid][pJobSkill][JOB_DDEALER]);
			dini_IntSet(file, "DSmuggler", PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER]);
			dini_IntSet(file, "Boxer", PlayerInfo[playerid][pJobSkill][JOB_BOXER]);
			dini_IntSet(file, "Fisher", PlayerInfo[playerid][pJobSkill][JOB_FISHER]);
			dini_IntSet(file, "TPackages", PlayerInfo[playerid][pTPackages]);
			dini_IntSet(file, "WPackages", PlayerInfo[playerid][pMPackages]);
			dini_IntSet(file, "Materials", PlayerInfo[playerid][pMaterials]);
			dini_IntSet(file, "MedMaterials", PlayerInfo[playerid][pMMaterials]);
			dini_IntSet(file, "HighMaterials", PlayerInfo[playerid][pHMaterials]);
			dini_IntSet(file, "MWPackages", PlayerInfo[playerid][pMMPackages]);
			dini_IntSet(file, "HWPackages", PlayerInfo[playerid][pHPackages]);
			dini_IntSet(file, "HasCellphone", PlayerInfo[playerid][pHasCellphone]);
			dini_IntSet(file, "Cellphone", PlayerInfo[playerid][pCellphone]);
			dini_IntSet(file, "Phonebook", PlayerInfo[playerid][pPhonebook]);
			dini_IntSet(file, "Dice", PlayerInfo[playerid][pDice]);
			dini_IntSet(file, "Cigar", PlayerInfo[playerid][pCigar]);
			dini_IntSet(file, "Speedo", PlayerInfo[playerid][pSpeedo]);
			dini_IntSet(file, "Sprunk", PlayerInfo[playerid][pSprunk]);
			dini_IntSet(file, "Spray", PlayerInfo[playerid][pSpray]);
			dini_IntSet(file, "Rope", PlayerInfo[playerid][pRope]);
			dini_IntSet(file, "Blindfold", PlayerInfo[playerid][pBlindfold]);
			dini_IntSet(file, "WT", PlayerInfo[playerid][pWT]);
			dini_IntSet(file, "WTC", PlayerInfo[playerid][pWTC]);
			dini_IntSet(file, "Gas", PlayerInfo[playerid][pGas]);
			dini_IntSet(file, "Radio", PlayerInfo[playerid][pRadio]);
			dini_FloatSet(file, "Health", PlayerInfo[playerid][pHealth]);
			dini_FloatSet(file, "Armor", PlayerInfo[playerid][pArmor]);
			dini_IntSet(file, "Internet", PlayerInfo[playerid][pInternet]);
			dini_IntSet(file, "Prison", PlayerInfo[playerid][pPrison]);
			dini_IntSet(file, "PrisonTime", PlayerInfo[playerid][pPrisonTime]);
			dini_Set(file, "PrisonReason", PlayerInfo[playerid][pPrisonReason]);
			dini_Set(file, "PrisonBy", PlayerInfo[playerid][pPrisonBy]);
			dini_IntSet(file, "Wanted", PlayerInfo[playerid][pWanted]);
			dini_Set(file, "Wanted1", PlayerInfo[playerid][pWanted1]);
			dini_Set(file, "Wanted2", PlayerInfo[playerid][pWanted2]);
			dini_Set(file, "Wanted3", PlayerInfo[playerid][pWanted3]);
			dini_Set(file, "Wanted4", PlayerInfo[playerid][pWanted4]);
			dini_Set(file, "Wanted5", PlayerInfo[playerid][pWanted5]);
			dini_Set(file, "Wanted6", PlayerInfo[playerid][pWanted6]);
			dini_IntSet(file, "Crimes", PlayerInfo[playerid][pCrimes]);
			dini_IntSet(file, "Arrested", PlayerInfo[playerid][pArrested]);
			dini_IntSet(file, "DPackages", PlayerInfo[playerid][pDPackages]);
			dini_IntSet(file, "Weed", PlayerInfo[playerid][pWeed]);
			dini_IntSet(file, "cocaine", PlayerInfo[playerid][pcocaine]);
			dini_IntSet(file, "TrunkWeed", PlayerInfo[playerid][pTWeed]);
			dini_IntSet(file, "Trunkcocaine", PlayerInfo[playerid][pTcocaine]);
			dini_IntSet(file, "vTrunkWeed", PlayerInfo[playerid][pvTWeed]);
			dini_IntSet(file, "vTrunkcocaine", PlayerInfo[playerid][pvTcocaine]);
			dini_IntSet(file, "Contract", PlayerInfo[playerid][pContract]);
			dini_Set(file, "ContractBy", PlayerInfo[playerid][pContractBy]);
			dini_IntSet(file, "Tutorial", PlayerInfo[playerid][pTutorial]);
			dini_IntSet(file, "Warns", PlayerInfo[playerid][pWarns]);
			dini_Set(file, "Warn1", PlayerInfo[playerid][pWarn1]);
			dini_Set(file, "Warn2", PlayerInfo[playerid][pWarn2]);
			dini_Set(file, "Warn3", PlayerInfo[playerid][pWarn3]);
			dini_Set(file, "Flag", PlayerInfo[playerid][pFlag]);
			dini_IntSet(file, "NMute", PlayerInfo[playerid][pNMute]);
			dini_IntSet(file, "RMute", PlayerInfo[playerid][pRMute]);
			dini_IntSet(file, "SpawnFreeze", PlayerInfo[playerid][pSpawnFreeze]);
			dini_IntSet(file, "Fam", PlayerInfo[playerid][pFam]);
			dini_IntSet(file, "FamRank", PlayerInfo[playerid][pFamRank]);
			dini_IntSet(file, "CSuccess", PlayerInfo[playerid][pCSuccess]);
			dini_IntSet(file, "CFail", PlayerInfo[playerid][pCFail]);
			dini_IntSet(file, "Helper", PlayerInfo[playerid][pHelper]);
			dini_IntSet(file, "vModel", PlayerInfo[playerid][vModel]);
			dini_FloatSet(file, "vX", PlayerInfo[playerid][vX]);
			dini_FloatSet(file, "vY", PlayerInfo[playerid][vY]);
			dini_FloatSet(file, "vZ", PlayerInfo[playerid][vZ]);
			dini_FloatSet(file, "vA", PlayerInfo[playerid][vA]);
			dini_IntSet(file, "vC1", PlayerInfo[playerid][vC1]);
			dini_IntSet(file, "vC2", PlayerInfo[playerid][vC2]);
			dini_IntSet(file, "vPJ", PlayerInfo[playerid][vPJ]);
			dini_IntSet(file, "vLocked", PlayerInfo[playerid][vLocked]);
			dini_IntSet(file, "GangMod", PlayerInfo[playerid][pGangMod]);
			dini_IntSet(file, "FacMod", PlayerInfo[playerid][pFacMod]);
			dini_IntSet(file, "BanAppealer", PlayerInfo[playerid][pBanAppealer]);
			dini_IntSet(file, "CarLicense", PlayerInfo[playerid][pCarLic]);
			dini_IntSet(file, "FlyLicense", PlayerInfo[playerid][pFlyLic]);
			dini_IntSet(file, "WepLicense", PlayerInfo[playerid][pWepLic]);
			dini_Set(file, "Accent", PlayerInfo[playerid][pAccent]);
		 	dini_IntSet(file, "vModSlot0",PlayerInfo[playerid][pVehMod][0]);
			dini_IntSet(file, "vModSlot1",PlayerInfo[playerid][pVehMod][1]);
			dini_IntSet(file, "vModSlot2",PlayerInfo[playerid][pVehMod][2]);
			dini_IntSet(file, "vModSlot3",PlayerInfo[playerid][pVehMod][3]);
			dini_IntSet(file, "vModSlot4",PlayerInfo[playerid][pVehMod][4]);
			dini_IntSet(file, "vModSlot5",PlayerInfo[playerid][pVehMod][5]);
			dini_IntSet(file, "vModSlot6",PlayerInfo[playerid][pVehMod][6]);
			dini_IntSet(file, "vModSlot7",PlayerInfo[playerid][pVehMod][7]);
			dini_IntSet(file, "vModSlot8",PlayerInfo[playerid][pVehMod][8]);
			dini_IntSet(file, "vModSlot9",PlayerInfo[playerid][pVehMod][9]);
			dini_IntSet(file, "vModSlot10",PlayerInfo[playerid][pVehMod][10]);
			dini_IntSet(file, "vModSlot11",PlayerInfo[playerid][pVehMod][11]);
			dini_IntSet(file, "vModSlot12",PlayerInfo[playerid][pVehMod][12]);
			dini_IntSet(file, "vModSlot13",PlayerInfo[playerid][pVehMod][13]);
			dini_IntSet(file, "pDay", PlayerInfo[playerid][pDay]);
			dini_IntSet(file, "VIP", PlayerInfo[playerid][pVIP]);
			dini_IntSet(file, "VIPBuddy", PlayerInfo[playerid][pVIPBuddy]);
			dini_IntSet(file, "VIPDay", PlayerInfo[playerid][pVIPDay]);
			dini_IntSet(file, "VIPMonth", PlayerInfo[playerid][pVIPMonth]);
			dini_IntSet(file, "VIPHour", PlayerInfo[playerid][pVIPHour]);
			dini_IntSet(file, "VIPJob", PlayerInfo[playerid][pVIPJob]);
			dini_IntSet(file, "VIPTemp", PlayerInfo[playerid][pVIPTemp]);
			// VIP CAR
			dini_IntSet(file, "vVModel", PlayerInfo[playerid][vVModel]);
			dini_FloatSet(file, "vVX", PlayerInfo[playerid][vVX]);
			dini_FloatSet(file, "vVY", PlayerInfo[playerid][vVY]);
			dini_FloatSet(file, "vVZ", PlayerInfo[playerid][vVZ]);
			dini_FloatSet(file, "vVA", PlayerInfo[playerid][vVA]);
			dini_IntSet(file, "vVC1", PlayerInfo[playerid][vVC1]);
			dini_IntSet(file, "vVC2", PlayerInfo[playerid][vVC2]);
			dini_IntSet(file, "vVPJ", PlayerInfo[playerid][vVPJ]);
			dini_IntSet(file, "vVLocked", PlayerInfo[playerid][vVLocked]);
		 	dini_IntSet(file, "vVModSlot0",PlayerInfo[playerid][pVVehMod][0]);
			dini_IntSet(file, "vVModSlot1",PlayerInfo[playerid][pVVehMod][1]);
			dini_IntSet(file, "vVModSlot2",PlayerInfo[playerid][pVVehMod][2]);
			dini_IntSet(file, "vVModSlot3",PlayerInfo[playerid][pVVehMod][3]);
			dini_IntSet(file, "vVModSlot4",PlayerInfo[playerid][pVVehMod][4]);
			dini_IntSet(file, "vVModSlot5",PlayerInfo[playerid][pVVehMod][5]);
			dini_IntSet(file, "vVModSlot6",PlayerInfo[playerid][pVVehMod][6]);
			dini_IntSet(file, "vVModSlot7",PlayerInfo[playerid][pVVehMod][7]);
			dini_IntSet(file, "vVModSlot8",PlayerInfo[playerid][pVVehMod][8]);
			dini_IntSet(file, "vVModSlot9",PlayerInfo[playerid][pVVehMod][9]);
			dini_IntSet(file, "vVModSlot10",PlayerInfo[playerid][pVVehMod][10]);
			dini_IntSet(file, "vVModSlot11",PlayerInfo[playerid][pVVehMod][11]);
			dini_IntSet(file, "vVModSlot12",PlayerInfo[playerid][pVVehMod][12]);
			dini_IntSet(file, "vVModSlot13",PlayerInfo[playerid][pVVehMod][13]);
			/*Third Car*/
			dini_IntSet(file, "vVVModel", PlayerInfo[playerid][vVVModel]);
			dini_FloatSet(file, "vVVX", PlayerInfo[playerid][vVVX]);
			dini_FloatSet(file, "vVVY", PlayerInfo[playerid][vVVY]);
			dini_FloatSet(file, "vVVZ", PlayerInfo[playerid][vVVZ]);
			dini_FloatSet(file, "vVVA", PlayerInfo[playerid][vVVA]);
			dini_IntSet(file, "vVVC1", PlayerInfo[playerid][vVVC1]);
			dini_IntSet(file, "vVVC2", PlayerInfo[playerid][vVVC2]);
			dini_IntSet(file, "vVVPJ", PlayerInfo[playerid][vVVPJ]);
			dini_IntSet(file, "vVVLocked", PlayerInfo[playerid][vVVLocked]);
		 	dini_IntSet(file, "vVVModSlot0",PlayerInfo[playerid][pVVVehMod][0]);
			dini_IntSet(file, "vVVModSlot1",PlayerInfo[playerid][pVVVehMod][1]);
			dini_IntSet(file, "vVVModSlot2",PlayerInfo[playerid][pVVVehMod][2]);
			dini_IntSet(file, "vVVModSlot3",PlayerInfo[playerid][pVVVehMod][3]);
			dini_IntSet(file, "vVVModSlot4",PlayerInfo[playerid][pVVVehMod][4]);
			dini_IntSet(file, "vVVModSlot5",PlayerInfo[playerid][pVVVehMod][5]);
			dini_IntSet(file, "vVVModSlot6",PlayerInfo[playerid][pVVVehMod][6]);
			dini_IntSet(file, "vVVModSlot7",PlayerInfo[playerid][pVVVehMod][7]);
			dini_IntSet(file, "vVVModSlot8",PlayerInfo[playerid][pVVVehMod][8]);
			dini_IntSet(file, "vVVModSlot9",PlayerInfo[playerid][pVVVehMod][9]);
			dini_IntSet(file, "vVVModSlot10",PlayerInfo[playerid][pVVVehMod][10]);
			dini_IntSet(file, "vVVModSlot11",PlayerInfo[playerid][pVVVehMod][11]);
			dini_IntSet(file, "vVVModSlot12",PlayerInfo[playerid][pVVVehMod][12]);
			dini_IntSet(file, "vVVModSlot13",PlayerInfo[playerid][pVVVehMod][13]);

			/* End third car */
			dini_IntSet(file, "DeliverTruck", PlayerInfo[playerid][pDeliverTruck]);
			dini_IntSet(file, "New", PlayerInfo[playerid][pNew]);
			dini_IntSet(file, "RefPoints", PlayerInfo[playerid][pRefPoints]);
			dini_IntSet(file, "Tester", PlayerInfo[playerid][pTester]);
			dini_IntSet(file, "FightStyle", PlayerInfo[playerid][pFightStyle]);
			dini_IntSet(file, "Scope", PlayerInfo[playerid][pScope]);
			dini_IntSet(file, "Cookies", PlayerInfo[playerid][pCookies]);
			dini_IntSet(file, "Oldskool", PlayerInfo[playerid][pOldskool]);
			dini_IntSet(file, "Reward", PlayerInfo[playerid][pReward]);
			dini_IntSet(file, "Fish1", PlayerInfo[playerid][pFish][0]);
			dini_IntSet(file, "Fish2", PlayerInfo[playerid][pFish][1]);
			dini_IntSet(file, "Fish3", PlayerInfo[playerid][pFish][2]);
			dini_IntSet(file, "Fish4", PlayerInfo[playerid][pFish][3]);
			dini_IntSet(file, "Fish5", PlayerInfo[playerid][pFish][4]);
			SaveToys(playerid, file);
			dini_IntSet(file, "Loyal", PlayerInfo[playerid][pLoyal]);
			dini_IntSet(file, "LoyalTag", PlayerInfo[playerid][pLoyalTag]);
			dini_IntSet(file, "LPoints", PlayerInfo[playerid][pLPoints]);
			dini_IntSet(file, "Gate1", PlayerInfo[playerid][pGate][0]);
			dini_IntSet(file, "Gate2", PlayerInfo[playerid][pGate][1]);
			dini_IntSet(file, "Gate3", PlayerInfo[playerid][pGate][2]);
		}
		// All Saved
		//SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Your character files have saved successfully.");
	}
	return 1;
}

stock LoadChar(playerid)
{
    new file[64];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	// Logged in
	PlayerInfo[playerid][pLoggedIn] = 1;
	PlayerInfo[playerid][pSpawn] = 1;
	// Load
	format(PlayerInfo[playerid][pIP], 16, "%s", dini_Get(file, "IP"));
	PlayerInfo[playerid][pGender] = dini_Int(file, "Gender");
	PlayerInfo[playerid][pLevel] = dini_Int(file, "Level");
	PlayerInfo[playerid][pUpgradePoints] = dini_Int(file, "UpgradePoints");
	PlayerInfo[playerid][pArmorUpgrade] = dini_Int(file, "ArmorUpgrade");
	if(PlayerInfo[playerid][pLevel] == 0) PlayerInfo[playerid][pLevel] = 1;
	PlayerInfo[playerid][pMinutes] = dini_Int(file, "Minutes");
	PlayerInfo[playerid][pTMinutes] = dini_Int(file, "TMinutes");
	PlayerInfo[playerid][pHours] = dini_Int(file, "Hours");
	PlayerInfo[playerid][pAge] = dini_Int(file, "Age");
	PlayerInfo[playerid][pMoney] = dini_Int(file, "Cash");
	PlayerInfo[playerid][pExp] = dini_Int(file, "Hours");
	PlayerInfo[playerid][pADMute] = dini_Int(file, "ADMute");
	PlayerInfo[playerid][pBank] = dini_Int(file, "Bank");
	PlayerInfo[playerid][pModel] = dini_Int(file, "Model");
	PlayerInfo[playerid][pAdmin] = dini_Int(file, "Admin");
	PlayerInfo[playerid][pMapper] = dini_Int(file, "Mapper");
	PlayerInfo[playerid][pBanned] = dini_Int(file, "pBanned");
	PlayerInfo[playerid][pNumber] = dini_Int(file, "Phnumber");
	PlayerInfo[playerid][pKill] = dini_Int(file, "Kill");
	PlayerInfo[playerid][pDeath] = dini_Int(file, "Death");
	PlayerInfo[playerid][pX]  = dini_Float(file, "X");
	PlayerInfo[playerid][pY] = dini_Float(file, "Y");
	PlayerInfo[playerid][pZ] = dini_Float(file, "Z");
	PlayerInfo[playerid][pInt] = dini_Int(file, "Int");
	PlayerInfo[playerid][pVW] = dini_Int(file, "VW");
    PlayerInfo[playerid][pVehVW] = dini_Int(file, "VehVW");
    PlayerInfo[playerid][pJackSkill] = dini_Int(file, "JackSkill");
    PlayerInfo[playerid][pWalkStyle] = dini_Int(file, "WalkStyle");
    PlayerInfo[playerid][pNeon] = dini_Int(file, "Neon");
    PlayerInfo[playerid][pVNeon] = dini_Int(file, "vNeon");
	PlayerInfo[playerid][pFac] = dini_Int(file, "Fac");
	PlayerInfo[playerid][pFacRank] = dini_Int(file, "FacRank");
	PlayerInfo[playerid][pFacLeader] = dini_Int(file, "FacLeader");
	PlayerInfo[playerid][pFacDiv] = dini_Int(file, "FacDiv");
	PlayerInfo[playerid][pFacDivLeader] = dini_Int(file, "FacDivLeader");
	PlayerInfo[playerid][pFacDuty] = dini_Int(file, "Duty");
	PlayerInfo[playerid][pWeapon][0] = dini_Int(file, "wSlot0");
	PlayerInfo[playerid][pWeaponAmmo][0] = dini_Int(file, "wSlot0Ammo");
	PlayerInfo[playerid][pWeapon][1] = dini_Int(file, "wSlot1");
	PlayerInfo[playerid][pWeaponAmmo][1] = dini_Int(file, "wSlot1Ammo");
	PlayerInfo[playerid][pWeapon][2] = dini_Int(file, "wSlot2");
	PlayerInfo[playerid][pWeaponAmmo][2] = dini_Int(file, "wSlot2Ammo");
	PlayerInfo[playerid][pWeapon][3] = dini_Int(file, "wSlot3");
	PlayerInfo[playerid][pWeaponAmmo][3] = dini_Int(file, "wSlot3Ammo");
	PlayerInfo[playerid][pWeapon][4] = dini_Int(file, "wSlot4");
	PlayerInfo[playerid][pWeaponAmmo][4] = dini_Int(file, "wSlot4Ammo");
	PlayerInfo[playerid][pWeapon][5] = dini_Int(file, "wSlot5");
	PlayerInfo[playerid][pWeaponAmmo][5] = dini_Int(file, "wSlot5Ammo");
	PlayerInfo[playerid][pWeapon][6] = dini_Int(file, "wSlot6");
	PlayerInfo[playerid][pWeaponAmmo][6] = dini_Int(file, "wSlot6Ammo");
	PlayerInfo[playerid][pWeapon][7] = dini_Int(file, "wSlot7");
	PlayerInfo[playerid][pWeaponAmmo][7] = dini_Int(file, "wSlot7Ammo");
	PlayerInfo[playerid][pWeapon][8] = dini_Int(file, "wSlot8");
	PlayerInfo[playerid][pWeaponAmmo][8] = dini_Int(file, "wSlot8Ammo");
	PlayerInfo[playerid][pWeapon][9] = dini_Int(file, "wSlot9");
	PlayerInfo[playerid][pWeaponAmmo][9] = dini_Int(file, "wSlot9Ammo");
	PlayerInfo[playerid][pWeapon][10] = dini_Int(file, "wSlot10");
	PlayerInfo[playerid][pWeaponAmmo][10] = dini_Int(file, "wSlot10Ammo");
	PlayerInfo[playerid][pWeapon][11] = dini_Int(file, "wSlot11");
	PlayerInfo[playerid][pWeaponAmmo][11] = dini_Int(file, "wSlot11Ammo");
	PlayerInfo[playerid][pWeapon][12] = dini_Int(file, "wSlot12");
	PlayerInfo[playerid][pWeaponAmmo][12] = dini_Int(file, "wSlot12Ammo");
	PlayerInfo[playerid][pHospital] = dini_Int(file, "Hospital");
	PlayerInfo[playerid][pBiz] = dini_Int(file, "Business");
	PlayerInfo[playerid][pSafeAdmin] = dini_Int(file, "HouseOwner");
	PlayerInfo[playerid][pVBiz] = dini_Int(file, "VBusiness");
	PlayerInfo[playerid][pOwner] = dini_Int(file, "BizOwner");
	PlayerInfo[playerid][pJob] = dini_Int(file, "Job");
	PlayerInfo[playerid][pJobSkill][JOB_MECHANIC] = dini_Int(file, "Mechanic");
	PlayerInfo[playerid][pJobSkill][JOB_LAWYER] = dini_Int(file, "Lawyer");
	PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] = dini_Int(file, "Trucker");
	PlayerInfo[playerid][pJobSkill][JOB_FISHER] = dini_Int(file, "Fisher");
	PlayerInfo[playerid][pJobSkill][JOB_WDEALER] = dini_Int(file, "WDealer");
	PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] = dini_Int(file, "WSmuggler");
	PlayerInfo[playerid][pJobSkill][JOB_DDEALER] = dini_Int(file, "DDealer");
	PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] = dini_Int(file, "DSmuggler");
    PlayerInfo[playerid][pJobSkill][JOB_BOXER] = dini_Int(file, "Boxer");
    PlayerInfo[playerid][pJobSkill][JOB_FISHER] = dini_Int(file, "Fisher");
	PlayerInfo[playerid][pTPackages] = dini_Int(file, "TPackages");
	PlayerInfo[playerid][pMPackages] = dini_Int(file, "WPackages");
	PlayerInfo[playerid][pHasCellphone] = dini_Int(file, "HasCellphone");
	PlayerInfo[playerid][pCellphone] = 	dini_Int(file, "Cellphone");
	PlayerInfo[playerid][pPhonebook] = 	dini_Int(file, "Phonebook");
	PlayerInfo[playerid][pDice] = dini_Int(file, "Dice");
	PlayerInfo[playerid][pCigar] = dini_Int(file, "Cigar");
	PlayerInfo[playerid][pSpeedo] = dini_Int(file, "Speedo");
	PlayerInfo[playerid][pSprunk] = dini_Int(file, "Sprunk");
	PlayerInfo[playerid][pSpray] = dini_Int(file, "Spray");
	PlayerInfo[playerid][pRope] = dini_Int(file, "Rope");
	PlayerInfo[playerid][pBlindfold] = dini_Int(file, "Blindfold");
	PlayerInfo[playerid][pMaterials] = dini_Int(file, "Materials");
	PlayerInfo[playerid][pMMaterials] = dini_Int(file, "MedMaterials");
	PlayerInfo[playerid][pHMaterials] = dini_Int(file, "HighMaterials");
	PlayerInfo[playerid][pMMPackages] = dini_Int(file, "MWPackages");
	PlayerInfo[playerid][pHPackages] = dini_Int(file, "HWPackages");
 	PlayerInfo[playerid][pWT] = dini_Int(file, "WT");
	PlayerInfo[playerid][pWTC] = dini_Int(file, "WTC");
	PlayerInfo[playerid][pGas] = dini_Int(file, "Gas");
	PlayerInfo[playerid][pRadio] = dini_Int(file, "Radio");
	PlayerInfo[playerid][pHealth] = dini_Float(file, "Health");
	PlayerInfo[playerid][pArmor] = dini_Float(file, "Armor");
	PlayerInfo[playerid][pInternet] = dini_Int(file, "Internet");
	PlayerInfo[playerid][pPrison] = dini_Int(file, "Prison");
	PlayerInfo[playerid][pPrisonTime] = dini_Int(file, "PrisonTime");
	format(PlayerInfo[playerid][pPrisonReason], 64, "%s", dini_Get(file, "PrisonReason"));
	format(PlayerInfo[playerid][pPrisonBy], 32, "%s", dini_Get(file, "PrisonBy"));
	PlayerInfo[playerid][pWanted] = dini_Int(file, "Wanted");
	format(PlayerInfo[playerid][pWanted1], 64, "%s", dini_Get(file, "Wanted1"));
	format(PlayerInfo[playerid][pWanted2], 64, "%s", dini_Get(file, "Wanted2"));
	format(PlayerInfo[playerid][pWanted3], 64, "%s", dini_Get(file, "Wanted3"));
	format(PlayerInfo[playerid][pWanted4], 64, "%s", dini_Get(file, "Wanted4"));
	format(PlayerInfo[playerid][pWanted5], 64, "%s", dini_Get(file, "Wanted5"));
	format(PlayerInfo[playerid][pWanted6], 64, "%s", dini_Get(file, "Wanted6"));
	PlayerInfo[playerid][pCrimes] = dini_Int(file, "Crimes");
	PlayerInfo[playerid][pArrested] = dini_Int(file, "Arrested");
	PlayerInfo[playerid][pDPackages] = dini_Int(file, "DPackages");
	PlayerInfo[playerid][pWeed] = dini_Int(file, "Weed");
	PlayerInfo[playerid][pcocaine] = dini_Int(file, "cocaine");
	PlayerInfo[playerid][pTWeed] = dini_Int(file, "TrunkWeed");
	PlayerInfo[playerid][pTcocaine] = dini_Int(file, "Trunkcocaine");
	PlayerInfo[playerid][pvTWeed] = dini_Int(file, "vTrunkWeed");
	PlayerInfo[playerid][pvTcocaine] = dini_Int(file, "vTrunkcocaine");
	PlayerInfo[playerid][pContract] = dini_Int(file, "Contract");
	format(PlayerInfo[playerid][pContractBy], 32, "%s", dini_Get(file, "ContractBy"));
	PlayerInfo[playerid][pTutorial] = dini_Int(file, "Tutorial");
	PlayerInfo[playerid][pWarns] = dini_Int(file, "Warns");
	format(PlayerInfo[playerid][pWarn1], 64, "%s", dini_Get(file, "Warn1"));
	format(PlayerInfo[playerid][pWarn2], 64, "%s", dini_Get(file, "Warn2"));
	format(PlayerInfo[playerid][pWarn3], 64, "%s", dini_Get(file, "Warn3"));
	format(PlayerInfo[playerid][pFlag], 64, "%s", dini_Get(file, "Flag"));
	PlayerInfo[playerid][pNMute] = dini_Int(file, "NMute");
	PlayerInfo[playerid][pRMute] = dini_Int(file, "RMute");
	PlayerInfo[playerid][pSpawnFreeze] = dini_Int(file, "SpawnFreeze");
	PlayerInfo[playerid][pFam] = dini_Int(file, "Fam");
	PlayerInfo[playerid][pFamRank] = dini_Int(file, "FamRank");
	PlayerInfo[playerid][pCSuccess] = dini_Int(file, "CSuccess");
	PlayerInfo[playerid][pCFail] = dini_Int(file, "CFail");
	PlayerInfo[playerid][pHouse] = dini_Int(file, "House");
	PlayerInfo[playerid][pVHouse] = dini_Int(file, "vHouse");
	PlayerInfo[playerid][pTGun][0] = dini_Int(file, "wtSlot1");
	PlayerInfo[playerid][pTGunAmmo][0] = dini_Int(file, "wtSlot1Ammo");
	PlayerInfo[playerid][pTGun][1] = dini_Int(file, "wtSlot2");
	PlayerInfo[playerid][pTGunAmmo][1] = dini_Int(file, "wtSlot2Ammo");
	PlayerInfo[playerid][pvTGun][0] = dini_Int(file, "vwtSlot1");
	PlayerInfo[playerid][pvTGunAmmo][0] = dini_Int(file, "vwtSlot1Ammo");
	PlayerInfo[playerid][pvTGun][1] = dini_Int(file, "vwtSlot2");
	PlayerInfo[playerid][pvTGunAmmo][1] = dini_Int(file, "vwtSlot2Ammo");
 PlayerInfo[playerid][pGarage] = dini_Int(file, "Garage");
	PlayerInfo[playerid][pVGarage] = dini_Int(file, "vGarage");
	PlayerInfo[playerid][pHelper] = dini_Int(file, "Helper");
	PlayerInfo[playerid][vModel] = dini_Int(file, "vModel");
	PlayerInfo[playerid][vX] = dini_Float(file, "vX");
	PlayerInfo[playerid][vY] = dini_Float(file, "vY");
	PlayerInfo[playerid][vZ] = dini_Float(file, "vZ");
	PlayerInfo[playerid][vA] = dini_Float(file, "vA");
	PlayerInfo[playerid][vC1] = dini_Int(file, "vC1");
	PlayerInfo[playerid][vC2] = dini_Int(file, "vC2");
	PlayerInfo[playerid][vPJ] = dini_Int(file, "vPJ");
	PlayerInfo[playerid][vLocked] = dini_Int(file, "vLocked");
	PlayerInfo[playerid][pVehMod][0] = dini_Int(file, "vModSlot0");
	PlayerInfo[playerid][pVehMod][1] = dini_Int(file, "vModSlot1");
	PlayerInfo[playerid][pVehMod][2] = dini_Int(file, "vModSlot2");
	PlayerInfo[playerid][pVehMod][3] = dini_Int(file, "vModSlot3");
	PlayerInfo[playerid][pVehMod][4] = dini_Int(file, "vModSlot4");
	PlayerInfo[playerid][pVehMod][5] = dini_Int(file, "vModSlot5");
	PlayerInfo[playerid][pVehMod][6] = dini_Int(file, "vModSlot6");
	PlayerInfo[playerid][pVehMod][7] = dini_Int(file, "vModSlot7");
	PlayerInfo[playerid][pVehMod][8] = dini_Int(file, "vModSlot8");
	PlayerInfo[playerid][pVehMod][9] = dini_Int(file, "vModSlot9");
	PlayerInfo[playerid][pVehMod][10] = dini_Int(file, "vModSlot10");
	PlayerInfo[playerid][pVehMod][11] = dini_Int(file, "vModSlot11");
	PlayerInfo[playerid][pVehMod][12] = dini_Int(file, "vModSlot12");
	PlayerInfo[playerid][pVehMod][13] = dini_Int(file, "vModSlot13");
	// VIP CAR
	PlayerInfo[playerid][vVModel] = dini_Int(file, "vVModel");
	PlayerInfo[playerid][vVX] = dini_Float(file, "vVX");
	PlayerInfo[playerid][vVY] = dini_Float(file, "vVY");
	PlayerInfo[playerid][vVZ] = dini_Float(file, "vVZ");
	PlayerInfo[playerid][vVA] = dini_Float(file, "vVA");
	PlayerInfo[playerid][vVC1] = dini_Int(file, "vVC1");
	PlayerInfo[playerid][vVC2] = dini_Int(file, "vVC2");
	PlayerInfo[playerid][vVPJ] = dini_Int(file, "vVPJ");
	PlayerInfo[playerid][vVLocked] = dini_Int(file, "vVLocked");
	PlayerInfo[playerid][pVVehMod][0] = dini_Int(file, "vVModSlot0");
	PlayerInfo[playerid][pVVehMod][1] = dini_Int(file, "vVModSlot1");
	PlayerInfo[playerid][pVVehMod][2] = dini_Int(file, "vVModSlot2");
	PlayerInfo[playerid][pVVehMod][3] = dini_Int(file, "vVModSlot3");
	PlayerInfo[playerid][pVVehMod][4] = dini_Int(file, "vVModSlot4");
	PlayerInfo[playerid][pVVehMod][5] = dini_Int(file, "vVModSlot5");
	PlayerInfo[playerid][pVVehMod][6] = dini_Int(file, "vVModSlot6");
	PlayerInfo[playerid][pVVehMod][7] = dini_Int(file, "vVModSlot7");
	PlayerInfo[playerid][pVVehMod][8] = dini_Int(file, "vVModSlot8");
	PlayerInfo[playerid][pVVehMod][9] = dini_Int(file, "vVModSlot9");
	PlayerInfo[playerid][pVVehMod][10] = dini_Int(file, "vVModSlot10");
	PlayerInfo[playerid][pVVehMod][11] = dini_Int(file, "vVModSlot11");
	PlayerInfo[playerid][pVVehMod][12] = dini_Int(file, "vVModSlot12");
	PlayerInfo[playerid][pVVehMod][13] = dini_Int(file, "vVModSlot13");
	/*tHIRD cAR */
	PlayerInfo[playerid][vVVModel] = dini_Int(file, "vVVModel");
	PlayerInfo[playerid][vVVX] = dini_Float(file, "vVVX");
	PlayerInfo[playerid][vVVY] = dini_Float(file, "vVVY");
	PlayerInfo[playerid][vVVZ] = dini_Float(file, "vVVZ");
	PlayerInfo[playerid][vVVA] = dini_Float(file, "vVVA");
	PlayerInfo[playerid][vVVC1] = dini_Int(file, "vVVC1");
	PlayerInfo[playerid][vVVC2] = dini_Int(file, "vVVC2");
	PlayerInfo[playerid][vVVPJ] = dini_Int(file, "vVVPJ");
	PlayerInfo[playerid][vVVLocked] = dini_Int(file, "vVVLocked");
	PlayerInfo[playerid][pVVVehMod][0] = dini_Int(file, "vVVModSlot0");
	PlayerInfo[playerid][pVVVehMod][1] = dini_Int(file, "vVVModSlot1");
	PlayerInfo[playerid][pVVVehMod][2] = dini_Int(file, "vVVModSlot2");
	PlayerInfo[playerid][pVVVehMod][3] = dini_Int(file, "vVVModSlot3");
	PlayerInfo[playerid][pVVVehMod][4] = dini_Int(file, "vVVModSlot4");
	PlayerInfo[playerid][pVVVehMod][5] = dini_Int(file, "vVVModSlot5");
	PlayerInfo[playerid][pVVVehMod][6] = dini_Int(file, "vVVModSlot6");
	PlayerInfo[playerid][pVVVehMod][7] = dini_Int(file, "vVVModSlot7");
	PlayerInfo[playerid][pVVVehMod][8] = dini_Int(file, "vVVModSlot8");
	PlayerInfo[playerid][pVVVehMod][9] = dini_Int(file, "vVVModSlot9");
	PlayerInfo[playerid][pVVVehMod][10] = dini_Int(file, "vVVModSlot10");
	PlayerInfo[playerid][pVVVehMod][11] = dini_Int(file, "vVVModSlot11");
	PlayerInfo[playerid][pVVVehMod][12] = dini_Int(file, "vVVModSlot12");
	PlayerInfo[playerid][pVVVehMod][13] = dini_Int(file, "vVVModSlot13");
	/* END THIRD CAR */
	if(PlayerInfo[playerid][vModel])
	{
	    PlayerInfo[playerid][pVeh] = CreateVehicle(PlayerInfo[playerid][vModel], PlayerInfo[playerid][vX],PlayerInfo[playerid][vY],PlayerInfo[playerid][vZ],PlayerInfo[playerid][vA],PlayerInfo[playerid][vC1],PlayerInfo[playerid][vC2],1200);
	    SetVehicleVirtualWorld(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][pVehVW]);
        ChangeVehiclePaintjob(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vPJ]);
        if(PlayerInfo[playerid][vLocked]) SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
        for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][pVehMod][i]);
		}
	}
	if(PlayerInfo[playerid][vVModel])
	{
	    PlayerInfo[playerid][pVVeh] = CreateVehicle(PlayerInfo[playerid][vVModel], PlayerInfo[playerid][vVX],PlayerInfo[playerid][vVY],PlayerInfo[playerid][vVZ],PlayerInfo[playerid][vVA],PlayerInfo[playerid][vVC1],PlayerInfo[playerid][vVC2],1200);
        ChangeVehiclePaintjob(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVPJ]);
        if(PlayerInfo[playerid][vVLocked]) SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
        for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][pVVehMod][i]);
		}
	}
	if(PlayerInfo[playerid][vVVModel])
	{
	    PlayerInfo[playerid][pVVVeh] = CreateVehicle(PlayerInfo[playerid][vVVModel], PlayerInfo[playerid][vVVX],PlayerInfo[playerid][vVVY],PlayerInfo[playerid][vVVZ],PlayerInfo[playerid][vVVA],PlayerInfo[playerid][vVVC1],PlayerInfo[playerid][vVVC2],1200);
        ChangeVehiclePaintjob(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVPJ]);
        if(PlayerInfo[playerid][vVVLocked]) SetVehicleParamsEx(PlayerInfo[playerid][pVVVeh], 0, 0, 0, 1, 0, 0, 0);
        for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][pVVVehMod][i]);
		}
	}
	PlayerInfo[playerid][pGangMod] = dini_Int(file, "GangMod");
	PlayerInfo[playerid][pFacMod] = dini_Int(file, "FacMod");
	PlayerInfo[playerid][pBanAppealer] = dini_Int(file, "BanAppealer");
	PlayerInfo[playerid][pCarLic] = dini_Int(file, "CarLicense");
	PlayerInfo[playerid][pFlyLic] = dini_Int(file, "FlyLicense");
	PlayerInfo[playerid][pWepLic] = dini_Int(file, "WepLicense");
	format(PlayerInfo[playerid][pAccent], 16, "%s", dini_Get(file, "Accent"));
	PlayerInfo[playerid][pDay] = dini_Int(file, "pDay");
	PlayerInfo[playerid][pVIP] = dini_Int(file, "VIP");
	PlayerInfo[playerid][pVIPBuddy] = dini_Int(file, "VIPBuddy");
	PlayerInfo[playerid][pVIPDay] = dini_Int(file, "VIPDay");
	PlayerInfo[playerid][pVIPMonth] = dini_Int(file, "VIPMonth");
	PlayerInfo[playerid][pVIPHour] = dini_Int(file, "VIPDayHour");
	PlayerInfo[playerid][pVIPTemp] = dini_Int(file, "VIPTemp");
	PlayerInfo[playerid][pVIPJob] = dini_Int(file, "VIPJob");
	PlayerInfo[playerid][pDeliverTruck] = dini_Int(file, "DeliverTruck");
	PlayerInfo[playerid][pNew] = dini_Int(file, "New");
	PlayerInfo[playerid][pRefPoints] = dini_Int(file, "RefPoints");
	PlayerInfo[playerid][pTester] = dini_Int(file, "Tester");
	PlayerInfo[playerid][pFightStyle] = dini_Int(file, "FightStyle");
	SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
	PlayerInfo[playerid][pScope] = dini_Int(file, "Scope");
	PlayerInfo[playerid][pCookies] = dini_Int(file, "Cookies");
	PlayerInfo[playerid][pOldskool] = dini_Int(file, "Oldskool");
	PlayerInfo[playerid][pReward] = dini_Int(file, "Reward");
	PlayerInfo[playerid][pFish][0] = dini_Int(file, "Fish1");
	PlayerInfo[playerid][pFish][1] = dini_Int(file, "Fish2");
	PlayerInfo[playerid][pFish][2] = dini_Int(file, "Fish3");
	PlayerInfo[playerid][pFish][3] = dini_Int(file, "Fish4");
	PlayerInfo[playerid][pFish][4] = dini_Int(file, "Fish5");
	PlayerInfo[playerid][pLoyal] = dini_Int(file, "Loyal");
	PlayerInfo[playerid][pLoyalTag] = dini_Int(file, "LoyalTag");
	PlayerInfo[playerid][pLPoints] = dini_Int(file, "LPoints");
	PlayerInfo[playerid][pGate][0] = dini_Int(file, "Gate1");
	PlayerInfo[playerid][pGate][1] = dini_Int(file, "Gate2");
	PlayerInfo[playerid][pGate][2] = dini_Int(file, "Gate3");
	LoadToys(playerid, file);
	// All Loaded
	print("Character file loaded successfuly.");
	//SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Your character files have loaded successfully.");
	new string[128];
	// Messages
	SendClientMessage(playerid, COLOR_DARKRED, "Welcome to 	Intense Role-Play.");
	//Cellphone
	Mobile[playerid] = INVALID_PLAYER_ID;
	CellTime[playerid] = 0;
    // Welcome
    format(string, sizeof(string), "SERVER: Welcome, %s. (Your last successful login was from %s)", RPN(playerid), PlayerInfo[playerid][pIP]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	// Player
	format(string, sizeof(string), "SERVER: You are logged in as level %d Player.", PlayerInfo[playerid][pLevel]);
    SendClientMessage(playerid, COLOR_WHITE, string);
    // Helper
    if(PlayerInfo[playerid][pHelper]){
    format(string, sizeof(string), "SERVER: You are logged in as level %d Helper.", PlayerInfo[playerid][pHelper]);
    SendClientMessage(playerid, COLOR_WHITE, string);}
    // Admin
    if(PlayerInfo[playerid][pAdmin]){
	format(string, sizeof(string), "SERVER: You are logged in as level %d Administrator.", PlayerInfo[playerid][pAdmin]);
    SendClientMessage(playerid, COLOR_WHITE, string);}
    //mapper
    if(PlayerInfo[playerid][pMapper]){
	format(string, sizeof(string), "SERVER: You are logged in as level %d Mapper.", PlayerInfo[playerid][pMapper]);
    SendClientMessage(playerid, COLOR_WHITE, string);}
    // Helper Messages
    if(PlayerInfo[playerid][pHelper]){
    format(string, sizeof(string), "HelpLogin: Helper %s has logged in. (Level %d)", RPN(playerid), PlayerInfo[playerid][pHelper]);
    SendAdminMessage(COLOR_RED, 1, string);}
    // Admin Messages
    if(PlayerInfo[playerid][pAdmin]){
	format(string, sizeof(string), "AdmLogin: Administrator %s has logged in. (Level %d)", RPN(playerid), PlayerInfo[playerid][pAdmin]);
    SendAdminMessage(COLOR_RED, 1, string);}
    // Flag Messages
    if(strlen(PlayerInfo[playerid][pFlag]) > 0)
    {
        format(string, sizeof(string), "AdmWarn: %s has logged in. (Flagged player)", RPN(playerid));
        SendAdminMessage(COLOR_RED, 1, string);
    }
    // MOTDs
    if(strlen(ServerMOTD) > 0){
	format(string, sizeof(string), "SERVER MOTD: {FFFFFF}%s", ServerMOTD);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);}
    if(strlen(FamInfo[PlayerInfo[playerid][pFam]][fMOTD]) > 0){
	format(string, sizeof(string), "FAMILY MOTD: {FFFFFF}%s", FamInfo[PlayerInfo[playerid][pFam]][fMOTD]);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);}
    if(strlen(AdminMOTD) > 0 && PlayerInfo[playerid][pAdmin]){
	format(string, sizeof(string), "ADMIN MOTD: {FFFFFF}%s", AdminMOTD);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);}
	return 1;
}

// Jobs Settings
// Legal Jobs: 1) Mechanic | 2) Lawyer | 3) Trucker | 4) Fisher (NOT NOW)
// Illegal Jobs: 5) Weapons Dealer | 6) Weapons Smuggler | 7) Drugs Dealer | 8) Drugs Smuggler | 9) Car Jacker (NOT NOW) | 10) Bodyguard

enum jobInfo
{
	jCars[9],
	jTrailers[9]
}
new JobInfo[MAX_JOBS][jobInfo];

//Garage Settings
enum garageInfo
{
	gLevel,
	gPrice,
	gStatus,
	gOwner[32],
	Float:gX,
	Float:gY,
	Float:gZ,
	gPickup,
	Text3D:gText
}
new GarageInfo[MAX_GARAGES][garageInfo];

stock LoadGarages()
{
	new binfo[21][32];
	new string[256];
	new File:file = fopen("garages.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_GARAGES)
		{
		    fread(file, string);
		    split(string, binfo, '|');
		    GarageInfo[idx][gLevel] = strval(binfo[0]);
		    GarageInfo[idx][gPrice] = strval(binfo[1]);
		    GarageInfo[idx][gStatus] = strval(binfo[2]);
		    format(GarageInfo[idx][gOwner], 32, "%s", binfo[3]);
		    GarageInfo[idx][gX] = floatstr(binfo[4]);
		    GarageInfo[idx][gY] = floatstr(binfo[5]);
		    GarageInfo[idx][gZ] = floatstr(binfo[6]);
			if(GarageInfo[idx][gLevel])
			{
			    GarageInfo[idx][gPickup] = CreateDynamicPickup(1318, 1, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ], 0);
                if(!strcmp("The State", GarageInfo[idx][gOwner])) format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(idx), GarageInfo[idx][gPrice]);
				else format(string, sizeof(string), "{F81414}Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
				GarageInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]+0.3, 15);

			}
			idx++;
	    }
	}
	print("Garages loaded successfully.");
	return 1;
}

stock SaveGarages()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_GARAGES)
	{
	    format(string, sizeof(string), "%d|%d|%d|%s|%f|%f|%f\r\n",
	    GarageInfo[idx][gLevel],
	    GarageInfo[idx][gPrice],
	    GarageInfo[idx][gStatus],
	    GarageInfo[idx][gOwner],
	    GarageInfo[idx][gX],
	    GarageInfo[idx][gY],
	    GarageInfo[idx][gZ]
		);
	    if(idx == 1)
	    {
	        file = fopen("garages.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("garages.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Garages saved successfully.");
}

// House Settings
enum houseInfo
{
	hLevel,
	hPrice,
	hStatus,
	hOwner[32],
	Float:hX,
	Float:hY,
	Float:hZ,
	hMoney,
	hMaterials,
	hWeed,
	hcocaine,
	hGun[5],
	hGunAmmo[5],
	hPickup,
	Text3D:hText
}
new HouseInfo[MAX_HOUSES][houseInfo];

stock LoadHouses()
{
	new binfo[21][32];
	new string[256];
	new File:file = fopen("houses.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_HOUSES)
		{
		    fread(file, string);
		    split(string, binfo, '|');
		    HouseInfo[idx][hLevel] = strval(binfo[0]);
		    HouseInfo[idx][hPrice] = strval(binfo[1]);
		    HouseInfo[idx][hStatus] = strval(binfo[2]);
		    format(HouseInfo[idx][hOwner], 32, "%s", binfo[3]);
		    HouseInfo[idx][hX] = floatstr(binfo[4]);
		    HouseInfo[idx][hY] = floatstr(binfo[5]);
		    HouseInfo[idx][hZ] = floatstr(binfo[6]);
		    HouseInfo[idx][hMoney] = strval(binfo[7]);
		    HouseInfo[idx][hMaterials] = strval(binfo[8]);
		    HouseInfo[idx][hWeed] = strval(binfo[9]);
		    HouseInfo[idx][hcocaine] = strval(binfo[10]);
			HouseInfo[idx][hGun][0] = strval(binfo[11]);
			HouseInfo[idx][hGunAmmo][0] = strval(binfo[12]);
			HouseInfo[idx][hGun][1] = strval(binfo[13]);
			HouseInfo[idx][hGunAmmo][1] = strval(binfo[14]);
			HouseInfo[idx][hGun][2] = strval(binfo[15]);
			HouseInfo[idx][hGunAmmo][2] = strval(binfo[16]);
			HouseInfo[idx][hGun][3] = strval(binfo[17]);
			HouseInfo[idx][hGunAmmo][3] = strval(binfo[18]);
			HouseInfo[idx][hGun][4] = strval(binfo[19]);
			HouseInfo[idx][hGunAmmo][4] = strval(binfo[20]);
			if(HouseInfo[idx][hLevel])
			{
			    HouseInfo[idx][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ], 0);
                if(!strcmp("The State", HouseInfo[idx][hOwner])) format(string, sizeof(string), "Owner: %s\nHouse Type: %s\nFor Sale\nPrice: $%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
				else format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
				HouseInfo[idx][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]+0.3, 15);

			}
			idx++;
	    }
	}
	print("Houses loaded successfully.");
	return 1;
}

stock SaveHouses()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_HOUSES)
	{
	    format(string, sizeof(string), "%d|%d|%d|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\r\n",
	    HouseInfo[idx][hLevel],
	    HouseInfo[idx][hPrice],
	    HouseInfo[idx][hStatus],
	    HouseInfo[idx][hOwner],
	    HouseInfo[idx][hX],
	    HouseInfo[idx][hY],
	    HouseInfo[idx][hZ],
	    HouseInfo[idx][hMoney],
	    HouseInfo[idx][hMaterials],
	    HouseInfo[idx][hWeed],
	    HouseInfo[idx][hcocaine],
		HouseInfo[idx][hGun][0],
		HouseInfo[idx][hGunAmmo][0],
		HouseInfo[idx][hGun][1],
		HouseInfo[idx][hGunAmmo][1],
		HouseInfo[idx][hGun][2],
		HouseInfo[idx][hGunAmmo][2],
		HouseInfo[idx][hGun][3],
		HouseInfo[idx][hGunAmmo][3],
		HouseInfo[idx][hGun][4],
		HouseInfo[idx][hGunAmmo][4]
		);
	    if(idx == 1)
	    {
	        file = fopen("houses.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("houses.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Houses saved successfully.");
}

// Business Settings
enum bizInfo
{
	bType,
	bStatus,
	bOwner[32],
	Float:bX,
	Float:bY,
	Float:bZ,
	bPickup,
	bMoney,
	bProducts,
	Text3D:bText,
	bSold,
	bLevel,
	bPrice,
	bAP
}
new BizInfo[MAX_BIZ][bizInfo];

stock LoadBiz()
{
    if(!fexist("biz.cfg")) fcreate("biz.cfg");
	new binfo[12][32];
	new string[256];
	new File:file = fopen("biz.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_BIZ)
		{
		    fread(file, string);
		    split(string, binfo, '|');
		    BizInfo[idx][bType] = strval(binfo[0]);
		    BizInfo[idx][bStatus] = strval(binfo[1]);
		    format(BizInfo[idx][bOwner], 32, "%s", binfo[2]);
		    BizInfo[idx][bX] = floatstr(binfo[3]);
		    BizInfo[idx][bY] = floatstr(binfo[4]);
		    BizInfo[idx][bZ] = floatstr(binfo[5]);
		    BizInfo[idx][bMoney] = strval(binfo[6]);
		    BizInfo[idx][bProducts] = strval(binfo[7]);
		    BizInfo[idx][bSold] = strval(binfo[8]);
		    BizInfo[idx][bLevel] = strval(binfo[9]);
		    BizInfo[idx][bPrice] = strval(binfo[10]);
		    BizInfo[idx][bAP] = strval(binfo[11]);
		    if(BizInfo[idx][bType]) // If Business is owned
		    {
		    	BizInfo[idx][bPickup] = CreateDynamicPickup(1272, 1, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], 0);
		    	if(!strcmp("The State", BizInfo[idx][bOwner])) format(string, sizeof(string), "Owner: %s\nBusiness Type: %s\nStatus: For Sale\nPrice: $%d", BizInfo[idx][bOwner], RBT(idx), BizInfo[idx][bPrice]);
				else format(string, sizeof(string), "Business of %s\nBusiness type: %s\n%s", BizInfo[idx][bOwner], RBT(idx), RBS(idx));
		    	BizInfo[idx][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]+0.3, 15);
			}
			idx++;
	    }
	}
	print("Businesses loaded successfully.");
	return 1;
}

stock SaveBiz()
{
    if(!fexist("biz.cfg")) fcreate("biz.cfg");
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_BIZ)
	{
	    format(string, sizeof(string), "%d|%d|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d\r\n", BizInfo[idx][bType], BizInfo[idx][bStatus], BizInfo[idx][bOwner], BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], BizInfo[idx][bMoney], BizInfo[idx][bProducts], BizInfo[idx][bSold], BizInfo[idx][bLevel], BizInfo[idx][bPrice], BizInfo[idx][bAP]);
	    if(idx == 1)
	    {
	        file = fopen("biz.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("biz.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Businesses saved successfully.");
}






enum gateInfo
{
	gGate,
	Text3D:gText,
	gModel,
	Float:gCX,
	Float:gCY,
	Float:gCZ,
	Float:gCRX,
	Float:gCRY,
	Float:gCRZ,
	Float:gOX,
	Float:gOY,
	Float:gOZ,
	Float:gORX,
	Float:gORY,
	Float:gORZ,
	gPassword[256],
	Float:gSpeed,
	gStatus
}
new GateInfo[MAX_GATES][gateInfo];

stock LoadGates()
{
	new dinfo[15][128];
	new string[256];
	new File:file = fopen("gates.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_GATES)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			GateInfo[idx][gModel] = strval(dinfo[0]);
			GateInfo[idx][gCX] = floatstr(dinfo[1]);
			GateInfo[idx][gCY] = floatstr(dinfo[2]);
			GateInfo[idx][gCZ] = floatstr(dinfo[3]);
			GateInfo[idx][gCRX] = floatstr(dinfo[4]);
			GateInfo[idx][gCRY] = floatstr(dinfo[5]);
			GateInfo[idx][gCRZ] = floatstr(dinfo[6]);
			GateInfo[idx][gOX] = floatstr(dinfo[7]);
			GateInfo[idx][gOY] = floatstr(dinfo[8]);
			GateInfo[idx][gOZ] = floatstr(dinfo[9]);
			GateInfo[idx][gORX] = floatstr(dinfo[10]);
			GateInfo[idx][gORY] = floatstr(dinfo[11]);
			GateInfo[idx][gORZ] = floatstr(dinfo[12]);
			format(GateInfo[idx][gPassword], 256, "%s", dinfo[13]);
			GateInfo[idx][gSpeed] = floatstr(dinfo[14]);
			if(GateInfo[idx][gModel]) // If gate exists
			{
			    format(string, sizeof(string), "Gate ID: %d", idx);
				GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
				GateInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], 10);
				GateInfo[idx][gStatus] = 0;
			}
			idx++;
	    }
	}
	print("Gates loaded successfully.");
	return 1;
}

enum bvvehInfo
{
	vvveh,
	vvvModel,
	Float:vvvX,
	Float:vvvY,
	Float:vvvZ,
	Float:vvvRX,
	Float:vvvRY,
	Float:vvvRZ,
	Float:vvvAn,
	vvvC1,
	vvvC2
}
new vvvehInfo[MAX_vvveh][bvvehInfo];

enum objInfo
{
	obj,
	Text3D:oText,
	oModel,
	Float:oX,
	Float:oY,
	Float:oZ,
	Float:oRX,
	Float:oRY,
	Float:oRZ,
}
new ObjInfo[MAX_OBJ][objInfo];
enum gobjInfo
{
	gobj,
	Text3D:goText,
	ogModel,
	Float:ogX,
	Float:ogY,
	Float:ogZ,
	Float:ogRX,
	Float:ogRY,
	Float:ogRZ,
}
new ObjgInfo[MAX_gOBJ][gobjInfo];

stock LoadCsObjects()
{
	new dinfo[15][128];
	new string[256];
	new File:file = fopen("objects22.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_OBJ)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			ObjInfo[idx][oModel] = strval(dinfo[0]);
			ObjInfo[idx][oX] = floatstr(dinfo[1]);
			ObjInfo[idx][oY] = floatstr(dinfo[2]);
			ObjInfo[idx][oZ] = floatstr(dinfo[3]);
			ObjInfo[idx][oRX] = floatstr(dinfo[4]);
			ObjInfo[idx][oRY] = floatstr(dinfo[5]);
			ObjInfo[idx][oRZ] = floatstr(dinfo[6]);
			if(ObjInfo[idx][oModel]) // If gate exists
			{
				ObjInfo[idx][obj] = CreateDynamicObject(ObjInfo[idx][oModel], ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ], ObjInfo[idx][oRX], ObjInfo[idx][oRY], ObjInfo[idx][oRZ]);
                format(string, sizeof(string), "Object ID: %d (Model ID: %d)", idx, ObjInfo[idx][oModel]);
				ObjInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ], 10);
			}
			idx++;
	    }
	}
	print("Objects loaded successfully.");
	return 1;
}

stock LoadCsgObjects()
{
	new dinfo[15][128];
	new string[256];
	new File:file = fopen("objects22g.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_gOBJ)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			ObjgInfo[idx][ogModel] = strval(dinfo[0]);
			ObjgInfo[idx][ogX] = floatstr(dinfo[1]);
			ObjgInfo[idx][ogY] = floatstr(dinfo[2]);
			ObjgInfo[idx][ogZ] = floatstr(dinfo[3]);
			ObjgInfo[idx][ogRX] = floatstr(dinfo[4]);
			ObjgInfo[idx][ogRY] = floatstr(dinfo[5]);
			ObjgInfo[idx][ogRZ] = floatstr(dinfo[6]);
			if(ObjgInfo[idx][ogModel]) // If gate exists
			{
				ObjgInfo[idx][gobj] = CreateDynamicObject(ObjgInfo[idx][ogModel], ObjgInfo[idx][ogX], ObjgInfo[idx][ogY], ObjgInfo[idx][ogZ], ObjgInfo[idx][ogRX], ObjgInfo[idx][ogRY], ObjgInfo[idx][ogRZ]);
                format(string, sizeof(string), "Object ID: %d (Model ID: %d)", idx, ObjgInfo[idx][ogModel]);
				ObjgInfo[idx][goText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ObjgInfo[idx][ogX], ObjgInfo[idx][ogY], ObjgInfo[idx][ogZ], 10);
			}
			idx++;
	    }
	}
	print("Objects loaded successfully.");
	return 1;
}

stock Loadvvveh()
{
	new dinfo[7][128];
	new string[256];
	new File:file = fopen("vvveh.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_vvveh)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			vvvehInfo[idx][vvvModel] = strval(dinfo[0]);
			vvvehInfo[idx][vvvX] = floatstr(dinfo[1]);
			vvvehInfo[idx][vvvY] = floatstr(dinfo[2]);
			vvvehInfo[idx][vvvZ] = floatstr(dinfo[3]);
			vvvehInfo[idx][vvvAn] = floatstr(dinfo[4]);
			if(vvvehInfo[idx][vvvModel])
			{
				vvvehInfo[idx][vvveh] = CreateVehicle(vvvehInfo[idx][vvvModel], vvvehInfo[idx][vvvX], vvvehInfo[idx][vvvY], vvvehInfo[idx][vvvZ], vvvehInfo[idx][vvvAn], vvvehInfo[idx][vvvC1], vvvehInfo[idx][vvvC2], 1200);
			}
			idx++;
	    }
	}
	print("Dynamic vehicles loaded successfully.");
	return 1;
}

stock SavegObjects()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_gOBJ)
	{
	    format(string, sizeof(string), "	CreateDynamicObject(%d,%f,%f,%f,%f,%f,%f);\r\n",
        ObjgInfo[idx][ogModel],
        ObjgInfo[idx][ogX],
        ObjgInfo[idx][ogY],
        ObjgInfo[idx][ogZ],
        ObjgInfo[idx][ogRX],
        ObjgInfo[idx][ogRY],
        ObjgInfo[idx][ogRZ]);
        if(idx == 1)
	    {
	        file = fopen("objectsg.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("objectsg.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Objects saved successfully.");
	return 1;
}

stock SaveObjects()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_OBJ)
	{
	    format(string, sizeof(string), "	CreateDynamicObject(%d,%f,%f,%f,%f,%f,%f);\r\n",
        ObjInfo[idx][oModel],
        ObjInfo[idx][oX],
        ObjInfo[idx][oY],
        ObjInfo[idx][oZ],
        ObjInfo[idx][oRX],
        ObjInfo[idx][oRY],
        ObjInfo[idx][oRZ]);
        if(idx == 1)
	    {
	        file = fopen("objects.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("objects.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Objects saved successfully.");
	return 1;
}

stock Savevvveh()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_vvveh)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f\r\n",
        vvvehInfo[idx][vvvModel],
        vvvehInfo[idx][vvvX],
        vvvehInfo[idx][vvvY],
        vvvehInfo[idx][vvvZ],
        vvvehInfo[idx][vvvAn],
        vvvehInfo[idx][vvvC1],
        vvvehInfo[idx][vvvC2]);
        if(idx == 1)
	    {
	        file = fopen("vvveh.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("vvveh.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Dynamic Vehicles saved successfully.");
	return 1;
}

stock SaveObjects22g()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_gOBJ)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f\r\n",
        ObjgInfo[idx][ogModel],
        ObjgInfo[idx][ogX],
        ObjgInfo[idx][ogY],
        ObjgInfo[idx][ogZ],
        ObjgInfo[idx][ogRX],
        ObjgInfo[idx][ogRY],
        ObjgInfo[idx][ogRZ]);
        if(idx == 1)
	    {
	        file = fopen("objects22g.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("objects22g.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Objects saved successfully.");
	return 1;
}


stock SaveObjects22()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_OBJ)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f\r\n",
        ObjInfo[idx][oModel],
        ObjInfo[idx][oX],
        ObjInfo[idx][oY],
        ObjInfo[idx][oZ],
        ObjInfo[idx][oRX],
        ObjInfo[idx][oRY],
        ObjInfo[idx][oRZ]);
        if(idx == 1)
	    {
	        file = fopen("objects22.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("objects22.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Objects saved successfully.");
	return 1;
}


stock SaveGates()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_GATES)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%s|%f\r\n",
		GateInfo[idx][gModel],
		GateInfo[idx][gCX],
		GateInfo[idx][gCY],
		GateInfo[idx][gCZ],
		GateInfo[idx][gCRX],
		GateInfo[idx][gCRY],
		GateInfo[idx][gCRZ],
		GateInfo[idx][gOX],
		GateInfo[idx][gOY],
		GateInfo[idx][gOZ],
		GateInfo[idx][gORX],
		GateInfo[idx][gORY],
		GateInfo[idx][gORZ],
		GateInfo[idx][gPassword],
		GateInfo[idx][gSpeed]);
		GateInfo[idx][gStatus] = 0;
	    if(idx == 1)
	    {
	        file = fopen("gates.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("gates.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Gates saved successfully.");
	return 1;
}

enum doorInfo
{
	dPickup,
	dType,
	Float:dOX,
	Float:dOY,
	Float:dOZ,
	Float:dIX,
	Float:dIY,
	Float:dIZ,
	dOInt,
	dOVW,
	dIInt,
	dIVW,
	dCInt,
	dCExt,
	Float:dIA,
	Float:dOA,
	Text3D:dTextID,
	dText[128],

}
new DoorInfo[MAX_DOORS][doorInfo];

stock LoadDoors()
{
	new dinfo[16][128];
	new string[256];
	new File:file = fopen("doors.cfg", io_read);
	if(file)
	{
	    new idx = 0;
		while(idx < MAX_DOORS)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
		    DoorInfo[idx][dType] = strval(dinfo[0]);
			DoorInfo[idx][dOX] = floatstr(dinfo[1]);
			DoorInfo[idx][dOY] = floatstr(dinfo[2]);
			DoorInfo[idx][dOZ] = floatstr(dinfo[3]);
			DoorInfo[idx][dIX] = floatstr(dinfo[4]);
			DoorInfo[idx][dIY] = floatstr(dinfo[5]);
			DoorInfo[idx][dIZ] = floatstr(dinfo[6]);
			DoorInfo[idx][dOInt] = strval(dinfo[7]);
			DoorInfo[idx][dOVW] = strval(dinfo[8]);
			DoorInfo[idx][dIInt] = strval(dinfo[9]);
			DoorInfo[idx][dIVW] = strval(dinfo[10]);
			DoorInfo[idx][dCInt] = strval(dinfo[11]);
			DoorInfo[idx][dCExt] = strval(dinfo[12]);
			DoorInfo[idx][dIA] = floatstr(dinfo[13]);
			format(DoorInfo[idx][dText], 128, "%s", dinfo[14]);
			DoorInfo[idx][dOA] = floatstr(dinfo[15]);
			if(DoorInfo[idx][dType]) // If door exists
			{
                DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
				format(string, sizeof(string), "ID: %d\n%s", idx, DoorInfo[idx][dText]);
				DoorInfo[idx][dTextID] = CreateDynamic3DTextLabel(string, COLOR_WHITE, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]+0.3, 15);
			}
			idx++;
	    }
	}
	print("Doors loaded successfully.");
	return 1;
}

stock SaveDoors()
{
	new idx = 0, File:file;
	new string[256];
	while(idx < MAX_DOORS)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%f|%s|%f\r\n",
  		DoorInfo[idx][dType],
		DoorInfo[idx][dOX],
		DoorInfo[idx][dOY],
		DoorInfo[idx][dOZ],
		DoorInfo[idx][dIX],
		DoorInfo[idx][dIY],
		DoorInfo[idx][dIZ],
		DoorInfo[idx][dOInt],
		DoorInfo[idx][dOVW],
		DoorInfo[idx][dIInt],
		DoorInfo[idx][dIVW],
		DoorInfo[idx][dCInt],
		DoorInfo[idx][dCExt],
		DoorInfo[idx][dIA],
		DoorInfo[idx][dText],
		DoorInfo[idx][dOA]);
	    if(idx == 0)
	    {
	        file = fopen("doors.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("doors.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Doors saved successfully.");
}

enum mapiconInfo
{
	mpID,
	mpType,
	Float:mpX,
	Float:mpY,
	Float:mpZ
}
new MapIconInfo[MAX_MAPICONS][mapiconInfo];

stock SaveMapIcons()
{
	new idx = 0, File:file;
	new string[256];
	while(idx < MAX_MAPICONS)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f\r\n",
		MapIconInfo[idx][mpType],
		MapIconInfo[idx][mpX],
		MapIconInfo[idx][mpY],
		MapIconInfo[idx][mpZ]);
	    if(idx == 0)
	    {
	        file = fopen("mapicons.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("mapicons.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Mapicons saved successfully.");
}

stock LoadMapIcons()
{
	new dinfo[4][128];
	new string[256];
	new File:file = fopen("mapicons.cfg", io_read);
	if(file)
	{
	    new idx = 0;
		while(idx < MAX_MAPICONS)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
		    MapIconInfo[idx][mpType] = strval(dinfo[0]);
			MapIconInfo[idx][mpX] = floatstr(dinfo[1]);
			MapIconInfo[idx][mpY] = floatstr(dinfo[2]);
			MapIconInfo[idx][mpZ] = floatstr(dinfo[3]);
			if(MapIconInfo[idx][mpType]) // If mapicon exists
			{
			    MapIconInfo[idx][mpID] = CreateDynamicMapIcon(MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ], MapIconInfo[idx][mpType], 0 ,0);
			}
			idx++;
	    }
	}
	print("Doors loaded successfully.");
	return 1;
}

// Drugs Depot - Drugs House - cocaine Lab - Materials Pickup - Materials Factory
new PointTimer;
new Capturing;
new Float:Capture[3];
new PointBC[MAX_POINTS];

enum pointInfo
{
	pName[32],
	pTime,
	pOwner,
	Float:pX,
	Float:pY,
	Float:pZ,
	pProfit,
	pPickup,
	Text3D:pText
}
new PointInfo[MAX_POINTS][pointInfo];

stock SavePoints()
{
	new idx = 0, File:file;
	new string[256];
	while(idx < MAX_POINTS)
	{
	    format(string, sizeof(string), "%s|%d|%d|%f|%f|%f|%d\r\n",
		PointInfo[idx][pName],
		PointInfo[idx][pTime],
		PointInfo[idx][pOwner],
		PointInfo[idx][pX],
		PointInfo[idx][pY],
		PointInfo[idx][pZ],
		PointInfo[idx][pProfit]);
	    if(idx == 0)
	    {
	        file = fopen("points.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("points.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Points saved successfully.");
}

stock LoadPoints()
{
	new dinfo[7][128];
	new string[256];
	new File:file = fopen("points.cfg", io_read);
	if(file)
	{
	    new idx = 0;
		while(idx < MAX_POINTS)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			format(PointInfo[idx][pName], 32, "%s", dinfo[0]);
			PointInfo[idx][pTime] = strval(dinfo[1]);
			PointInfo[idx][pOwner] = strval(dinfo[2]);
			PointInfo[idx][pX] = floatstr(dinfo[3]);
			PointInfo[idx][pY] = floatstr(dinfo[4]);
			PointInfo[idx][pZ] = floatstr(dinfo[5]);
			PointInfo[idx][pProfit] = strval(dinfo[6]);
			if(!PointInfo[idx][pTime]) // If point time is 0
			{
			    DestroyDynamicPickup(PointInfo[idx][pPickup]);
			    DestroyDynamic3DTextLabel(PointInfo[idx][pText]);
			    PointInfo[idx][pProfit] = 0;
		    	PointInfo[idx][pText] = CreateDynamic3DTextLabel("Point\n/capture", COLOR_WHITE, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]+0.3, 15);
				format(string, sizeof(string), "The {00FF00}%s {FF6347}is available to be captured.", PointInfo[idx][pName]);
			    SendClientMessageToAll(COLOR_LIGHTRED, string);
			}
			idx++;
	    }
	}
	print("Points loaded successfully.");
	return 1;
}


main()
{
	print("\n----------------------------------");
	print("    Intense Role-Play   ");
	print("----------------------------------\n");
}


stock CheckFiles()
{

	if(!dini_Exists("objects.cfg")) dini_Create("objects.cfg");
	if(!dini_Exists("objectsg.cfg")) dini_Create("objectsg.cfg");
	if(!dini_Exists("objects22.cfg")) dini_Create("objects22.cfg"); // one little tihngr?
	if(!dini_Exists("objects22g.cfg")) dini_Create("objects22g.cfg"); // one little tihngr?
	if(!dini_Exists("vvveh.cfg")) dini_Create("vvveh.cfg"); // one little tihngr?
	if(!dini_Exists("arrest.cfg")) dini_Create("arrest.cfg");
	if(!dini_Exists("ban.cfg")) dini_Create("ban.cfg");
	if(!dini_Exists("biz.cfg")) dini_Create("biz.cfg");
	if(!dini_Exists("bugs.cfg")) dini_Create("bugs.cfg");
	if(!dini_Exists("cellphones.cfg")) dini_Create("cellphones.cfg");
	if(!dini_Exists("doors.cfg")) dini_Create("doors.cfg");
	if(!dini_Exists("gates.cfg")) dini_Create("gates.cfg");
	if(!dini_Exists("drugs.cfg")) dini_Create("drugs.cfg");
	if(!dini_Exists("motds.cfg")) dini_Create("motds.cfg");
	if(!dini_Exists("families.cfg")) dini_Create("families.cfg");
	if(!dini_Exists("houses.cfg")) dini_Create("houses.cfg");
	if(!dini_Exists("mapicons.cfg")) dini_Create("mapicons.cfg");
	if(!dini_Exists("points.cfg")) dini_Create("points.cfg");
	if(!dini_Exists("products.cfg")) dini_Create("products.cfg");
	if(!dini_Exists("vehicles.cfg")) dini_Create("vehicles.cfg");
	return 1;
}

public OnGameModeInit()
{
	CheckFiles();
	CreateObject(987,2507.0678710,2351.5798340,3.2379460,0.0000000,0.0000000,-4.7123890); //object(2)
	CreateObject(987,2507.1047360,2363.5283200,3.2178990,0.0000000,0.0000000,-4.7123890); //object(3)
	CreateObject(987,2507.0144040,2375.5144040,3.2171750,0.0000000,0.0000000,-4.7123890); //object(4)
	CreateObject(987,2507.0012210,2387.3872070,3.2359370,0.0000000,0.0000000,-4.7123890); //object(5)
	CreateObject(987,2507.0163570,2399.3332520,3.2109380,0.0000000,0.0000000,-4.7123890); //object(6)
	CreateObject(2047,2530.4929200,2403.2045900,5.7724640,0.0000000,0.0000000,0.0000000); //object(7)
	CreateObject(2047,2546.7324220,2377.2434080,5.4310110,0.0000000,0.0000000,-1.5707960); //object(9)
	CreateObject(2047,2529.5378420,2350.7861330,6.3379700,0.0000000,0.0000000,-2.9452430); //object(10)
    new BladesPalace = CreateObject(19353,1535.030151,-1451.169311,18.512804,0.000000,0.000000,-90.500000);
    SetObjectMaterialText(BladesPalace, "Blade's Disco", 0, 50, "Arial", 24, 1, -32256, 0, 1);
	CreateObject(973,2506.7971190,2397.6894530,3.9511570,0.0000000,0.0000000,-4.7123890); //object(11)
	CreateObject(973,2506.7900390,2388.4128420,3.9511570,0.0000000,0.0000000,-4.7123890); //object(12)
	CreateObject(973,2506.8676760,2379.1269530,3.9261570,0.0000000,0.0000000,-4.7123890); //object(13)
	CreateObject(973,2506.8151860,2369.8400880,3.9581190,0.0000000,0.0000000,-4.7123890); //object(15)
	CreateObject(973,2506.9316410,2360.6875000,3.8831190,0.0000000,0.0000000,-4.7123890); //object(16)
	CreateObject(973,2506.8486330,2351.3728030,3.9261570,0.0000000,0.0000000,-4.7123890); //object(17)
	CreateObject(978,2497.2209470,2387.4399410,10.6605330,0.0000000,0.0000000,4.7123890); //object(21)
	CreateObject(978,2497.2216800,2387.4384770,11.5365280,0.0000000,0.0000000,4.7123890); //object(22)
	SetGameModeText(SERVER_GM_TEXT);
	SendRconCommand("hostname Intense Role-Play");
	SendRconCommand("weburl www.intenseroleplay.tk");
	SendRconCommand("mapname Los Angeles");
	AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	ShowPlayerMarkers(1);
	UsePlayerPedAnims();
	LoadStaticVehicles();
	LoadObjects();
	Loadvvveh();
	LoadCsObjects();
	LoadCsgObjects();
	LoadFactions();
	LoadFamilies();
	//LoadPoints();
	LoadBiz();
	LoadHouses();
	LoadGarages();
	LoadDoors();
	LoadGates();
	LoadMapIcons();
	LoadArrestPoint();
	LoadDrugs();
	LoadProducts();
	LoadPickups();
	LoadMOTDS();
	// Animations
	// report bug
	SetTimer("Bug", 600000, true);
 // Time

	WebTD = TextDrawCreate(36.000000, 430.000000,"~h~www.intenseroleplay.tk");
	TextDrawBackgroundColor(WebTD, 255);
	TextDrawFont(WebTD,2);
	TextDrawSetShadow(WebTD,0);
	TextDrawSetOutline(WebTD,1);
	TextDrawAlignment(WebTD,1);
	TextDrawLetterSize(WebTD,0.200000,1.000000);
	TextDrawColor(WebTD,COLOR_WHITE);
	TextDrawSetOutline(WebTD, 1);


	// Bottom Box 1
	MainMenuTxtdraw[0] = TextDrawCreate(-1.000000, 342.000000, "BottomBox1");
	TextDrawBackgroundColor(MainMenuTxtdraw[0], 0);
	TextDrawFont(MainMenuTxtdraw[0], 1);
	TextDrawLetterSize(MainMenuTxtdraw[0], 0.839999, 11.600002);
	TextDrawColor(MainMenuTxtdraw[0], 0);
	TextDrawSetOutline(MainMenuTxtdraw[0], 0);
	TextDrawSetProportional(MainMenuTxtdraw[0], 1);
	TextDrawSetShadow(MainMenuTxtdraw[0], 1);
	TextDrawUseBox(MainMenuTxtdraw[0], 1);
	TextDrawBoxColor(MainMenuTxtdraw[0], 255);
	TextDrawTextSize(MainMenuTxtdraw[0], 677.000000, 134.000000);


	// Top Box 1
	MainMenuTxtdraw[1] = TextDrawCreate(-10.000000, -18.000000, "TopBox1");
	TextDrawBackgroundColor(MainMenuTxtdraw[1], 0);
	TextDrawFont(MainMenuTxtdraw[1], 1);
	TextDrawLetterSize(MainMenuTxtdraw[1], 0.500000, 13.000000);
	TextDrawColor(MainMenuTxtdraw[1], 0);
	TextDrawSetOutline(MainMenuTxtdraw[1], 0);
	TextDrawSetProportional(MainMenuTxtdraw[1], 1);
	TextDrawSetShadow(MainMenuTxtdraw[1], 1);
	TextDrawUseBox(MainMenuTxtdraw[1], 1);
	TextDrawBoxColor(MainMenuTxtdraw[1], 255);
	TextDrawTextSize(MainMenuTxtdraw[1], 770.000000, 0.000000);


	// Bottom Box 2
	MainMenuTxtdraw[2] = TextDrawCreate(-1.000000, 342.000000, "BottomBox2");
	TextDrawBackgroundColor(MainMenuTxtdraw[2], 0);
	TextDrawFont(MainMenuTxtdraw[2], 1);
	TextDrawLetterSize(MainMenuTxtdraw[2], 0.839999, -0.799999);
	TextDrawColor(MainMenuTxtdraw[2], 0);
	TextDrawSetOutline(MainMenuTxtdraw[2], 0);
	TextDrawSetProportional(MainMenuTxtdraw[2], 1);
	TextDrawSetShadow(MainMenuTxtdraw[2], 1);
	TextDrawUseBox(MainMenuTxtdraw[2], 1);
	TextDrawBoxColor(MainMenuTxtdraw[2], 6730751);
	TextDrawTextSize(MainMenuTxtdraw[2], 677.000000, 131.000000);


	// Top Box 1
	MainMenuTxtdraw[3] = TextDrawCreate(-10.000000, 102.000000, "TopBox1");
	TextDrawBackgroundColor(MainMenuTxtdraw[3], 6730751);
	TextDrawFont(MainMenuTxtdraw[3], 1);
	TextDrawLetterSize(MainMenuTxtdraw[3], 0.500000, 0.199999);
	TextDrawColor(MainMenuTxtdraw[3], 0);
	TextDrawSetOutline(MainMenuTxtdraw[3], 0);
	TextDrawSetProportional(MainMenuTxtdraw[3], 1);
	TextDrawSetShadow(MainMenuTxtdraw[3], 1);
	TextDrawUseBox(MainMenuTxtdraw[3], 1);
	TextDrawBoxColor(MainMenuTxtdraw[3], 6730751);
	TextDrawTextSize(MainMenuTxtdraw[3], 770.000000, 138.000000);


	// Title
	MainMenuTxtdraw[4] = TextDrawCreate(263.000000, 10.000000, "Intense Role-Play");
	TextDrawBackgroundColor(MainMenuTxtdraw[4], 255);
	TextDrawFont(MainMenuTxtdraw[4], 2);
	TextDrawLetterSize(MainMenuTxtdraw[4], 0.910000, 4.400001);
	TextDrawColor(MainMenuTxtdraw[4], -1);
	TextDrawSetOutline(MainMenuTxtdraw[4], 0);
	TextDrawSetProportional(MainMenuTxtdraw[4], 1);
	TextDrawSetShadow(MainMenuTxtdraw[4], 1);


	// Subtitle
	MainMenuTxtdraw[5] = TextDrawCreate(256.000000, 45.000000, "Intense Role-Play");
	TextDrawBackgroundColor(MainMenuTxtdraw[5], 255);
	TextDrawFont(MainMenuTxtdraw[5], 2);
	TextDrawLetterSize(MainMenuTxtdraw[5], 0.200000, 1.200001);
	TextDrawColor(MainMenuTxtdraw[5], -1);
	TextDrawSetOutline(MainMenuTxtdraw[5], 0);
	TextDrawSetProportional(MainMenuTxtdraw[5], 1);
	TextDrawSetShadow(MainMenuTxtdraw[5], 1);


	// Version
	MainMenuTxtdraw[6] = TextDrawCreate(283.000000, 58.000000, "I:RP V.2.0(June. 19)");
	TextDrawBackgroundColor(MainMenuTxtdraw[6], 255);
	TextDrawFont(MainMenuTxtdraw[6], 2);
	TextDrawLetterSize(MainMenuTxtdraw[6], 0.200000, 1.200001);
	TextDrawColor(MainMenuTxtdraw[6], -65281);
	TextDrawSetOutline(MainMenuTxtdraw[6], 0);
	TextDrawSetProportional(MainMenuTxtdraw[6], 1);
	TextDrawSetShadow(MainMenuTxtdraw[6], 1);



	//------------------------------------------------------------------------------------------------------------
	// Tutorial text draws
	//------------------------------------------------------------------------------------------------------------
	TutTxtDraw[0] = TextDrawCreate(487.000000, 303.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[0], 255);
	TextDrawFont(TutTxtDraw[0], 2);
	TextDrawLetterSize(TutTxtDraw[0], 0.000000, 12.800003);
	TextDrawColor(TutTxtDraw[0], -1061109505);
	TextDrawSetOutline(TutTxtDraw[0], 0);
	TextDrawSetProportional(TutTxtDraw[0], 1);
	TextDrawSetShadow(TutTxtDraw[0], 1);
	TextDrawUseBox(TutTxtDraw[0], 1);
	TextDrawBoxColor(TutTxtDraw[0], 170);
	TextDrawTextSize(TutTxtDraw[0], 146.000000, 45.000000);

	TutTxtDraw[1] = TextDrawCreate(487.000000, 303.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[1], 255);
	TextDrawFont(TutTxtDraw[1], 1);
	TextDrawLetterSize(TutTxtDraw[1], 0.000000, -1.000000);
	TextDrawColor(TutTxtDraw[1], -1);
	TextDrawSetOutline(TutTxtDraw[1], 0);
	TextDrawSetProportional(TutTxtDraw[1], 1);
	TextDrawSetShadow(TutTxtDraw[1], 1);
	TextDrawUseBox(TutTxtDraw[1], 1);
	TextDrawBoxColor(TutTxtDraw[1], 255);
	TextDrawTextSize(TutTxtDraw[1], 146.000000, -2.000000);

	TutTxtDraw[2] = TextDrawCreate(487.000000, 427.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[2], 255);
	TextDrawFont(TutTxtDraw[2], 1);
	TextDrawLetterSize(TutTxtDraw[2], 0.000000, -1.000000);
	TextDrawColor(TutTxtDraw[2], -1);
	TextDrawSetOutline(TutTxtDraw[2], 0);
	TextDrawSetProportional(TutTxtDraw[2], 1);
	TextDrawSetShadow(TutTxtDraw[2], 1);
	TextDrawUseBox(TutTxtDraw[2], 1);
	TextDrawBoxColor(TutTxtDraw[2], 255);
	TextDrawTextSize(TutTxtDraw[2], 146.000000, -2.000000);

	TutTxtDraw[3] = TextDrawCreate(147.000000, 299.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[3], 255);
	TextDrawFont(TutTxtDraw[3], 1);
	TextDrawLetterSize(TutTxtDraw[3], 0.000000, 13.600002);
	TextDrawColor(TutTxtDraw[3], -1);
	TextDrawSetOutline(TutTxtDraw[3], 0);
	TextDrawSetProportional(TutTxtDraw[3], 1);
	TextDrawSetShadow(TutTxtDraw[3], 1);
	TextDrawUseBox(TutTxtDraw[3], 1);
	TextDrawBoxColor(TutTxtDraw[3], 255);
	TextDrawTextSize(TutTxtDraw[3], 146.000000, 28.000000);

	TutTxtDraw[4] = TextDrawCreate(487.000000, 299.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[4], 255);
	TextDrawFont(TutTxtDraw[4], 1);
	TextDrawLetterSize(TutTxtDraw[4], 0.000000, 13.600002);
	TextDrawColor(TutTxtDraw[4], -1);
	TextDrawSetOutline(TutTxtDraw[4], 0);
	TextDrawSetProportional(TutTxtDraw[4], 1);
	TextDrawSetShadow(TutTxtDraw[4], 1);
	TextDrawUseBox(TutTxtDraw[4], 1);
	TextDrawBoxColor(TutTxtDraw[4], 255);
	TextDrawTextSize(TutTxtDraw[4], 486.000000, 34.000000);


	//
	// FIRST TUTORIAL TEXT
	//
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	TutTxtDraw[6] = TextDrawCreate(166.000000, 331.000000, "This is a roleplay server, which means that you take on");
	TextDrawBackgroundColor(TutTxtDraw[6], 255);
	TextDrawFont(TutTxtDraw[6], 1);
	TextDrawLetterSize(TutTxtDraw[6], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[6], -1);
	TextDrawSetOutline(TutTxtDraw[6], 0);
	TextDrawSetProportional(TutTxtDraw[6], 1);
	TextDrawSetShadow(TutTxtDraw[6], 2);

	TutTxtDraw[7] = TextDrawCreate(166.000000, 344.000000, "a role and play a character. Be it a crook, an officer of the law or just a regular citizen.");
	TextDrawBackgroundColor(TutTxtDraw[7], 255);
	TextDrawFont(TutTxtDraw[7], 1);
	TextDrawLetterSize(TutTxtDraw[7], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[7], -1);
	TextDrawSetOutline(TutTxtDraw[7], 0);
	TextDrawSetProportional(TutTxtDraw[7], 1);
	TextDrawSetShadow(TutTxtDraw[7], 2);

	TutTxtDraw[8] = TextDrawCreate(166.000000, 368.000000, "This also means that there is a difference between you as player and your character.");
	TextDrawBackgroundColor(TutTxtDraw[8], 255);
	TextDrawFont(TutTxtDraw[8], 1);
	TextDrawLetterSize(TutTxtDraw[8], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[8], -1);
	TextDrawSetOutline(TutTxtDraw[8], 0);
	TextDrawSetProportional(TutTxtDraw[8], 1);
	TextDrawSetShadow(TutTxtDraw[8], 2);

	TutTxtDraw[9] = TextDrawCreate(166.000000, 381.000000, "We refer to this as OOC (out of character) and IC (in character). This is something");
	TextDrawBackgroundColor(TutTxtDraw[9], 255);
	TextDrawFont(TutTxtDraw[9], 1);
	TextDrawLetterSize(TutTxtDraw[9], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[9], -1);
	TextDrawSetOutline(TutTxtDraw[9], 0);
	TextDrawSetProportional(TutTxtDraw[9], 1);
	TextDrawSetShadow(TutTxtDraw[9], 2);

	TutTxtDraw[10] = TextDrawCreate(166.000000, 394.000000, "that is an essential part of the server, therefore we keep them separate.");
	TextDrawBackgroundColor(TutTxtDraw[10], 255);
	TextDrawFont(TutTxtDraw[10], 1);
	TextDrawLetterSize(TutTxtDraw[10], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[10], -1);
	TextDrawSetOutline(TutTxtDraw[10], 0);
	TextDrawSetProportional(TutTxtDraw[10], 1);
	TextDrawSetShadow(TutTxtDraw[10], 2);

	//
	// SECOND TUTORIAL TEXT
	//
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	TutTxtDraw[11] = TextDrawCreate(166.000000, 331.000000, "You can earn money by manyways.");
	TextDrawBackgroundColor(TutTxtDraw[11], 255);
	TextDrawFont(TutTxtDraw[11], 1);
	TextDrawLetterSize(TutTxtDraw[11], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[11], -1);
	TextDrawSetOutline(TutTxtDraw[11], 0);
	TextDrawSetProportional(TutTxtDraw[11], 1);
	TextDrawSetShadow(TutTxtDraw[11], 2);

	TutTxtDraw[12] = TextDrawCreate(166.000000, 344.000000, "We recommend that you try Trucker or Pizza Boy Job first to earn some money");
	TextDrawBackgroundColor(TutTxtDraw[12], 255);
	TextDrawFont(TutTxtDraw[12], 1);
	TextDrawLetterSize(TutTxtDraw[12], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[12], -1);
	TextDrawSetOutline(TutTxtDraw[12], 0);
	TextDrawSetProportional(TutTxtDraw[12], 1);
	TextDrawSetShadow(TutTxtDraw[12], 2);

	TutTxtDraw[13] = TextDrawCreate(166.000000, 357.000000, "starting cash. You can find a job with the ~r~/findjob ~w~command.");
	TextDrawBackgroundColor(TutTxtDraw[13], 255);
	TextDrawFont(TutTxtDraw[13], 1);
	TextDrawLetterSize(TutTxtDraw[13], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[13], -1);
	TextDrawSetOutline(TutTxtDraw[13], 0);
	TextDrawSetProportional(TutTxtDraw[13], 1);
	TextDrawSetShadow(TutTxtDraw[13], 2);

	TutTxtDraw[14] = TextDrawCreate(166.000000, 381.000000, "You can also use the ~r~/jobhelp ~w~command to get more information about the jobs.");
	TextDrawBackgroundColor(TutTxtDraw[14], 255);
	TextDrawFont(TutTxtDraw[14], 1);
	TextDrawLetterSize(TutTxtDraw[14], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[14], -1);
	TextDrawSetOutline(TutTxtDraw[14], 0);
	TextDrawSetProportional(TutTxtDraw[14], 1);
	TextDrawSetShadow(TutTxtDraw[14], 2);

	TutTxtDraw[15] = TextDrawCreate(166.000000, 394.000000, "You can ~r~/withdraw ~w~and ~r~/deposit ~w~at the bank whenever you wish.");
	TextDrawBackgroundColor(TutTxtDraw[15], 255);
	TextDrawFont(TutTxtDraw[15], 1);
	TextDrawLetterSize(TutTxtDraw[15], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[15], -1);
	TextDrawSetOutline(TutTxtDraw[15], 0);
	TextDrawSetProportional(TutTxtDraw[15], 1);
	TextDrawSetShadow(TutTxtDraw[15], 2);

	//
	// THIRD TUTORIAL TEXT
	//
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	TutTxtDraw[16] = TextDrawCreate(166.000000, 331.000000, "There are several law enforcement agencies such as the ~b~NYPD ~w~and the ~b~FBI~w~, who enforce");
	TextDrawBackgroundColor(TutTxtDraw[16], 255);
	TextDrawFont(TutTxtDraw[16], 1);
	TextDrawLetterSize(TutTxtDraw[16], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[16], -1);
	TextDrawSetOutline(TutTxtDraw[16], 0);
	TextDrawSetProportional(TutTxtDraw[16], 1);
	TextDrawSetShadow(TutTxtDraw[16], 2);

	TutTxtDraw[17] = TextDrawCreate(166.000000, 344.000000, "the law. They will arrest you if you break the law. If you cause a lot of trouble then");
	TextDrawBackgroundColor(TutTxtDraw[17], 255);
	TextDrawFont(TutTxtDraw[17], 1);
	TextDrawLetterSize(TutTxtDraw[17], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[17], -1);
	TextDrawSetOutline(TutTxtDraw[17], 0);
	TextDrawSetProportional(TutTxtDraw[17], 1);
	TextDrawSetShadow(TutTxtDraw[17], 2);

	TutTxtDraw[18] = TextDrawCreate(166.000000, 357.000000, "you could be marked as one of the most wanted suspects. Which will mark you ~r~red");
	TextDrawBackgroundColor(TutTxtDraw[18], 255);
	TextDrawFont(TutTxtDraw[18], 1);
	TextDrawLetterSize(TutTxtDraw[18], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[18], -1);
	TextDrawSetOutline(TutTxtDraw[18], 0);
	TextDrawSetProportional(TutTxtDraw[18], 1);
	TextDrawSetShadow(TutTxtDraw[18], 2);

	TutTxtDraw[19] = TextDrawCreate(166.000000, 371.000000, "on the radar/map. If you're caught as the most wanted suspect, then you will be");
	TextDrawBackgroundColor(TutTxtDraw[19], 255);
	TextDrawFont(TutTxtDraw[19], 1);
	TextDrawLetterSize(TutTxtDraw[19], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[19], -1);
	TextDrawSetOutline(TutTxtDraw[19], 0);
	TextDrawSetProportional(TutTxtDraw[19], 1);
	TextDrawSetShadow(TutTxtDraw[19], 2);

	TutTxtDraw[20] = TextDrawCreate(166.000000, 385.000000, "sent to prison. If you can't do the time, then don't do the crime.");
	TextDrawBackgroundColor(TutTxtDraw[20], 255);
	TextDrawFont(TutTxtDraw[20], 1);
	TextDrawLetterSize(TutTxtDraw[20], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[20], -1);
	TextDrawSetOutline(TutTxtDraw[20], 0);
	TextDrawSetProportional(TutTxtDraw[20], 1);
	TextDrawSetShadow(TutTxtDraw[20], 2);

	TutTxtDraw[21] = TextDrawCreate(166.000000, 398.000000, "You can also join these factions. Just contact them in-game (blue names) or visit our forums.");
	TextDrawBackgroundColor(TutTxtDraw[21], 255);
	TextDrawFont(TutTxtDraw[21], 1);
	TextDrawLetterSize(TutTxtDraw[21], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[21], -1);
	TextDrawSetOutline(TutTxtDraw[21], 0);
	TextDrawSetProportional(TutTxtDraw[21], 1);
	TextDrawSetShadow(TutTxtDraw[21], 2);

	//
	// FOURTH TUTORIAL TEXT
	//
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	TutTxtDraw[22] = TextDrawCreate(166.000000, 331.000000, "If you get injured then you can either ~r~/accept death ~w~or you can ~r~/service ems ~w~and wait");
	TextDrawBackgroundColor(TutTxtDraw[22], 255);
	TextDrawFont(TutTxtDraw[22], 1);
	TextDrawLetterSize(TutTxtDraw[22], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[22], -1);
	TextDrawSetOutline(TutTxtDraw[22], 0);
	TextDrawSetProportional(TutTxtDraw[22], 1);
	TextDrawSetShadow(TutTxtDraw[22], 2);

	TutTxtDraw[23] = TextDrawCreate(166.000000, 344.000000, "for an ambulance of the LSFMD to arrive. This will allow you to keep your weapons.");
	TextDrawBackgroundColor(TutTxtDraw[23], 255);
	TextDrawFont(TutTxtDraw[23], 1);
	TextDrawLetterSize(TutTxtDraw[23], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[23], -1);
	TextDrawSetOutline(TutTxtDraw[23], 0);
	TextDrawSetProportional(TutTxtDraw[23], 1);
	TextDrawSetShadow(TutTxtDraw[23], 2);

	TutTxtDraw[24] = TextDrawCreate(166.000000, 357.000000, "You can also join the LSFMD faction by contacting them in-game (pink names) or");
	TextDrawBackgroundColor(TutTxtDraw[24], 255);
	TextDrawFont(TutTxtDraw[24], 1);
	TextDrawLetterSize(TutTxtDraw[24], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[24], -1);
	TextDrawSetOutline(TutTxtDraw[24], 0);
	TextDrawSetProportional(TutTxtDraw[24], 1);
	TextDrawSetShadow(TutTxtDraw[24], 2);

	TutTxtDraw[25] = TextDrawCreate(166.000000, 371.000000, "by applying to join on the forum, which can be found at ~g~www.intenseroleplay.tk");
	TextDrawBackgroundColor(TutTxtDraw[25], 255);
	TextDrawFont(TutTxtDraw[25], 1);
	TextDrawLetterSize(TutTxtDraw[25], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[25], -1);
	TextDrawSetOutline(TutTxtDraw[25], 0);
	TextDrawSetProportional(TutTxtDraw[25], 1);
	TextDrawSetShadow(TutTxtDraw[25], 2);

	TutTxtDraw[26] = TextDrawCreate(166.000000, 394.000000, "You can also visit one of the hospitals to ~r~/heal ~w~if you get a disease.");
	TextDrawBackgroundColor(TutTxtDraw[26], 255);
	TextDrawFont(TutTxtDraw[26], 1);
	TextDrawLetterSize(TutTxtDraw[26], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[26], -1);
	TextDrawSetOutline(TutTxtDraw[26], 0);
	TextDrawSetProportional(TutTxtDraw[26], 1);
	TextDrawSetShadow(TutTxtDraw[26], 2);

	//
	// FIFTH TUTORIAL TEXT
	//
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	TutTxtDraw[27] = TextDrawCreate(166.000000, 331.000000, "There are also ~r~/families ~w~which are basically criminal groups. There are street gangs and");
	TextDrawBackgroundColor(TutTxtDraw[27], 255);
	TextDrawFont(TutTxtDraw[27], 1);
	TextDrawLetterSize(TutTxtDraw[27], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[27], -1);
	TextDrawSetOutline(TutTxtDraw[27], 0);
	TextDrawSetProportional(TutTxtDraw[27], 1);
	TextDrawSetShadow(TutTxtDraw[27], 2);

	TutTxtDraw[28] = TextDrawCreate(166.000000, 344.000000, "then there is organized crime (the mafia). We recommend that you're careful around");
	TextDrawBackgroundColor(TutTxtDraw[28], 255);
	TextDrawFont(TutTxtDraw[28], 1);
	TextDrawLetterSize(TutTxtDraw[28], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[28], -1);
	TextDrawSetOutline(TutTxtDraw[28], 0);
	TextDrawSetProportional(TutTxtDraw[28], 1);
	TextDrawSetShadow(TutTxtDraw[28], 2);

	TutTxtDraw[29] = TextDrawCreate(166.000000, 357.000000, "them. They also fight over several territories known as ~r~/points~w~.");
	TextDrawBackgroundColor(TutTxtDraw[29], 255);
	TextDrawFont(TutTxtDraw[29], 1);
	TextDrawLetterSize(TutTxtDraw[29], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[29], -1);
	TextDrawSetOutline(TutTxtDraw[29], 0);
	TextDrawSetProportional(TutTxtDraw[29], 1);
	TextDrawSetShadow(TutTxtDraw[29], 2);

	TutTxtDraw[30] = TextDrawCreate(166.000000, 381.000000, "You can join a family by approaching them in-game. They can usually be found at their");
	TextDrawBackgroundColor(TutTxtDraw[30], 255);
	TextDrawFont(TutTxtDraw[30], 1);
	TextDrawLetterSize(TutTxtDraw[30], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[30], -1);
	TextDrawSetOutline(TutTxtDraw[30], 0);
	TextDrawSetProportional(TutTxtDraw[30], 1);
	TextDrawSetShadow(TutTxtDraw[30], 2);

	TutTxtDraw[31] = TextDrawCreate(166.000000, 394.000000, "respective headquarters (fronts). Which can be clubs, restaurants, bars etc.");
	TextDrawBackgroundColor(TutTxtDraw[31], 255);
	TextDrawFont(TutTxtDraw[31], 1);
	TextDrawLetterSize(TutTxtDraw[31], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[31], -1);
	TextDrawSetOutline(TutTxtDraw[31], 0);
	TextDrawSetProportional(TutTxtDraw[31], 1);
	TextDrawSetShadow(TutTxtDraw[31], 2);

	//
	// SIXTH TUTORIAL TEXT
	//
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	TutTxtDraw[32] = TextDrawCreate(166.000000, 331.000000, "You can smuggle materials packages to get materials, which then allows you to make");
	TextDrawBackgroundColor(TutTxtDraw[32], 255);
	TextDrawFont(TutTxtDraw[32], 1);
	TextDrawLetterSize(TutTxtDraw[32], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[32], -1);
	TextDrawSetOutline(TutTxtDraw[32], 0);
	TextDrawSetProportional(TutTxtDraw[32], 1);
	TextDrawSetShadow(TutTxtDraw[32], 2);

	TutTxtDraw[33] = TextDrawCreate(166.000000, 344.000000, "several items (including weapons). You need the Arms Dealer or Craftsman job for this.");
	TextDrawBackgroundColor(TutTxtDraw[33], 255);
	TextDrawFont(TutTxtDraw[33], 1);
	TextDrawLetterSize(TutTxtDraw[33], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[33], -1);
	TextDrawSetOutline(TutTxtDraw[33], 0);
	TextDrawSetProportional(TutTxtDraw[33], 1);
	TextDrawSetShadow(TutTxtDraw[33], 2);

	TutTxtDraw[34] = TextDrawCreate(166.000000, 357.000000, "You will be able to ~r~/getmats ~w~at one of the material pickups and then deliver it to one of");
	TextDrawBackgroundColor(TutTxtDraw[34], 255);
	TextDrawFont(TutTxtDraw[34], 1);
	TextDrawLetterSize(TutTxtDraw[34], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[34], -1);
	TextDrawSetOutline(TutTxtDraw[34], 0);
	TextDrawSetProportional(TutTxtDraw[34], 1);
	TextDrawSetShadow(TutTxtDraw[34], 2);

	TutTxtDraw[35] = TextDrawCreate(166.000000, 371.000000, "the material factories. Then you can either ~r~/sellgun ~w~or ~r~/craft ~w~something.");
	TextDrawBackgroundColor(TutTxtDraw[35], 255);
	TextDrawFont(TutTxtDraw[35], 1);
	TextDrawLetterSize(TutTxtDraw[35], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[35], -1);
	TextDrawSetOutline(TutTxtDraw[35], 0);
	TextDrawSetProportional(TutTxtDraw[35], 1);
	TextDrawSetShadow(TutTxtDraw[35], 2);

	TutTxtDraw[36] = TextDrawCreate(166.000000, 391.000000, "You can get more information about this with the ~r~/jobhelp ~w~command.");
	TextDrawBackgroundColor(TutTxtDraw[36], 255);
	TextDrawFont(TutTxtDraw[36], 1);
	TextDrawLetterSize(TutTxtDraw[36], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[36], -1);
	TextDrawSetOutline(TutTxtDraw[36], 0);
	TextDrawSetProportional(TutTxtDraw[36], 1);
	TextDrawSetShadow(TutTxtDraw[36], 2);

	//
	// SEVENTH TUTORIAL TEXT
	//
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	TutTxtDraw[37] = TextDrawCreate(166.000000, 331.000000, "You can also smuggle drugs from Blueberry into Los Santos. This requires you to have");
	TextDrawBackgroundColor(TutTxtDraw[37], 255);
	TextDrawFont(TutTxtDraw[37], 1);
	TextDrawLetterSize(TutTxtDraw[37], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[37], -1);
	TextDrawSetOutline(TutTxtDraw[37], 0);
	TextDrawSetProportional(TutTxtDraw[37], 1);
	TextDrawSetShadow(TutTxtDraw[37], 2);

	TutTxtDraw[38] = TextDrawCreate(166.000000, 344.000000, "the Drug Smuggler Job. You can then ~r~/getcrate ~w~and smuggle crack or pot.");
	TextDrawBackgroundColor(TutTxtDraw[38], 255);
	TextDrawFont(TutTxtDraw[38], 1);
	TextDrawLetterSize(TutTxtDraw[38], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[38], -1);
	TextDrawSetOutline(TutTxtDraw[38], 0);
	TextDrawSetProportional(TutTxtDraw[38], 1);
	TextDrawSetShadow(TutTxtDraw[38], 2);

	TutTxtDraw[39] = TextDrawCreate(166.000000, 367.000000, "You can also sell and grow drugs with the Drug Dealer Job. You will be able to:");
	TextDrawBackgroundColor(TutTxtDraw[39], 255);
	TextDrawFont(TutTxtDraw[39], 1);
	TextDrawLetterSize(TutTxtDraw[39], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[39], -1);
	TextDrawSetOutline(TutTxtDraw[39], 0);
	TextDrawSetProportional(TutTxtDraw[39], 1);
	TextDrawSetShadow(TutTxtDraw[39], 2);

	TutTxtDraw[40] = TextDrawCreate(166.000000, 381.000000, "- ~r~/sellpot ~w~and ~r~/sellcrack");
	TextDrawBackgroundColor(TutTxtDraw[40], 255);
	TextDrawFont(TutTxtDraw[40], 1);
	TextDrawLetterSize(TutTxtDraw[40], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[40], -1);
	TextDrawSetOutline(TutTxtDraw[40], 0);
	TextDrawSetProportional(TutTxtDraw[40], 1);
	TextDrawSetShadow(TutTxtDraw[40], 2);

	TutTxtDraw[41] = TextDrawCreate(166.000000, 394.000000, "- ~r~/plantweed ~w~anywhere and grow weed");
	TextDrawBackgroundColor(TutTxtDraw[41], 255);
	TextDrawFont(TutTxtDraw[41], 1);
	TextDrawLetterSize(TutTxtDraw[41], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[41], -1);
	TextDrawSetOutline(TutTxtDraw[41], 0);
	TextDrawSetProportional(TutTxtDraw[41], 1);
	TextDrawSetShadow(TutTxtDraw[41], 2);

	//
	// EIGHT TUTORIAL TEXT
	//
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	TutTxtDraw[42] = TextDrawCreate(166.000000, 331.000000, "This is a car dealership. There are several throughout the city where you can purchase");
	TextDrawBackgroundColor(TutTxtDraw[42], 255);
	TextDrawFont(TutTxtDraw[42], 1);
	TextDrawLetterSize(TutTxtDraw[42], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[42], -1);
	TextDrawSetOutline(TutTxtDraw[42], 0);
	TextDrawSetProportional(TutTxtDraw[42], 1);
	TextDrawSetShadow(TutTxtDraw[42], 2);

	TutTxtDraw[43] = TextDrawCreate(166.000000, 344.000000, "your own personal vehicle with lock. You can own up to 5 vehicles as a regular player,");
	TextDrawBackgroundColor(TutTxtDraw[43], 255);
	TextDrawFont(TutTxtDraw[43], 1);
	TextDrawLetterSize(TutTxtDraw[43], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[43], -1);
	TextDrawSetOutline(TutTxtDraw[43], 0);
	TextDrawSetProportional(TutTxtDraw[43], 1);
	TextDrawSetShadow(TutTxtDraw[43], 2);

	TutTxtDraw[44] = TextDrawCreate(166.000000, 357.000000, "and have one spawned at a time. The modifications on personal vehicles will save.");
	TextDrawBackgroundColor(TutTxtDraw[44], 255);
	TextDrawFont(TutTxtDraw[44], 1);
	TextDrawLetterSize(TutTxtDraw[44], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[44], -1);
	TextDrawSetOutline(TutTxtDraw[44], 0);
	TextDrawSetProportional(TutTxtDraw[44], 1);
	TextDrawSetShadow(TutTxtDraw[44], 2);

	TutTxtDraw[45] = TextDrawCreate(166.000000, 371.000000, "See ~r~/carhelp ~w~for more information.");
	TextDrawBackgroundColor(TutTxtDraw[45], 255);
	TextDrawFont(TutTxtDraw[45], 1);
	TextDrawLetterSize(TutTxtDraw[45], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[45], -1);
	TextDrawSetOutline(TutTxtDraw[45], 0);
	TextDrawSetProportional(TutTxtDraw[45], 1);
	TextDrawSetShadow(TutTxtDraw[45], 2);

	TutTxtDraw[46] = TextDrawCreate(166.000000, 385.000000, "And this is a house. If you own a house then you can store several items inside.");
	TextDrawBackgroundColor(TutTxtDraw[46], 255);
	TextDrawFont(TutTxtDraw[46], 1);
	TextDrawLetterSize(TutTxtDraw[46], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[46], -1);
	TextDrawSetOutline(TutTxtDraw[46], 0);
	TextDrawSetProportional(TutTxtDraw[46], 1);
	TextDrawSetShadow(TutTxtDraw[46], 2);

	TutTxtDraw[47] = TextDrawCreate(166.000000, 397.000000, "You can also rent a house. See ~r~/househelp ~w~and ~r~/renthelp ~w~for more information.");
	TextDrawBackgroundColor(TutTxtDraw[47], 255);
	TextDrawFont(TutTxtDraw[47], 1);
	TextDrawLetterSize(TutTxtDraw[47], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[47], -1);
	TextDrawSetOutline(TutTxtDraw[47], 0);
	TextDrawSetProportional(TutTxtDraw[47], 1);
	TextDrawSetShadow(TutTxtDraw[47], 2);

	//
	// NINTH TUTORIAL TEXT
	//
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	TutTxtDraw[48] = TextDrawCreate(166.000000, 331.000000, "We are sure you want to get to playing already, so the tutorial is almost done!");
	TextDrawBackgroundColor(TutTxtDraw[48], 255);
	TextDrawFont(TutTxtDraw[48], 1);
	TextDrawLetterSize(TutTxtDraw[48], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[48], -1);
	TextDrawSetOutline(TutTxtDraw[48], 0);
	TextDrawSetProportional(TutTxtDraw[48], 1);
	TextDrawSetShadow(TutTxtDraw[48], 2);

	TutTxtDraw[49] = TextDrawCreate(166.000000, 344.000000, "- This is a 24/7 store. You can ~r~/buy ~w~several items (i.e. a phone) inside.");
	TextDrawBackgroundColor(TutTxtDraw[49], 255);
	TextDrawFont(TutTxtDraw[49], 1);
	TextDrawLetterSize(TutTxtDraw[49], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[49], -1);
	TextDrawSetOutline(TutTxtDraw[49], 0);
	TextDrawSetProportional(TutTxtDraw[49], 1);
	TextDrawSetShadow(TutTxtDraw[49], 2);

	TutTxtDraw[50] = TextDrawCreate(166.000000, 357.000000, "- This is a clothing store. You can ~r~/buyclothes ~w~to get a different skin or");
	TextDrawBackgroundColor(TutTxtDraw[50], 255);
	TextDrawFont(TutTxtDraw[50], 1);
	TextDrawLetterSize(TutTxtDraw[50], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[50], -1);
	TextDrawSetOutline(TutTxtDraw[50], 0);
	TextDrawSetProportional(TutTxtDraw[50], 1);
	TextDrawSetShadow(TutTxtDraw[50], 2);

	TutTxtDraw[51] = TextDrawCreate(172.000000, 371.000000, "~r~/buytoys ~w~to get some accessories for your character.");
	TextDrawBackgroundColor(TutTxtDraw[51], 255);
	TextDrawFont(TutTxtDraw[51], 1);
	TextDrawLetterSize(TutTxtDraw[51], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[51], -1);
	TextDrawSetOutline(TutTxtDraw[51], 0);
	TextDrawSetProportional(TutTxtDraw[51], 1);
	TextDrawSetShadow(TutTxtDraw[51], 2);

	TutTxtDraw[52] = TextDrawCreate(166.000000, 384.000000, "- Remember to check out ~r~/rules ~w~and ~r~/help~w~.");
	TextDrawBackgroundColor(TutTxtDraw[48], 255);
	TextDrawFont(TutTxtDraw[52], 1);
	TextDrawLetterSize(TutTxtDraw[52], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[52], -1);
	TextDrawSetOutline(TutTxtDraw[52], 0);
	TextDrawSetProportional(TutTxtDraw[52], 1);
	TextDrawSetShadow(TutTxtDraw[52], 2);

	TutTxtDraw[53] = TextDrawCreate(166.000000, 398.000000, "- You will not be able to use weapons for the first 2 hours you play.");
	TextDrawBackgroundColor(TutTxtDraw[53], 255);
	TextDrawFont(TutTxtDraw[53], 1);
	TextDrawLetterSize(TutTxtDraw[53], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[53], -1);
	TextDrawSetOutline(TutTxtDraw[48], 0);
	TextDrawSetProportional(TutTxtDraw[48], 1);
	TextDrawSetShadow(TutTxtDraw[48], 2);
	// Bank Robbery
	Textdraw0 = TextDrawCreate(490.000000, 155.000000, "~r~Bank Robbers:");
	TextDrawBackgroundColor(Textdraw0, 255);
	TextDrawFont(Textdraw0, 1);
	TextDrawLetterSize(Textdraw0, 0.450000, 1.300000);
	TextDrawColor(Textdraw0, -1);
	TextDrawSetOutline(Textdraw0, 1);
	TextDrawSetProportional(Textdraw0, 1);

	Textdraw1 = TextDrawCreate(490.000000, 171.000000, "Robber 1");
	TextDrawBackgroundColor(Textdraw1, 255);
	TextDrawFont(Textdraw1, 1);
	TextDrawLetterSize(Textdraw1, 0.450000, 1.300000);
	TextDrawColor(Textdraw1, -1);
	TextDrawSetOutline(Textdraw1, 1);
	TextDrawSetProportional(Textdraw1, 1);

	Textdraw2 = TextDrawCreate(490.000000, 185.000000, "Robber 2");
	TextDrawBackgroundColor(Textdraw2, 255);
	TextDrawFont(Textdraw2, 1);
	TextDrawLetterSize(Textdraw2, 0.450000, 1.300000);
	TextDrawColor(Textdraw2, -1);
	TextDrawSetOutline(Textdraw2, 1);
	TextDrawSetProportional(Textdraw2, 1);

	Textdraw3 = TextDrawCreate(490.000000, 199.000000, "Robber 3");
	TextDrawBackgroundColor(Textdraw3, 255);
	TextDrawFont(Textdraw3, 1);
	TextDrawLetterSize(Textdraw3, 0.450000, 1.300000);
	TextDrawColor(Textdraw3, -1);
	TextDrawSetOutline(Textdraw3, 1);
	TextDrawSetProportional(Textdraw3, 1);

	Textdraw4 = TextDrawCreate(490.000000, 213.000000, "Robber 4");
	TextDrawBackgroundColor(Textdraw4, 255);
	TextDrawFont(Textdraw4, 1);
	TextDrawLetterSize(Textdraw4, 0.450000, 1.300000);
	TextDrawColor(Textdraw4, -1);
	TextDrawSetOutline(Textdraw4, 1);
	TextDrawSetProportional(Textdraw4, 1);

	Textdraw5 = TextDrawCreate(490.000000, 227.000000, "Robber 5");
	TextDrawBackgroundColor(Textdraw5, 255);
	TextDrawFont(Textdraw5, 1);
	TextDrawLetterSize(Textdraw5, 0.450000, 1.300000);
	TextDrawColor(Textdraw5, -1);
	TextDrawSetOutline(Textdraw5, 1);
	TextDrawSetProportional(Textdraw5, 1);
	// Timers
	SetTimer("Clock", 1000, true);
	SetTimer("ADTimer", 1000, true);
	SetTimer("NOPSetPlayerPos", 1000, true);
	SetTimer("SaveServer", 3600000, true);
	SetTimer("AltTabTimer", 1000, true);
	SetTimer("WeaponCheat", 1000, true);
	SetTimer("FuelTimer", 1000, true);
	SetTimer("PrisonTimer", 1000, true);
	SetTimer("LoyalFeatures", 60000, true);
	for(new i=0; i<MAX_VEHICLES; i++)
	{
	    Fuel[i] = 100;
	    SetVehicleToRespawn(i);
	}
   	for (new x=0; x<MAX_VEHICLES; x++)
    {
    	LightPwr[x]=1;
     	Flasher[x]=0;
      	FlasherState[x]=0;
    }
    ConnectNPC("BusDriver", "MOLE");
	FlashTimer = SetTimer("FlasherFunc",200,1); // "200" is the speed from the flashing headlights
//	f = LoadModelSelectionMenu("planes.txt");
	//skinlist = LoadModelSelectionMenu("skins.txt");
	//planelist = LoadModelSelectionMenu("planes.txt");
		for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	return 1;
}

GetNumberOfPages()
{
	if((gTotalItems >= SELECTION_ITEMS) && (gTotalItems % SELECTION_ITEMS) == 0)
	{
		return (gTotalItems / SELECTION_ITEMS);
	}
	else return (gTotalItems / SELECTION_ITEMS) + 1;
}

public OnGameModeExit()
{
	foreach(Player, i)
    {
       	SaveChar(i);
       	ClearChar(i);
    }
	SaveFactions();
	SaveFamilies();
	SaveObjects();
	SaveObjects22();
	SavegObjects();
	SaveObjects22g();
	SavePoints();
	SaveBiz();
	Savevvveh();
	SaveHouses();
	SaveGarages();
	SaveDoors();
	SaveGates();
	SaveMapIcons();
	SaveArrestPoint();
	SaveDrugs();
	SaveProducts();
	SaveMOTDS();
	KillTimer(FlashTimer);
 	for (new i = 0; i < MAX_VEHICLES; i++)
  	{
   		DestroyObject(obj1[i]);
     	DestroyObject(obj2[i]);
  	}
	return 1;
}

new Text3D: BusText;

PlayerText:CreateCurrentPageTextDraw(playerid, Float:Xpos, Float:Ypos)
{
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, "0/0");
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

//------------------------------------------------
// Creates a button textdraw and returns the textdraw ID.

PlayerText:CreatePlayerDialogButton(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height, button_text[])
{
 	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, button_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 1);
   	PlayerTextDrawBoxColor(playerid, txtInit, 0x000000FF);
   	PlayerTextDrawBackgroundColor(playerid, txtInit, 0x000000FF);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0); // no shadow
    PlayerTextDrawSetOutline(playerid, txtInit, 0);
    PlayerTextDrawColor(playerid, txtInit, 0x4A5A6BFF);
    PlayerTextDrawSetSelectable(playerid, txtInit, 1);
    PlayerTextDrawAlignment(playerid, txtInit, 2);
    PlayerTextDrawTextSize(playerid, txtInit, Height, Width); // The width and height are reversed for centering.. something the game does <g>
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

//------------------------------------------------

PlayerText:CreatePlayerHeaderTextDraw(playerid, Float:Xpos, Float:Ypos, header_text[])
{
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, header_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 1.25, 3.0);
	PlayerTextDrawFont(playerid, txtInit, 0);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

//------------------------------------------------

PlayerText:CreatePlayerBackgroundTextDraw(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height)
{
	new PlayerText:txtBackground = CreatePlayerTextDraw(playerid, Xpos, Ypos,
	"                                            ~n~"); // enough space for everyone
    PlayerTextDrawUseBox(playerid, txtBackground, 1);
    PlayerTextDrawBoxColor(playerid, txtBackground, 0x00000099);
	PlayerTextDrawLetterSize(playerid, txtBackground, 5.0, 5.0);
	PlayerTextDrawFont(playerid, txtBackground, 0);
	PlayerTextDrawSetShadow(playerid, txtBackground, 0);
    PlayerTextDrawSetOutline(playerid, txtBackground, 0);
    PlayerTextDrawColor(playerid, txtBackground,0x000000FF);
    PlayerTextDrawTextSize(playerid, txtBackground, Width, Height);
   	PlayerTextDrawBackgroundColor(playerid, txtBackground, 0x00000099);
    PlayerTextDrawShow(playerid, txtBackground);
    return txtBackground;
}

//------------------------------------------------
// Creates a model preview sprite

PlayerText:CreateModelPreviewTextDraw(playerid, modelindex, Float:Xpos, Float:Ypos, Float:width, Float:height)
{
    new PlayerText:txtPlayerSprite = CreatePlayerTextDraw(playerid, Xpos, Ypos, ""); // it has to be set with SetText later
    PlayerTextDrawFont(playerid, txtPlayerSprite, TEXT_DRAW_FONT_MODEL_PREVIEW);
    PlayerTextDrawColor(playerid, txtPlayerSprite, 0xFFFFFFFF);
    PlayerTextDrawBackgroundColor(playerid, txtPlayerSprite, 0x000000EE);
    PlayerTextDrawTextSize(playerid, txtPlayerSprite, width, height); // Text size is the Width:Height
    PlayerTextDrawSetPreviewModel(playerid, txtPlayerSprite, modelindex);
    PlayerTextDrawSetPreviewRot(playerid,txtPlayerSprite, -16.0, 0.0, -55.0);
    PlayerTextDrawSetSelectable(playerid, txtPlayerSprite, 1);
    PlayerTextDrawShow(playerid,txtPlayerSprite);
    return txtPlayerSprite;
}

//------------------------------------------------

DestroyPlayerModelPreviews(playerid)
{
	new x=0;
	while(x != SELECTION_ITEMS) {
	    if(gSelectionItems[playerid][x] != PlayerText:INVALID_TEXT_DRAW) {
			PlayerTextDrawDestroy(playerid, gSelectionItems[playerid][x]);
			gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
		}
		x++;
	}
}

//------------------------------------------------

ShowPlayerModelPreviews(playerid)
{
    new x=0;
	new Float:BaseX = DIALOG_BASE_X;
	new Float:BaseY = DIALOG_BASE_Y - (SPRITE_DIM_Y * 0.33); // down a bit
	new linetracker = 0;

	new itemat = GetPVarInt(playerid, "vspawner_page") * SELECTION_ITEMS;

	// Destroy any previous ones created
	DestroyPlayerModelPreviews(playerid);

	while(x != SELECTION_ITEMS && itemat < gTotalItems) {
	    if(linetracker == 0) {
	        BaseX = DIALOG_BASE_X + 25.0; // in a bit from the box
	        BaseY += SPRITE_DIM_Y + 1.0; // move on the Y for the next line
		}
  		gSelectionItems[playerid][x] = CreateModelPreviewTextDraw(playerid, gItemList[itemat], BaseX, BaseY, SPRITE_DIM_X, SPRITE_DIM_Y);
  		gSelectionItemsTag[playerid][x] = gItemList[itemat];
		BaseX += SPRITE_DIM_X + 1.0; // move on the X for the next sprite
		linetracker++;
		if(linetracker == ITEMS_PER_LINE) linetracker = 0;
		itemat++;
		x++;
	}
}

//------------------------------------------------

UpdatePageTextDraw(playerid)
{
	new PageText[64+1];
	format(PageText, 64, "%d/%d", GetPVarInt(playerid,"vspawner_page") + 1, GetNumberOfPages());
	PlayerTextDrawSetString(playerid, gCurrentPageTextDrawId[playerid], PageText);
}

//------------------------------------------------

CreateSelectionMenu(playerid)
{
    gBackgroundTextDrawId[playerid] = CreatePlayerBackgroundTextDraw(playerid, DIALOG_BASE_X, DIALOG_BASE_Y + 20.0, DIALOG_WIDTH, DIALOG_HEIGHT);
    gHeaderTextDrawId[playerid] = CreatePlayerHeaderTextDraw(playerid, DIALOG_BASE_X, DIALOG_BASE_Y, HEADER_TEXT);
    gCurrentPageTextDrawId[playerid] = CreateCurrentPageTextDraw(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y + 15.0);
    gNextButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, NEXT_TEXT);
    gPrevButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 90.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, PREV_TEXT);

    ShowPlayerModelPreviews(playerid);
    UpdatePageTextDraw(playerid);
}

//------------------------------------------------

DestroySelectionMenu(playerid)
{
	DestroyPlayerModelPreviews(playerid);

	PlayerTextDrawDestroy(playerid, gHeaderTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gBackgroundTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gCurrentPageTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gNextButtonTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gPrevButtonTextDrawId[playerid]);

	gHeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gBackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gNextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gPrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
}

//------------------------------------------------

SpawnVehicle_InfrontOfPlayer(playerid, vehiclemodel, color1, color2)
{
	new Float:x,Float:y,Float:z;
	new Float:facing;
	new Float:distance;

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, facing);

    new Float:size_x,Float:size_y,Float:size_z;
	GetVehicleModelInfo(vehiclemodel, VEHICLE_MODEL_INFO_SIZE, size_x, size_y, size_z);

	distance = size_x + 0.5;

  	x += (distance * floatsin(-facing, degrees));
    y += (distance * floatcos(-facing, degrees));

	facing += 90.0;
	if(facing > 360.0) facing -= 360.0;

	return CreateVehicle(vehiclemodel, x, y, z + (size_z * 0.25), facing, color1, color2, -1);
}

//------------------------------------------------

HandlePlayerItemSelection(playerid, selecteditem)
{
 	// In this case we're spawning a vehicle for them
    SpawnVehicle_InfrontOfPlayer(playerid, gSelectionItemsTag[playerid][selecteditem], -1, -1);
}


public OnPlayerConnect(playerid)
{
	new string[128],name[128];
	GetPlayerName(playerid,name,sizeof(name));
	format(string,sizeof(string),"%s has joined the server.",name);
	SendClientMessageToAll(0xB2B2B2,string);

    format(string,sizeof(string), "http://translate.google.com/translate_tts?q=%s has connected to the server", RPN(playerid));
    RemoveBuildingForPlayer(playerid, 4222, 1575.9375, -1516.5781, 36.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 4180, 1502.6094, -1467.1250, 24.0156, 0.25);
    RemoveBuildingForPlayer(playerid, 1294, 1507.9375, -1444.8984, 17.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 1265, 1539.2344, -1481.0781, 8.9141, 0.25);
    RemoveBuildingForPlayer(playerid, 1265, 1536.5078, -1481.0938, 8.9531, 0.25);
    RemoveBuildingForPlayer(playerid, 1372, 1534.9297, -1480.9922, 8.6094, 0.25);
    RemoveBuildingForPlayer(playerid, 1265, 1537.2422, -1479.7422, 8.9453, 0.25);
    RemoveBuildingForPlayer(playerid, 1372, 1537.9297, -1480.6094, 8.6094, 0.25);
    RemoveBuildingForPlayer(playerid, 1294, 1548.2578, -1436.8672, 16.9063, 0.25);

    foreach(Player, i)
    {
        if(JoinMessages[i])
        {
        	PlayAudioStreamForPlayer(i, string);
        }
    }
	ResetPlayerWeapons(playerid);
	ResetDodWeapons(playerid);
   /* RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);*/
    if(IsPlayerNPC(playerid))
	{
		SetPlayerColor(playerid, TRANSPARENT_WHITE);
		/*BusText = Create3DTextLabel("[NPC] Bus Driver", COLOR_YELLOW, 0, 0, -20, 25, -1, 1);
		Attach3DTextLabelToPlayer(BusText, playerid, 0, 0, 0.25);*/
		BusText = CreateDynamic3DTextLabel("MOLE", COLOR_YELLOW, 0, 0, -20, 25, playerid);
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BusText , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
		return 1;
	}
    gHeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gBackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gNextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gPrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;

    for(new x=0; x < SELECTION_ITEMS; x++) {
        gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
	}

	gItemAt[playerid] = 0;
	aDuty[playerid] = 0;
	mDuty[playerid] = 0;
	//loginscreen
    TextDrawShowForPlayer(playerid,WebTD);
    TextDrawShowForPlayer(playerid,MainMenuTxtdraw[0]);
    TextDrawShowForPlayer(playerid,MainMenuTxtdraw[1]);
    TextDrawShowForPlayer(playerid,MainMenuTxtdraw[2]);
    TextDrawShowForPlayer(playerid,MainMenuTxtdraw[3]);
    TextDrawShowForPlayer(playerid,MainMenuTxtdraw[4]);
	// MAX IPS
	new connecting_ip[32+1];
	GetPlayerIp(playerid,connecting_ip,32);
	new num_players_on_ip = GetNumberOfPlayersOnThisIP(connecting_ip);

	if(num_players_on_ip > MAX_CONNECTIONS_FROM_IP) {
		printf("MAXIPs: Connecting player(%d) exceeded %d IP connections from %s.", playerid, MAX_CONNECTIONS_FROM_IP, connecting_ip);
        SendClientMessage(playerid, COLOR_LIGHTRED, "If you think its unfair ban, then appeal on forums.");
        format(string, sizeof(string), "AdmCmd: %s has been banned by MOLE, reason: Bots Attack", RPN(playerid));
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
	    // Banning
    	PlayerInfo[playerid][pBanned] = 1;
    	// Banreason
     	new file[32];
    	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
     	dini_Set(file, "BanReason", "Bots Attack");
    	dini_Set(file, "BannedBy", "MOLE");
        AddBan(playerid);
        Kick(playerid);
	    return 1;
	}
	// DONE
	ClearChar(playerid);
	// NAME CHECK
	new playername[32], pfile[64];
	format(pfile, sizeof(pfile), "users/%s.ini", RPNU(playerid));
	if(!dini_Exists(pfile))
	{
	    GetPlayerName(playerid, playername, sizeof(playername));
	    // Has numbers
	    if(strfind(playername, "0", true) != -1 || strfind(playername, "1", true) != -1 || strfind(playername, "2", true) != -1 || strfind(playername, "3", true) != -1 || strfind(playername, "4", true) != -1 || strfind(playername, "5", true) != -1
		|| strfind(playername, "6", true) != -1 || strfind(playername, "7", true) != -1 || strfind(playername, "8", true) != -1 || strfind(playername, "9", true) != -1 || strfind(playername, "[", true) != -1 || strfind(playername, "]", true) != -1)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}This is a RP Server, please reconnect using Firstname_Lastname format.");
			SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Also, please remove the numbers and/or tags in your name.");
			Kick(playerid);
		}
	    // No Underscore
		if(strfind( playername, "_", true) == -1)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}This is a RP Server, please reconnect using Firstname_Lastname format.");
			Kick(playerid);
		}
	}
	// Done
    PlayerInfo[playerid][pLoggedIn] = 0;
    PlayerInfo[playerid][pSpawn] = 0;
    PlayerInfo[playerid][pTutorial] = 1;
    PlayerPaintballing[playerid] = 0;
    //C4 done
    Pspawned[playerid] = 0;

    SetPlayerColor(playerid, TRANSPARENT_GREY);
    new file[64];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	// Checking for rangeban
	new range[4][4];
	split(RPIP(playerid), range, '.');
	format(string, sizeof(string), "%s.%s.*.*", range[0], range[1]);
	if(CheckBan(string) == 1 && !dini_Int(file, "Whitelisted"))
	{
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Your range is banned from this server. (Request getting whitelisted at www.intenseroleplay.tk)");
		Kick(playerid);
		return 1;
	}
	// Checking for IP ban
	if(CheckBan(RPIP(playerid)) == 1)
	{
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You are banned from this server. (Make a ban appeal at www.intenseroleplay.tk)");
		Kick(playerid);
		return 1;
	}
	// Checking for character ban
	if(dini_Int(file, "pBanned") == 1)
	{
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You are banned from this server. (Make a ban appeal at www.intenseroleplay.tk)");
        AddBan(playerid);
        Kick(playerid);
	    return 1;
	}
	return 1;
}

stock startTutorial(playerid){

}

stock SpawnNewbie(playerid){
	startTutorial(playerid);
}

public OnPlayerRequestClass(playerid, classid)
{
    SetPlayerVirtualWorld(playerid, 973942);
    if(IsPlayerNPC(playerid)) {SetPlayerVirtualWorld(playerid, 0); SpawnPlayer(playerid); return 1;}
    if(!PlayerInfo[playerid][pLoggedIn])
	{
		SetPlayerPos(playerid, 1975.203002, 3779.311523, -50.243506);
		SetPlayerCameraPos(playerid, 1975.203002, 3779.311523, 100.243506);
		SetPlayerCameraLookAt(playerid, 1975.203002, 3779.311523, -0.243506);
	    SetSpawnInfo(playerid, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0); // Without this you'll be kicked when you spawn. Set it to wherever you want.
        TogglePlayerSpectating(playerid, true);
        SetTimerEx("login_dialog", 100, 0, "i", playerid);
	    new file[64];
		format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	    // Player isn't banned
	    if(dini_Int(file, "AdminAccount") == 1)
		{
		    format(file, sizeof(file), "users/%s.ini",RPNU(playerid));
		    SetPlayerName(playerid, dini_Get(file, "OldName"));
		    format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		    SSSShowDialog(playerid, 2);
		}
		if(!dini_Exists(file))
		{
		    SSSShowDialog(playerid, 1);
		    return 1;
		}
		else
		{
			SSSShowDialog(playerid, 2);
		}
		return 1;
	}
	else
	{
		SetPlayerPos(playerid, 1975.203002, 3779.311523, -50.243506);
		SetPlayerCameraPos(playerid, 1975.203002, 3779.311523, 100.243506);
		SetPlayerCameraLookAt(playerid, 1975.203002, 3779.311523, -0.243506);
	    SetSpawnInfo(playerid, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0); // Without this you'll be kicked when you spawn. Set it to wherever you want.
        TogglePlayerSpectating(playerid, true);
        SetTimerEx("login_dialog", 100, 0, "i", playerid);
		SpawnPlayer(playerid);
	}
	return 1;
}
/*forward login_dialog(playerid);
public login_dialog(playerid)
{
    SetPlayerCameraPos(playerid, 1975.203002, 3779.311523, 100.243506);
	SetPlayerCameraLookAt(playerid, 1975.203002, 3779.311523, -0.243506);

    // Show dialogs etc. here

    ClearChat(playerid); // Custom macro to send some empty clientmessages
    return 1;
}z*/
public OnPlayerDisconnect(playerid, reason)
{
    foreach(Player, i)
	if(IsPlayerLoggedIn(i))
	{
		SaveChar(i);
	}
	SaveFactions();
	SaveFamilies();
	SavePoints();
	SaveBiz();
	SaveHouses();
	SaveDoors();
	SaveObjects();
	SaveObjects22();
	SaveGates();
	SaveMapIcons();
	SaveArrestPoint();
	SaveDrugs();
	SaveMOTDS();
	// Bank Robbery
	if(BankRobber[playerid])
    {
	    new Rob = BankRobber[playerid]-1, string[128];
	    DisablePlayerCheckpoint(playerid);
		BankRobbersCount --;
		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
		DeliverMoney[playerid] = 0;
		//
		foreach(Player, i)
		{
		    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
		    {
				if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
				else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
				else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
				else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
				else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
			}
		}
		format(string, sizeof(string), "** %s has disconnected and has failed the robbery. **", RPN(playerid));
		SendRobberyMessage(COLOR_LIGHTRED, string);
		SendCopMessage(COLOR_LIGHTRED, string);
		BankRobber[playerid] = 0;
		if(BankRobbersCount == 0)
		{
			TextDrawHideForAll(Textdraw0);
			TextDrawHideForAll(Textdraw1);
			TextDrawHideForAll(Textdraw2);
			TextDrawHideForAll(Textdraw3);
			TextDrawHideForAll(Textdraw4);
			TextDrawHideForAll(Textdraw5);
//			BankRobbery = 0;
			RobberyStarted = 0;
			format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
			SendClientMessageToAll(COLOR_YELLOW, string);
			TotalRobbers = 0;
			new copsonline;
			foreach(Player, i)
			{
			    if(IsACop(i)) copsonline++;
			}
			foreach(Player, i)
			{
			    if(IsACop(i))
			    {
					new Saved = (TotalRobbers*10000-(TotalStolen*10000));
					GiveDodMoney(i, Saved/copsonline);
					format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
					SendClientMessage(i, COLOR_LIME, string);
			    }
			}
		}
    }
    RemovePlayerAttachedObject(playerid, 0);
    //paintball
    if(PlayerPaintballing[playerid] == 1)
	{
	    ResetPlayerWeapons(playerid);
	    ResetDodWeapons(playerid);
	    SetPlayerPos(playerid,1310.1110,-1368.5656,13.517786);
	    for(new w = 0; w < 13; w++)
		{
		    GiveDodWeapon(playerid, PlayerInfo[playerid][pWeapon][w], PlayerInfo[playerid][pWeaponAmmo][w]);
		}
	}
	// Boxing
	new string[128];
	if(Boxing[playerid])
	{
        // Getting other boxer's ID
		new playerb = -1;
        foreach(Player, i)
        {
            if(Boxing[i] && i != playerid) playerb = i;
        }
        if(playerb != -1)
        {
            format(string, sizeof(string), "Boxing Ring: The boxing match has ended, %s has won the match.", RPN(playerb));
    		SendGymMessage(COLOR_WHITE, string);
            // Putting them out of the ring
            SetPlayerPos(playerb, 760.9759,4.7187,1000.7084);
            SetPlayerFacingAngle(playerb, 268.9407);
            SetPlayerPos(playerid, 760.9759,6.1794,1000.7093);
            SetPlayerFacingAngle(playerid, 268.9407);
            // Giving the winner extra skill point
            new oldj = strval(RPJL(playerb, JOB_BOXER));
            PlayerInfo[playerb][pJobSkill][JOB_BOXER] ++;
			new newj = strval(RPJL(playerb, JOB_BOXER));
		    if(oldj < newj)
			{
			    format(string, sizeof(string), "** Your Boxer level is now %d, you can now cause %d more damage. **", newj, (newj*2)-2);
				SendClientMessage(playerb, COLOR_YELLOW, string);
			}
			//
			SendClientMessage(playerb, COLOR_LIME, " You have won the boxing match.");
			SendClientMessage(playerid, COLOR_LIGHTRED, " You have lost the boxing match.");
			// Giving Bids
			new winner = pBoxer[playerb];
			foreach(Player, i)
			{
			    if(BidBoxer[i] == winner)
			    {
			        new percent, profit;
			        percent = (BidAmount[i]/BoxerBid[winner]) * 100;
			        profit = (percent * BoxerBid[pBoxer[playerid]]) / 100;
			        GiveDodMoney(i, BidAmount[i] + profit);
			        format(string, sizeof(string), " You have won $%d from bidding in the match, the money you bid has been returned as well.", profit);
			        SendClientMessage(i, COLOR_LIME, string);
			    }
				BidAmount[i] = 0;
				BidBoxer[i] = 0;
			}
			for(new w = 0; w < 13; w++)
			{
			    GiveDodWeapon(playerb, PlayerInfo[playerb][pWeapon][w], PlayerInfo[playerb][pWeaponAmmo][w]);
			}
        }
        for(new w = 0; w < 13; w++)
		{
		    GiveDodWeapon(playerid, PlayerInfo[playerid][pWeapon][w], PlayerInfo[playerid][pWeaponAmmo][w]);
		}
        // Resetting Values
		BoxingMatch = 0;
		Boxer[1] = -1;
		pBoxer[playerb] = 0;
		Boxer[2] = -1;
		pBoxer[playerid] = 0;
		Boxing[playerb] = 0;
		Boxing[playerid] = 0;
		BoxerBid[1] = 0;
		BoxerBid[2] = 0;
	    if(BoxTime)
	    {
			TogglePlayerControllable(playerb, 1);
	    	KillTimer(BoxTimer);
	    }
    }
	// The rest
	if(IsPlayerLoggedIn(playerid)) {SaveChar(playerid);}
	switch(reason)
	{
	    case 0: format(string, sizeof(string), "* %s has left the server. (Timeout)", RPN(playerid));
	    case 1: format(string, sizeof(string), "* %s has left the server. (Leaving)", RPN(playerid));
	    case 2: format(string, sizeof(string), "* %s has left the server. (Kicked/Banned)", RPN(playerid));
	}
	SendNearbyMessage(playerid, 10, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	foreach(Player, i)
	{
	    if(Specid[i] == playerid)
	    {
	        Spec[i] = 0;
			Specid[i] = -1;
	    	TogglePlayerSpectating(i, 0);
			SetPlayerVirtualWorld(i, PlayerInfo[playerid][pVW]);
			SetPlayerInterior(i, PlayerInfo[playerid][pInt]);
			SetPlayerPos(i, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
			SendClientMessage(i, COLOR_WHITE, " You have stopped spectating players.");
	    }
	}
	// Clearing AD
	for(new i=0; i<MAX_ADS; i++)
	{
		if(strfind(AD[i], RPN(playerid)) != -1)
   		{
   		    format(AD[i], 128, "");
   		}
   	}
	// End of Clearing AD
	ClearChar(playerid);
	if(Planted[playerid] == 1)
	{
	    DestroyObject(C4[playerid]);
	    Bomb[playerid] = 0;
	    Planted[playerid] = 0;
	}
	return 1;
}


public OnPlayerSpawn(playerid)
{
    TogglePlayerSpectating(playerid, false);
	// Anti F4 Bug - Logging/Registering
	if(!PlayerInfo[playerid][pLoggedIn] && !IsPlayerNPC(playerid))
	{
		if(IsPlayerNPC(playerid)) return 1;
		SetPlayerPos(playerid, 1975.203002, 3779.311523, -50.243506);
		SetPlayerCameraPos(playerid, 1975.203002, 3779.311523, 100.243506);
		SetPlayerCameraLookAt(playerid, 1975.203002, 3779.311523, -0.243506);
	    SetSpawnInfo( playerid, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	    new file[64];
		format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	    // Player isn't banned
	    if(dini_Int(file, "AdminAccount") == 1)
		{
		    format(file, sizeof(file), "users/%s.ini",RPNU(playerid));
		    SetPlayerName(playerid, dini_Get(file, "OldName"));
		    format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		    SSSShowDialog(playerid, 2);
		}
		if(!dini_Exists(file))
		{
		    SSSShowDialog(playerid, 1);
		    return 1;
		}
		else
		{
			SSSShowDialog(playerid, 2);
		}
		return 1;
	}
	// Actual Spawning
    ResetPlayerWeapons(playerid);
	if(IsPlayerNPC(playerid)) //Checks if the player that just spawned is an NPC.
	{
	  new npcname[MAX_PLAYER_NAME];
	  GetPlayerName(playerid, npcname, sizeof(npcname)); //Getting the NPC's name.
	  if(!strcmp(npcname, "GOD", true)) //Checking if the NPC's name is GOD
	  { //Putting the NPC into the vehicle we created for it.
	    return 1;
	  }
	  return 1;
	}
    if(PlayerInfo[playerid][pLoggedIn] && PlayerInfo[playerid][pSpawn])
    {
        FalseBan[playerid] = 0;
        SetTimerEx("FalseBanFix", 6000, false, "i", playerid);
     	SpawnChar(playerid);
    }
    if (!GetPVarInt(playerid, "color")) SetPVarInt(playerid, "color", 18643);
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(IsPlayerLoggedIn(playerid))
	{
	    if(DayNoDrops == 1)
		{
			for(new i=0; i<13; i++)
			{
				GetPlayerWeaponData(playerid, i, DNDW[i][0], DNDW[i][1]);
			}
			GunsBeingRemoved[playerid] = 1;
         	ResetPlayerWeapons(playerid);
		}
	    if(Planted[playerid] == 1)
		{
		    DestroyObject(C4[playerid]);
		    Bomb[playerid] = 0;
		    Planted[playerid] = 0;
		}
		Pspawned[playerid] = 0;
	    new string[128];
	    if(BankRobber[playerid])
	    {
    	    new Rob = BankRobber[playerid]-1;
		    DisablePlayerCheckpoint(playerid);
			BankRobbersCount --;
			format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
			DeliverMoney[playerid] = 0;
			//
			foreach(Player, i)
			{
			    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
			    {
					if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
					else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
					else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
					else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
					else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
				}
			}
			format(string, sizeof(string), "** %s has been hospitalized and has failed the robbery. **", RPN(playerid));
			SendRobberyMessage(COLOR_LIGHTRED, string);
			SendCopMessage(COLOR_LIGHTRED, string);
			BankRobber[playerid] = 0;
			if(BankRobbersCount == 0)
			{
				TextDrawHideForAll(Textdraw0);
				TextDrawHideForAll(Textdraw1);
				TextDrawHideForAll(Textdraw2);
				TextDrawHideForAll(Textdraw3);
				TextDrawHideForAll(Textdraw4);
				TextDrawHideForAll(Textdraw5);
//				BankRobbery = 0;
				RobberyStarted = 0;
				format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
				SendClientMessageToAll(COLOR_YELLOW, string);
				TotalRobbers = 0;
				new copsonline;
				foreach(Player, i)
				{
				    if(IsACop(i)) copsonline++;
				}
				foreach(Player, i)
				{
				    if(IsACop(i))
				    {
						new Saved = (TotalRobbers*10000-(TotalStolen*10000));
						GiveDodMoney(i, Saved/copsonline);
						format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
						SendClientMessage(i, COLOR_LIME, string);
				    }
				}
			}
	    }
	    if(!IsAFK[playerid])
	    {
	        if(Event[playerid])
	        {
	        	format(string, sizeof(string), "OnEventDeath: %s has killed %s using %s.", RPN(killerid), RPN(playerid), RWN(reason));
				foreach(Player, i)
				{
				    if(Event[i]) SendClientMessage(i, COLOR_REPORT, string);
				}
				Event[playerid] = 0;
				eventdeath[playerid] = 1;
	        }
	        if(Duel[playerid])
	        {
				Duel[playerid] = 0;
				Duel[killerid] = 0;
				DuelOn = 0;
				dueldeath[playerid] = 1;
				dueldeath[killerid] = 0;
				SetPlayerPos(killerid, eX, eY, eZ);
				SetPlayerInterior(killerid, PlayerInfo[killerid][pInt]);
				SetPlayerVirtualWorld(killerid, PlayerInfo[killerid][pVW]);
				PlayerInfo[killerid][pHospital] = 0;
				SetPlayerHealth(killerid, eHP);
				SetPlayerArmour(killerid, eARMOR);
				SendClientMessage(killerid, COLOR_LIGHTRED, "*** You won the duel, nice job. ***");
				GunsBeingRemoved[killerid] = 1;
				ResetPlayerWeapons(killerid);
				GunsBeingRemoved[killerid] = 1;
				for(new w = 0; w < 13; w++)
				{
				   GiveDodWeapon(killerid, PlayerInfo[killerid][pWeapon][w], PlayerInfo[killerid][pWeaponAmmo][w]);
				}
	        }
	        if(PlayerPaintballing[playerid] == 1)
	        {
				for (new i = 0; i < 13; i++)
				{
        			GetPlayerWeaponData(playerid, i, pbGuns[i][0], pbGuns[i][1]);
				}
	            format(string, sizeof(string), "OnPaintballDeath: %s has killed %s using %s.", RPN(killerid), RPN(playerid), RWN(reason));
	            new Float:myhp;
	            GetPlayerHealth(killerid, myhp);
                SetPlayerHealth(killerid, myhp+30);
		        if(myhp == 100)
		        {
		            SetPlayerHealth(killerid, 100);
		        }
				foreach(Player, i)
				{
				    if(PlayerPaintballing[i]) SendClientMessage(i, COLOR_REPORT, string);
				}
				PlayerPaintballing[playerid] = 1;
			}
			else
			{
			    PlayerInfo[playerid][pHospital] = 1;
				PlayerInfo[playerid][pArmor] = 0;
			    if(IsPlayerLoggedIn(killerid))
			    {
					format(string, sizeof(string), "OnPlayerDeath: %s has killed %s using %s.", RPN(killerid), RPN(playerid), RWN(reason));
					SendAdminMessage(COLOR_DARKRED, 1, string);
					Log("logs/kill.log", string);
					PlayerInfo[playerid][pDeath] ++;
					PlayerInfo[killerid][pKill] ++;
					if(Hitman[killerid] == playerid)
					{
					    format(string, sizeof(string), " You have been critically injured by a hitman and lost $%d, the contrat on your head was cleared.", PlayerInfo[playerid][pContract]/2);
					    SendClientMessage(playerid, COLOR_YELLOW, string);
					    format(string, sizeof(string), "HitmanWarn: %s has fulfilled the contract on %s's head and collected $%d.", RPN(killerid), RPN(playerid), PlayerInfo[playerid][pContract]/2);
						SendHitmanMessage(COLOR_YELLOW, string);
						GiveDodMoney(playerid, -PlayerInfo[playerid][pContract]/2);
						GiveDodMoney(killerid, PlayerInfo[playerid][pContract]/2);
						PlayerInfo[playerid][pContract] = 0;
						format(PlayerInfo[playerid][pContract], 32, "");
						Hitman[killerid] = -1;
						PlayerInfo[killerid][pCSuccess] ++;
					}
					if(Hitman[playerid] == killerid)
					{
					    format(string, sizeof(string), " You have critically injured a hitman and collected $%d, the contrat on your head was cleared.", PlayerInfo[killerid][pContract]);
					    SendClientMessage(killerid, COLOR_YELLOW, string);
					    format(string, sizeof(string), "HitmanWarn: %s has failed the contract on %s's head and lost $%d.", RPN(playerid), RPN(killerid), PlayerInfo[killerid][pContract]);
						SendHitmanMessage(COLOR_YELLOW, string);
						GiveDodMoney(playerid, -PlayerInfo[killerid][pContract]);
						GiveDodMoney(killerid, PlayerInfo[killerid][pContract]);
						PlayerInfo[killerid][pContract] = 0;
						format(PlayerInfo[killerid][pContract], 32, "");
						Hitman[playerid] = -1;
						PlayerInfo[playerid][pCFail] ++;
					}
				}
			}
		}
		else
		{
		    GetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
		   	ClearDodWantedLevels(killerid);
		    SetPlayerColor(killerid, TRANSPARENT_ORANGE);
			PlayerInfo[killerid][pPrison] = 2;
			PlayerInfo[killerid][pPrisonTime] = AFK[playerid];
			format(PlayerInfo[killerid][pPrisonReason], 64, "Killing AFK Players");
			format(PlayerInfo[killerid][pPrisonBy], 32, "AutoPrison");
			SetPlayerInterior(killerid, 2);
			SetPlayerVirtualWorld(killerid, 1);
			new RandomCell = random(sizeof(RandomPrison));
			SetPlayerFacingAngle(killerid, RandomPrison[RandomCell][3]);
			TogglePlayerControllable(killerid, 0);
			SetTimerEx("EnterExitTimer", 5000, false, "i", killerid);
			SetPlayerPos(killerid, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
			SetCameraBehindPlayer(killerid);
			format(string, sizeof(string), "AdmCmd: %s has been auto-prisoned by MOLE, reason: Killing AFK Players [%d Minutes]", RPN(killerid), AFK[playerid]/60);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Log("logs/prison.log", string);
			format(string, sizeof(string), " You have been auto-prisoned for %d minutes (%d seconds)", PlayerInfo[killerid][pPrisonTime]/60, PlayerInfo[killerid][pPrisonTime]);
			SendClientMessage(killerid, COLOR_LIGHTBLUE, string);
		}
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(vehicleid != 509 && vehicleid != 481 && vehicleid != 510)
	{
	    SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
		foreach(Player, i)
		{
		    if(vehicleid == PlayerInfo[i][pVeh])
		    {
		        if(PlayerInfo[i][vLocked]) SetVehicleParamsEx(vehicleid, 0, 0, 0, 1, 0, 0, 0);
	            ChangeVehiclePaintjob(PlayerInfo[i][pVeh], PlayerInfo[i][vPJ]);
	            SetVehicleVirtualWorld(PlayerInfo[i][pVeh], PlayerInfo[i][pVehVW]);
	            DestroyObject(GetPVarInt(i, "neon"));
		   		DestroyObject(GetPVarInt(i, "neon1"));
			    DestroyObject(GetPVarInt(i, "neon2"));
		    	DestroyObject(GetPVarInt(i, "neon3"));
		    	DestroyObject(GetPVarInt(i, "neon4"));
		    	DestroyObject(GetPVarInt(i, "neon5"));
		    	DestroyObject(GetPVarInt(i, "neon6"));
		    	DestroyObject(GetPVarInt(i, "neon7"));
		    	DestroyObject(GetPVarInt(i, "neon8"));
		    	DestroyObject(GetPVarInt(i, "neon9"));
		    	DestroyObject(GetPVarInt(i, "neon10"));
		    	DestroyObject(GetPVarInt(i, "neon11"));
		    	DestroyObject(GetPVarInt(i, "nb1"));
		    	DestroyObject(GetPVarInt(i, "nb2"));
		    	DestroyObject(GetPVarInt(i, "nb3"));
		    	DestroyObject(GetPVarInt(i, "nb4"));
		    	DestroyObject(GetPVarInt(i, "nb5"));
		    	DestroyObject(GetPVarInt(i, "nb6"));
		 		neon[i] = 1;
				for(new x=0; x<14; i++)
				{
				    AddVehicleComponent(PlayerInfo[i][pVeh], PlayerInfo[i][pVehMod][x]);
				}
		    }
		    if(vehicleid == PlayerInfo[i][pVVeh])
		    {
		        if(PlayerInfo[i][vVLocked]) SetVehicleParamsEx(vehicleid, 0, 0, 0, 1, 0, 0, 0);
	            ChangeVehiclePaintjob(PlayerInfo[i][pVVeh], PlayerInfo[i][vVPJ]);
	            DestroyObject(GetPVarInt(i, "vneon"));
		   		DestroyObject(GetPVarInt(i, "vneon1"));
			    DestroyObject(GetPVarInt(i, "vneon2"));
		    	DestroyObject(GetPVarInt(i, "vneon3"));
		    	DestroyObject(GetPVarInt(i, "vneon4"));
		    	DestroyObject(GetPVarInt(i, "vneon5"));
		    	DestroyObject(GetPVarInt(i, "vneon6"));
		    	DestroyObject(GetPVarInt(i, "vneon7"));
		    	DestroyObject(GetPVarInt(i, "vneon8"));
		    	DestroyObject(GetPVarInt(i, "vneon9"));
		    	DestroyObject(GetPVarInt(i, "vneon10"));
		    	DestroyObject(GetPVarInt(i, "vneon11"));
		    	DestroyObject(GetPVarInt(i, "vnb1"));
		    	DestroyObject(GetPVarInt(i, "vnb2"));
		    	DestroyObject(GetPVarInt(i, "vnb3"));
		    	DestroyObject(GetPVarInt(i, "vnb4"));
		    	DestroyObject(GetPVarInt(i, "vnb5"));
		    	DestroyObject(GetPVarInt(i, "vnb6"));
		 		vneon[i] = 1;
				for(new x=0; x<14; i++)
				{
				    AddVehicleComponent(PlayerInfo[i][pVVeh], PlayerInfo[i][pVVehMod][x]);
				}
		    }
		}
		if(IsTruckerVehicle(vehicleid))
		{
		    TruckPackages[vehicleid] = -1;
		}
		if(Siren[vehicleid])
		{
			Siren[vehicleid] = 0;
	        DestroyDynamicObject(SirenObject[vehicleid]);
        }
    }
    DestroyObject(obj1[vehicleid]);
   	DestroyObject(obj2[vehicleid]);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    DestroyObject(obj1[vehicleid]);
   	DestroyObject(obj2[vehicleid]);
	return 1;
}


public OnPlayerText(playerid, text[])
{
	// Anti Adv
    if(AntiAdv(playerid, text)) return 0;
	// The Rest
	new string[128];
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		format(string, sizeof(string), "(cellphone) %s says: %s", RPN(playerid), text);
		if(IsPlayerInAnyVehicle(playerid)) { //Windows closed.
			format(string, sizeof(string), "%s", string);
			SendNearbyMessage(playerid, 3.0, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		} else {
			SendNearbyMessage(playerid, 3.0, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}

		if(Mobile[playerid] == 914)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: Sorry, I don't understand?");
				return 0;
			}
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: We have alerted all units in the area.");
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Thank you for reporting this incident");

			format(string, sizeof(string), "Dispatch: All Units IA: Caller: %s",RPN(playerid));
			SendLSFMDMessage(COLOR_TWPINK, string);
			format(string, sizeof(string), "Dispatch: Incident: %s",text);
			SendLSFMDMessage(COLOR_TWPINK, string);

			CalledMedics[playerid] = 1;
			MedicsCallTime[playerid] = 60;
			ShowPlayerBeaconForMedics(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "   They hung up...");
			Mobile[playerid] = INVALID_PLAYER_ID;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand?");
				return 0;
			}
			if(strcmp("no", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: We have alerted all units in the area.");
				SendClientMessage(playerid, COLOR_DBLUE, "Thank you for reporting this crime.");
				format(string, sizeof(string), "HQ: All Units APB: Reporter: %s",RPN(playerid));
				SendFBIMessage(COLOR_DBLUE, string);
				SendCopMessage(COLOR_DBLUE, string);
				format(string, sizeof(string), "HQ: Crime: %s, Suspect: Unknown",PlayerCrime[playerid][pAccusing]);
				SendFBIMessage(COLOR_DBLUE, string);
				SendCopMessage(COLOR_DBLUE, string);
				CalledCops[playerid] = 1;
				CopsCallTime[playerid] = 60;
				ShowPlayerBeaconForCops(playerid);
				SendClientMessage(playerid, COLOR_WHITE, "   They hung up...");
				Mobile[playerid] = INVALID_PLAYER_ID;

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObject(playerid, 9);
				return 0;
			}
			new badguy = playerid;
			if(IsPlayerConnected(badguy))
			{
				if(badguy != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[badguy][pCrimes] > 0)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: Units are already assigned to that case...");
						SendClientMessage(playerid, COLOR_DBLUE, "Thank you for reporting this crime.");
						SendClientMessage(playerid, COLOR_WHITE, "   They hung up...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 0;
					}
					if(badguy == playerid)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: Don't fool around. This is an emergency line.");
						SendClientMessage(playerid, COLOR_WHITE, "   They hung up...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 0;
					}
					SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: We have alerted all units in the area.");
					SendClientMessage(playerid, COLOR_DBLUE, "Thank you for reporting this crime.");

					format(string, sizeof(string), "HQ: All Units APB: Reporter: %s",RPN(playerid));
					SendFBIMessage(COLOR_DBLUE, string);
				    SendCopMessage(COLOR_DBLUE, string);
					format(string, sizeof(string), "HQ: Crime: %s, Suspect: %s",PlayerCrime[playerid][pAccusing], RPN(badguy));
					SendFBIMessage(COLOR_DBLUE, string);
				    SendCopMessage(COLOR_DBLUE, string);
					CalledCops[playerid] = 1;
					CopsCallTime[playerid] = 60;
					ShowPlayerBeaconForCops(playerid);
					SendClientMessage(playerid, COLOR_WHITE, "   They hung up...");
					Mobile[playerid] = INVALID_PLAYER_ID;

					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
					RemovePlayerAttachedObject(playerid, 9);
					return 0;
				}
				return 0;
			}
			else
			{
				format(string, sizeof(string), "Police HQ: I have no information on %s, are you sure that's the correct name?",text);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand?");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: If you know the assailant's name or part of it say it now or just say no.");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand - police or paramedic?");
				return 0;
			}
			else if(strcmp("police", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: I am patching you to police headquarters, please hold...");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: Please give me a short description of the crime.");
				return 0;
			}
			else if(strcmp("paramedic", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: I am patching you to LSFMD headquarters, please hold...");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: Please give me a short description of the incident.");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand - police or paramedic?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[Mobile[playerid]] == playerid)
			{
				if(SpeakerPhone[playerid] != 0)
				{
				    format(string, sizeof(string), "(speakerphone) %s says: %s", RPN(playerid), text);
					SendNearbyMessage(Mobile[playerid], 3.0, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    SendClientMessage(Mobile[playerid], COLOR_YELLOW, string);
				}
				if(PlayerInfo[playerid][pBugged] == 1)
				{
					format(string, sizeof(string), "(bug) %s (cellphone): %s", RPN(playerid), text);
					SendAdminMessage(COLOR_LIGHTGREEN, 1, string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "There's nobody there!");
			CellTime[playerid] = 0;
			SendClientMessage(playerid,  COLOR_WHITE, "   You hung up.");
			Mobile[playerid] = INVALID_PLAYER_ID;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
		}
		return 0;
	}
	else if(Live[playerid])
	{
		if(IsNewsVehicle(GetPlayerVehicleID(playerid)))
		{
			format(string, sizeof(string), "** [Live News]: %s: %s", RPN(playerid), text);
			SendClientMessageToAll(COLOR_LIGHTGREEN, string);
		}
	}
	else
	{
		if(strlen(PlayerInfo[playerid][pAccent])) format(string, sizeof(string), "(%s Accent) %s says: %s", PlayerInfo[playerid][pAccent], RPN(playerid), text);
		else format(string, sizeof(string), "%s says: %s", RPN(playerid), text);
	}
	SendNearbyMessage(playerid, 10, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	Log("logs/chat.log", string);
	/*format(OldSpamChat[playerid], 128, "%s", NewSpamChat[playerid]);
	format(NewSpamChat[playerid], 128, "%s", text);
	if(strlen(OldSpamChat[playerid]) > 0 && strlen(NewSpamChat[playerid]) > 0)
	{
		if(!strcmp(OldSpamChat[playerid], NewSpamChat[playerid], false))
		{
			ChatSpamCount[playerid] ++;
			if(ChatSpamCount[playerid] >= 8)
			{
				format(string, sizeof(string), "AdmCmd: %s has been f, reason: Spam", RPN(playerid));
				SendClientMessageToAll(COLOR_LIGHTRED, string);
				ChatSpamCount[playerid] = 0;
				SetTimerEx("kickbug", 5000, false, "i", playerid);
			}
		}
		else
		{
		    ChatSpamCount[playerid] = 0;
		}
	}*/
	return 0;
}


public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid)
{
	if(weaponid == 0 && GetPlayerFightingStyle(playerid) == FIGHT_STYLE_BOXING || weaponid == 1 && GetPlayerFightingStyle(playerid) == FIGHT_STYLE_BOXING)
	{
	    new Float:hArmor; GetPlayerArmour(damagedid, hArmor);
	    if(hArmor <= 0)
	    {
		    new hit = strval(RPJL(playerid, JOB_BOXER));
			new Float:OldHP; GetPlayerHealth(damagedid, OldHP);
			SetPlayerHealth(damagedid, OldHP-((hit*2)-2));
		}
	}
	return 1;
}

public OnPlayerShootPlayer(Shooter,Target,Float:HealthLost,Float:ArmourLost)
{
	new string[128];
	if(GetPlayerWeapon(Shooter) == 34 && PlayerInfo[Shooter][pScope] && Hitman[Shooter] == Target)
	{
		SetPlayerHealth(Target, 0);
		if(Hitman[Shooter] == Target)
		{
		    format(string, sizeof(string), " You have been critically injured by a hitman and lost $%d, the contrat on your head was cleared.", PlayerInfo[Target][pContract]/2);
		    SendClientMessage(Target, COLOR_YELLOW, string);
		    format(string, sizeof(string), "HitmanWarn: %s has fulfilled the contract on %s's head and collected $%d.", RPN(Shooter), RPN(Target), PlayerInfo[Target][pContract]/2);
			SendHitmanMessage(COLOR_YELLOW, string);
			GiveDodMoney(Target, -PlayerInfo[Target][pContract]/2);
			GiveDodMoney(Shooter, PlayerInfo[Target][pContract]/2);
			PlayerInfo[Target][pContract] = 0;
			format(PlayerInfo[Target][pContract], 32, "");
			Hitman[Shooter] = -1;
			PlayerInfo[Shooter][pCSuccess] ++;
		}
		PlayerInfo[Shooter][pScope] --;
	}
	if(!IsACop(Shooter) || !IsNG(Shooter) || !IsFBI(Shooter))
	{
	    if(Tazer[Shooter])
	    {
	        if(GetPlayerWeapon(Shooter) == 23)
	        {
	            if(!IsPlayerTazed(Target) && !IsPlayerCuffed(Target) && !IsPlayerTied(Target))
	            {
		            new Float:HP, Float:Armor;
		            GetPlayerHealth(Target, HP);
		            GetPlayerArmour(Target, Armor);
		            SetPlayerHealth(Target, HealthLost+HP);
		            SetPlayerArmour(Target, ArmourLost+Armor);
		            if(!IsPlayerNearPlayer(Shooter, Target, 15)) return SendClientMessage(Shooter, COLOR_GREY, "You are too far away from that player.");
					// Got Tazed
				    format(string, sizeof(string), "* %s aims his tazer on %s and tazes him.", RPN(Shooter), RPN(Target));
				    SendNearbyMessage(Shooter, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
                    GameTextForPlayer(Target, "~r~Tazed", 3500, 3);
					TogglePlayerControllable(Target, 0);
					// Tazed Detecting
					TogglePlayerTazed(Target, 1);
					// Tazer Timeout
					TazeTimeout[Target] = 11;
					TazeCountDown[Target] = SetTimerEx("TazeTimer", 1000, true, "d", Target);
				}
		    }
	    }
	}
	return 1;
}



public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	new string[128];
	format(string, sizeof(string), "[cmd] [%s]: %s", RPN(playerid), cmdtext);
 	print(string);
    if(!success)
	{
	    SendClientMessage(playerid, COLOR_GREY, "** The command you attempt to use doesn't exist on our server.");
	}
	/*if(strfind(cmdtext, "/next", true) == -1 || strfind(cmdtext, "/toys", true) == -1)
	{
		format(OldSpamCommand[playerid], 128, "%s", NewSpamCommand[playerid]);
		format(NewSpamCommand[playerid], 128, "%s", cmdtext);
		if(strlen(OldSpamCommand[playerid]) > 0 && strlen(NewSpamCommand[playerid]) > 0)
		{
			if(!strcmp(OldSpamCommand[playerid], NewSpamCommand[playerid], false))
			{
			    CommandSpamCount[playerid] ++;
			    if(CommandSpamCount[playerid] >= 8)
			    {
				    format(string, sizeof(string), "AdmCmd: %s has been f, reason: Spam", RPN(playerid));
				    SendClientMessageToAll(COLOR_LIGHTRED, string);
				    CommandSpamCount[playerid] = 0;
				    SetTimerEx("kickbug", 5000, false, "i", playerid);
			    }
			}
			else
			{
			    CommandSpamCount[playerid] = 0;
			}
		}
	}*/
    return 1;
}

CMD:zombiehide(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 9) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	DestroyDynamicObject(zombielift);
	DestroyDynamicObject(zombieliftdoorattached1);
	DestroyDynamicObject(zombieliftdoorattached2);
	DestroyDynamicObject(zombieliftdoornotattached1);
	DestroyDynamicObject(zombieliftdoornotattached2);
	DestroyDynamicObject(zombieliftdoornotattached3);
	DestroyDynamicObject(zombieliftdoornotattached4);
	format(string, sizeof(string), "AdmWarn: %s has hided the zombie elevator. (and skitt = gay)", RPN(playerid));
    SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/object.log", string);
	return 1;
}



CMD:deleteobj(playerid, params[])
{
	new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deleteobj [objid]");
	if(!ObjInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
	ObjInfo[idx][oModel] = 0;
	ObjInfo[idx][oX] = 0;
	ObjInfo[idx][oY] = 0;
	ObjInfo[idx][oZ] = 0;
	ObjInfo[idx][oRX] = 0;
	ObjInfo[idx][oRY] = 0;
	ObjInfo[idx][oRZ] = 0;
	DestroyDynamicObject(ObjInfo[idx][obj]);
	DestroyDynamic3DTextLabel(ObjInfo[idx][oText]);
	format(string, sizeof(string), "MapperWarn: %s has deleted object ID %d.", RPN(playerid), idx);
    SendMapperMessage(COLOR_GREEN, 1, string);
	Log("logs/object.log", string);
	return 1;
}

CMD:deleteveh(playerid, params[])
{
	new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deleteobj [objid]");
	if(!vvvehInfo[idx][vvvModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid dynamic vehicle id.");
	vvvehInfo[idx][vvvModel] = 0;
	vvvehInfo[idx][vvvX] = 0;
	vvvehInfo[idx][vvvY] = 0;
	vvvehInfo[idx][vvvZ] = 0;
	vvvehInfo[idx][vvvAn] = 0;
	vvvehInfo[idx][vvvC1] = 0;
	vvvehInfo[idx][vvvC2] = 0;
	DestroyVehicle(vvvehInfo[idx][vvveh]);
	format(string, sizeof(string), "MapperWarn: %s has deleted Dynamic vehicle ID %d.", RPN(playerid), idx);
    SendMapperMessage(COLOR_GREEN, 1, string);
	Log("logs/object.log", string);
	return 1;
}

CMD:createveh(playerid, params[])
{
	new string[128], object;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
	if(sscanf(params, "i", object)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /createveh [modelid]");
	for(new idx=1; idx<MAX_vvveh; idx++)
	{
	    if(!vvvehInfo[idx][vvvModel])
	    {
	        GetPlayerPos(playerid, vvvehInfo[idx][vvvX], vvvehInfo[idx][vvvY], vvvehInfo[idx][vvvZ]);
  			vvvehInfo[idx][vvvModel] = object;
			vvvehInfo[idx][vvvX] = vvvehInfo[idx][vvvX] + 2;
			vvvehInfo[idx][vvvY] = vvvehInfo[idx][vvvY] + 2;
			vvvehInfo[idx][vvvZ] = vvvehInfo[idx][vvvZ] + 2;
			vvvehInfo[idx][vvvAn] =0;
			vvvehInfo[idx][vvvC1] =0;
			vvvehInfo[idx][vvvC2] =0;

			// Creating
			vvvehInfo[idx][vvveh] = CreateVehicle(vvvehInfo[idx][vvvModel], vvvehInfo[idx][vvvX], vvvehInfo[idx][vvvY], vvvehInfo[idx][vvvZ], vvvehInfo[idx][vvvAn], vvvehInfo[idx][vvvC1], vvvehInfo[idx][vvvC2], 1200);
			// Text
			format(string, sizeof(string), "MapperWarn: %s has spawned dynamic vehicle %d. (Model: %d)", RPN(playerid), idx, object);
            SendClientMessage(playerid, COLOR_WHITE, "You may save a new position with /saveveh");
		    SendMapperMessage(COLOR_GREEN, 1, string);
			idx = MAX_vvveh;
		}
	}
	return 1;
}
CMD:createobj(playerid, params[])
{
	new string[128], object;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
	if(sscanf(params, "i", object)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /createobj [objectid]");

	for(new idx=1; idx<MAX_OBJ; idx++)
	{
	    if(!ObjInfo[idx][oModel])
	    {
	        GetPlayerPos(playerid, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ]);
  			ObjInfo[idx][oModel] = object;
  			oldoID = ObjInfo[idx][oModel];
  			oldodX = ObjInfo[idx][oX];
  			oldodY = ObjInfo[idx][oY];
  			oldodZ = ObjInfo[idx][oZ];
  			oldodRX = ObjInfo[idx][oRX];
  			oldodRY = ObjInfo[idx][oRY];
  			oldodRZ = ObjInfo[idx][oRZ];
			ObjInfo[idx][oX] = ObjInfo[idx][oX] + 2;
			ObjInfo[idx][oY] = ObjInfo[idx][oY] + 2;
			ObjInfo[idx][oRX] = 0;
			ObjInfo[idx][oRY] = 0;
			ObjInfo[idx][oRZ] = 0;
			// Creating
			format(string, sizeof(string), "Object ID: %d (Model ID: %d)", idx, ObjInfo[idx][oModel]);
			ObjInfo[idx][obj] = CreateDynamicObject(ObjInfo[idx][oModel], ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ], ObjInfo[idx][oRX], ObjInfo[idx][oRY], ObjInfo[idx][oRZ]);
			ObjInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ], 10);
			// Text
			format(string, sizeof(string), "MapperWarn: %s has created object ID %d. (Object: %d)", RPN(playerid), idx, object);
		    SendMapperMessage(COLOR_GREEN, 1, string);
			Log("logs/cbject.log", string);
			idx = MAX_OBJ;
		}
	}
	return 1;
}




CMD:editobj(playerid, params[])
{
	new string[128], idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /editobj [objectid]");
    if(!ObjInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
	oEdit[playerid] = 1;
	oEditID[playerid] = idx;
	GetDynamicObjectPos(ObjInfo[idx][obj], oPos[playerid][0], oPos[playerid][1], oPos[playerid][2]);
	GetDynamicObjectRot(ObjInfo[idx][obj], oRot[playerid][0], oRot[playerid][1], oRot[playerid][2]);
	EditDynamicObject(playerid, ObjInfo[idx][obj]);
    format(string, sizeof(string), " You are now editing object ID %d's position.", idx);
    SendClientMessage(playerid, COLOR_WHITE, string);
    format(string, sizeof(string), "MapperWarn: %s is editting object ID %d's position.)", RPN(playerid), idx);
    SendMapperMessage(COLOR_GREEN, 1, string);
	return 1;
}

CMD:duplicateobj(playerid, params[])
{
    new string[128] ,idx;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
		for(idx=1; idx<MAX_OBJ; idx++)
		{
		    if(!ObjInfo[idx][oModel])
		    {
				ObjInfo[idx][oModel] = oldoID;
				ObjInfo[idx][oX] = oldodX;
				ObjInfo[idx][oY] = oldodY;
				ObjInfo[idx][oZ] = oldodZ;
				ObjInfo[idx][oRX] = oldodRX;
				ObjInfo[idx][oRY] = oldodRY;
				ObjInfo[idx][oRZ] = oldodRZ;
				// Creating
				ObjInfo[idx][obj] = CreateDynamicObject(oldoID, oldodX, oldodY, oldodZ, oldodRX, oldodRY, oldodRZ);
				ObjInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, oldodX, oldodY, oldodZ, 10);
				// Text
				format(string, sizeof(string), "MapperWarn: %s has created object ID %d. (Object: %d)", RPN(playerid), idx, oldoID);
			    SendMapperMessage(COLOR_GREEN, 1, string);
				Log("logs/objects.log", string);
				idx = MAX_OBJ;
			}
		}
	return 1;
}



CMD:nearobj(playerid, params[])
{
    new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
    for(new idx=1; idx<MAX_OBJ; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ]))
		{
		    format(string, sizeof(string), "Nearest Object ID: %d", idx);
		    SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "You are not near a object!");
	return 1;
}

CMD:nearveh(playerid, params[])
{
    new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pMapper] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
    for(new idx=1; idx<MAX_vvveh; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5, vvvehInfo[idx][vvvX], vvvehInfo[idx][vvvY], vvvehInfo[idx][vvvZ]))
		{
		    format(string, sizeof(string), "Nearest Dynamic Vehicle ID: %d", idx);
		    SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "You are not near a dynamic vehicle!");
	return 1;
}



CMD:maptool(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 1 && PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	SendClientMessage(playerid, COLOR_RED, "*Trial Mapper: {FFFFFF}/createobj /editobj /deleteobj /mc /mod");
	SendClientMessage(playerid, COLOR_RED, "*General Mapper: {FFFFFF}/jetpack /fly /nearobj /duplicateobj /gotoobj");
	SendClientMessage(playerid, COLOR_RED, "*Senior Mapper: {FFFFFF}/createveh /saveveh /deleteveh /nearveh /gotoveh");
	SendClientMessage(playerid, COLOR_RED, "*Asst. Head Mapper: {FFFFFF}/kick /ban /slap /pm /sendto /freeze /unfreeze");
	SendClientMessage(playerid, COLOR_RED, "*Head Mapper: {FFFFFF}/makemapper /saveobjects /savevehicles");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	return 1;
}


CMD:gotoobj(playerid, params[])
{
    new idx, string[128], string2[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gotoobj [objectid]");
	if(!ObjInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
	SetPlayerPos(playerid, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ]);
	format(string, sizeof(string), " You have teleported to object ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string2, sizeof(string2), "MapperWarn: %s has teleported to object ID %d.", RPN(playerid), idx);
    SendMapperMessage(COLOR_GREEN, 1, string2);
	return 1;
}

CMD:gotoveh(playerid, params[])
{
    new idx, string[128], string2[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 3 && PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gotoveh [vehid]");
	if(!vvvehInfo[idx][vvvModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid dynamic vehicle id.");
	SetPlayerPos(playerid, vvvehInfo[idx][vvvX], vvvehInfo[idx][vvvY], vvvehInfo[idx][vvvZ]);
	format(string, sizeof(string), " You have teleported to dynamic vehicle ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string2, sizeof(string2), "MapperWarn: %s has teleported to dynamic vehicle ID %d.", RPN(playerid), idx);
    SendMapperMessage(COLOR_GREEN, 1, string2);
	return 1;
}

CMD:makemapper(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] >= 6 || PlayerInfo[playerid][pMapper] >= 5)
	{
	    new playerb, admin, string[128], string2[128];
	    if(sscanf(params, "ui", playerb, admin)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /makemapper [playerid] [level]");
		if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
		if(admin < 0 || admin > 5) return SendClientMessage(playerid, COLOR_GREY, "Mapper levels are between 1 and 5.");
	    if(PlayerInfo[playerb][pMapper] != admin)
	    {
	        new log[256];
		    if(PlayerInfo[playerb][pMapper] < admin)
			{
		    	format(string, sizeof(string), "AdmWarn: %s has {33AA33}promoted {AA3333}%s to level {33AA33}%d {AA3333}Mapper.", RPN(playerid), RPN(playerb), admin);
    		    format(string2, sizeof(string2), "MapperWarn: %s has {33AA33}promoted {AA3333}%s to level {33AA33}%d {AA3333}Mapper.", RPN(playerid), RPN(playerb), admin);
            	format(log, sizeof(log), "AdmWarn: %s (%s) has promoted %s (%s) to level %d Mapper.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb), admin);
			}
			else if(PlayerInfo[playerb][pMapper] > admin)
			{
	  	    	format(string, sizeof(string), "AdmWarn: %s has {FF9900}demoted {AA3333}%s to level {FF9900}%d {AA3333}Mapper.", RPN(playerid), RPN(playerb), admin);
	  	    	format(string2, sizeof(string2), "MapperWarn: %s has {FF9900}demoted {AA3333}%s to level {FF9900}%d {AA3333}Mapper.", RPN(playerid), RPN(playerb), admin);
	  	    	format(log, sizeof(log), "AdmWarn: %s (%s) has demoted %s (%s) to level %d Mapper.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb), admin);
			}
			Log("logs/makehelper.log", log);
			PlayerInfo[playerb][pMapper] = admin;
			SendAdminMessage(COLOR_DARKRED, 1, string);
			SendMapperMessage(COLOR_DARKRED, 1, string2);
			if(!PlayerInfo[playerb][pMapper])
			{
			    SendClientMessage(playerb, COLOR_DARKRED, string2);
			}
		}
		else SendClientMessage(playerid, COLOR_GREY, "Player already has this Mapper level.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:saveobjects(playerid, params[])
{
    new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 5 && PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
	SendClientMessage(playerid, COLOR_RED, "Objects have been saved!");
	SaveObjects();
	SaveObjects22();
	format(string, sizeof(string), "AdmWarn: %s has saved all objects!", RPN(playerid));
    SendAdminMessage(COLOR_DARKRED, 1, string);
    SendMapperMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:savevehicles(playerid, params[])
{
    new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 5 && PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!mDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Mapper Duty.");
	SendClientMessage(playerid, COLOR_RED, "Dynamic Vehicles have been saved!");
    Savevvveh();
	format(string, sizeof(string), "AdmWarn: %s has saved all Dynamic vehicles!", RPN(playerid));
    SendAdminMessage(COLOR_DARKRED, 1, string);
    SendMapperMessage(COLOR_DARKRED, 1, string);
	return 1;
}
// OnPlayerCommandText
CMD:help(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   /*	new BigString15[1024];
	strcat( BigString15, "\t\t{00C0FF}Commands List:\t\t\n\n");
	strcat( BigString15, "{FF6347}GENERAL: {FFFFFF}/stats /inv /reportbug /serverstats /tog /call (/p)ickup (/h)angup /buysim /wtc /search /changepass /tabcheck /fuel\n");
	strcat( BigString15, "{FF6347}GENERAL: {FFFFFF}/pay (/un)blindfold (/un)tie /colorcar /paintcar /buy /phonebook /withdraw /deposit /wire /paycheck /id /afkcheck\n");
	strcat( BigString15, "{FF6347}GENERAL: {FFFFFF}/points /speedlimit /helpers /joinevent /quitevent /train /stuck\n");
	strcat( BigString15, "{FF6347}GENERAL: {FFFFFF}/bid /loyal /walkstyle\n");
	strcat( BigString15, "{FF6347}CHAT: {FFFFFF}/newbie /o /b /s /l /w /wt /f /r /d /call /sms /report /helpme /accent\n");
	strcat( BigString15, "{FF6347}INTERACTIONS: {FFFFFF}/me /do /enter /exit /drop /contract /engine /license /showlicense /refer /tow\n");
	strcat( BigString15, "{FF6347}BUSINESS: {FFFFFF}/buybiz /vault /lock /sellbiztomarket\n" );
	strcat( BigString15, "{FF6347}HOUSE: {FFFFFF}/buyhouse /hdeposit /hwithdraw /lock /houseupgrade /sellhousetomarket\n");
	strcat( BigString15, "{FF6347}HELP: {FFFFFF}/animlist /vehhelp /bizhelp /househelp /jobhelp /factionhelp /familyhelp /helperhelp /viphelp /referhelp /cookieshelp\n");
	strcat( BigString15, "{FF6347}HELP: {FFFFFF}/robberyhelp /fishhelp /gatehelp /garagehelp" );
	ShowPlayerDialog(playerid, 1398, DIALOG_STYLE_MSGBOX, "{00C0FF}Intense Roleplay", BigString15, "OK", "");*/
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW, "GENERAL: {FFFFFF}/stats /serverstats /call (/p)ickup (/h)angup /phchange /namechange /sexchange /agechange /wtc /search /changepass /fuel");
	SendClientMessage(playerid, COLOR_YELLOW, "GENERAL: {FFFFFF}/pay (/un)blindfold (/un)tie /colorcar /paintcar /buy /phonebook /withdraw /deposit /wire /paycheck /id");
	SendClientMessage(playerid, COLOR_YELLOW, "GENERAL: {FFFFFF}/points /speedlimit /helpers /joinevent /quitevent /train /stuck");
	SendClientMessage(playerid, COLOR_YELLOW, "GENERAL: {FFFFFF}/walkstyle /sb");
	SendClientMessage(playerid, COLOR_WHITE, "CHAT: {FFFFFF}/newbie /o /b /s /l /w /wt /f /r /d /call /sms /report /helpme /accent");
	SendClientMessage(playerid, COLOR_RED, "INTERACTIONS: {FFFFFF}/me /do /enter /exit /drop /contract /engine /licenses /showlicenses /tow");
	SendClientMessage(playerid, COLOR_DARKRED, "BUSINESS: {FFFFFF}/buybiz /vault /lock /sellbiztomarket");
	SendClientMessage(playerid, COLOR_LIGHTRED, "HOUSE: {FFFFFF}/buyhouse /hdeposit /hwithdraw /lock /houseupgrade /sellhousetomarket");
	SendClientMessage(playerid, COLOR_BLUE, "HELP: {FFFFFF}/animlist /vehhelp /bizhelp /househelp /jobhelp /factionhelp /familyhelp /helperhelp /viphelp /cookieshelp");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "HELP: {FFFFFF}/fishhelp /gatehelp /garagehelp");
	return 1;
}

/*CMD:musicanlist(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_GREEN, "____________________________________MUSIC LIST:______________________________");
	SendClientMessage(playerid, COLOR_WHITE, "1)2pac-Soon As I Get Home | 2)Wiz Khalifa-Reefer Party | 3)Kottonmouth kings-King Klick");
	SendClientMessage(playerid, COLOR_WHITE, "4)Eazy E ft. 2pac ft. The Game ft. 50 Cent-How we do(Steevo Remix) | 5)2pac-Hit Em Up");
	SendClientMessage(playerid, COLOR_WHITE, "6)Wiz Khalifa ft.Too Short-On My Level | 7)Ice Cube-Why We Thugs | 8)Ice Cube-Smoke Some Weed");
	SendClientMessage(playerid, COLOR_WHITE, "9)Young Jeezy-Put On | 10)2pac-Ambitionz As A Ridah' | 11)Wiz Khalifa ft.Tinie Tempah-Pass Out");
	SendClientMessage(playerid, COLOR_WHITE, "12)Wiz Khalifa-Black And Yellow | 13)Nero-Innocence | 14)Jay Cole-Nobody's Perfect");
	SendClientMessage(playerid, COLOR_WHITE, "15)LMFAO-Sexy And I Know It | 16)Jojo-Marvin's Room | 17)Lil Debie ft.V-NASTY-Gotta Ball");
	SendClientMessage(playerid, COLOR_WHITE, "18)The Weeknd-Rolling Stone | 19)Eazy E-Real Muthaphuckin' G's | 20)Dr. Dre ft.Snoop Doggy Dogg-Fuck Wit Dre Day");
	SendClientMessage(playerid, COLOR_WHITE, "21)The Game ft.50 Cent-Hate It Or Love It | 22)The Game-Dreams | 23)Notorious B.I.G-Notorious Thugs");
	return 1;
}*/

CMD:loyal(playerid, params[])
{
	if(PlayerInfo[playerid][pLoyal] && PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a Loyal player.");
	SSSShowDialog(playerid, 26);
	return 1;
}

CMD:carhops(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a car for this.");
	if(CarHop[playerid] == 0)
	{
		CarHop[playerid] = 1;
		SendClientMessage(playerid, COLOR_YELLOW, "Car hop mode ON,press the SPACEBAR button while in a vehicle.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Car hop mode OFF.");
	    CarHop[playerid] = 0;
	    return 1;
	}
	return 1;
}

CMD:speedhacks(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a car for this.");
	if(SpeedHack[playerid] == 0)
	{
		SpeedHack[playerid] = 1;
		SendClientMessage(playerid, COLOR_YELLOW, "Speed hack ON,press the Left ALT button while in a vehicle.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Speed hack OFF.");
	    SpeedHack[playerid] = 0;
	    return 1;
	}
	return 1;
}

CMD:heal(playerid, params[])
{

	new giveplayerid, price;
	if(sscanf(params, "ud", giveplayerid, price)) return SendClientMessage(playerid, COLOR_GREY, "[Usage]: /heal [player] [price]");

	if(!(200 <= price <= 1000))
	{
		SendClientMessage(playerid, COLOR_GREY, "Healing price can't below $200 or above $1,000.");
		return 1;
	}
	if (giveplayerid == playerid)
	{
		SendClientMessage(playerid, COLOR_GREY, "You can't heal yourself.");
		return 1;
	}
	if (IsPlayerConnected(giveplayerid))
	{
		if(IsMedic(playerid))//model
		{
			if(GetPlayerVehicleID(giveplayerid) == FacInfo[5][fCars])
			{
			    new Float:X, Float:Y, Float:Z;
	   			GetPlayerPos(giveplayerid, X, Y, Z);

				if(!IsPlayerInRangeOfPoint(playerid, 10, X, Y, Z)) return SendClientMessage(playerid, COLOR_GREY,"You are not near that person!");
				new Float:tempheal;
				GetPlayerHealth(giveplayerid,tempheal);
				if(tempheal >= 100.0)
				{
					SendClientMessage(playerid, COLOR_GREEN,"That person is fully healed.");
					return 1;
				}
				new string[64];
				format(string, sizeof(string), "You healed %s for $%d.", RPN(giveplayerid),price);
				SendClientMessage(playerid, COLOR_RED, string);
				GiveDodMoney(playerid, price / 2);
				TaxMoney += price / 2;
				GiveDodMoney(giveplayerid, -price);
				SetPlayerHealth(giveplayerid, 100);
				PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
				PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "You have been healed to 100 health for $%d by %s.",price, RPN(playerid));
				SendClientMessage(giveplayerid, COLOR_GREEN,string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Both you and the patient must be in an ambulance.");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use that command.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}



CMD:tod(playerid, params[])
{
	new string[128], input;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", input)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /tod [hour]");
	if(input > 23) return SendClientMessage(playerid, COLOR_GREY, "Hours are between 0 and 23.");
	gettime(thour, tmin, tsec);
	thour = input;
	SetWorldTime(input);
	format(string, sizeof(string), "AdmWarn: %s has set the time to %d.", RPN(playerid), input);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:upgradecar(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!IsPlayerInRangeOfPoint(playerid, 4, 2117.5835,-1153.0809,24.2201)) return SendClientMessage(playerid, COLOR_GREY, "You are not at the tuning shop.");
    if(GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVeh] && GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVVeh]) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your dealership vehicle.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
    SSSShowDialog(playerid, 30);
    return 1;
}

CMD:customplate(playerid, params[])
{
	new plate[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!IsPlayerInRangeOfPoint(playerid, 4, 2117.5835,-1153.0809,24.2201)) return SendClientMessage(playerid, COLOR_GREY, "You are not at the tuning shop.");
    if(sscanf(params, "s[128]", plate)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /customplate [number]");
    format(plate, sizeof(plate), "%s", plate);
    SetVehicleNumberPlate(PlayerInfo[playerid][pVeh], plate);
    return 1;
}

CMD:zombiegate(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 9) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    SendClientMessage(playerid, COLOR_YELLOW, "!!You Started the Testing Fase from the Zombie Lift!!");
    MoveDynamicObject(zombieliftdoorattached1, 1784.973266, -1303.144531, 14.553212, 1.5);
    MoveDynamicObject(zombieliftdoorattached2, 1788.569458, -1303.147583, 14.552817, 1.5);
    MoveDynamicObject(zombieliftdoornotattached1, 1788.569458, -1303.147583, 14.552817, 1.5);
    MoveDynamicObject(zombieliftdoornotattached2, 1784.973266, -1303.144531, 14.553212, 1.5);
    SetTimer("zombiegateopendown", 7000, false);
            foreach(Player, i)
			{
			    if(IsPlayerLoggedIn(i))
			    {
                zombielifttt[i] = 1;
			    }
			}
	return 1;
}

CMD:gatehelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    SendClientMessage(playerid, COLOR_YELLOW, "DYNAMIC GATES HELP: {FFFFFF}/gate /changegatepass");
	return 1;
}

CMD:changegatepass(playerid, params[])
{
	new string[128], slot, password[256], idx;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "is[256]", slot, password)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /changegatepass [slot] [password]");
	if(slot < 1 || slot > 3) return SendClientMessage(playerid, COLOR_GREY, "Gate slots are between 1 and 3.");
	switch(slot)
	{
		case 1: idx = PlayerInfo[playerid][pGate][0];
		case 2: idx = PlayerInfo[playerid][pGate][1];
		case 3: idx = PlayerInfo[playerid][pGate][2];
	}
	if(!idx) return SendClientMessage(playerid, COLOR_GREY, "You don't have a gate registered to this slot.");
	format(GateInfo[idx][gPassword], 256, "%s", password);
 	format(string, sizeof(string), " You have changed your slot %d (ID: %d) gate's password to {FF6347}%s", slot, idx, password);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:fishhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    SendClientMessage(playerid, COLOR_YELLOW, "FISH HELP: {FFFFFF}/fish /fishes /sellfish /drop");
	return 1;
}

CMD:sellfish(playerid, params[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, string[128], fish, price;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside a 24/7 Market.");
	if(sscanf(params, "i", fish)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sellfish [fishslot]");
	if(fish < 1 || fish > 5) return SendClientMessage(playerid, COLOR_GREY, "Fishes are between 1 and 5.");
	fish = fish-1;
	if(!PlayerInfo[playerid][pFish][fish]) return SendClientMessage(playerid, COLOR_GREY, "You don't have any fish in this slot.");
	if(PlayerInfo[playerid][pFish][fish] < 20) return SendClientMessage(playerid, COLOR_GREY, "You can't sell fishes that weight less than 20 lbs.");
	price = PlayerInfo[playerid][pFish][fish] * 2;
	GiveDodMoney(playerid, price);
	PlayerInfo[playerid][pFish][fish] = 0;
	format(string, sizeof(string), "* %s has sold a fish to the 24/7 market.", RPN(playerid));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have sold a {FF6347}%d lbs{33CCFF} fish for {FF6347}$%d{33CCFF}.", price/2, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:fishes(playerid, params[])
{
	new string[128];
    SendClientMessage(playerid, COLOR_GREEN, "____________________________");
	SendClientMessage(playerid, COLOR_ORANGE, "*** Your Fishes ***");
	for(new i=0; i<5; i++)
	{
		if(PlayerInfo[playerid][pFish][i]) format(string, sizeof(string), "%d) %d lbs.", i+1, PlayerInfo[playerid][pFish][i]);
		else format(string, sizeof(string), "%d) None.", i+1);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}


CMD:fish(playerid, params[])
{
	new string[128], done, fish;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAtFishingSpot(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not at a fishing spot.");
	if(FishTime[playerid])
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before fishing again.", FishTime[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);

	    return 1;
	}
	for(new i=0; i<5; i++) // Fish
	{
	    if(!done)
	    {
		    if(!PlayerInfo[playerid][pFish][i]) done = i+1;
	    }
	}
	if(!done) return SendClientMessage(playerid, COLOR_GREY, "You can't carry anymore fishes.");
	done = done-1;
	// Catching
	if(strval(RPJL(playerid, JOB_FISHER)) == 1) fish = random(25)+1;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 2) fish = random(26)+5;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 3) fish = random(31)+10;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 4) fish = random(36)+15;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 5) fish = random(41)+25;
	PlayerInfo[playerid][pFish][done] = fish;
	format(string, sizeof(string), "* %s attempts to catch a fish using the fishing rod.", RPN(playerid));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), " You have caught a %d lbs fish.", fish);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	// Leveling
    new oldj = strval(RPJL(playerid, JOB_FISHER));
    PlayerInfo[playerid][pJobSkill][JOB_FISHER] ++;
	new newj = strval(RPJL(playerid, JOB_FISHER));
    if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Fisher level is now %d, you can now catch heavier fishes. **", newj);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	Fished[playerid] ++;
	if(Fished[playerid] >= 5)
	{
		Fished[playerid] = 0;
		FishTime[playerid] = 60*5;
		SetTimerEx("FishingTime", 1000, false, "i", playerid);
	}
	return 1;
}

CMD:stuck(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(IsPlayerCuffed(playerid) || IsPlayerTazed(playerid) || IsPlayerTied(playerid) || Boxing[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't do that at this time.");
	TogglePlayerControllable(playerid, 1);
	return 1;
}

CMD:train(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 756.3295,5.6053,1000.6988)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the training spot inside the gym.");
	SSSShowDialog(playerid, 22);
	return 1;
}

CMD:tow(playerid, params[])
{
//	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if (!IsATowTruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You are not in a tow truck.");
    if  (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) SendClientMessage(playerid, COLOR_GREY, "You are already towing a vehicle.");
    new Float:PPPX,Float:PPPY,Float:PPPZ;
    GetPlayerPos(playerid,PPPX,PPPY,PPPZ);
    new Float:VVVX,Float:VVVY,Float:VVVZ;
    new Found=0;
    new vid=0;
    while((vid<MAX_VEHICLES)&&(!Found))
    {
    	vid++;
        GetVehiclePos(vid,VVVX,VVVY,VVVZ);
        if  ((floatabs(PPPX-VVVX)<7.0)&&(floatabs(PPPY-VVVY)<7.0)&&(floatabs(PPPZ-VVVZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
        {
        	Found=1;
            AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
        }

    }
    if  (!Found)
    {
		SendClientMessage(playerid,COLOR_GREY,"There is no vehicle in range.");
    }
    return 1;
}

CMD:gascan(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pGas]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a gas can on you.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
    new vehicleid = GetPlayerVehicleID(playerid);
    if(Fuel[vehicleid] >= 150) return SendClientMessage(playerid, COLOR_GREY, "The gas tank is completely full.");
	SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
	Fuel[vehicleid] = Fuel[vehicleid]+20;
	if(Fuel[vehicleid]> 150) Fuel[vehicleid] = 150;
	PlayerInfo[playerid][pGas] --;
	format(string, sizeof(string), "* %s completely turns off the vehicle and fills its tank with gas from a can.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:fuel(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
	if(!IsPlayerInRangeOfPoint(playerid, 5, 1941.7532,-1776.3621,13.6406) && !IsPlayerInRangeOfPoint(playerid, 5, 1941.7856,-1769.2583,13.6406)
	&& !IsPlayerInRangeOfPoint(playerid, 5, 1000.4276,-937.2377,42.3281) && !IsPlayerInRangeOfPoint(playerid, 5, 1007.4702,-936.3239,42.3281))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not near a gas station.");
	    return 1;
	}
	if(Fuel[GetPlayerVehicleID(playerid)] >= 100) return SendClientMessage(playerid, COLOR_GREY, "Your vehicle's fuel tank is full.");
	if(PlayerInfo[playerid][pMoney] <= 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you to do that.");
    new vehicleid = GetPlayerVehicleID(playerid);
	SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
    {SetVehicleParamsEx(vehicleid, 0, 0, 0, PlayerInfo[playerid][vLocked], 0, 0, 0);}
    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
    {SetVehicleParamsEx(vehicleid, 0, 0, 0, PlayerInfo[playerid][vVLocked], 0, 0, 0);}
    format(string, sizeof(string), "* %s completely turns the vehicle off and starts refilling it from the gas station.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SetTimerEx("RefillTimer", 1000, false, "i", playerid);
	return 1;
}

CMD:cookieshelp(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	format(string, sizeof(string), "* You have %d cookies.", PlayerInfo[playerid][pCookies]);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	SendClientMessage(playerid, COLOR_WHITE, " Full Health (1 Cookie) | Full Armor (2 Cookies) | 200 Bullets (4 Cookies)");
	SendClientMessage(playerid, COLOR_WHITE, " 50 Weed (6 Cookies) | 50 cocaine (8 Cookies) | Weapon Set (10 Cookies)");
	SendClientMessage(playerid, COLOR_LIGHTRED, " COOKIES [Usage]: /usecookies [option]");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	return 1;
}

CMD:usecookies(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /usecookies [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Health | Armor | Bullets | Weed | cocaine | Weapon Set");
		return 1;
	}
	if(!strcmp(params, "health", true))
	{
	    if(PlayerInfo[playerid][pCookies] < 1) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cookies on you for that.");
	    SetPlayerHealth(playerid, 100);
		PlayerInfo[playerid][pCookies] -= 1;
		format(string, sizeof(string), "* %s has used some cookies.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 1 cookie for full health.");
	}
	else if(!strcmp(params, "armor", true))
	{
	    if(PlayerInfo[playerid][pCookies] < 2) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cookies on you for that.");
	    SetPlayerArmour(playerid, 100);
	    PlayerInfo[playerid][pCookies] -= 2;
	    format(string, sizeof(string), "* %s has used some cookies.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 2 cookies for full armor.");
	}
	else if(!strcmp(params, "bullets", true))
	{
	    if(PlayerInfo[playerid][pCookies] < 4) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cookies on you for that.");
	    if(!IsHoldingBullets(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not holding a weapon with bullets.");
	    GiveDodWeapon(playerid, GetPlayerWeapon(playerid), 200);
	    PlayerInfo[playerid][pCookies] -= 4;
	    format(string, sizeof(string), "* %s has used some cookies.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 4 cookies for 200 bullets for the weapon you are holding.");
	}
	else if(!strcmp(params, "weed", true))
	{
	    if(PlayerInfo[playerid][pCookies] < 5) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cookies on you for that.");
	    PlayerInfo[playerid][pWeed] += 50;
	    PlayerInfo[playerid][pCookies] -= 6;
	    format(string, sizeof(string), "* %s has used some cookies.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 6 cookies for 50 grams of weed.");
	}
	else if(!strcmp(params, "cocaine", true))
	{
	    if(PlayerInfo[playerid][pCookies] < 8) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cookies on you for that.");
	    PlayerInfo[playerid][pcocaine] += 50;
	    PlayerInfo[playerid][pCookies] -= 8;
	    format(string, sizeof(string), "* %s has used some cookies.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 8 cookies for 50 grams of cocaine.");
	}
	else if(!strcmp(params, "weapon set", true))
	{
	    if(PlayerInfo[playerid][pCookies] < 10) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cookies on you for that.");
	    GiveDodWeapon(playerid, 24, 500);
	    GiveDodWeapon(playerid, 27, 500);
	    GiveDodWeapon(playerid, 31, 500);
	    PlayerInfo[playerid][pCookies] -= 10;
	    format(string, sizeof(string), "* %s has used some cookies.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 10 cookies for a weapon set.");
	}
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

/*CMD:refhelp(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	format(string, sizeof(string), "* You have %d referral points.", PlayerInfo[playerid][pRefPoints]);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	SendClientMessage(playerid, COLOR_WHITE, " Referral system is a way for players to gain prizes for inviting their friends to the server.");
	SendClientMessage(playerid, COLOR_WHITE, " Prizes for referral points can be asked an admin.");
	SendClientMessage(playerid, COLOR_WHITE, " When you invite someone to the server they have to gain 4 respect points before making you their refer.");
	SendClientMessage(playerid, COLOR_WHITE, " This is an attempt to prevent players from creating new accounts and giving theirselves referral points.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	return 1;
}

CMD:refer(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHours] < 4) return SendClientMessage(playerid, COLOR_GREY, "You need to have at least 4 respect points before making someone your refer.");
	if(!PlayerInfo[playerid][pNew]) return SendClientMessage(playerid, COLOR_GREY, "You are not a new player or you've already made someone your refer.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /refer [playerid]");
	format(string, sizeof(string), "RefWarn: %s has made you their refer, you have gained a referral point.", RPN(playerid));
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), "RefWarn: You have made %s your refer, he has gained a referral point.", RPN(playerb));
	SendClientMessage(playerid, COLOR_LIME, string);
	PlayerInfo[playerid][pNew] = 0;
	PlayerInfo[playerb][pRefPoints] ++;
	format(string, sizeof(string), "%s (%s) has made %s (%s) their refer.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb));
	Log("logs/referral.log", string);
	return 1;
}
*/
CMD:viphelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW, "BRONZE VIP: {FFFFFF}/v /vip /vipelevator(out of use) /vips /mech + /buyhealth /buyarmor + [VIP Lounge | Newbie Tag]");
	SendClientMessage(playerid, COLOR_YELLOW, "SILVER VIP: {FFFFFF}/buyviptoys + Bronze VIP + [2 Jobs | 2 Vehicles]");
	SendClientMessage(playerid, COLOR_YELLOW, "GOLD VIP: {FFFFFF}/vipbuddy + Silver VIP + [2 Houses]");
	SendClientMessage(playerid, COLOR_YELLOW, "Platinum VIP: {FFFFFF}/buygun + Gold VIP + [2 Businesses]");
	return 1;
}

CMD:buyarmor(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1832.5887,-1306.7380,132.0060)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the VIP armor spot.");
	if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you. ($100)");
	GiveDodMoney(playerid, -100);
	SetPlayerArmour(playerid, 100);
	return 1;
}

CMD:buyhealth(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1833.2135,-1308.3567,131.9855)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the VIP health spot.");
	if(PlayerInfo[playerid][pMoney] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you. ($50)");
	GiveDodMoney(playerid, -50);
	SetPlayerHealth(playerid, 100);
	return 1;
}

CMD:buygun(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(PlayerInfo[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not Platinum VIP.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1821.7468,-1306.9668,131.9721)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the VIP Weapons Shop.");
	SSSShowDialog(playerid, 19);
	return 1;
}

CMD:vipbuddy(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(PlayerInfo[playerid][pVIPBuddy])
	{
	    format(string, sizeof(string), " You need to wait %d more hours before giving someone else Bronze VIP.", PlayerInfo[playerid][pVIPBuddy]);
	    SendClientMessage(playerid, COLOR_GREY, string);
	    return 1;
	}
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /vipbuddy [playerid]");
	if(PlayerInfo[playerb][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "Player is already VIP");
	PlayerInfo[playerid][pVIPBuddy] = 12;
	PlayerInfo[playerb][pVIP] = 1;
	PlayerInfo[playerb][pVIPTemp] = 60;
	format(string, sizeof(string), " You have given %s temporary Bronze VIP package for an hour.", RPN(playerb));
	SendClientMessage(playerid, COLOR_VIP, string);
	format(string, sizeof(string), " %s has given you temporary Bronze VIP package for an hour.", RPN(playerid));
	SendClientMessage(playerb, COLOR_VIP, string);
	return 1;
}

CMD:v(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /v [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(VIPOff[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You have the VIP chat toggled off.");
	format(string, sizeof(string), "** %s VIP %s: %s", RPVIPN(playerid), RPN(playerid), params);
	SendVIPMessage(COLOR_VIP, string);
	return 1;
}

CMD:vip(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SSSShowDialog(playerid, 16);
	return 1;
}

CMD:vips(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_ORANGE, "Online VIPs");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pVIP])
	    {
	        if(PlayerInfo[i][pVIPTemp])
	        {
		        format(string, sizeof(string), "- [%s VIP] %s [Expires in %d minutes] [VIP Buddy]", RPVIPN(i), RPN(i), PlayerInfo[i][pVIPTemp]);
		        SendClientMessage(playerid, COLOR_VIP, string);
	        }
	        else
	        {
		        format(string, sizeof(string), "- [%s VIP] %s [Expires on: %d/%d]", RPVIPN(i), RPN(i), PlayerInfo[i][pVIPDay], PlayerInfo[i][pVIPMonth]);
		        SendClientMessage(playerid, COLOR_VIP, string);
	        }
	    }
	}
	return 1;
}

CMD:accent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[16]", params))
	{
        SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /accent [accent]");
     	SendClientMessage(playerid, COLOR_GREY, "Available Accents: None, British, Asian , Scottish, Irish, Russian");
    	SendClientMessage(playerid, COLOR_GREY, "Available Accents: American, Spanish, Southern, Italian, Afro-American, Australian");
    	SendClientMessage(playerid, COLOR_GREY, "Available Accents: Arabic, Balkan, Canadian,  Jamaican, Israeli, African");
    	return 1;
    }
	if(AntiAdv(playerid, params)) return 1;
	if(!strcmp(params, "none"))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You are not using any accent now.");
	}
	else if(!strcmp(params, "Asian", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Asian");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Asian'.");
     	return 1;
	}
	else if(!strcmp(params, "British", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "British");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'British'.");
     	return 1;
	}
	else if(!strcmp(params, "Scottish", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Scottish");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Scottish'.");
     	return 1;
	}
	else if(!strcmp(params, "Irish", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Irish");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Irish'.");
     	return 1;
	}
	else if(!strcmp(params, "Russian", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Russian");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Russian'.");
     	return 1;
	}
	else if(!strcmp(params, "American", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "American");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'American'.");
     	return 1;
	}
	else if(!strcmp(params, "Spanish", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Spanish");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Spanish'.");
     	return 1;
	}
	else if(!strcmp(params, "Southern", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Southern");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Southern'.");
     	return 1;
	}
	else if(!strcmp(params, "Italian", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Italian");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Italian'.");
     	return 1;
	}
	else if(!strcmp(params, "Afro-American", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Afro-American");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Afro-American'.");
     	return 1;
	}
	else if(!strcmp(params, "Australian", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Australian");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Australian'.");
     	return 1;
	}
	else if(!strcmp(params, "Arabic", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Arabic");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Arabic'.");
     	return 1;
	}
	else if(!strcmp(params, "Balkan", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Balkan");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Balkan'.");
     	return 1;
	}
	else if(!strcmp(params, "Jamaican", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Jamaican");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Jamaican'.");
     	return 1;
	}
	else if(!strcmp(params, "Canadian", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Canadian");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Canadian'.");
     	return 1;
	}
	else if(!strcmp(params, "Israeli", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "Israeli");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'Israeli'.");
     	return 1;
	}
	else if(!strcmp(params, "African", true))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "African");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You've changed your accent to 'African'.");
     	return 1;
	}
	return 1;
}

CMD:licenses(playerid, params[])
{
	new string[256], carlicense[128], flylicense[128], weplicense[128];
    if(PlayerInfo[playerid][pCarLic] == 1) format(carlicense, sizeof(carlicense), "Passed");
	else if(PlayerInfo[playerid][pCarLic] == 0) format(carlicense, sizeof(carlicense), "Not Passed");
	if(PlayerInfo[playerid][pFlyLic] == 1) format(flylicense, sizeof(flylicense), "Passed");
	else if(PlayerInfo[playerid][pFlyLic] == 0) format(flylicense, sizeof(flylicense), "Not Passed");
	if(PlayerInfo[playerid][pWepLic] == 1) format(weplicense, sizeof(weplicense), "Passed");
	else if(PlayerInfo[playerid][pWepLic] == 0) format(weplicense, sizeof(weplicense), "Not Passed");
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	format(string, sizeof(string), "|____ %s Licenses ____|", RPN(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Name: {FFFFFF}%s", RPN(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Driving License Status: {FFFFFF}%s", carlicense);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Flying License Status: {FFFFFF}%s", flylicense);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Weapon License Status: {FFFFFF}%s", weplicense);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	new string[256], playerb, carlicense[128], flylicense[128], weplicense[128];
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /showlicenses [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pCarLic] == 1) format(carlicense, sizeof(carlicense), "Passed");
	else if(PlayerInfo[playerb][pCarLic] == 0) format(carlicense, sizeof(carlicense), "Not Passed");
	if(PlayerInfo[playerb][pFlyLic] == 1) format(flylicense, sizeof(flylicense), "Passed");
	else if(PlayerInfo[playerb][pFlyLic] == 0) format(flylicense, sizeof(flylicense), "Not Passed");
	if(PlayerInfo[playerb][pWepLic] == 1) format(weplicense, sizeof(weplicense), "Passed");
	else if(PlayerInfo[playerb][pWepLic] == 0) format(weplicense, sizeof(weplicense), "Not Passed");
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	format(string, sizeof(string), "|____ %s Licenses ____|", RPN(playerid));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Name: {FFFFFF}%s", RPN(playerid));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Driving License Status: {FFFFFF}%s", carlicense);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Flying License Status: {FFFFFF}%s", flylicense);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Weapon License Status: {FFFFFF}%s", weplicense);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:getlicense(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!IsPlayerInRangeOfPoint(playerid,2.0,962.3975,-1433.5745,14.0537)) return SendClientMessage(playerid, COLOR_GREY, "You are not by the DMV desk.");
    SSSShowDialog(playerid, 39);
	return 1;
}
CMD:joinevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(Event[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are already in the event.");
	if(!EventOn) return SendClientMessage(playerid, COLOR_GREY, "There's no current event happening.");
	if(EventLocked) return SendClientMessage(playerid, COLOR_GREY, "The event is locked, be faster next time.");
	PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, eX, eY, eZ);
	GetPlayerHealth(playerid, eHP);
	GetPlayerArmour(playerid, eARMOR);
	SetPlayerPos(playerid, ePos[0], ePos[1], ePos[2]);
	SetPlayerInterior(playerid, eInt);
	SetPlayerVirtualWorld(playerid, eVW);
	for(new i=0; i<13; i++)
	{
		GetPlayerWeaponData(playerid, i, PlayerInfo[playerid][pWeapon][i], PlayerInfo[playerid][pWeaponAmmo][i]);
	}
	GunsBeingRemoved[playerid] = 1;
	ResetPlayerWeapons(playerid);
	Event[playerid] = 1;
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** Please wait until the event starts and you will recieve everything set by the organizer ***");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** Your original health, armor and weapons will be refunded once you leave the event, /quitevent to leave at any time ***");
	return 1;
}




CMD:quitevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!EventOn) return SendClientMessage(playerid, COLOR_GREY, "There's no current event happening.");
	if(!Event[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not inside the event.");
	Event[playerid] = 0;
	SetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
	SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
	SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
	SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	SetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** You have quit the event ***");
	GunsBeingRemoved[playerid] = 1;
	ResetPlayerWeapons(playerid);
	GunsBeingRemoved[playerid] = 1;
	for(new w = 0; w < 13; w++)
	{
	    GiveDodWeapon(playerid, PlayerInfo[playerid][pWeapon][w], PlayerInfo[playerid][pWeaponAmmo][w]);
	}
	return 1;
}

CMD:helpers(playerid, params[])
{
	new online, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pHelper])
	    {
	        online ++;
	    }
	}
	format(string, sizeof(string), "|_____ Online Community Helpers Team _____|");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pHelper])
	    {
	        format(string, sizeof(string), " %s %s ", RPHLN(i), RPN(i));
	        SendClientMessage(playerid, COLOR_LIME, string);
	    }
	}
	return 1;
}


CMD:helperhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHelper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW, "** Helper: {FFFFFF}/hc /pm /newbie (unlimited)");
	SendClientMessage(playerid, COLOR_YELLOW, "** Helper: {FFFFFF}/nwarn /nunmute /fix");
	SendClientMessage(playerid, COLOR_YELLOW, "** Helper: {FFFFFF}/sendnewbieto /goto");
	SendClientMessage(playerid, COLOR_YELLOW, "** Helper: {FFFFFF}/goback /gethere");
	return 1;
}
CMD:hc(playerid, params[])
{
    new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pHelper] && !PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/hc) [text]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(AntiAdv(playerid, params)) return 1;
	if(PlayerInfo[playerid][pHelper]) format(string, sizeof(string), "** %s %s: %s", RPHLN(playerid), RPN(playerid), params);
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i))
		{
			if(PlayerInfo[i][pHelper] || PlayerInfo[i][pAdmin])
			{
		    	SendClientMessage(i, COLOR_LIME, string);
			}
		}
	}
	// Logs
	if(PlayerInfo[playerid][pHelper] && !PlayerInfo[playerid][pAdmin]) format(string, sizeof(string), "*%s %s: %s", RPHLN(playerid), RPN(playerid), params);
    else if(!PlayerInfo[playerid][pHelper] && PlayerInfo[playerid][pAdmin])format(string, sizeof(string), "*%s %s: %s", RPALN(playerid), RPN(playerid), params);
	Log("logs/helperchat.log", string);
	return 1;
}

CMD:starttalk(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /starttalk [playerid]");
	if(Chat[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "You are already chatting with someone.");
	if(Chat[playerb] != -1) return SendClientMessage(playerid, COLOR_GREY, "Player is already chatting with someone.");
	Chat[playerid] = playerb;
	Chat[playerb] = playerid;
	format(string, sizeof(string), "* %s %s has started a {00FF00}chat {FF6347}with you, /talk to talk to him.", RPALN(playerid), RPN(playerid));
	SendClientMessage(playerb, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "* You have started a {00FF00}chat {FF6347}with %s, /talk to talk to him.", RPN(playerb));
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	return 1;
}

CMD:endtalk(playerid, params[])
{
	new string[128];
 	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(Chat[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "You are not chatting with someone.");
	new playerb = Chat[playerid];
	Chat[playerid] = -1;
	Chat[playerb] = -1;
	format(string, sizeof(string), "* %s %s has ended the {00FF00}chat {FF6347}with you.", RPALN(playerid), RPN(playerid));
	SendClientMessage(playerb, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "* You have ended the {00FF00}chat {FF6347}with %s.", RPN(playerb));
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	return 1;
}

CMD:talk(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(Chat[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "You are not chatting with anybody.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /talk [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(PlayerInfo[playerid][pAdmin]) format(string, sizeof(string), "* %s %s: {00FF00}%s", RPALN(playerid), RPN(playerid), params);
	else format(string, sizeof(string), "* Player %s: {00FF00}%s", RPN(playerid), params);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	SendClientMessage(Chat[playerid], COLOR_LIGHTRED, string);
	return 1;
}

CMD:speedlimit(playerid, params[])
{
	new string[128], speed;
 	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "i", speed)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /speedlimit [Max MPH]");
	if(speed < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid MPH speed.");
	Speedlimit[playerid] = speed;
	if(speed == 0) format(string, sizeof(string), " You have turned your speed limit off.", speed);
    else format(string, sizeof(string), " You have set your speed limit to %d MPH, any vehicle you drive will not go past this limit.", speed);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:locatecar(playerid, params[])
{
	new Float:vx, Float:vy, Float:vz;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][vModel]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a vehicle.");
    if(PlayerInfo[playerid][pVVeh])
    {
        new carid;
		if(sscanf(params, "i", carid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /locatecar [1-2]");
		if(carid == 1)
		{
			GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
			SetPlayerCheckpoint(playerid, vx, vy, vz, 2);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, " A marker on your GPS showing where your vehicle is has been placed. (Vehicle 1)");
		}
		else if(carid == 2)
		{
			GetVehiclePos(PlayerInfo[playerid][pVVeh], vx, vy, vz);
			SetPlayerCheckpoint(playerid, vx, vy, vz, 2);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, " A marker on your GPS showing where your vehicle is has been placed. (Vehicle 2)");
		}
    }
    else
	{
		GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
		SetPlayerCheckpoint(playerid, vx, vy, vz, 2);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, " A marker on your GPS showing where your vehicle is has been placed.");
	}
	return 1;
}

CMD:donatorcar(playerid, params[])
{
	new playerb, carid, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player ID.");
    if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(sscanf(params, "ui", playerb, carid))
    {
        SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /donatorcar [playerid] [carid]");
        return 1;
	}
	if(PlayerInfo[playerb][vModel] && PlayerInfo[playerb][vVModel] && PlayerInfo[playerb][vVVModel])
	{
		format(string, sizeof(string), "That player already owns vehicles ID %d and %d and %d.", PlayerInfo[playerb][pVeh], PlayerInfo[playerb][pVVeh], PlayerInfo[playerb][pVVVeh]);
		SendClientMessage(playerid, COLOR_GREY, string);
  		return 1;
	}
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerb, X, Y, Z);
	if(PlayerInfo[playerb][vModel])
 	{
  		PlayerInfo[playerb][pVVeh] = CreateVehicle(carid, X,Y,Z,272.3125,0,0,1200);
    	SetVehicleParamsEx(PlayerInfo[playerb][pVVeh], 0, 0, 0, 1, 0, 0, 0);
     	PlayerInfo[playerb][vVLocked] = 1;
      	PlayerInfo[playerb][vVModel] = carid;
		GetVehiclePos(PlayerInfo[playerb][pVVeh], PlayerInfo[playerb][vVX], PlayerInfo[playerb][vVY], PlayerInfo[playerb][vVZ]);
		GetVehicleZAngle(PlayerInfo[playerb][pVVeh], PlayerInfo[playerb][vVA]);
		PlayerInfo[playerb][vVC1] = 0;
		PlayerInfo[playerb][vVC2] = 0;
		PutPlayerInVehicle(playerb, PlayerInfo[playerb][pVVeh], 0);
		format(string, sizeof(string), "AdmWarn:%s %s has gifted %s a %s.", RPALN(playerid), RPN(playerid), RPN(playerb), RVN(GetVehicleModel(PlayerInfo[playerb][pVVeh])));
		SendAdminMessage(COLOR_DARKRED, 1, string);
		return 1;
  	}
	if(PlayerInfo[playerb][vModel] && PlayerInfo[playerb][vVModel])
 	{
  		PlayerInfo[playerb][pVVVeh] = CreateVehicle(carid, X,Y,Z,272.3125,0,0,1200);
    	SetVehicleParamsEx(PlayerInfo[playerb][pVVVeh], 0, 0, 0, 1, 0, 0, 0);
     	PlayerInfo[playerb][vVVLocked] = 1;
      	PlayerInfo[playerb][vVVModel] = carid;
		GetVehiclePos(PlayerInfo[playerb][pVVVeh], PlayerInfo[playerb][vVVX], PlayerInfo[playerb][vVVY], PlayerInfo[playerb][vVVZ]);
		GetVehicleZAngle(PlayerInfo[playerb][pVVeh], PlayerInfo[playerb][vVA]);
		PlayerInfo[playerb][vVVC1] = 0;
		PlayerInfo[playerb][vVVC2] = 0;
		PutPlayerInVehicle(playerb, PlayerInfo[playerb][pVVVeh], 0);
		format(string, sizeof(string), "AdmWarn:%s %s has gifted %s a %s.", RPALN(playerid), RPN(playerid), RPN(playerb), RVN(GetVehicleModel(PlayerInfo[playerb][pVVeh])));
		SendAdminMessage(COLOR_DARKRED, 1, string);
		return 1;
  	}
   	PlayerInfo[playerb][pVeh] = CreateVehicle(carid, X,Y,Z,272.3125,0,0,1200);
    SetVehicleParamsEx(PlayerInfo[playerb][pVeh], 0, 0, 0, 1, 0, 0, 0);
    PlayerInfo[playerb][vLocked] = 1;
    PlayerInfo[playerb][vModel] = carid;
	GetVehiclePos(PlayerInfo[playerb][pVeh], PlayerInfo[playerb][vX], PlayerInfo[playerb][vY], PlayerInfo[playerb][vZ]);
	GetVehicleZAngle(PlayerInfo[playerb][pVeh], PlayerInfo[playerb][vA]);
	PlayerInfo[playerb][vC1] = 0;
	PlayerInfo[playerb][vC2] = 0;
	PutPlayerInVehicle(playerb, PlayerInfo[playerb][pVeh], 0);
	format(string, sizeof(string), "AdmWarn:%s %s has gifted %s a %s.", RPALN(playerid), RPN(playerid), RPN(playerb), RVN(GetVehicleModel(PlayerInfo[playerb][pVeh])));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:buycar(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 545.6661,-1292.2437,17.2422)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the vehicles dealership.");
	//if(PlayerInfo[playerid][pVIP] >= 2)
	//{
		if(PlayerInfo[playerid][vModel] && PlayerInfo[playerid][vVModel] && PlayerInfo[playerid][vVVModel])
		{
			format(string, sizeof(string), "You already own vehicles ID %d and %d and %d.", PlayerInfo[playerid][pVeh], PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][pVVVeh]);
			SendClientMessage(playerid, COLOR_GREY, string);
		    return 1;
		}
		else SSSShowDialog(playerid, 10);
	    return 1;
	/*}
	if(PlayerInfo[playerid][vModel])
	{
		format(string, sizeof(string), "You already own vehicle ID %d.", PlayerInfo[playerid][pVeh]);
		SendClientMessage(playerid, COLOR_GREY, string);
	    return 1;
	}
	SSSShowDialog(playerid, 10);
	return 1;*/
}

CMD:asellcar(playerid, params[])
{
    new playerb, carid, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(sscanf(params, "ui", playerb, carid))
    {
        SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /asellcar [playerid] [carid]");
        return 1;
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player ID.");
	if(!PlayerInfo[playerb][pVeh] && !PlayerInfo[playerb][pVVeh] && !PlayerInfo[playerb][pVVVeh]) return SendClientMessage(playerid, COLOR_GREY, "This player doesn't own a vehicle.");
	// Start of Payback
	new price;
	// BMX ($600)\nFaggio ($4,000)\nFreeway ($6,000)\nSanchez ($4,000)\nQuad ($6,000)\nPCJ-600 ($20,000)\nFCR-900 ($25,000)
	if(GetVehicleModel(carid) == 481) price = 600;
	else if(GetVehicleModel(carid) == 462) price = 4000;
	else if(GetVehicleModel(carid) == 463) price = 6000;
	else if(GetVehicleModel(carid) == 468) price = 4000;
	else if(GetVehicleModel(carid) == 471) price = 6000;
	else if(GetVehicleModel(carid) == 461) price = 20000;
	else if(GetVehicleModel(carid) == 521) price = 25000; // End of Bikes
	// Comet ($30,000)\nFeltzer ($26,000)\nStallion ($26,000)\nWindsor ($28,000)\nSentinel ($24,000)\nManana ($22,000)
	else if(GetVehicleModel(carid) == 480) price = 30000;
	else if(GetVehicleModel(carid) == 533) price = 26000;
	else if(GetVehicleModel(carid) == 439) price = 26000;
	else if(GetVehicleModel(carid) == 555) price = 28000;
	else if(GetVehicleModel(carid) == 405) price = 24000;
	else if(GetVehicleModel(carid) == 410) price = 22000; // End of Normal Vehicles
	// Huntley ($22,000)\nLandstalker ($24,000)\nSandking ($30,000)
	else if(GetVehicleModel(carid) == 579) price = 22000;
	else if(GetVehicleModel(carid) == 400) price = 24000;
	else if(GetVehicleModel(carid) == 495) price = 30000; // End of Off-Road vehicles
	// Sultan ($60,000)\nBanshee ($65,000)\nBuffalo ($70,000)\nBullet ($90,000)\nCheetah ($80,000)\nJester ($70,000)\nTurismo ($110,000)\nSuper GT(200,000$)\nInfernus($300,000)
	else if(GetVehicleModel(carid) == 560) price = 60000;
	else if(GetVehicleModel(carid) == 429) price = 65000;
	else if(GetVehicleModel(carid) == 402) price = 70000;
	else if(GetVehicleModel(carid) == 541) price = 90000;
	else if(GetVehicleModel(carid) == 415) price = 80000;
	else if(GetVehicleModel(carid) == 559) price = 70000;
	else if(GetVehicleModel(carid) == 451) price = 110000;
	else if(GetVehicleModel(carid) == 506) price = 200000;
	else if(GetVehicleModel(carid) == 411) price = 300000; // End of Sport vehicles
	// Blade($25,000)\nBroadway ($35,000)\nRemington ($30,000)\nSavanna ($25,000)\nSlamvan ($27,000)\nTornado ($24,000)\nVoodo ($30,000)
	else if(GetVehicleModel(carid) == 536) price = 25000;
	else if(GetVehicleModel(carid) == 575) price = 35000;
	else if(GetVehicleModel(carid) == 534) price = 30000;
	else if(GetVehicleModel(carid) == 567) price = 25000;
    else if(GetVehicleModel(carid) == 535) price = 27000;
    else if(GetVehicleModel(carid) == 576) price = 24000;
    else if(GetVehicleModel(carid) == 412) price = 30000;

	GiveDodMoney(playerb, (75*price)/100);
	neon[playerb] = 1;
	vneon[playerb] = 1;
	// End of Payback
	if(carid == PlayerInfo[playerb][pVeh])
	{
	    DestroyObject(GetPVarInt(playerb, "neon"));
   		DestroyObject(GetPVarInt(playerb, "neon1"));
	    DestroyObject(GetPVarInt(playerb, "neon2"));
    	DestroyObject(GetPVarInt(playerb, "neon3"));
    	DestroyObject(GetPVarInt(playerb, "neon4"));
    	DestroyObject(GetPVarInt(playerb, "neon5"));
    	DestroyObject(GetPVarInt(playerb, "neon6"));
    	DestroyObject(GetPVarInt(playerb, "neon7"));
    	DestroyObject(GetPVarInt(playerb, "neon8"));
    	DestroyObject(GetPVarInt(playerb, "neon9"));
    	DestroyObject(GetPVarInt(playerb, "neon10"));
    	DestroyObject(GetPVarInt(playerb, "neon11"));
    	DestroyObject(GetPVarInt(playerb, "nb1"));
    	DestroyObject(GetPVarInt(playerb, "nb2"));
    	DestroyObject(GetPVarInt(playerb, "nb3"));
    	DestroyObject(GetPVarInt(playerb, "nb4"));
    	DestroyObject(GetPVarInt(playerb, "nb5"));
    	DestroyObject(GetPVarInt(playerb, "nb6"));
    	neon[playerb] = 1;
		DestroyVehicle(PlayerInfo[playerb][pVeh]);
		PlayerInfo[playerb][pVeh] = 0;
	    PlayerInfo[playerb][vModel] = 0;
		PlayerInfo[playerb][vX] = 0;
		PlayerInfo[playerb][vY] = 0;
		PlayerInfo[playerb][vZ] = 0;
		PlayerInfo[playerb][vA] = 0;
		PlayerInfo[playerb][vC1] = 0;
		PlayerInfo[playerb][vC2] = 0;
		PlayerInfo[playerb][pTWeed] = 0;
		PlayerInfo[playerb][pTcocaine] = 0;
		PlayerInfo[playerb][pTGun][0] = 0;
		PlayerInfo[playerb][pTGunAmmo][0] = 0;
		PlayerInfo[playerb][pTGun][1] = 0;
		PlayerInfo[playerb][pTGunAmmo][1] = 0;
		PlayerInfo[playerb][pvTWeed] = 0;
		PlayerInfo[playerb][pvTcocaine] = 0;
		PlayerInfo[playerb][pvTGun][0] = 0;
		PlayerInfo[playerb][pvTGunAmmo][0] = 0;
		PlayerInfo[playerb][pvTGun][1] = 0;
		PlayerInfo[playerb][pvTGunAmmo][1] = 0;
		SendClientMessage(playerb, COLOR_GREEN, " An administrator has sold your vehicle. (75 percent of the original price was paid back)");
		format(string, sizeof(string), "AdmWarn:%s has sold %s's vehicle(ID:%d)", RPN(playerid), RPN(playerb), carid);
		SendAdminMessage(COLOR_DARKRED, 1, string);
	}
	else if(carid == PlayerInfo[playerb][pVVeh])
	{
	    DestroyObject(GetPVarInt(playerb, "vneon"));
   		DestroyObject(GetPVarInt(playerb, "vneon1"));
	    DestroyObject(GetPVarInt(playerb, "vneon2"));
    	DestroyObject(GetPVarInt(playerb, "vneon3"));
    	DestroyObject(GetPVarInt(playerb, "vneon4"));
    	DestroyObject(GetPVarInt(playerb, "vneon5"));
    	DestroyObject(GetPVarInt(playerb, "vneon6"));
    	DestroyObject(GetPVarInt(playerb, "vneon7"));
    	DestroyObject(GetPVarInt(playerb, "vneon8"));
    	DestroyObject(GetPVarInt(playerb, "vneon9"));
    	DestroyObject(GetPVarInt(playerb, "vneon10"));
    	DestroyObject(GetPVarInt(playerb, "vneon11"));
    	DestroyObject(GetPVarInt(playerb, "vnb1"));
    	DestroyObject(GetPVarInt(playerb, "vnb2"));
    	DestroyObject(GetPVarInt(playerb, "vnb3"));
    	DestroyObject(GetPVarInt(playerb, "vnb4"));
    	DestroyObject(GetPVarInt(playerb, "vnb5"));
    	DestroyObject(GetPVarInt(playerb, "vnb6"));
    	vneon[playerb] = 1;
		DestroyVehicle(PlayerInfo[playerb][pVVeh]);
		PlayerInfo[playerb][pVVeh] = 0;
	    PlayerInfo[playerb][vVModel] = 0;
		PlayerInfo[playerb][vVX] = 0;
		PlayerInfo[playerb][vVY] = 0;
		PlayerInfo[playerb][vVZ] = 0;
		PlayerInfo[playerb][vVA] = 0;
		PlayerInfo[playerb][vVC1] = 0;
		PlayerInfo[playerb][vVC2] = 0;
		SendClientMessage(playerb, COLOR_GREEN, " An administrator has sold your vehicle. (75 percent of the original price was paid back)");
		format(string, sizeof(string), "AdmWarn:%s has sold %s's vehicle(ID:%d)", RPN(playerid), RPN(playerb), carid);
		SendAdminMessage(COLOR_DARKRED, 1, string);
	}
	else if(carid == PlayerInfo[playerb][pVVVeh])
	{
	    DestroyObject(GetPVarInt(playerb, "vneon"));
   		DestroyObject(GetPVarInt(playerb, "vneon1"));
	    DestroyObject(GetPVarInt(playerb, "vneon2"));
    	DestroyObject(GetPVarInt(playerb, "vneon3"));
    	DestroyObject(GetPVarInt(playerb, "vneon4"));
    	DestroyObject(GetPVarInt(playerb, "vneon5"));
    	DestroyObject(GetPVarInt(playerb, "vneon6"));
    	DestroyObject(GetPVarInt(playerb, "vneon7"));
    	DestroyObject(GetPVarInt(playerb, "vneon8"));
    	DestroyObject(GetPVarInt(playerb, "vneon9"));
    	DestroyObject(GetPVarInt(playerb, "vneon10"));
    	DestroyObject(GetPVarInt(playerb, "vneon11"));
    	DestroyObject(GetPVarInt(playerb, "vnb1"));
    	DestroyObject(GetPVarInt(playerb, "vnb2"));
    	DestroyObject(GetPVarInt(playerb, "vnb3"));
    	DestroyObject(GetPVarInt(playerb, "vnb4"));
    	DestroyObject(GetPVarInt(playerb, "vnb5"));
    	DestroyObject(GetPVarInt(playerb, "vnb6"));
    	vneon[playerb] = 1;
		DestroyVehicle(PlayerInfo[playerb][pVVVeh]);
		PlayerInfo[playerb][pVVVeh] = 0;
	    PlayerInfo[playerb][vVVModel] = 0;
		PlayerInfo[playerb][vVVX] = 0;
		PlayerInfo[playerb][vVVY] = 0;
		PlayerInfo[playerb][vVVZ] = 0;
		PlayerInfo[playerb][vVVA] = 0;
		PlayerInfo[playerb][vVVC1] = 0;
		PlayerInfo[playerb][vVVC2] = 0;
		SendClientMessage(playerb, COLOR_GREEN, " An administrator has sold your vehicle. (75 percent of the original price was paid back)");
		format(string, sizeof(string), "AdmWarn:%s has sold %s's vehicle(ID:%d)", RPN(playerid), RPN(playerb), carid);
		SendAdminMessage(COLOR_DARKRED, 1, string);
	}
    return 1;
}
CMD:sellcartomarket(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 545.6661,-1292.2437,17.2422)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the vehicles dealership.");
	if(!PlayerInfo[playerid][pVeh] && !PlayerInfo[playerid][pVVeh] && !PlayerInfo[playerid][pVVVeh]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a vehicle.");
	if(GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVeh] && GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVVeh] && GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVVVeh]) return SendClientMessage(playerid, COLOR_GREY, "You must be in the vehicle you wish to sell to the dealership.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sellcartomarket [confirm]");
	// Start of Payback
	new price;
	if(!strcmp(params, "confirm", true))
	// BMX ($600)\nFaggio ($4,000)\nFreeway ($6,000)\nSanchez ($4,000)\nQuad ($6,000)\nPCJ-600 ($20,000)\nFCR-900 ($25,000)
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481) price = 600;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 462) price = 4000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 463) price = 6000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 468) price = 4000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 471) price = 6000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 461) price = 20000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 521) price = 25000; // End of Bikes
	// Comet ($30,000)\nFeltzer ($26,000)\nStallion ($26,000)\nWindsor ($28,000)\nSentinel ($24,000)\nManana ($22,000)
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 480) price = 30000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 533) price = 26000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 439) price = 26000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 555) price = 28000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 405) price = 24000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 410) price = 22000; // End of Normal Vehicles
	// Huntley ($22,000)\nLandstalker ($24,000)\nSandking ($30,000)
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 579) price = 22000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 400) price = 24000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 495) price = 30000; // End of Off-Road vehicles
	// Sultan ($60,000)\nBanshee ($65,000)\nBuffalo ($70,000)\nBullet ($90,000)\nCheetah ($80,000)\nJester ($70,000)\nTurismo ($110,000)\nSuper GT(200,000$)\nInfernus($300,000)
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560) price = 60000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 429) price = 65000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 402) price = 70000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 541) price = 90000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 415) price = 80000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559) price = 70000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 451) price = 110000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 506) price = 200000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 411) price = 300000; // End of Sport vehicles
	// Blade($25,000)\nBroadway ($35,000)\nRemington ($30,000)\nSavanna ($25,000)\nSlamvan ($27,000)\nTornado ($24,000)\nVoodo ($30,000)
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536) price = 25000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 575) price = 35000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534) price = 30000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567) price = 25000;
    else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535) price = 27000;
    else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576) price = 24000;
    else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 412) price = 30000;

	GiveDodMoney(playerid, (75*price)/100);
	neon[playerid] = 1;
	vneon[playerid] = 1;
	// End of Payback
	if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	{
	    DestroyObject(GetPVarInt(playerid, "neon"));
   		DestroyObject(GetPVarInt(playerid, "neon1"));
	    DestroyObject(GetPVarInt(playerid, "neon2"));
    	DestroyObject(GetPVarInt(playerid, "neon3"));
    	DestroyObject(GetPVarInt(playerid, "neon4"));
    	DestroyObject(GetPVarInt(playerid, "neon5"));
    	DestroyObject(GetPVarInt(playerid, "neon6"));
    	DestroyObject(GetPVarInt(playerid, "neon7"));
    	DestroyObject(GetPVarInt(playerid, "neon8"));
    	DestroyObject(GetPVarInt(playerid, "neon9"));
    	DestroyObject(GetPVarInt(playerid, "neon10"));
    	DestroyObject(GetPVarInt(playerid, "neon11"));
    	DestroyObject(GetPVarInt(playerid, "nb1"));
    	DestroyObject(GetPVarInt(playerid, "nb2"));
    	DestroyObject(GetPVarInt(playerid, "nb3"));
    	DestroyObject(GetPVarInt(playerid, "nb4"));
    	DestroyObject(GetPVarInt(playerid, "nb5"));
    	DestroyObject(GetPVarInt(playerid, "nb6"));
    	neon[playerid] = 1;
		DestroyVehicle(PlayerInfo[playerid][pVeh]);
		PlayerInfo[playerid][pVeh] = 0;
	    PlayerInfo[playerid][vModel] = 0;
		PlayerInfo[playerid][vX] = 0;
		PlayerInfo[playerid][vY] = 0;
		PlayerInfo[playerid][vZ] = 0;
		PlayerInfo[playerid][vA] = 0;
		PlayerInfo[playerid][vC1] = 0;
		PlayerInfo[playerid][vC2] = 0;
		PlayerInfo[playerid][pTWeed] = 0;
		PlayerInfo[playerid][pTcocaine] = 0;
		PlayerInfo[playerid][pTGun][0] = 0;
		PlayerInfo[playerid][pTGunAmmo][0] = 0;
		PlayerInfo[playerid][pTGun][1] = 0;
		PlayerInfo[playerid][pTGunAmmo][1] = 0;
		PlayerInfo[playerid][pvTWeed] = 0;
		PlayerInfo[playerid][pvTcocaine] = 0;
		PlayerInfo[playerid][pvTGun][0] = 0;
		PlayerInfo[playerid][pvTGunAmmo][0] = 0;
		PlayerInfo[playerid][pvTGun][1] = 0;
		PlayerInfo[playerid][pvTGunAmmo][1] = 0;
		SendClientMessage(playerid, COLOR_GREEN, " You have sold your vehicle to the dealership. (75 percent of the original price was paid back)");
	}
	else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	{
	    DestroyObject(GetPVarInt(playerid, "vneon"));
   		DestroyObject(GetPVarInt(playerid, "vneon1"));
	    DestroyObject(GetPVarInt(playerid, "vneon2"));
    	DestroyObject(GetPVarInt(playerid, "vneon3"));
    	DestroyObject(GetPVarInt(playerid, "vneon4"));
    	DestroyObject(GetPVarInt(playerid, "vneon5"));
    	DestroyObject(GetPVarInt(playerid, "vneon6"));
    	DestroyObject(GetPVarInt(playerid, "vneon7"));
    	DestroyObject(GetPVarInt(playerid, "vneon8"));
    	DestroyObject(GetPVarInt(playerid, "vneon9"));
    	DestroyObject(GetPVarInt(playerid, "vneon10"));
    	DestroyObject(GetPVarInt(playerid, "vneon11"));
    	DestroyObject(GetPVarInt(playerid, "vnb1"));
    	DestroyObject(GetPVarInt(playerid, "vnb2"));
    	DestroyObject(GetPVarInt(playerid, "vnb3"));
    	DestroyObject(GetPVarInt(playerid, "vnb4"));
    	DestroyObject(GetPVarInt(playerid, "vnb5"));
    	DestroyObject(GetPVarInt(playerid, "vnb6"));
    	vneon[playerid] = 1;
		DestroyVehicle(PlayerInfo[playerid][pVVeh]);
		PlayerInfo[playerid][pVVeh] = 0;
	    PlayerInfo[playerid][vVModel] = 0;
		PlayerInfo[playerid][vVX] = 0;
		PlayerInfo[playerid][vVY] = 0;
		PlayerInfo[playerid][vVZ] = 0;
		PlayerInfo[playerid][vVA] = 0;
		PlayerInfo[playerid][vVC1] = 0;
		PlayerInfo[playerid][vVC2] = 0;
		SendClientMessage(playerid, COLOR_GREEN, " You have sold your vehicle to the dealership. (75 percent of the original price was paid back)");
	}
	else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVVeh])
	{
	    DestroyObject(GetPVarInt(playerid, "vneon"));
   		DestroyObject(GetPVarInt(playerid, "vneon1"));
	    DestroyObject(GetPVarInt(playerid, "vneon2"));
    	DestroyObject(GetPVarInt(playerid, "vneon3"));
    	DestroyObject(GetPVarInt(playerid, "vneon4"));
    	DestroyObject(GetPVarInt(playerid, "vneon5"));
    	DestroyObject(GetPVarInt(playerid, "vneon6"));
    	DestroyObject(GetPVarInt(playerid, "vneon7"));
    	DestroyObject(GetPVarInt(playerid, "vneon8"));
    	DestroyObject(GetPVarInt(playerid, "vneon9"));
    	DestroyObject(GetPVarInt(playerid, "vneon10"));
    	DestroyObject(GetPVarInt(playerid, "vneon11"));
    	DestroyObject(GetPVarInt(playerid, "vnb1"));
    	DestroyObject(GetPVarInt(playerid, "vnb2"));
    	DestroyObject(GetPVarInt(playerid, "vnb3"));
    	DestroyObject(GetPVarInt(playerid, "vnb4"));
    	DestroyObject(GetPVarInt(playerid, "vnb5"));
    	DestroyObject(GetPVarInt(playerid, "vnb6"));
    	vneon[playerid] = 1;
		DestroyVehicle(PlayerInfo[playerid][pVVVeh]);
		PlayerInfo[playerid][pVVVeh] = 0;
	    PlayerInfo[playerid][vVVModel] = 0;
		PlayerInfo[playerid][vVVX] = 0;
		PlayerInfo[playerid][vVVY] = 0;
		PlayerInfo[playerid][vVVZ] = 0;
		PlayerInfo[playerid][vVVA] = 0;
		PlayerInfo[playerid][vVVC1] = 0;
		PlayerInfo[playerid][vVVC2] = 0;
		SendClientMessage(playerid, COLOR_GREEN, " You have sold your vehicle to the dealership. (75 percent of the original price was paid back)");
	}
	return 1;
}

CMD:slot(playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "Slot: %d", GFVS(GetPlayerVehicleID(playerid)));
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:park(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not in a vehicle.");
	// Family Vehicles
	if(IsFamVehicle(GetPlayerVehicleID(playerid)) && Fam[GetPlayerVehicleID(playerid)] == PlayerInfo[playerid][pFam])
	{
	    new idx = PlayerInfo[playerid][pFam], veh = GFVS(GetPlayerVehicleID(playerid));

		GetVehiclePos(GetPlayerVehicleID(playerid), FamInfo[idx][fVehCoX][veh], FamInfo[idx][fVehCoY][veh], FamInfo[idx][fVehCoZ][veh]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), FamInfo[idx][fVehRot][veh]);
		if(FamInfo[idx][fVehType][veh])
		{
			DestroyVehicle(FamInfo[idx][fVeh][veh]);
		}
		FamInfo[idx][fVeh][veh] = CreateVehicle(FamInfo[idx][fVehType][veh], FamInfo[idx][fVehCoX][veh], FamInfo[idx][fVehCoY][veh], FamInfo[idx][fVehCoZ][veh], FamInfo[idx][fVehRot][veh], FamInfo[idx][fVehCol1][veh], FamInfo[idx][fVehCol2][veh], 1200);
        ChangeVehicleColor(FamInfo[idx][fVeh][veh], FamInfo[idx][fVehCol1][veh], FamInfo[idx][fVehCol2][veh]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have parked your family vehicle, it will always spawn here until you park it somewhere else.");
		return 1;
	}
   	// Owned Vehicles
	if(GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVeh] && GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVVeh]) return SendClientMessage(playerid, COLOR_GREY, "You are not in a vehicle you can park.");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have parked your vehicle, it will always spawn here until you park it somewhere else.");
	if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	{
		for(new i=0; i<14; i++)
		{
		    PlayerInfo[playerid][pVehMod][i] = GetVehicleComponentInSlot(PlayerInfo[playerid][pVeh], i);
		}
		GetVehiclePos(PlayerInfo[playerid][pVeh],PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
		GetVehicleZAngle(PlayerInfo[playerid][pVeh],PlayerInfo[playerid][vA]);
		DestroyVehicle(PlayerInfo[playerid][pVeh]);
		DestroyObject(GetPVarInt(playerid, "neon"));
   		DestroyObject(GetPVarInt(playerid, "neon1"));
	    DestroyObject(GetPVarInt(playerid, "neon2"));
    	DestroyObject(GetPVarInt(playerid, "neon3"));
    	DestroyObject(GetPVarInt(playerid, "neon4"));
    	DestroyObject(GetPVarInt(playerid, "neon5"));
    	DestroyObject(GetPVarInt(playerid, "neon6"));
    	DestroyObject(GetPVarInt(playerid, "neon7"));
    	DestroyObject(GetPVarInt(playerid, "neon8"));
    	DestroyObject(GetPVarInt(playerid, "neon9"));
    	DestroyObject(GetPVarInt(playerid, "neon10"));
    	DestroyObject(GetPVarInt(playerid, "neon11"));
    	DestroyObject(GetPVarInt(playerid, "nb1"));
    	DestroyObject(GetPVarInt(playerid, "nb2"));
    	DestroyObject(GetPVarInt(playerid, "nb3"));
    	DestroyObject(GetPVarInt(playerid, "nb4"));
    	DestroyObject(GetPVarInt(playerid, "nb5"));
    	DestroyObject(GetPVarInt(playerid, "nb6"));
    	topened[playerid] = 0;
		neon[playerid] = 1;
		PlayerInfo[playerid][pVeh] = CreateVehicle(PlayerInfo[playerid][vModel], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ],PlayerInfo[playerid][vA],PlayerInfo[playerid][vC1],PlayerInfo[playerid][vC2], 1200);
		PlayerInfo[playerid][pVehVW] = GetPlayerVirtualWorld(playerid);
  		SetVehicleVirtualWorld(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][pVehVW]);
   		LinkVehicleToInterior(PlayerInfo[playerid][pVeh], GetPlayerInterior(playerid));
	    ChangeVehiclePaintjob(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vPJ]);
		for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][pVehMod][i]);
		}
	}
	else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	{
		for(new i=0; i<14; i++)
		{
		    PlayerInfo[playerid][pVVehMod][i] = GetVehicleComponentInSlot(PlayerInfo[playerid][pVVeh], i);
		}
		GetVehiclePos(PlayerInfo[playerid][pVVeh],PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
		GetVehicleZAngle(PlayerInfo[playerid][pVVeh],PlayerInfo[playerid][vVA]);
		DestroyVehicle(PlayerInfo[playerid][pVVeh]);
		DestroyObject(GetPVarInt(playerid, "vneon"));
   		DestroyObject(GetPVarInt(playerid, "vneon1"));
	    DestroyObject(GetPVarInt(playerid, "vneon2"));
    	DestroyObject(GetPVarInt(playerid, "vneon3"));
    	DestroyObject(GetPVarInt(playerid, "vneon4"));
    	DestroyObject(GetPVarInt(playerid, "vneon5"));
    	DestroyObject(GetPVarInt(playerid, "vneon6"));
    	DestroyObject(GetPVarInt(playerid, "vneon7"));
    	DestroyObject(GetPVarInt(playerid, "vneon8"));
    	DestroyObject(GetPVarInt(playerid, "vneon9"));
    	DestroyObject(GetPVarInt(playerid, "vneon10"));
    	DestroyObject(GetPVarInt(playerid, "vneon11"));
    	DestroyObject(GetPVarInt(playerid, "vnb1"));
    	DestroyObject(GetPVarInt(playerid, "vnb2"));
    	DestroyObject(GetPVarInt(playerid, "vnb3"));
    	DestroyObject(GetPVarInt(playerid, "vnb4"));
    	DestroyObject(GetPVarInt(playerid, "vnb5"));
    	DestroyObject(GetPVarInt(playerid, "vnb6"));
    	topened[playerid] = 0;
		vneon[playerid] = 1;
		PlayerInfo[playerid][pVVeh] = CreateVehicle(PlayerInfo[playerid][vVModel], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ],PlayerInfo[playerid][vVA],PlayerInfo[playerid][vVC1],PlayerInfo[playerid][vVC2],1200);
		SetVehicleVirtualWorld(PlayerInfo[playerid][pVVeh], GetPlayerVirtualWorld(playerid));
   		LinkVehicleToInterior(PlayerInfo[playerid][pVVeh], GetPlayerInterior(playerid));
	    ChangeVehiclePaintjob(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVPJ]);
		for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][pVVehMod][i]);
		}
	}
	else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVVeh])
	{
		for(new i=0; i<14; i++)
		{
		    PlayerInfo[playerid][pVVVehMod][i] = GetVehicleComponentInSlot(PlayerInfo[playerid][pVVVeh], i);
		}
		GetVehiclePos(PlayerInfo[playerid][pVVVeh],PlayerInfo[playerid][vVVX], PlayerInfo[playerid][vVVY], PlayerInfo[playerid][vVVZ]);
		GetVehicleZAngle(PlayerInfo[playerid][pVVVeh],PlayerInfo[playerid][vVVA]);
		DestroyVehicle(PlayerInfo[playerid][pVVVeh]);
		DestroyObject(GetPVarInt(playerid, "vneon"));
   		DestroyObject(GetPVarInt(playerid, "vneon1"));
	    DestroyObject(GetPVarInt(playerid, "vneon2"));
    	DestroyObject(GetPVarInt(playerid, "vneon3"));
    	DestroyObject(GetPVarInt(playerid, "vneon4"));
    	DestroyObject(GetPVarInt(playerid, "vneon5"));
    	DestroyObject(GetPVarInt(playerid, "vneon6"));
    	DestroyObject(GetPVarInt(playerid, "vneon7"));
    	DestroyObject(GetPVarInt(playerid, "vneon8"));
    	DestroyObject(GetPVarInt(playerid, "vneon9"));
    	DestroyObject(GetPVarInt(playerid, "vneon10"));
    	DestroyObject(GetPVarInt(playerid, "vneon11"));
    	DestroyObject(GetPVarInt(playerid, "vnb1"));
    	DestroyObject(GetPVarInt(playerid, "vnb2"));
    	DestroyObject(GetPVarInt(playerid, "vnb3"));
    	DestroyObject(GetPVarInt(playerid, "vnb4"));
    	DestroyObject(GetPVarInt(playerid, "vnb5"));
    	DestroyObject(GetPVarInt(playerid, "vnb6"));
    	topened[playerid] = 0;
		vneon[playerid] = 1;
		PlayerInfo[playerid][pVVVeh] = CreateVehicle(PlayerInfo[playerid][vVVModel], PlayerInfo[playerid][vVVX], PlayerInfo[playerid][vVVY], PlayerInfo[playerid][vVVZ],PlayerInfo[playerid][vVVA],PlayerInfo[playerid][vVVC1],PlayerInfo[playerid][vVVC2],1200);
		SetVehicleVirtualWorld(PlayerInfo[playerid][pVVVeh], GetPlayerVirtualWorld(playerid));
   		LinkVehicleToInterior(PlayerInfo[playerid][pVVVeh], GetPlayerInterior(playerid));
	    ChangeVehiclePaintjob(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVPJ]);
		for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][pVVVehMod][i]);
		}
	}
	return 1;
}

CMD:engine(playerid, params[])
{
    new engine, lights, alarm, doors, bonnet, boot, objective, vehicleid, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
	if(vehicleid == 509 || vehicleid == 481 || vehicleid == 510) return SendClientMessage(playerid, COLOR_GREY, "Bicycles have no engine.");
	vehicleid = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(!engine)
	{
	    SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	    {SetVehicleParamsEx(vehicleid, 1, lights, alarm, PlayerInfo[playerid][vLocked], bonnet, boot, objective);}
	    else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	    {SetVehicleParamsEx(vehicleid, 1, lights, alarm, PlayerInfo[playerid][vVLocked], bonnet, boot, objective);}
 	    else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVVeh])
	    {SetVehicleParamsEx(vehicleid, 1, lights, alarm, PlayerInfo[playerid][vVVLocked], bonnet, boot, objective);}
	    format(string, sizeof(string), "* %s turns the vehicle's engine on.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else
	{
	    SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	    {SetVehicleParamsEx(vehicleid, 0, lights, alarm, PlayerInfo[playerid][vLocked], bonnet, boot, objective);}
	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	    {SetVehicleParamsEx(vehicleid, 0, lights, alarm, PlayerInfo[playerid][vVLocked], bonnet, boot, objective);}
 	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVVeh])
	    {SetVehicleParamsEx(vehicleid, 0, lights, alarm, PlayerInfo[playerid][vVVLocked], bonnet, boot, objective);}
	    format(string, sizeof(string), "* %s turns the vehicle's engine off.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}

/*CMD:tabcheck(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /tabcheck[playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(Tabbed[playerb])
    {
	    format(string, sizeof(string), "%d) {FFFFFF}%s (Tabbed for %d seconds)", playerb, RPN(playerb), AltTabbed[playerb]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
    }
    else SendClientMessage(playerid, COLOR_GREY, "Player is not alt-tabbed.");
	return 1;
}

CMD:afkcheck(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /tabcheck[playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(IsAFK[playerb])
    {
	    format(string, sizeof(string), "%d) {FFFFFF}%s (AFK for %d seconds)", playerb, RPN(playerb), AFK[playerb]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
    }
    else SendClientMessage(playerid, COLOR_GREY, "Player is not AFK.");
	return 1;
}*/

CMD:points(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    for(new idx = 0; idx < MAX_POINTS; idx++)
	{
	    format(string, sizeof(string), "%d) %s | Owned by: %s | Profit: $%d | Time Left: %d", idx+1, PointInfo[idx][pName], RFaN(PointInfo[idx][pOwner]), PointInfo[idx][pProfit], PointInfo[idx][pTime]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:familyhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    SendClientMessage(playerid, COLOR_YELLOW, "FAMILY: {FFFFFF}/f /families");
   	if(PlayerInfo[playerid][pFamRank] >= 5) SendClientMessage(playerid, COLOR_YELLOW, "FAMILY LEADER: {FFFFFF}/capture /frank /finvite /funinvite /famedit /safe");
	return 1;
}


CMD:capture(playerid, params[])
{
	new string[128], done;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a family leader.");
	for(new idx = 0; idx < MAX_POINTS; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]))
		{
            if(PointInfo[idx][pTime] > 1) return SendClientMessage(playerid, COLOR_GREY, "Please wait for the point time to cool down.");
		    if(Capturing) return SendClientMessage(playerid, COLOR_GREY, "Please wait for the point capturing to cool down.");
		    format(string, sizeof(string), " %s is attempting to capture the %s.", RPN(playerid), PointInfo[idx][pName]);
		    SendNearbyMessage(playerid, 30, string, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Stay in your position for 10 seconds to make the capture attempt succeed.");
            Capturing = 1;
            GetPlayerPos(playerid, Capture[0], Capture[1], Capture[2]);
            Capturer = playerid;
            CapturerFam = idx;
			SetTimerEx("CapturePoint", 10000, false, "dd", Capturer, CapturerFam);
		    done = 1;
		    break;
		}
    }
    if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a capturable point.");
	return 1;
}

CMD:frank(playerid, params[])
{
	new playerb, rank, string[128], idx = PlayerInfo[playerid][pFam];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a family leader.");
	if(sscanf(params, "ui", playerb, rank)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /frank [playerid] [rank]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't change your rank.");
	if(PlayerInfo[playerid][pFamRank] < PlayerInfo[playerb][pFamRank]) return SendClientMessage(playerid, COLOR_GREY, "You can't demote higher ranked members.");
    if(PlayerInfo[playerid][pFamRank] == PlayerInfo[playerb][pFamRank] && strcmp(RPN(playerid), FamInfo[idx][fLeader], false)) return SendClientMessage(playerid, COLOR_GREY, "You can't promote/demote same ranked members.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFam] != PlayerInfo[playerid][pFam]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your family.");
	if(rank < 1 || rank > 6) return SendClientMessage(playerid, COLOR_GREY, "Ranks are between 1 and 6.");
	if(PlayerInfo[playerb][pFamRank] == rank) return SendClientMessage(playerid, COLOR_GREY, "Player already has that rank.");
	if(PlayerInfo[playerb][pFamRank] < rank)
	{
	    PlayerInfo[playerb][pFamRank] = rank;
		format(string, sizeof(string), "You have {33AA33}promoted {33CCFF}%s to {33AA33}%s (%d){33CCFF}.", RPN(playerb), RPFaRN(playerb), rank);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s has {33AA33}promoted {33CCFF}you to {33AA33}%s (%d){33CCFF}.", RPN(playerid), RPFaRN(playerb), rank);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	}
	else if(PlayerInfo[playerb][pFamRank] > rank)
	{
	    PlayerInfo[playerb][pFamRank] = rank;
		format(string, sizeof(string), "You have {FF9900}demoted {33CCFF}%s to {FF9900}%s (%d){33CCFF}.", RPN(playerb), RPFaRN(playerb), rank);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s has {FF9900}demoted {33CCFF}you to {FF9900}%s (%d){33CCFF}.", RPN(playerid), RPFaRN(playerb), rank);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:families(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	for(new idx=1; idx<MAX_FAMILIES; idx++)
	{
	    format(string, sizeof(string), "%d) Name: %s | Leader: %s | Members: %d | Strikes: %d", idx, FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:factions(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	format(string, sizeof(string), "Los Santos Police Department | Leader: %s | Members: %d | Level Needed: 3 ", FacInfo[1][facLeader], FacInfo[1][facMembers]);
 	SendClientMessage(playerid, COLOR_BLUE, string);
 	format(string, sizeof(string), "Los Santos Government | Leader: %s | Members: %d | Level Needed: 5 ", FacInfo[2][facLeader], FacInfo[2][facMembers]);
 	SendClientMessage(playerid, COLOR_GREEN, string);
 	format(string, sizeof(string), "Hitman Agency | Leader: Secret | Members: %d | Level Needed: 10 ", FacInfo[3][facMembers]);
 	SendClientMessage(playerid, COLOR_BLACK, string);
 	format(string, sizeof(string), "Los Santos News Agency | Leader: %s | Members: %d | Level Needed: 1 ", FacInfo[4][facLeader], FacInfo[4][facMembers]);
 	SendClientMessage(playerid, COLOR_GREEN, string);
 	format(string, sizeof(string), "Los Santos Fire & Medic Department | Leader: %s | Members: %d | Level Needed: 1", FacInfo[5][facLeader], FacInfo[5][facMembers]);
 	SendClientMessage(playerid, COLOR_RED, string);
 	format(string, sizeof(string), "Federal Bureau Of Investigation | Leader: %s | Members: %d | Level Needed: 8", FacInfo[6][facLeader], FacInfo[6][facMembers]);
 	SendClientMessage(playerid, COLOR_BLUE, string);
 	format(string, sizeof(string), "National Guards | Leader: %s | Members: %d | Level Needed: 1", FacInfo[7][facLeader], FacInfo[7][facMembers]);
 	SendClientMessage(playerid, COLOR_NG, string);
	return 1;
}

CMD:safe(playerid, params[])
{
	new amount, string[128], options[32];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFam]) return SendClientMessage(playerid, COLOR_GREY, "You are not in a family.");
	new idx = PlayerInfo[playerid][pFam];
	if(!IsPlayerInRangeOfPoint(playerid, 3, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ])) return SendClientMessage(playerid, COLOR_GREY, "You are not near your family safe.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /safe [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: deposit | withdraw");
		format(string, sizeof(string), "SAFE: Money: $%d | Materials: %d | Weed: %d | cocaine: %d", FamInfo[idx][fMoney], FamInfo[idx][fMats], FamInfo[idx][fWeed], FamInfo[idx][fcocaine]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(!strcmp(params, "deposit", true, 7))
	{
	    if(sscanf(params, "s[32]s[32]i", params, options, amount))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /safe deposit [item] [amount]");
			SendClientMessage(playerid, COLOR_GREY, "Items: money | materials | weed | cocaine");
			return 1;
	    }
	    if(amount < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid amount.");
        if(!strcmp(options, "money", true, 5))
    	{
            if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
            FamInfo[idx][fMoney] += amount;
			GiveDodMoney(playerid, -amount);
            format(string, sizeof(string), "* %s has deposited $%d in their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else if(!strcmp(options, "materials", true, 9))
		{
            if(PlayerInfo[playerid][pMaterials] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much materials on you.");
            FamInfo[idx][fMats] += amount;
            PlayerInfo[playerid][pMaterials] -= amount;
            format(string, sizeof(string), "* %s has deposited %d grams of materials in their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else if(!strcmp(options, "weed", true, 4))
		{
            if(PlayerInfo[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed on you.");
            FamInfo[idx][fWeed] += amount;
            PlayerInfo[playerid][pWeed] -= amount;
            format(string, sizeof(string), "* %s has deposited %d grams of weed in their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else if(!strcmp(options, "cocaine", true, 5))
        {
            if(PlayerInfo[playerid][pcocaine] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much cocaine on you.");
            FamInfo[idx][fcocaine] += amount;
            PlayerInfo[playerid][pcocaine] -= amount;
            format(string, sizeof(string), "* %s has deposited %d grams of cocaine in their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	}
	else if(!strcmp(params, "withdraw", true, 8))
	{
	    if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	    if(sscanf(params, "s[32]s[32]i", params, options, amount))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /safe withdraw [item] [amount]");
			SendClientMessage(playerid, COLOR_GREY, "Items: money | materials | weed | cocaine");
			return 1;
	    }
	    if(amount < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid amount.");
	    if(!strcmp(options, "money", true, 5))
	    {
            if(FamInfo[idx][fMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money in your family safe.");
            FamInfo[idx][fMoney] -= amount;
            GiveDodMoney(playerid, amount);
            format(string, sizeof(string), "* %s has withdrawn $%d from their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
		else if(!strcmp(options, "materials", true, 9))
		{
            if(FamInfo[idx][fMats] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much materials in your family safe.");
            FamInfo[idx][fMats] -= amount;
            PlayerInfo[playerid][pMaterials] += amount;
            format(string, sizeof(string), "* %s has withdrawn %d grams of materials from their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
		else if(!strcmp(options, "weed", true, 4))
		{
            if(FamInfo[idx][fWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed in your family safe.");
            FamInfo[idx][fWeed] -= amount;
            PlayerInfo[playerid][pWeed] += amount;
            format(string, sizeof(string), "* %s has withdrawn %d grams of weed from their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
        else if(!strcmp(options, "cocaine", true, 5))
        {
            if(FamInfo[idx][fcocaine] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much cocaine in your family safe.");
            FamInfo[idx][fcocaine] -= amount;
            PlayerInfo[playerid][pcocaine] += amount;
            format(string, sizeof(string), "* %s has withdrawn %d grams of cocaine from their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}

CMD:f(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFam]) return SendClientMessage(playerid, COLOR_GREY, "You are not in a family.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/f)amilychat [text]");
	if(AntiAdv(playerid, params)) return 1;
    format(string, sizeof(string), "** [FAM] (%d) %s %s: %s", PlayerInfo[playerid][pFamRank], RPFaRN(playerid), RPN(playerid), params);
	SendPlayerFamMessage(playerid, COLOR_CYAN, string);
	return 1;
}

CMD:famedit(playerid, params[])
{
	new string[128], option[32], idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	idx = PlayerInfo[playerid][pFam];
	if(sscanf(params, "s[32]", option))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /famedit [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: name | rankname | safe | motd");
		return 1;
	}
    if(!strcmp(option, "name", true, 4))
    {
	    if(sscanf(params, "s[32]s[32]", option, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /famedit name [name]");
		format(FamInfo[idx][fName], 32, "%s", params);
		format(string, sizeof(string), " You have set your family's name to {33AA33}%s", params);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s's Safe", FamInfo[idx][fName]);
    	UpdateDynamic3DTextLabelText(FamInfo[idx][fText], COLOR_WHITE, string);
	}
    else if(!strcmp(option, "rankname", true, 8))
    {
        new rank;
    	if(sscanf(params, "s[32]is[32]", option, rank, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /famedit rankname [rank] [name]");
		if(rank < 0 || rank > 6) return SendClientMessage(playerid, COLOR_GREY, "Family ranks are between 1 and 6.");
		switch(rank)
		{
		    case 1: format(FamInfo[idx][fRank1], 32, "%s", params);
		    case 2: format(FamInfo[idx][fRank2], 32, "%s", params);
		    case 3: format(FamInfo[idx][fRank3], 32, "%s", params);
			case 4: format(FamInfo[idx][fRank4], 32, "%s", params);
			case 5: format(FamInfo[idx][fRank5], 32, "%s", params);
			case 6: format(FamInfo[idx][fRank6], 32, "%s", params);
		}
		format(string, sizeof(string), " You have set your family rank %d's name to {33AA33}%s", rank, params);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    }
   	else if(!strcmp(option, "safe", true, 4))
    {
        new confirm[8];
    	if(PlayerInfo[playerid][pFamRank] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
        if(FamInfo[idx][fSafeX] != 0 && FamInfo[idx][fSafeY] != 0 && FamInfo[idx][fSafeZ] != 0)
		{
		    // SSCANF Check
		    if(sscanf(params, "s[32]s[8]", option, confirm))
		    {
		    	SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /famedit safe [confirm]");
		    	SendClientMessage(playerid, COLOR_LIGHTRED, " Changing your family's safe location will cost $50,000.");
		    	return 1;
		    }
		    // Confirm Check
		    if(strcmp(confirm, "confirm", true, 8))
		    {
		    	SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /famedit safe [confirm]");
		    	SendClientMessage(playerid, COLOR_LIGHTRED, " Changing your family's safe location will cost $50,000.");
		    	return 1;
		    }
		    // Money Check
		    if(PlayerInfo[playerid][pMoney] < 50000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you. ($50,000)");
		    GiveDodMoney(playerid, -50000);
		}
		GetPlayerPos(playerid,FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ]);
        DestroyDynamicPickup(FamInfo[idx][fPickup]);
	    FamInfo[idx][fPickup] = CreateDynamicPickup(1239, 1, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ], -1);
		DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
		format(string, sizeof(string), "%s's Safe", FamInfo[idx][fName]);
    	FamInfo[idx][fText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ]+0.3, 15);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have set your family's safe location.");
    }
    else if(!strcmp(option, "motd", true, 4))
    {
		if(sscanf(params, "s[32]s[32]", option, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /famedit motd [motd]");
		format(FamInfo[idx][fMOTD], 64, "%s", params);
		format(string, sizeof(string), "FAMILY MOTD: {FFFFFF}%s", FamInfo[PlayerInfo[playerid][pFam]][fMOTD]);
   		SendPlayerFamMessage(playerid, COLOR_LIGHTRED, string);
    }
    else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}


CMD:id(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /id [playerid]");
	if(!IsPlayerLoggedIn(playerb) && !IsPlayerNPC(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	format(string, sizeof(string), " %s - ID: %d", RPN(playerb), playerb);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:changepass(playerid, params[])
{
	new file[32], string[128], password[256];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[64]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /changepass [password]");
	if(strlen(params) > 256) return SendClientMessage(playerid, COLOR_GREY, "Password can't be longer than 256 characters.");
	if(strlen(params) < 4) return SendClientMessage(playerid, COLOR_GREY, "Password can't be lower than 4 characters.");
	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	WP_Hash(password, sizeof(password), params);
	dini_Set(file, "Password", password);
	format(string, sizeof(string), " You have changed your password to: {FF6347}%s", params);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:search(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /search  [location]");
	    SendClientMessage(playerid, COLOR_GREY, "LOCATIONS: Off | Bank | Trucker | DMV | DrugsHouse | cocaineLab | DrugsPickup | MaterialsPickup | MaterialsDropoff");
	    SendClientMessage(playerid, COLOR_GREY, "LOCATIONS: Dealership | FuelCompany | WeaponSmuggler | WeaponsDealer | Mechanic | Lawyer | CarUpgrader");

	    return 1;
	}
	if(!strcmp(params, "off", true))
	{
	     DisablePlayerCheckpoint(playerid);
	     SendClientMessage(playerid, COLOR_WHITE, "You have cleared the marker on your map.");
	}
	else if(!strcmp(params, "lawyer", true))
	{
	     SetPlayerCheckpoint(playerid, 1380.8300,-1088.7698,27.3844, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "The lawyer job is now marked on your map.");
	}
	else if(!strcmp(params, "weapondealer", true))
	{
	     SetPlayerCheckpoint(playerid, 2165.2358,-2271.5012,13.3413, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "The weapon dealer job is now marked on your map.");
    }
	else if(!strcmp(params, "mechanic", true))
	{
	     SetPlayerCheckpoint(playerid, 2330.0693,-2315.4709,13.5469, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "The mechanic job is now marked on your map.");
	}
	else if(!strcmp(params, "bank", true))
	{
	     SetPlayerCheckpoint(playerid, 1462.4095,-1011.1602,26.8438, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "The bank is now marked on your map.");
	}
	else if(!strcmp(params,"trucker", true))
	{
	    SetPlayerCheckpoint(playerid, -520.4179,-505.3250,24.6084, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The trucker job is now marked on your map.");
	}
	else if(!strcmp(params,"dmv", true))
	{
	    SetPlayerCheckpoint(playerid, 962.3975,-1433.5745,14.0537, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The dmv is now marked on your map.");
	}
	else if(!strcmp(params,"drugshouse", true))
	{
	    SetPlayerCheckpoint(playerid, 2166.1372,-1671.5070,15.0737, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The drugs house is now marked on your map.");
	}
	else if(!strcmp(params,"cocainelab", true))
	{
	    SetPlayerCheckpoint(playerid, 2351.9863,-1170.1771,28.0509, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The cocaine lab is now marked on your map.");
	}
	else if(!strcmp(params,"drugspickup", true))
	{
	    SetPlayerCheckpoint(playerid, 2939.4932,-2051.5911,3.5480, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The drugs pickup is now marked on your map.");
	}
	else if(!strcmp(params,"materialsdropoff", true))
	{
	    SetPlayerCheckpoint(playerid, 2172.4944,-2264.0750,13.3399, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The materials dropoff is now marked on your map.");
	}
	else if(!strcmp(params,"materialspickup", true))
	{
	    SetPlayerCheckpoint(playerid, 1423.6010,-1317.9398,13.5547, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The materials pickup is now marked on your map.");
	}
	else if(!strcmp(params, "weaponsmuggler", true))
	{
        SetPlayerCheckpoint(playerid, 1415.4907,-1301.0790,13.5449, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The telecom company is inside the cityhall.");
    }
	else if(!strcmp(params, "dealership", true))
	{
	    SetPlayerCheckpoint(playerid, 545.6661,-1292.2437,17.2422, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The Vehicles Dealership is now marked on your map.");
	}
	else if(!strcmp(params, "fuelcompany", true))
	{
	    SetPlayerCheckpoint(playerid, 246.585403,1410.487182,23.370300, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The FuelCompany is now marked on your map.");
	}
	else if(!strcmp(params, "productsdealer", true))
	{
	    SetPlayerCheckpoint(playerid, 2222.5107,-2682.7368,13.5409, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The Products Dealer is now marked on your map.");
	}
	else if(!strcmp(params, "carupgrader", true))
	{
	    SetPlayerCheckpoint(playerid, 2117.5835,-1153.0809,24.2201, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The Vehicle Upgrader is now marked on your map.");
	}
	return 1;
}

CMD:drop(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /drop [item]");
		SendClientMessage(playerid, COLOR_GREY, "Items: weapon | weapons | materials | weed | cocaine | packages | fishes");
	    return 1;
	}
	if(!strcmp(params, "weapons", true, 7))
	{
	    new confirm[8];
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /drop weapons [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    format(string, sizeof(string), "* %s throws away all their weapons.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			ResetDodWeapons(playerid);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(params, "weapon", true, 6))
	{
    	if(GetPlayerWeapon(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "You are not holding a weapon in your hand.");
	    format(string, sizeof(string), "* %s throws away their %s.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		RemoveDodWeapon(playerid, GetPlayerWeapon(playerid));
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	}
	else if(!strcmp(params, "materials", true, 9))
	{
	    new confirm[8];
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /drop materials [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    PlayerInfo[playerid][pMaterials] = 0;
		    PlayerInfo[playerid][pMMaterials] = 0;
		    PlayerInfo[playerid][pHMaterials] = 0;
		    format(string, sizeof(string), "* %s has thrown away all their materials.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(params, "weed", true, 4))
	{
	    new confirm[8];
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /drop weed [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    PlayerInfo[playerid][pWeed] = 0;
		    format(string, sizeof(string), "* %s has thrown away all their weed.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(params, "cocaine", true, 5))
	{
	    new confirm[8];
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /drop cocaine [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    PlayerInfo[playerid][pcocaine] = 0;
		    format(string, sizeof(string), "* %s has thrown away all their cocaine.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(params, "packages", true, 8))
	{
	    new confirm[8], veh;
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /drop packages [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    PlayerInfo[playerid][pTPackages] = 0;
		    PlayerInfo[playerid][pMPackages] = 0;
		    PlayerInfo[playerid][pMMPackages] = 0;
		    PlayerInfo[playerid][pHPackages] = 0;
		    PlayerInfo[playerid][pDPackages] = 0;
		    veh = PlayerInfo[playerid][pDeliverTruck];
		    PlayerInfo[playerid][pDeliverTruck] = -1;
		    TruckPackages[veh] = -1;
		    format(string, sizeof(string), "* %s has thrown away all their packages.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(params, "fishes", true, 6))
	{
	    new confirm[8];
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /drop fishes [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    for(new i=0; i<5; i++)
		    {
		    	PlayerInfo[playerid][pFish][i] = 0;
			}
		    format(string, sizeof(string), "* %s has thrown away all their fishes.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}


CMD:pay(playerid, params[])
{
	new string[128], playerb, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /pay [playerid] [amount]");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	if(amount > 2000 && PlayerInfo[playerid][pLevel] < 4) return SendClientMessage(playerid, COLOR_GREY, "You need to be level 4 to give someone more than $2000.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't pay money to yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "You must be at least level 2 to give someone money.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much on you right now.");
	GiveDodMoney(playerid, -amount);
	GiveDodMoney(playerb, amount);
	format(string, sizeof(string), "* %s takes out their wallet and gives %s some money.", RPN(playerid), RPN(playerb), amount);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), " You have given %s $%d.", RPN(playerb), amount);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has given you $%d.", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has given %s $%d.",RPN(playerid), RPN(playerb), amount);
	Log("logs/pay.log", string);
	return 1;
}

CMD:paycheck(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	format(string, sizeof(string), "* You have played for %d minutes in the past hour.", PlayerInfo[playerid][pMinutes]);
	if(PlayerInfo[playerid][pMinutes] < 40) SendClientMessage(playerid, COLOR_LIGHTRED, string);
	else SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), "* You need to play for at least 40 minutes every hour to recieve a paycheck.");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:wire(playerid, params[])
{
	new string[128], playerb, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a bank booth.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /wire [playerid] [amount]");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	if(PlayerInfo[playerid][pLevel] < 4) return SendClientMessage(playerid, COLOR_GREY, "You need to be level 4 to wire someone money.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't wire money to yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pBank] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much in your bank account right now.");
	PlayerInfo[playerid][pBank] -= amount;
	PlayerInfo[playerb][pBank] += amount;
	format(string, sizeof(string), " You have wired $%d to %s, your bank balance is now: $%d.", amount, RPN(playerb), PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[Bank]: %s has wired you $%d, your bank balance is now: $%d.", RPN(playerid), amount, PlayerInfo[playerb][pBank]);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has wired %s $%d", RPN(playerid), RPN(playerb), amount);
	Log("logs/pay.log", string);
	return 1;
}

CMD:withdraw(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a bank booth.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /withdraw [amount]");
	if(amount > PlayerInfo[playerid][pBank]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money in your bank account.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	PlayerInfo[playerid][pBank] -= amount;
	GiveDodMoney(playerid, amount);
	format(string, sizeof(string), " You have withdrawn $%d from your bank account, your bank balance is now: $%d.", amount, PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:deposit(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a bank booth.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deposit [amount]");
	if(amount > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	PlayerInfo[playerid][pBank] += amount;
	GiveDodMoney(playerid, -amount);
	format(string, sizeof(string), " You have deposited $%d into your bank account, your bank balance is now: $%d.", amount, PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:awithdraw(playerid, params[])
{
	new amount, string[128];
	new me[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerNearATM(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a ATM.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /awithdraw [amount]");
	if(amount > PlayerInfo[playerid][pBank]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money in your bank account.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	if(amount > 2500) return SendClientMessage(playerid, COLOR_GREY, "You can't deposit more than 2500$ in an ATM.");
	if(ATMTime[playerid] > 0)
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before using the ATM again.", ATMTime[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	PlayerInfo[playerid][pBank] -= amount;
	GiveDodMoney(playerid, amount);
	ATMTime[playerid] = 40;
	format(string, sizeof(string), " You have withdrawn $%d from your bank account, your bank balance is now: $%d.", amount, PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(me, sizeof(me), "* %s inserts his credit card in the ATM and presses some buttons", RPN(playerid));
	SendNearbyMessage(playerid, 5, me, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SetTimerEx("ATMTimer", 1000, false, "i", playerid);
	return 1;
}

CMD:adeposit(playerid, params[])
{
	new amount, string[128];
	new me[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerNearATM(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a bank booth.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /adeposit [amount]");
	if(amount > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	if(amount > 2500) return SendClientMessage(playerid, COLOR_GREY, "You can't withdraw more than 2500$ from the ATM.");
	if(ATMTime[playerid] > 0)
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before using the ATM again.", ATMTime[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	PlayerInfo[playerid][pBank] += amount;
	GiveDodMoney(playerid, -amount);
	ATMTime[playerid] = 40;
	format(string, sizeof(string), " You have deposited $%d into your bank account, your bank balance is now: $%d.", amount, PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(me, sizeof(me), "* %s inserts some money in the ATM and presses some buttons", RPN(playerid));
	SendNearbyMessage(playerid, 5, me, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SetTimerEx("ATMTimer", 1000, false, "i", playerid);
	return 1;
}

CMD:serverstats(playerid, params[])
{
	new string[128], housescreated, bizcreated, mapiconscreated;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_ORANGE, "- Intense Role-Play Statistics:");
	for(new idx; idx<MAX_HOUSES; idx++)
	{
	    if(HouseInfo[idx][hLevel]) housescreated++;
	}
	format(string, sizeof(string), " %d Houses Created [MAX_HOUSES = %d]", housescreated, MAX_HOUSES-1);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	for(new idx; idx<MAX_BIZ; idx++)
	{
	    if(BizInfo[idx][bType]) bizcreated++;
	}
	format(string, sizeof(string), " %d Businesses Created [MAX_BIZ = %d]", bizcreated, MAX_BIZ-1);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	for(new idx; idx<MAX_MAPICONS; idx++)
	{
	    if(MapIconInfo[idx][mpType]) mapiconscreated++;
	}
	format(string, sizeof(string), " %d Mapicons Created [MAX_MAPICONS = %d]", mapiconscreated, MAX_MAPICONS);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), " %d Advertisements Queued [MAX_ADS = %d]", AdQueue, MAX_ADS);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	return 1;
}

CMD:suggest(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /suggest [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(strlen(params) > 128) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters limit is 128.");
	new File: file = fopen("bugs.cfg", io_append), string[128];
	format(string, sizeof(string), "[%s] %s\r\n", RPN(playerid), params);
	fwrite(file, string);
	fclose(file);
	SendClientMessage(playerid, COLOR_ORANGE, "Your suggestions has been saved, scripters will check it once possible.");
	format(string, sizeof(string), "AdmWarn: %s has posted feedback, /suggestions to view it. (Inform the scripters about it)", RPN(playerid));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}



CMD:flashlights(playerid, params[])
{
        new vehicleid,panels,doors,lights,tires;
        vehicleid = GetPlayerVehicleID(playerid);
        if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
        if(!IsACop(playerid) && !IsMedic(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a member of an emergency faction.");
        if (!GetVehicleModel(vehicleid)) return SendClientMessage(playerid, -1, "* You are not in a vehicle!");
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "* You are not the driver!");
    	new engine, alarm, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
        if(!lights) return SendClientMessage(playerid, COLOR_GREY, "Turn your lights on first! ((/lights))");
        if(!Flasher[vehicleid]) {
                if (IsValidObject(obj1[vehicleid]) || IsValidObject(obj2[vehicleid]))
                {
                        SendClientMessage(playerid, -1, "You switched off the lights."), DestroyObject(obj1[vehicleid]), DestroyObject(obj2[vehicleid]);
                        GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
                        if(LightPwr[vehicleid] == 1)
                        UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);
                        else
                        UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
                        Flasher[vehicleid] = 0;
                }
                switch (GetVehicleModel(vehicleid))
                {
                        case 596:
                        {
                                obj1[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                obj2[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                AttachObjectToVehicle(obj1[vehicleid], vehicleid, 0.599999,-0.375000,0.899999,0.000000,0.000000,0.000000);
                                AttachObjectToVehicle(obj2[vehicleid], vehicleid, -0.599999,-0.375000,0.899999,0.000000,0.000000,0.000000);
                                GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
                                Flasher[vehicleid] = 1;
                        }
                        case 597:
                        {
                                obj1[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                obj2[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                AttachObjectToVehicle(obj1[vehicleid], vehicleid, 0.599999,-0.375000,0.899999,0.000000,0.000000,0.000000);
                                AttachObjectToVehicle(obj2[vehicleid], vehicleid, -0.599999,-0.375000,0.899999,0.000000,0.000000,0.000000);

                                GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
                                Flasher[vehicleid] = 1;
                        }
                        case 598:
                        {
                                obj1[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                obj2[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                AttachObjectToVehicle(obj1[vehicleid], vehicleid, 0.524999, -0.300000, 0.899999, 0.000000, 0.000000, 0.000000);
                                AttachObjectToVehicle(obj2[vehicleid], vehicleid, -0.524999, -0.300000, 0.899999, 0.000000, 0.000000, 0.000000);
                                GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
                                Flasher[vehicleid] = 1;
                        }
                        case 599:
                        {
                                obj1[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                obj2[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                AttachObjectToVehicle(obj1[vehicleid], vehicleid, 0.524999,0.000000,1.125000,0.000000,0.000000,0.000000);
                                AttachObjectToVehicle(obj2[vehicleid], vehicleid, -0.524999,0.000000,1.125000,0.000000,0.000000,0.000000);
                                GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
                                Flasher[vehicleid] = 1;
                        }
                        case 427://enforcer
                        {
                                GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
                                Flasher[vehicleid] = 1;
                        }
                        case 416://Ambulance
                        {
                                GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
                                Flasher[vehicleid] = 1;
                        }
                        case 407://FireTruck
                        {
                                GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
                                Flasher[vehicleid] = 1;
                        }
                        case 490://FBI
                        {
                                obj1[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                AttachObjectToVehicle(obj1[vehicleid], vehicleid, 0.000000,1.125000,0.599999,0.000000,0.000000,0.000000);
                                GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
                                Flasher[vehicleid] = 1;
                        }
                        default:
                        {
                                return SendClientMessage(playerid, -1, "You are not in a police/emergency vehicle!");
                        }
                }
                return SendClientMessage(playerid, -1, "Flashing lights on!");
        } else {
                if (IsValidObject(obj1[vehicleid]) || IsValidObject(obj2[vehicleid])) {
                        SendClientMessage(playerid, -1, "You switched off the lights."), DestroyObject(obj1[vehicleid]), DestroyObject(obj2[vehicleid]);
                }
                GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
                if(LightPwr[vehicleid] == 1)
                        UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);
                else
                        UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
                Flasher[vehicleid] = 0;
        }
        return 1;
}

CMD:factionhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	// NYPD
	if(IsACop(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "NYPD: {FFFFFF}/r /d /m /tazer /cuff /legcuff /drunktest /uncuff /detain /track /door /gate /locker /showbadge /frisk");
	if(IsACop(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "NYPD: {FFFFFF}/giveweplic /deploybk /removebk /removeallbk /createspike /removespike /removespikes");
	if(IsACop(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "NYPD: {FFFFFF}/bk /cbk /checkload /siren /ticket /flashlights /wanted /mdc /drag /su /arrest /members /quitfaction");
	if(PlayerInfo[playerid][pFacDivLeader]) SendClientMessage(playerid, COLOR_YELLOW, "NYPD DIVISION LEADER: {FFFFFF}/dinvite /duninvite");
	if(IsACop(playerid) && PlayerInfo[playerid][pFacLeader]) SendClientMessage(playerid, COLOR_YELLOW, "NYPD FACTION LEADER: {FFFFFF}/gov /invite /uninvite /setrank /adjustrankname /setdivision /adjustdivisionname");
	// Government
	if(IsAGov(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "GOV: {FFFFFF}/r /d /showbadge /giveweplic");
	if(IsAGov(playerid) && PlayerInfo[playerid][pFacLeader]) SendClientMessage(playerid, COLOR_YELLOW, "GOV FACTION LEADER: {FFFFFF}/settax /taxvault /taxwithdraw /gov /invite /uninvite /setrank /adjustrankname");
	// Hitman Agency
	if(IsAHitman(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "HA: {FFFFFF}/hit /contracts /profile /hitfind /order /givehit /hitmansms");
	if(IsAHitman(playerid) && PlayerInfo[playerid][pFacLeader]) SendClientMessage(playerid, COLOR_YELLOW, "HA FACTION LEADER: {FFFFFF}/invite /uninvite /setrank /adjustrankname");
	// News Agency
	if(IsAReporter(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "NA: {FFFFFF}/san /news /live");
	if(IsAReporter(playerid) && PlayerInfo[playerid][pFacLeader]) SendClientMessage(playerid, COLOR_YELLOW, "NA FACTION LEADER: {FFFFFF}/invite /uninvite /setrank /adjustrankname /newsvault /vaultwithdraw");
	// LSFMD
	if(IsMedic(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "LSFMD: {FFFFFF}/r /heal /flashlights");
	if(IsMedic(playerid) && PlayerInfo[playerid][pFacLeader]) SendClientMessage(playerid, COLOR_YELLOW, "LSFMD FACTION LEADER: {FFFFFF} /invite /uninvite /setrank /adjustrankname");
	// FBI
	if(IsFBI(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "FBI: {FFFFFF}/r /d /m /tazer /cuff /legcuff /uncuff /detain /track /door /gate /locker /showbadge /frisk /createspike /removespike /removespikes");
	if(IsFBI(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "FBI: {FFFFFF}/checkload /siren /flashlights /wanted /mdc /drag /su /arrest /members /quitfaction /giveweplic");
	if(PlayerInfo[playerid][pFacDivLeader]) SendClientMessage(playerid, COLOR_YELLOW, "FBI DIVISION LEADER: {FFFFFF}/dinvite /duninvite");
	if(IsFBI(playerid) && PlayerInfo[playerid][pFacLeader]) SendClientMessage(playerid, COLOR_YELLOW, "FBI FACTION LEADER: {FFFFFF}/gov /invite /uninvite /setrank /adjustrankname /setdivision /adjustdivisionnam");
	// NG
	if(IsNG(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "NG: {FFFFFF}/r /d /tazer /cuff /legcuff /uncuff /locker /showbadge /frisk /giveweplic");
	if(IsNG(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "NG: {FFFFFF}/wanted /drag /su /members /quitfaction");
	if(IsNG(playerid) && PlayerInfo[playerid][pFacLeader]) SendClientMessage(playerid, COLOR_YELLOW, "NG FACTION LEADER: {FFFFFF}/gov /invite /uninvite /setrank /adjustrankname ");
	return 1;
}

CMD:createspike(playerid, params[])
{
	new string[128], Float:Pos[4];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
   	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(PlayerInfo[playerid][pFacRank] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command. (Rank 4+)");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    GetPlayerFacingAngle(playerid,Pos[3]);
 	CreateStrip(Pos[0], Pos[1], Pos[2],Pos[3]);
 	format(string, sizeof(string), "NYPD: %s has created a spike strip.", RPN(playerid));
 	SendCopMessage(COLOR_BLUE, string);
	return 1;
}

CMD:removespike(playerid, params[])
{
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
	if(PlayerInfo[playerid][pFacRank] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command. (Rank 4+)");
	DeleteClosestStrip(playerid);
	return 1;
}

CMD:removespikes(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
	if(PlayerInfo[playerid][pFacRank] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command. (Rank 4+)");
	DeleteAllStrip();
 	format(string, sizeof(string), "NYPD: %s has removed all spike strips deployed by the NYPD.", RPN(playerid));
 	SendCopMessage(COLOR_BLUE, string);
	return 1;
}

CMD:deploybk(playerid, params[])
{
	new string[128], Float:Pos[4];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer.");
   	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(PlayerInfo[playerid][pFacRank] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command. (Rank 2+)");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    GetPlayerFacingAngle(playerid,Pos[3]);
 	CreateCBK(Pos[0], Pos[1], Pos[2],Pos[3]);
 	format(string, sizeof(string), "NYPD: %s has created a barricade.", RPN(playerid));
 	SendCopMessage(COLOR_BLUE, string);
	return 1;
}

CMD:removebk(playerid, params[])
{
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer.");
	if(PlayerInfo[playerid][pFacRank] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command. (Rank 2+)");
	DeleteClosestCBK(playerid);
	return 1;
}

CMD:removeallbk(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer.");
	if(PlayerInfo[playerid][pFacRank] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command. (Rank 2+)");
	DeleteAllCBK();
 	format(string, sizeof(string), "NYPD: %s has removed all baricades deployed by the NYPD.", RPN(playerid));
 	SendCopMessage(COLOR_BLUE, string);
	return 1;
}

CMD:siren(playerid, params[])
{
	new veh, type[8], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
   	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
   	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
	if(sscanf(params, "s[8]", type))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /siren [position]");
		SendClientMessage(playerid, COLOR_WHITE, "POSITIONS: inside | roof | off");
		return 1;
	}
	if(Siren[veh]) return SendClientMessage(playerid, COLOR_GREY, "This vehicle already has a siren attached.");
	veh = GetPlayerVehicleID(playerid);
	if(!strcmp(type, "inside"))
	{
		if(Siren[veh]) return SendClientMessage(playerid, COLOR_GREY, "There is already a siren attached to this vehicle.");
        Siren[veh] = 1;
        SirenObject[veh] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
        AttachDynamicObjectToVehicle(SirenObject[veh],veh, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
        format(string, sizeof(string), "* %s attaches a siren to the dashboard.", RPN(playerid));
        SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        return 1;
	}
	else if(!strcmp(type, "roof"))
	{
	    if(Siren[veh]) return SendClientMessage(playerid, COLOR_GREY, "There is already a siren attached to this vehicle.");
		Siren[veh] = 2;
        SirenObject[veh] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
        AttachDynamicObjectToVehicle(SirenObject[veh], veh, -0.43, 0.0, 0.785, 0.0, 0.1, 0.0);
        format(string, sizeof(string), "* %s attaches a siren to the vehicle's roof.", RPN(playerid));
        SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        return 1;
	}
	else if(!strcmp(type, "off"))
	{
	    if(!Siren[veh]) return SendClientMessage(playerid, COLOR_GREY, "There is no siren attached to this vehicle.");
		Siren[veh] = 0;
		DestroyDynamicObject(SirenObject[veh]);
		format(string, sizeof(string), "* %s takes the siren back down.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		return 1;
	}
	return 1;
}

CMD:checkload(playerid, params[])
{
	new veh, string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
	if(sscanf(params, "i", veh)) return SendClientMessage(playerid, COLOR_GREY, "[Usage]: /checkload [vehicleid]");
	if(veh == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle id.");
	if(!IsPlayerNearVehicle(playerid, veh, 4)) return SendClientMessage(playerid, COLOR_GREY, "You are not near this vehicle.");
    if(!IsTruckerVehicle(veh)) return SendClientMessage(playerid, COLOR_GREY, "This is not a trucking vehicle.");
    if(TruckPackages[veh] == -1) return SendClientMessage(playerid, COLOR_GREY, "This truck has no packages inside it.");
    playerb = TruckPackages[veh];
	format(string, sizeof(string), "* %s checks the truck's load and capacity.", RPN(playerid));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	if(PlayerInfo[playerb][pTPackages] == 1) SendClientMessage(playerid, COLOR_LIME, " This truck is not overloaded with packages.");
	else if(PlayerInfo[playerb][pTPackages] == 2) SendClientMessage(playerid, COLOR_LIGHTRED, " This truck is overloaded with packages.");
	return 1;
}

CMD:drag(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_GREY, "[Usage]: /drag [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't drag yourself.");
	if(Drag[playerid] != -1 || Dragged[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "You can't do that at the moment.");
    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(IsPlayerInAnyVehicle(playerb)) return SendClientMessage(playerid, COLOR_GREY, "You can't drag someone from a vehicle.");
	if(!Cuffed[playerb] && !Tied[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player is not cuffed nor tied.");
	if(Dragged[playerb] != -1) return SendClientMessage(playerid, COLOR_GREY, "Player is already being dragged.");
	Drag[playerid] = playerb;
	Dragged[playerb] = playerid;
	format(string, sizeof(string), "* %s pulls %s and starts draggin them.", RPN(playerid), RPN(playerb));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:stopdrag(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(Drag[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "You are not dragging anybody.");
	playerb = Drag[playerid];
	Drag[playerid] = -1;
	Dragged[playerb] = -1;
	format(string, sizeof(string), "* %s released %s and stops draggin them.", RPN(playerid), RPN(playerb));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}
CMD:mole(playerid, params[])
{
    if(IsAAdmin(playerid))
	{
	    new string[128];
		if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(sscanf(params, "s[64]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /mole [text]");
		if(AntiAdv(playerid, params)) return 1;
		if(strlen(params) > 64) return SendClientMessage(playerid, COLOR_GREY, "You may only use 64 characters per SMS.");
       	foreach(Player, i)
		{
		    if(IsPlayerLoggedIn(i))
		    {
		        format(string, sizeof(string), "SMS: %s, Sender: MOLE (555)", params);
		        SendClientMessage(i, COLOR_YELLOW, string);
		        PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
	        }
		}
		format(string, sizeof(string), "[%s]: %s", RPN(playerid), params);
		Log("logs/molesms.log", string);
	}
	return 1;
}
CMD:hitmansms(playerid, params[])
{
    if(IsAHitman(playerid))
	{
	    new string[128];
		if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(sscanf(params, "s[64]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hitmansms [text]");
		if(AntiAdv(playerid, params)) return 1;
		if(strlen(params) > 64) return SendClientMessage(playerid, COLOR_GREY, "You may only use 64 characters per SMS.");
       	foreach(Player, i)
		{
		    if(IsPlayerLoggedIn(i))
		    {
		        format(string, sizeof(string), "SMS: %s, Sender: Hitman Director (Blocked)", params);
		        SendClientMessage(i, COLOR_YELLOW, string);
		        PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
	        }
		}
		format(string, sizeof(string), "[%s]: %s", RPN(playerid), params);
		Log("logs/hitmansms.log", string);
	}
	return 1;
}

CMD:contract(playerid, params[])
{
	new string[128], playerb, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /contract [playerid] [amount]");
	if(IsAHitman(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No... just no motherfucker!");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "You mus be at least level 3 to make a contract on someone.");
	if(amount < 3000 || amount > 50000) return SendClientMessage(playerid, COLOR_GREY, "Contracts are between $3000 and $50,000.");
	if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much on you at the moment.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't contract yourself.");
	if(PlayerInfo[playerb][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "You can't contract people under level 3.");
	//if(!strcmp(RPN(playerid), PlayerInfo[playerb][pContractBy], true)) return SendClientMessage(playerid, COLOR_GREY, "You have already placed a contract on this player.");
	if(PlayerInfo[playerb][pContract] >= 150000) return SendClientMessage(playerid, COLOR_GREY, "Player has the maximum contract amount on his head already.");
	PlayerInfo[playerb][pContract] += amount;
	format(PlayerInfo[playerb][pContractBy], 32, "%s", RPN(playerid));
	GiveDodMoney(playerid, -amount);
	format(string, sizeof(string), "HitmanWarn: %s has placed a contract on %s for $%d.", RPN(playerid), RPN(playerb), amount);
	SendHitmanMessage(COLOR_YELLOW, string);
	SendAdminMessage(COLOR_DARKRED, 3, string);
	Log("logs/contract.log", string);
	return 1;
}

CMD:hitmanname(playerid, params[])
{
    if(IsAHitman(playerid))
	{
	   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(!IsPlayerInRangeOfPoint(playerid, 2, 2243.8555,-1680.0319,4.0939)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Hitman Agency PC.");
		new string[128], string2[128], file[64], idx, idx2, idx3, idx4, text[MAX_PLAYER_NAME];
	   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(sscanf(params, "s[24]", text)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hitmanname [name]");
	    // Start of detecting space in name
		new end, temp[32], temp2[32];
		end = strfind(text, " ",true);
		if(end != -1)
		{
		    strmid(temp, text, 0, end);
		    format(temp, sizeof(temp), "%s_", temp);
		    strdel(text, 0, end);
			strmid(temp2, text, 1, strlen(text));
		    format(text, 24, "");
		    strcat(text, temp, sizeof(temp));
		    strcat(text, temp2, sizeof(temp2));
		}
		// End of detecting space in name
	    format(string, sizeof(string), "HitmanWarn: %s has changed his name to %s.", RPN(playerid), text);
	    format(string2, sizeof(string2), "You have changed your name to {FF6347}%s{FFFFFF}.", text);
		format(file, sizeof(file), "users/%s.ini", text);
		if(dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Name already in use.");
		idx = PlayerInfo[playerid][pBiz];
		idx2 = PlayerInfo[playerid][pHouse];
		idx3 = PlayerInfo[playerid][pVBiz];
		idx4 = PlayerInfo[playerid][pVHouse];
	    format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		dini_Remove(file);
		SetPlayerName(playerid, text);
		PlayerInfo[playerid][pBiz] = idx;
		format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		dini_Create(file);
		SaveChar(playerid);
		SendHitmanMessage(COLOR_YELLOW, string);
		SendClientMessage(playerid, COLOR_WHITE, string2);
		if(idx)
		{

		    format(BizInfo[idx][bOwner], 32, "%s", text);
		    format(string, sizeof(string), "Business of %s\nBusiness type: %s\n%s", BizInfo[idx][bOwner], RBT(idx), RBS(idx));
			UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		}
		if(idx2)
		{
		    idx = idx2;
		    format(HouseInfo[idx][hOwner], 32, "%s", text);
		    format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
			UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);

		}
		if(idx3)
		{
			idx = idx3;
		    format(BizInfo[idx][bOwner], 32, "%s", text);
		    format(string, sizeof(string), "Business of %s\nBusiness type: %s\n%s", BizInfo[idx][bOwner], RBT(idx), RBS(idx));
			UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		}
		if(idx4)
		{
		    idx = idx4;
		    format(HouseInfo[idx][hOwner], 32, "%s", text);
		    format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
			UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:order(playerid, params[])
{
	if(IsAHitman(playerid))
	{
	   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(!IsPlayerInRangeOfPoint(playerid, 2, 2257.4595,-71.1591,31.6016) && !IsPlayerInRangeOfPoint(playerid, 2, 1628.7523,-1903.4075,13.5532)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Hitman Agency HQ.");
		if(sscanf(params, "s[32]", params))
		{
			SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /order [item]");
			SendClientMessage(playerid, COLOR_GREY, "item: Armor ($100) | Knife ($100) | Shotgun ($200) | Deagle ($2000) | MP5 ($500)");
			SendClientMessage(playerid, COLOR_GREY, "item: M4 ($4500) | Spas12 ($6500) | Sniper ($7000) | Scope ($5000) | C4 ($5000)");
		    return 1;
		}
		if(!strcmp(params, "armor", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    SetPlayerArmour(playerid, 100);
		    GiveDodMoney(playerid, -100);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a bulletproof vest.");
		}
		else if(!strcmp(params, "knife", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveDodWeapon(playerid, 4, 1);
		    GiveDodMoney(playerid, -100);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Knife.");
		}
		else if(!strcmp(params, "deagle", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 2000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveDodWeapon(playerid, 24, 500);
		    GiveDodMoney(playerid, -2000);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Desert Eagle.");
		}
		else if(!strcmp(params, "shotgun", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveDodWeapon(playerid, 25, 500);
		    GiveDodMoney(playerid, -200);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Shotgun.");
		}
		else if(!strcmp(params, "mp5", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 500) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveDodWeapon(playerid, 29, 500);
		    GiveDodMoney(playerid, -500);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a MP5.");
		}
		else if(!strcmp(params, "m4", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 4500) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveDodWeapon(playerid, 31, 500);
		    GiveDodMoney(playerid, -4500);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased an M4.");
		}
		else if(!strcmp(params, "spas12", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 6500) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveDodWeapon(playerid, 27, 200);
		    GiveDodMoney(playerid, -6500);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a SPAS12.");
		}
		else if(!strcmp(params, "sniper", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 7000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveDodWeapon(playerid, 34, 200);
		    GiveDodMoney(playerid, -7000);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Sniper.");
		}
		else if(!strcmp(params, "scope", true))
		{
	 		if(PlayerInfo[playerid][pMoney] < 5000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
			GiveDodMoney(playerid, -5000);
			PlayerInfo[playerid][pScope] ++;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Scope.");
		}
		else if(!strcmp(params, "C4", true))
		{
  			if(Bomb[playerid] == 0)
		    {
	 		if(PlayerInfo[playerid][pMoney] < 5000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
			GiveDodMoney(playerid, -BombPrice);
			Bomb[playerid] = 1;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a C4 explosive((/c4help)).");
		    }
		    else
		    {
			SendClientMessage(playerid,COLOR_GREY,"You already have a bomb, you can only have one at a time");
			}
		}
	}
	return 1;
}
CMD:plantbomb(playerid, params[])
{
    if(IsAHitman(playerid))
	{
	    if(Pspawned[playerid] == 1)
	    {
	        if(Bomb[playerid] == 1)
	        {
	            if(GetPlayerState(playerid) != 2)
		        {
				    GetPlayerPos(playerid, bx[playerid], by[playerid], bz[playerid]);
					Planted[playerid] = 1;
					ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,1000);
					SendClientMessage(playerid,COLOR_YELLOW,"Bomb planted,push the button((alt+lmb)) to detonate it.");
					Bomb[playerid] = 0;
					return 1;
				}
			}else SendClientMessage(playerid,COLOR_GREY,"You don't have a bomb in you.");
		}else SendClientMessage(playerid,COLOR_GREY,"You need to login first.");
	}
	return 1;
}

CMD:pickupbomb(playerid, params[])
{
    if(IsAHitman(playerid))
	{
	    if(Pspawned[playerid] == 1)
	    {
	        if(Bomb[playerid] == 0)
	        {
                if(GetPlayerState(playerid) != 2)
		        {
		            if(IsPlayerInRangeOfPoint(playerid, 2, bx[playerid], by[playerid], bz[playerid]-1))
		            {
					DestroyObject(C4[playerid]);
					Planted[playerid] = 0;
					ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,1000);
					SendClientMessage(playerid,COLOR_YELLOW,"Bomb picked up.");
					Bomb[playerid] = 1;
					return 1;
					}else SendClientMessage(playerid,COLOR_GREY,"You are not near the bomb.");
				}
			}
		}else SendClientMessage(playerid,COLOR_GREY,"You need to login first.");
	}
	return 1;
}

CMD:c4help(playerid, params[])
{
    if(IsAHitman(playerid))
	{
	    if(Pspawned[playerid] == 1)
	    {
     	SendClientMessage(playerid, COLOR_YELLOW, "C4: {FFFFFF}/plantbomb /pickupbomb ((Detonation Alt+LMB))");
     	return 1;
		}else SendClientMessage(playerid, COLOR_GREY, "You need to login first.");
	}else SendClientMessage(playerid, COLOR_GREY, "You are not authorised to use this command.");
	return 1;
}

/*CMD:f(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!GetPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not holding a weapon.");
    if(!PlayerInfo[playerid][pf]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a weapon f.");
    if(f[playerid] == 0)
	{
    	SetPVarInt(playerid, "f", 1);
    	SetPVarInt(playerid, "color", GetPVarInt(playerid, "color"));
    	f[playerid] = 1;
    	format(string, sizeof(string), "* %s pushes a button on their weapon and turns on their f pointer.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else
	{
	    SetPVarInt(playerid, "f", 0);
        if(IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
        f[playerid] = 0;
        format(string, sizeof(string), "* %s pushes a button on their weapon and turns off their f pointer.", RPN(playerid));
        SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		return 1;
	}
	return 1;
}*/

/*CMD:fcolor(playerid, params[])
{
    new color[16];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!GetPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not holding a weapon.");
    if(!PlayerInfo[playerid][pf]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a weapon f.");
    if(sscanf(params, "s[15]", color)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fcolor [color]");

	    if(!strcmp(color, "red", true)) SetPVarInt(playerid, "color", 18643);
	    else if(!strcmp(color, "blue", true)) SetPVarInt(playerid, "color", 19080);
	    else if(!strcmp(color, "pink", true)) SetPVarInt(playerid, "color", 19081);
	    else if(!strcmp(color, "orange", true)) SetPVarInt(playerid, "color", 19082);
	    else if(!strcmp(color, "green", true)) SetPVarInt(playerid, "color", 19083);
	    else if(!strcmp(color, "yellow", true)) SetPVarInt(playerid, "color", 19084);
	    else SendClientMessage(playerid, COLOR_GREY, "Colors are red,blue,pink,orange,green and yellow.");
    return 1;
}*/

CMD:walkstyle(playerid, params[])
{
	new
		iSuccess;
	switch(strval(params))
	{
		case 1: { SetPlayerWalkingStyle(playerid, 0); iSuccess++; }
		case 2: { SetPlayerWalkingStyle(playerid, 3); iSuccess++; }
		case 3: { SetPlayerWalkingStyle(playerid, 4); iSuccess++; }
		case 4: { SetPlayerWalkingStyle(playerid, 5); iSuccess++; }
		case 5: { SetPlayerWalkingStyle(playerid, 6); iSuccess++; }
		case 6: { SetPlayerWalkingStyle(playerid, 8); iSuccess++; }
		case 7: { SetPlayerWalkingStyle(playerid, 9); iSuccess++; }
		case 8: { SetPlayerWalkingStyle(playerid, 10); iSuccess++; }
		case 9: { SetPlayerWalkingStyle(playerid, 11); iSuccess++; }
		case 10: { SetPlayerWalkingStyle(playerid, 12); iSuccess++; }
		case 11: { SetPlayerWalkingStyle(playerid, 13); iSuccess++; }
		default: SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /walkstyle [1-11]");
	}
	if(iSuccess > 0) SendClientMessage(playerid, COLOR_WHITE, "You've changed your walkstyle, Walk slowly to test it.");
	return 1;
}

CMD:neon(playerid, params[])
{
    new string[100];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not in a vehicle.");
    if(GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVeh] && GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVVeh]) return SendClientMessage(playerid, COLOR_GREY, "You are not in an owned vehicle.");
    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
    {
	    if(neon[playerid] == 1)
	    {
	        if(PlayerInfo[playerid][pNeon] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "You don't have neons installed on this vehicle.");
			}
	        if(PlayerInfo[playerid][pNeon] == 1)//red
	        {
		  		SetPVarInt(playerid, "neon2", CreateDynamicObject(18647,0,0,0,0,0,0));
		    	SetPVarInt(playerid, "neon3", CreateDynamicObject(18647,0,0,0,0,0,0));
		     	AttachObjectToVehicle(GetPVarInt(playerid, "neon2"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		      	AttachObjectToVehicle(GetPVarInt(playerid, "neon3"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		       	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his red neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		neon[playerid] = 0;
			}
			if(PlayerInfo[playerid][pNeon] == 2)//blue
			 {
	      		SetPVarInt(playerid, "neon", CreateDynamicObject(18648,0,0,0,0,0,0));
	        	SetPVarInt(playerid, "neon1", CreateDynamicObject(18648,0,0,0,0,0,0));
	         	AttachObjectToVehicle(GetPVarInt(playerid, "neon"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	AttachObjectToVehicle(GetPVarInt(playerid, "neon1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his blue neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		neon[playerid] = 0;
			 }
			 if(PlayerInfo[playerid][pNeon] == 3)//green
			 {
	      		SetPVarInt(playerid, "neon4", CreateDynamicObject(18649,0,0,0,0,0,0));
	        	SetPVarInt(playerid, "neon5", CreateDynamicObject(18649,0,0,0,0,0,0));
	         	AttachObjectToVehicle(GetPVarInt(playerid, "neon4"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	AttachObjectToVehicle(GetPVarInt(playerid, "neon5"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his green neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		neon[playerid] = 0;
			 }
			 if(PlayerInfo[playerid][pNeon] == 4)//white
			 {
	      		SetPVarInt(playerid, "neon6", CreateDynamicObject(18652,0,0,0,0,0,0));
	        	SetPVarInt(playerid, "neon7", CreateDynamicObject(18652,0,0,0,0,0,0));
	         	AttachObjectToVehicle(GetPVarInt(playerid, "neon6"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	AttachObjectToVehicle(GetPVarInt(playerid, "neon7"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his white neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		neon[playerid] = 0;
			 }
			 if(PlayerInfo[playerid][pNeon] == 5)//pink
			 {
	      		SetPVarInt(playerid, "neon8", CreateDynamicObject(18651,0,0,0,0,0,0));
	        	SetPVarInt(playerid, "neon9", CreateDynamicObject(18651,0,0,0,0,0,0));
	         	AttachObjectToVehicle(GetPVarInt(playerid, "neon8"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	AttachObjectToVehicle(GetPVarInt(playerid, "neon9"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his pink neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		neon[playerid] = 0;
			 }
			 if(PlayerInfo[playerid][pNeon] == 6)//yellow
			 {
	      		SetPVarInt(playerid, "neon10", CreateDynamicObject(18650,0,0,0,0,0,0));
	        	SetPVarInt(playerid, "neon11", CreateDynamicObject(18650,0,0,0,0,0,0));
	         	AttachObjectToVehicle(GetPVarInt(playerid, "neon10"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	AttachObjectToVehicle(GetPVarInt(playerid, "neon11"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his yellow neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		neon[playerid] = 0;
			 }
			 if(Bikes(GetPlayerVehicleID(playerid)))
			 {
			    if(PlayerInfo[playerid][pNeon] == 1)//red
		        {
			  		SetPVarInt(playerid, "nb1", CreateDynamicObject(18647,0,0,0,0,0,0));
			     	AttachObjectToVehicle(GetPVarInt(playerid, "nb1"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
			     	DestroyObject(GetPVarInt(playerid, "neon2"));
	    			DestroyObject(GetPVarInt(playerid, "neon3"));
			 		neon[playerid] = 0;
				}
				if(PlayerInfo[playerid][pNeon] == 2)//blue
				 {
		      		SetPVarInt(playerid, "nb2", CreateDynamicObject(18648,0,0,0,0,0,0));
		         	AttachObjectToVehicle(GetPVarInt(playerid, "nb2"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
		         	DestroyObject(GetPVarInt(playerid, "neon"));
	   				DestroyObject(GetPVarInt(playerid, "neon1"));
			 		neon[playerid] = 0;
				 }
				 if(PlayerInfo[playerid][pNeon] == 3)//green
				 {
		      		SetPVarInt(playerid, "nb3", CreateDynamicObject(18649,0,0,0,0,0,0));
		         	AttachObjectToVehicle(GetPVarInt(playerid, "nb3"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
		         	DestroyObject(GetPVarInt(playerid, "neon4"));
	   				DestroyObject(GetPVarInt(playerid, "neon5"));
			 		neon[playerid] = 0;
				 }
				 if(PlayerInfo[playerid][pNeon] == 4)//white
				 {
		      		SetPVarInt(playerid, "nb4", CreateDynamicObject(18652,0,0,0,0,0,0));
		         	AttachObjectToVehicle(GetPVarInt(playerid, "nb4"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
		         	DestroyObject(GetPVarInt(playerid, "neon6"));
	    			DestroyObject(GetPVarInt(playerid, "neon7"));
			 		neon[playerid] = 0;
				 }
				 if(PlayerInfo[playerid][pNeon] == 5)//pink
				 {
		      		SetPVarInt(playerid, "nb5", CreateDynamicObject(18651,0,0,0,0,0,0));
		         	AttachObjectToVehicle(GetPVarInt(playerid, "nb5"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
		         	DestroyObject(GetPVarInt(playerid, "neon8"));
	    			DestroyObject(GetPVarInt(playerid, "neon9"));
			 		neon[playerid] = 0;
				 }
				 if(PlayerInfo[playerid][pNeon] == 6)//yellow
				 {
		      		SetPVarInt(playerid, "nb6", CreateDynamicObject(18650,0,0,0,0,0,0));
		         	AttachObjectToVehicle(GetPVarInt(playerid, "nb6"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
		         	DestroyObject(GetPVarInt(playerid, "neon10"));
	    			DestroyObject(GetPVarInt(playerid, "neon11"));
			 		neon[playerid] = 0;
				 }
			 }
		}
	    else
		{
	 		DestroyObject(GetPVarInt(playerid, "neon"));
	   		DestroyObject(GetPVarInt(playerid, "neon1"));
		    DestroyObject(GetPVarInt(playerid, "neon2"));
	    	DestroyObject(GetPVarInt(playerid, "neon3"));
	    	DestroyObject(GetPVarInt(playerid, "neon4"));
	    	DestroyObject(GetPVarInt(playerid, "neon5"));
	    	DestroyObject(GetPVarInt(playerid, "neon6"));
	    	DestroyObject(GetPVarInt(playerid, "neon7"));
	    	DestroyObject(GetPVarInt(playerid, "neon8"));
	    	DestroyObject(GetPVarInt(playerid, "neon9"));
	    	DestroyObject(GetPVarInt(playerid, "neon10"));
	    	DestroyObject(GetPVarInt(playerid, "neon11"));
	    	DestroyObject(GetPVarInt(playerid, "nb1"));
	    	DestroyObject(GetPVarInt(playerid, "nb2"));
	    	DestroyObject(GetPVarInt(playerid, "nb3"));
	    	DestroyObject(GetPVarInt(playerid, "nb4"));
	    	DestroyObject(GetPVarInt(playerid, "nb5"));
	    	DestroyObject(GetPVarInt(playerid, "nb6"));
	    	format(string, sizeof(string), "* %s pushes a button on his dash and turns off his neon.", RPN(playerid));
	 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	 		neon[playerid] = 1;
	  		return 1;
		}
	}
	if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
    {
	    if(vneon[playerid] == 1)
	    {
	        if(PlayerInfo[playerid][pVNeon] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "You don't have neons installed on this vehicle.");
			}
	        if(PlayerInfo[playerid][pVNeon] == 1)//red
	        {
		  		SetPVarInt(playerid, "vneon2", CreateDynamicObject(18647,0,0,0,0,0,0));
		    	SetPVarInt(playerid, "vneon3", CreateDynamicObject(18647,0,0,0,0,0,0));
		     	AttachObjectToVehicle(GetPVarInt(playerid, "vneon2"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		      	AttachObjectToVehicle(GetPVarInt(playerid, "vneon3"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		       	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his red neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		vneon[playerid] = 0;
			}
			if(PlayerInfo[playerid][pVNeon] == 2)//blue
			 {
	      		SetPVarInt(playerid, "vneon", CreateDynamicObject(18648,0,0,0,0,0,0));
	        	SetPVarInt(playerid, "vneon1", CreateDynamicObject(18648,0,0,0,0,0,0));
	         	AttachObjectToVehicle(GetPVarInt(playerid, "vneon"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	AttachObjectToVehicle(GetPVarInt(playerid, "vneon1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his blue neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		vneon[playerid] = 0;
			 }
			 if(PlayerInfo[playerid][pVNeon] == 3)//green
			 {
	      		SetPVarInt(playerid, "vneon4", CreateDynamicObject(18649,0,0,0,0,0,0));
	        	SetPVarInt(playerid, "vneon5", CreateDynamicObject(18649,0,0,0,0,0,0));
	         	AttachObjectToVehicle(GetPVarInt(playerid, "vneon4"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	AttachObjectToVehicle(GetPVarInt(playerid, "vneon5"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his green neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		vneon[playerid] = 0;
			 }
			 if(PlayerInfo[playerid][pVNeon] == 4)//white
			 {
	      		SetPVarInt(playerid, "vneon6", CreateDynamicObject(18652,0,0,0,0,0,0));
	        	SetPVarInt(playerid, "vneon7", CreateDynamicObject(18652,0,0,0,0,0,0));
	         	AttachObjectToVehicle(GetPVarInt(playerid, "vneon6"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	AttachObjectToVehicle(GetPVarInt(playerid, "vneon7"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his white neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		vneon[playerid] = 0;
			 }
			 if(PlayerInfo[playerid][pVNeon] == 5)//pink
			 {
	      		SetPVarInt(playerid, "vneon8", CreateDynamicObject(18651,0,0,0,0,0,0));
	        	SetPVarInt(playerid, "vneon9", CreateDynamicObject(18651,0,0,0,0,0,0));
	         	AttachObjectToVehicle(GetPVarInt(playerid, "vneon8"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	AttachObjectToVehicle(GetPVarInt(playerid, "vneon9"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his pink neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		vneon[playerid] = 0;
			 }
			 if(PlayerInfo[playerid][pVNeon] == 6)//yellow
			 {
	      		SetPVarInt(playerid, "vneon10", CreateDynamicObject(18650,0,0,0,0,0,0));
	        	SetPVarInt(playerid, "vneon11", CreateDynamicObject(18650,0,0,0,0,0,0));
	         	AttachObjectToVehicle(GetPVarInt(playerid, "vneon10"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	AttachObjectToVehicle(GetPVarInt(playerid, "vneon11"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	          	format(string, sizeof(string), "* %s pushes a button on his dash and sparks his yellow neon tubes.", RPN(playerid));
		 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		 		vneon[playerid] = 0;
			 }
			 if(Bikes(GetPlayerVehicleID(playerid)))
			 {
			    if(PlayerInfo[playerid][pVNeon] == 1)//red
		        {
			  		SetPVarInt(playerid, "vnb1", CreateDynamicObject(18647,0,0,0,0,0,0));
			     	AttachObjectToVehicle(GetPVarInt(playerid, "vnb1"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
			     	DestroyObject(GetPVarInt(playerid, "vneon2"));
	    			DestroyObject(GetPVarInt(playerid, "vneon3"));
			 		vneon[playerid] = 0;
				}
				if(PlayerInfo[playerid][pVNeon] == 2)//blue
				 {
		      		SetPVarInt(playerid, "vnb2", CreateDynamicObject(18648,0,0,0,0,0,0));
		         	AttachObjectToVehicle(GetPVarInt(playerid, "vnb2"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
		         	DestroyObject(GetPVarInt(playerid, "vneon"));
	   				DestroyObject(GetPVarInt(playerid, "vneon1"));
			 		vneon[playerid] = 0;
				 }
				 if(PlayerInfo[playerid][pVNeon] == 3)//green
				 {
		      		SetPVarInt(playerid, "vnb3", CreateDynamicObject(18649,0,0,0,0,0,0));
		         	AttachObjectToVehicle(GetPVarInt(playerid, "vnb3"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
		         	DestroyObject(GetPVarInt(playerid, "vneon4"));
	   				DestroyObject(GetPVarInt(playerid, "vneon5"));
			 		vneon[playerid] = 0;
				 }
				 if(PlayerInfo[playerid][pVNeon] == 4)//white
				 {
		      		SetPVarInt(playerid, "vnb4", CreateDynamicObject(18652,0,0,0,0,0,0));
		         	AttachObjectToVehicle(GetPVarInt(playerid, "vnb4"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
		         	DestroyObject(GetPVarInt(playerid, "vneon6"));
	    			DestroyObject(GetPVarInt(playerid, "vneon7"));
			 		vneon[playerid] = 0;
				 }
				 if(PlayerInfo[playerid][pVNeon] == 5)//pink
				 {
		      		SetPVarInt(playerid, "vnb5", CreateDynamicObject(18651,0,0,0,0,0,0));
		         	AttachObjectToVehicle(GetPVarInt(playerid, "vnb5"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
		         	DestroyObject(GetPVarInt(playerid, "vneon8"));
	    			DestroyObject(GetPVarInt(playerid, "vneon9"));
			 		vneon[playerid] = 0;
				 }
				 if(PlayerInfo[playerid][pVNeon] == 6)//yellow
				 {
		      		SetPVarInt(playerid, "vnb6", CreateDynamicObject(18650,0,0,0,0,0,0));
		         	AttachObjectToVehicle(GetPVarInt(playerid, "vnb6"), GetPlayerVehicleID(playerid), 0.0, 0.0, -0.70, 0.0, 0.0, 0.0);
		         	DestroyObject(GetPVarInt(playerid, "vneon10"));
	    			DestroyObject(GetPVarInt(playerid, "vneon11"));
			 		vneon[playerid] = 0;
				 }
			 }
		}
	    else
		{
	 		DestroyObject(GetPVarInt(playerid, "vneon"));
	   		DestroyObject(GetPVarInt(playerid, "vneon1"));
		    DestroyObject(GetPVarInt(playerid, "vneon2"));
	    	DestroyObject(GetPVarInt(playerid, "vneon3"));
	    	DestroyObject(GetPVarInt(playerid, "vneon4"));
	    	DestroyObject(GetPVarInt(playerid, "vneon5"));
	    	DestroyObject(GetPVarInt(playerid, "vneon6"));
	    	DestroyObject(GetPVarInt(playerid, "vneon7"));
	    	DestroyObject(GetPVarInt(playerid, "vneon8"));
	    	DestroyObject(GetPVarInt(playerid, "vneon9"));
	    	DestroyObject(GetPVarInt(playerid, "vneon10"));
	    	DestroyObject(GetPVarInt(playerid, "vneon11"));
	    	DestroyObject(GetPVarInt(playerid, "vnb1"));
	    	DestroyObject(GetPVarInt(playerid, "vnb2"));
	    	DestroyObject(GetPVarInt(playerid, "vnb3"));
	    	DestroyObject(GetPVarInt(playerid, "vnb4"));
	    	DestroyObject(GetPVarInt(playerid, "vnb5"));
	    	DestroyObject(GetPVarInt(playerid, "vnb6"));
	    	format(string, sizeof(string), "* %s pushes a button on his dash and turns off his neon.", RPN(playerid));
	 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	 		vneon[playerid] = 1;
	  		return 1;
		}
	}
	return 1;
}

CMD:fly(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pMapper] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    new Float:x, Float:y, Float:z;
		if((flying[playerid] = !flying[playerid]))
		{
		    GetPlayerPos(playerid, x, y, z);
		    SetPlayerPos(playerid, x, y, z+5);
      		SetPlayerArmour(playerid, 1000000000.0);
		    SetPlayerHealth(playerid, 1000000000.0);
		    SetTimerEx("AdminFly", 100, 0, "d", playerid);
		}
		else
		{
		    GetPlayerPos(playerid, x, y, z);
		    SetPlayerPos(playerid, x, y, z+0.5);
		    ClearAnimations(playerid);
		    SetPlayerArmour(playerid, 100.0);
		    SetPlayerHealth(playerid, 100.0);
			return 1;
		}
	return 1;
}

CMD:profile(playerid, params[])
{
	if(IsAHitman(playerid))
	{
	    new string[128], playerb, gender[8];
	   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /profile [playerid]");
		if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
		if(PlayerInfo[playerb][pGender] == 1) format(gender, sizeof(gender), "Male");
		else if(PlayerInfo[playerb][pGender] == 2) format(gender, sizeof(gender), "Female");
	    SendClientMessage(playerid, COLOR_ORANGE, "[Hitman Agency Profiles Database]:");
	    format(string, sizeof(string), "Name: {FFFFFF}%s", RPN(playerb));
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Age: {FFFFFF}%d", PlayerInfo[playerb][pAge]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Gender: {FFFFFF}%s", gender);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Faction: {FFFFFF}%s", RPFNEx(playerb));
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Rank: {FFFFFF}%s (%d)", RPFRN(playerb), PlayerInfo[playerb][pFacRank]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Family: {FFFFFF}%s", RPFaN(playerb));
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Rank: {FFFFFF}%s (%d)", RPFaRN(playerb), PlayerInfo[playerb][pFamRank]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	}
	return 1;
}

CMD:contracts(playerid, params[])
{
	if(IsAHitman(playerid) || PlayerInfo[playerid][pAdmin] >= 5)
	{
		new string[128];
	   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Hitman Agency Contracts List]:");
	    foreach(Player, i)
	    {
	        if(IsPlayerLoggedIn(i))
	        {
	            if(PlayerInfo[i][pContract])
	            {
	                format(string, sizeof(string), "Name: %s | Head Amount: %d | Contracted By: %s", RPN(i), PlayerInfo[i][pContract], PlayerInfo[i][pContractBy]);
	                SendClientMessage(playerid, COLOR_WHITE, string);
	            }
	        }
	    }
	}
	return 1;
}

CMD:hit(playerid, params[])
{
	if(IsAHitman(playerid))
	{
		new string[128];
   		if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	    if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hit [text]");
	    if(AntiAdv(playerid, params)) return 1;
	    format(string, sizeof(string), "**  %s %s: %s",  RPFRN(playerid), RPN(playerid), params);
		SendPlayerFactionMessage(playerid, 0, COLOR_LIGHTBLUE, string);
		Log("logs/HA.log", string);
	}
	return 1;
}

CMD:givehit(playerid, params[])
{
	if(IsAHitman(playerid))
	{
		new string[128], playerb, hitman;
   		if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	    if(sscanf(params, "uu", hitman, playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /givehit [hitmanid] [contractid]");
		if(!PlayerInfo[playerb][pContract]) return SendClientMessage(playerid, COLOR_GREY, "Invalid contract id.");
		if(!IsAHitman(hitman)) return SendClientMessage(playerid, COLOR_GREY, "Player is not a hitman.");
		if(Hitman[hitman] != -1) return SendClientMessage(playerid, COLOR_GREY, "Hitman is already assigned to a contract.");
		Hitman[hitman] = playerb;
		format(string, sizeof(string), "HitmanWarn: %s has assigned %s to the contract on %s's head.", RPN(playerid), RPN(hitman), RPN(playerb));
		SendHitmanMessage(COLOR_YELLOW, string);
		SendClientMessage(playerid, COLOR_WHITE, " You can cancel the contract using '/cancel contract)'.");
	}
	return 1;
}

CMD:taxvault(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAGov(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a bank booth.");
    //if(GetPlayerVirtualWorld(playerid) != 27934) return SendClientMessage(playerid, COLOR_GREY, "You are not inside the Tax Vault.");
	format(string, sizeof(string), "[Bank Statement]: The state's tax vault contains $%d.", TaxMoney);
	SendClientMessage(playerid, COLOR_DARKRED, string);
	return 1;
}

CMD:taxwithdraw(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAGov(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a bank booth.");
	//if(GetPlayerVirtualWorld(playerid) != 27934) return SendClientMessage(playerid, COLOR_GREY, "You are not inside the Tax Vault.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /withdraw [amount]");
	if(amount > TaxMoney) return SendClientMessage(playerid, COLOR_GREY, "The tax vault doesn't have that much money inside it.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	TaxMoney -= amount;
	GiveDodMoney(playerid, amount);
	format(string, sizeof(string), "[Bank Warning]: %s has withdrawn $%d from the tax vault, amount left: $%d.", RPN(playerid), amount, TaxMoney);
	SendPlayerFactionMessage(playerid, 0, COLOR_DARKRED, string);
	format(string, sizeof(string), "AdmWarn: %s has withdrawn $%d from the tax vault, amount left: $%d.", RPN(playerid), amount, TaxMoney);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/taxvault.log", string);
	return 1;
}

CMD:settax(playerid, params[])
{
	new string[128], percent;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAGov(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", percent)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /settax [percent]");
	if(percent < 0 || percent > 100) return SendClientMessage(playerid, COLOR_GREY, "Percent is between 0 and 100.");
	TempTaxPercent = percent;
	TaxRequester = playerid;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, " Your tax percent change request has been sent to online admins, wait for them to approve/deny.");
	format(string, sizeof(string), "AdmWarn: %s has requested to change the tax percent to %d. (/approve) (/deny)", RPN(playerid), percent);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:m(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/m)egaphone [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(!IsLeoVehicle(GetPlayerVehicleID(playerid)) && !IsFBIVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You must be in an NYPD/FBI vehicle to use the megaphone.");
    format(string, sizeof(string), "[%s:o< %s]", RPN(playerid), params);
	SendNearbyMessage(playerid, 40, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	return 1;
}


CMD:su(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(sscanf(params, "us[64]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /su [playerid] [charge]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(IsACop(playerb) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't charge an NYPD Officer/FBI Agent.");
	if(PlayerInfo[playerb][pWanted] >= 6) return SendClientMessage(playerid, COLOR_GREY, "Player has the maximum wanted level possible.");
	AddDodWantedLevel(playerb, params);
	PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
	PlayerPlaySound(playerb,1054,0.0,0.0,0.0);
	format(string, sizeof(string), " You have commited a Crime ( %s ). Reporter: %s.", params, RPN(playerid));
	SendClientMessage(playerb, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "NYPD: %s has charged %s for '%s'.", RPN(playerid), RPN(playerb), params);
	foreach(Player, i)
	{
	    if(IsACop(i) || IsFBI(i) || IsNG(i))
	    {
	        SendClientMessage(i, COLOR_BLUE, string);
	        PlayCrimeReportForPlayer(i, playerb, 19);
	    }
	}
	return 1;
}


CMD:ticket(playerid, params[])
{
	new string[128], playerb, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a LEO.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(sscanf(params, "uis[32]", playerb, amount, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /ticket [playerid] [amount] [reason]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(amount < 0 || amount > 500) return SendClientMessage(playerid, COLOR_GREY, "Tickets are between $0 and $500.");
    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	TicketBy[playerb] = playerid;
	TicketPrice[playerid][playerb] = amount;
	format(string, sizeof(string), "* %s takes out a pen and tickets book, writes down a ticket then hands it to %s.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), " You have given %s a ticket for $%d, reason: %s", RPN(playerb), amount, params);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has given you a ticket for $%d, reason: %s", RPN(playerid), amount, params);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	SendClientMessage(playerb, COLOR_WHITE, "(/accept ticket) to pay the ticket.");
	return 1;
}

CMD:wanted(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && PlayerInfo[playerid][pJob] != JOB_LAWYER && PlayerInfo[playerid][pVIPJob] != JOB_LAWYER && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent nor a Lawyer.");
	SendClientMessage(playerid, COLOR_ORANGE, "[NYPD Wanted List]:");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pWanted])
	    {
	        format(string, sizeof(string), "%d) %s | Wanted Level: %d", i, RPN(i), PlayerInfo[i][pWanted]);
	        SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:mdc(playerid, params[])
{
	new playerb, string[128], gender[8];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /mdc [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "Player is not wanted.");
	// Gender
	if(PlayerInfo[playerb][pGender] == 1) format(gender, sizeof(gender), "Male");
	else if(PlayerInfo[playerb][pGender] == 2) format(gender, sizeof(gender), "Female");
	//
	SendClientMessage(playerid, COLOR_ORANGE, "[NYPD Mobile Data Computer]:");
	format(string, sizeof(string), "{FF9900}Name: {FFFFFF}%s {FF9900}| Gender: {FFFFFF}%s {FF9900}| Age: {FFFFFF}%d {FF9900}| Wanted Level: {FFFFFF}%d", RPN(playerb), gender, PlayerInfo[playerb][pAge], PlayerInfo[playerb][pWanted]);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	if(PlayerInfo[playerb][pWanted] >= 1){format(string, sizeof(string), "{FF9900}Crime 1: {FFFFFF}%s", PlayerInfo[playerb][pWanted1]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWanted] >= 2){format(string, sizeof(string), "{FF9900}Crime 2: {FFFFFF}%s", PlayerInfo[playerb][pWanted2]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWanted] >= 3){format(string, sizeof(string), "{FF9900}Crime 3: {FFFFFF}%s", PlayerInfo[playerb][pWanted3]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWanted] >= 4){format(string, sizeof(string), "{FF9900}Crime 4: {FFFFFF}%s", PlayerInfo[playerb][pWanted4]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWanted] >= 5){format(string, sizeof(string), "{FF9900}Crime 5: {FFFFFF}%s", PlayerInfo[playerb][pWanted5]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWanted] >= 6){format(string, sizeof(string), "{FF9900}Crime 6: {FFFFFF}%s", PlayerInfo[playerb][pWanted6]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	return 1;
}

CMD:arrest(playerid, params[])
{
	new playerb, time, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a LEO.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, ap[0], ap[1], ap[2])) return SendClientMessage(playerid, COLOR_GREY, "You are not near the arrest point.");
	if(sscanf(params, "uis[64]", playerb, time)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /arrest [playerid] [minutes]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "Player is not wanted.");
	if(IsACop(playerb) && IsFBI(playerb) && IsNG(playerb)) return SendClientMessage(playerid, COLOR_GREY, "You can't arrest an NYPD Officer.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	format(string, sizeof(string), "Local Prison: %s has been arrested by %s.", RPN(playerb), RPN(playerid));
	foreach(Player, i)
	{
	    if(IsACop(i) || IsFBI(i) || IsNG(i))
	    {
	        SendClientMessage(i, COLOR_BLUE, string);
	    }
	}
    SetPlayerColor(playerb, TRANSPARENT_ORANGE);
	PlayerInfo[playerb][pArrested] ++;
	PlayerInfo[playerb][pPrison] = 2;
	PlayerInfo[playerb][pPrisonTime] = time*60;
	ClearDodWantedLevels(playerb);
	SetPlayerInterior(playerb, 0);
	SetPlayerVirtualWorld(playerb, 0);
	new RandomCell = random(sizeof(RandomPrison));
	SetPlayerFacingAngle(playerb, RandomPrison[RandomCell][3]);
	TogglePlayerControllable(playerb, 0);
	SetTimerEx("EnterExitTimer", 5000, false, "i", playerb);
 	SetPlayerPos(playerb, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
 	SetCameraBehindPlayer(playerb);
	format(string, sizeof(string), " You have been arrested by an officer for %d minutes (%d seconds)", PlayerInfo[playerb][pPrisonTime]/60, PlayerInfo[playerb][pPrisonTime]);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	RemovePlayerAttachedObject(playerb, 0);
	SetPlayerSpecialAction(playerb, SPECIAL_ACTION_NONE);
	// Clearing robbery
 	if(BankRobber[playerb])
    {
	    new Rob = BankRobber[playerb]-1;
	    DisablePlayerCheckpoint(playerb);
		BankRobbersCount --;
		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
		DeliverMoney[playerb] = 0;
		//
		foreach(Player, i)
		{
		    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
		    {
				if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
				else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
				else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
				else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
				else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
			}
		}
		format(string, sizeof(string), "** %s has been arrested and has failed the robbery. **", RPN(playerb));
		SendRobberyMessage(COLOR_LIGHTRED, string);
		SendCopMessage(COLOR_LIGHTRED, string);
		BankRobber[playerb] = 0;
		if(BankRobbersCount == 0)
		{
			TextDrawHideForAll(Textdraw0);
			TextDrawHideForAll(Textdraw1);
			TextDrawHideForAll(Textdraw2);
			TextDrawHideForAll(Textdraw3);
			TextDrawHideForAll(Textdraw4);
			TextDrawHideForAll(Textdraw5);
//            BankRobbery = 0;
			RobberyStarted = 0;
			TotalRobbers = 0;
            new copsonline;
			foreach(Player, i)
			{
			    if(IsACop(i) || IsFBI(i) || IsNG(i)) copsonline++;
			}
			foreach(Player, i)
			{
			    if(IsACop(i) || IsFBI(i) || IsNG(i))
			    {
					new Saved = (TotalRobbers*50000-(TotalStolen*50000));
					format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
					SendClientMessage(i, COLOR_LIME, string);
			    }
			}
  }
    }
	return 1;
}

/*CMD:jobhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_YELLOW, "JOB: {FFFFFF} /skill /join /quitjob");
	if(PlayerInfo[playerid][pJob] == JOB_MECHANIC && PlayerInfo[playerid][pVIPJob] == JOB_MECHANIC) SendClientMessage(playerid, COLOR_YELLOW, "MECHANIC: {FFFFFF}/mech");
	if(PlayerInfo[playerid][pJob] == JOB_LAWYER || PlayerInfo[playerid][pVIPJob] == JOB_LAWYER) SendClientMessage(playerid, COLOR_YELLOW, "TRUCKER: {FFFFFF}/free /defend /wanted");
	if(PlayerInfo[playerid][pJob] == JOB_TRUCKER || PlayerInfo[playerid][pVIPJob] == JOB_TRUCKER) SendClientMessage(playerid, COLOR_YELLOW, "TRUCKER: {FFFFFF}/loadpackages /deliverpackages");
	if(PlayerInfo[playerid][pJob] == JOB_WDEALER || PlayerInfo[playerid][pVIPJob] == JOB_WDEALER) SendClientMessage(playerid, COLOR_YELLOW, "WEAPONS DEALER: {FFFFFF}/sellgun /sellmats /creategun");
	if(PlayerInfo[playerid][pJob] == JOB_WSMUGGLER || PlayerInfo[playerid][pVIPJob] == JOB_WSMUGGLER) SendClientMessage(playerid, COLOR_YELLOW, "WEAPONS SMUGGLER: {FFFFFF}/getmats /dropmats /sellmats");
	if(PlayerInfo[playerid][pJob] == JOB_DDEALER || PlayerInfo[playerid][pVIPJob] == JOB_DDEALER) SendClientMessage(playerid, COLOR_YELLOW, "DRUGS DEALER: {FFFFFF}/buyweed /buycocaine /sellweed /sellcocaine");
	if(PlayerInfo[playerid][pJob] == JOB_DSMUGGLER || PlayerInfo[playerid][pVIPJob] == JOB_DSMUGGLER) SendClientMessage(playerid, COLOR_YELLOW, "DRUGS SMUGGLER: {FFFFFF}/getweed /dropweed /getcocaine /dropcocaine");
   	if(PlayerInfo[playerid][pJob] == JOB_BODYGUARD || PlayerInfo[playerid][pVIPJob] == JOB_BODYGUARD) SendClientMessage(playerid, COLOR_YELLOW, "BODYGUARD: {FFFFFF}/vest");
   	if(PlayerInfo[playerid][pJob] == JOB_BOXER || PlayerInfo[playerid][pVIPJob] == JOB_BOXER) SendClientMessage(playerid, COLOR_YELLOW, "BOXER: {FFFFFF}/fight");
	return 1;
}*/
CMD:jobhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SSSShowDialog(playerid, 44);
	return 1;
}
CMD:bid(playerid, params[])
{
	new boxer, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(GetPlayerInterior(playerid) != 5 || GetPlayerVirtualWorld(playerid) != 1) return SendClientMessage(playerid, COLOR_GREY, "You are not inside the ganton gym.");
	if(!BoxingMatch) return SendClientMessage(playerid, COLOR_GREY, "There is no boxing match going on.");
	if(!BoxTime) return SendClientMessage(playerid, COLOR_GREY, "The boxing match has already started.");
	if(BidAmount[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You have already placed your bid for this match.");
	if(sscanf(params, "ii", boxer, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /bid [boxer] [amount]");
	if(boxer < 1 || boxer > 2) return SendClientMessage(playerid, COLOR_GREY, "Boxers are between 1 and 2.");
	if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
	if(amount < 500) return SendClientMessage(playerid, COLOR_GREY, "Minimum bid is $500.");
	BoxerBid[boxer] += amount;
	BidAmount[playerid] = amount;
	BidBoxer[playerid] = boxer;
	GiveDodMoney(playerid, -amount);
	format(string, sizeof(string), "Boxing Ring: %s has placed a $%d bid on %s.", RPN(playerid), amount, RPN(Boxer[boxer]));
	SendGymMessage(COLOR_WHITE, string);
    return 1;
}

CMD:fight(playerid, params[]) //skin 80 and 81
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_BOXER && PlayerInfo[playerid][pVIPJob] != JOB_BOXER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Boxer.");
	if(GetPlayerInterior(playerid) != 5 || GetPlayerVirtualWorld(playerid) != 1) return SendClientMessage(playerid, COLOR_GREY, "You are not inside the ganton gym.");
	if(GetPlayerSkin(playerid) != 80 && GetPlayerSkin(playerid) != 81) return SendClientMessage(playerid, COLOR_GREY, "You are not wearing a boxing uniform.");
	if(GetPlayerFightingStyle(playerid) != FIGHT_STYLE_BOXING) return SendClientMessage(playerid, COLOR_GREY, "You must use the boxing fighting style to fight.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fight [playerid]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't fight yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 3)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
    if(BoxingMatch) return SendClientMessage(playerid, COLOR_GREY, "Another boxing match is going on.");
	format(string, sizeof(string), " You have offered %s a boxing fight.", RPN(playerb));
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), " %s has offered you a boxing fight. (/accept fight) (/cancel fight)", RPN(playerid));
	SendClientMessage(playerb, COLOR_LIME, string);
	BoxBy[playerb] = playerid;
    return 1;
}

//flashlightser
forward FlasherFunc();
public FlasherFunc() {
        new panelsx,doorsx,lightsx,tiresx;
        for (new p=0; p<MAX_VEHICLES; p++)
        {
                if (Flasher[p] == 1)
                {
                        if (FlasherState[p] == 1)
                        {
                                GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
                                UpdateVehicleDamageStatus(p, panelsx, doorsx, 4, tiresx);
                                FlasherState[p] = 0;
                        }
                        else
                        {
                                GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
                                UpdateVehicleDamageStatus(p, panelsx, doorsx, 1, tiresx);
                                FlasherState[p] = 1;
                        }
                }
        }
        return 1;
}
forward ShowPlayerBeaconForCops(playerid);
forward HidePlayerBeaconForCops(playerid);
forward ShowPlayerBeaconForMedics(playerid);
forward HidePlayerBeaconForMedics(playerid);
public ShowPlayerBeaconForCops(playerid)
{
	foreach(Player, i)
	{
		if(IsFBI(i) || IsACop(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, COLOR_RED);
		}
	}
	return 1;
}

public HidePlayerBeaconForCops(playerid)
{
	foreach(Player, i)
	{
		if(IsFBI(i) || IsACop(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
	}
    SetPlayerColor(playerid, TRANSPARENT_WHITE);
	return 1;
}

public ShowPlayerBeaconForMedics(playerid)
{
	foreach(Player, i)
	{
		if(IsMedic(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, COLOR_RED);
		}
	}
	return 1;
}

public HidePlayerBeaconForMedics(playerid)
{
	foreach(Player, i)
	{
		if(IsMedic(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
	}
	SetPlayerColor(playerid, TRANSPARENT_WHITE);
	return 1;
}
// Admin Fly

forward AdminFly(playerid);
public AdminFly(playerid)
{
	if(!IsPlayerConnected(playerid))
		return flying[playerid] = false;

	if(flying[playerid])
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
			new
			    keys,
				ud,
				lr,
				Float:x[2],
				Float:y[2],
				Float:z;

			GetPlayerKeys(playerid, keys, ud, lr);
			GetPlayerVelocity(playerid, x[0], y[0], z);
			if(ud == KEY_UP)
			{
				GetPlayerCameraPos(playerid, x[0], y[0], z);
				GetPlayerCameraFrontVector(playerid, x[1], y[1], z);
    			ApplyAnimation(playerid,"SWIM","SWIM_crawl",6.1,1,1,1,1,0,1);
				SetPlayerToFacePos(playerid, x[0] + x[1], y[0] + y[1]);
				SetPlayerVelocity(playerid, x[1], y[1], z);
			}
			else
			SetPlayerVelocity(playerid, 0.0, 0.0, 0.01);
		}

		SetTimerEx("AdminFly", 100, 0, "d", playerid);
	}

	return 0;
}
forward Float:SetPlayerToFacePos(playerid, Float:X, Float:Y);
public Float:SetPlayerToFacePos(playerid, Float:X, Float:Y)
{
	new
		Float:pX1,
		Float:pY1,
		Float:pZ1,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0.0;

	GetPlayerPos(playerid, pX1, pY1, pZ1);

	if( Y > pY1 ) ang = (-acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);
	else if( Y < pY1 && X < pX1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 450.0);
	else if( Y < pY1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);

	if(X > pX1) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);

	ang += 180.0;

	SetPlayerFacingAngle(playerid, ang);

 	return ang;
}

forward Explode(playerid);
public Explode(playerid)
{
    DestroyObject(C4[playerid]);
    CreateExplosion(bx[playerid], by[playerid], bz[playerid], 6, ExplosionRadius);
    GameTextForPlayer(playerid, "~R~Bomb Detonated", 2000, 3);
    Bomb[playerid] = 0;
    Planted[playerid] = 0;
    RemovePlayerWeapon(playerid, 40);
    if(IsPlayerInRangeOfPoint(playerid, 10, bx[playerid], by[playerid], bz[playerid]))
    {
        SetPlayerHealth(playerid, 0);
        SetPlayerArmour(playerid, 0);
	}
    return 1;
}

forward login_dialog(playerid);
public login_dialog(playerid)
{
    	SetPlayerPos(playerid, 1975.203002, 3779.311523, -50.243506);
		SetPlayerCameraPos(playerid, 1975.203002, 3779.311523, 100.243506);
		SetPlayerCameraLookAt(playerid, 1975.203002, 3779.311523, -0.243506);

    ClearChat(playerid); // Custom macro to send some empty clientmessages
    return 1;
}

forward StartPaintball();
public StartPaintball()
{
	////foreach(Player, i)
    for(new playerid; playerid<MAX_PLAYERS; playerid++)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerPaintballing[playerid] == 2)
	        {
	            SSSShowDialog(playerid, 28);
	            GunsBeingRemoved[playerid] = 1;
	            ResetPlayerWeapons(playerid);
	            SetPlayerHealth(playerid, 100);
		    	SetPlayerArmour(playerid, 100);
			    new rand = random(sizeof(PaintballSpawns));
				SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
				SetCameraBehindPlayer(playerid);
	            PlayerPaintballing[playerid] = 1;
	            SendClientMessage(playerid, COLOR_RED, "The Paintball have been started, To quit it use /paintball.");
	        }
	    }
	}
	return 1;
}

forward BoxCountDown(playerid, playerb);
public BoxCountDown(playerid, playerb)
{
	new string[64];
	ResetPlayerWeapons(playerid);
	ResetPlayerWeapons(playerb);
	if(BoxTime <= 0)
	{
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~r~Fight!", 1000, 3);
		GameTextForPlayer(playerb, "~n~~n~~n~~n~~n~~n~~n~~n~~r~Fight!", 1000, 3);
	    PlayerPlaySound(playerid, 1057, 0, 0, 0);
	    PlayerPlaySound(playerb, 1057, 0, 0, 0);
	    TogglePlayerControllable(playerb, 1);
		TogglePlayerControllable(playerid, 1);
		SendGymMessage(COLOR_WHITE, "Boxing Ring: The boxing match has started.");
	}
	else
	{
		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Starting in: ~w~%d", BoxTime);
		GameTextForPlayer(playerid, string, 1000, 3);
		GameTextForPlayer(playerb, string, 1000, 3);
		if(BoxTime == 3 || BoxTime == 2 || BoxTime == 1)
		{
		    PlayerPlaySound(playerid, 1056, 0, 0, 0);
		    PlayerPlaySound(playerb, 1056, 0, 0, 0);
		}
		BoxTime --;
		BoxTimer = SetTimerEx("BoxCountDown", 1000, false, "ii", playerid, playerb);
	}
	return 1;
}

CMD:vest(playerid, params[])
{
	new playerb, price, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_BODYGUARD && PlayerInfo[playerid][pVIPJob] != JOB_BODYGUARD) return SendClientMessage(playerid, COLOR_GREY, "You are not a Bodyguard.");
	if(sscanf(params, "ui", playerb, price)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /free [playerid] [price]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't vest yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 5)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(price < 50 || price > 500) return SendClientMessage(playerid, COLOR_GREY, "Price is between 50 and 500.");
	if(Boxing[playerb]) return SendClientMessage(playerid, COLOR_GREY, "You can't sell someone a vest in a boxing match.");
	VestPrice[playerid][playerb] = price;
	VestBy[playerb] = playerid;
	format(string, sizeof(string), " You have offered %s a vest for $%d.", RPN(playerb), price);
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), " Bodyguard %s has offered you a vest for $%d. (/accept vest) (/cancel vest)", RPN(playerid), price);
    SendClientMessage(playerb, COLOR_LIME, string);
	return 1;
}

CMD:free(playerid, params[])
{
	new playerb, price, string[128];
    if(FreeTimeout[playerid])
    {
        format(string, sizeof(string), "You have to wait %d more seconds before freeing someone.", FreeTimeout[playerid]);
        SendClientMessage(playerid, COLOR_GREY, string);
        return 1;
    }
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_LAWYER && PlayerInfo[playerid][pVIPJob] != JOB_LAWYER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Lawyer.");
	if(sscanf(params, "ui", playerb, price)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /free [playerid] [price]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't free yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pPrison]) return SendClientMessage(playerid, COLOR_GREY, "Player is not prisoned.");
	if(!IsPlayerNearPlayer(playerid, playerb, 5)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from your client.");
	if(price < 100 || price > 1000) return SendClientMessage(playerid, COLOR_GREY, "Price is between 100 and 2000.");
	if(RPJS(playerid, JOB_LAWYER) < 100) FreeTime[playerb] = 1;
	else if(RPJS(playerid, JOB_LAWYER) < 300) FreeTime[playerb] = 2;
	else if(RPJS(playerid, JOB_LAWYER) < 700) FreeTime[playerb] = 3;
	else if(RPJS(playerid, JOB_LAWYER) < 1200) FreeTime[playerb] = 4;
	else if(RPJS(playerid, JOB_LAWYER) >= 1200) FreeTime[playerb] = 5;
	FreePrice[playerid][playerb] = price;
	FreeBy[playerb] = playerid;
	format(string, sizeof(string), " You have offered %s to reduce their prison sentence by %d minutes for $%d.", RPN(playerb), FreeTime[playerb], price);
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), " Lawyer %s has offered to reduce your prison sentence by %d minute for $%d. (/accept free) (/cancel free)", RPN(playerid), FreeTime[playerb], price);
    SendClientMessage(playerb, COLOR_LIME, string);
	return 1;
}

CMD:defend(playerid, params[])
{
	new playerb, price, string[128];
    if(DefendTimeout[playerid])
    {
        format(string, sizeof(string), "You have to wait %d more seconds before defending someone.", DefendTimeout[playerid]);
        SendClientMessage(playerid, COLOR_GREY, string);
        return 1;
    }
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_LAWYER && PlayerInfo[playerid][pVIPJob] != JOB_LAWYER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Lawyer.");
	if(sscanf(params, "ui", playerb, price)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /defend [playerid] [price]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't defend yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "Player is not wanted.");
	if(!IsPlayerNearPlayer(playerid, playerb, 5)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from your client.");
	if(price < 100 || price > 1000) return SendClientMessage(playerid, COLOR_GREY, "Price is between 100 and 2000.");
	DefendBy[playerb] = playerid;
	DefendPrice[playerid][playerb] = price;
	format(string, sizeof(string), " You have offered %s to defend them $%d.", RPN(playerb), price);
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), " Lawyer %s has offered to a defend you for $%d. (/accept defend) (/cancel defend)", RPN(playerid), price);
    SendClientMessage(playerb, COLOR_LIME, string);
	return 1;
}
CMD:mech(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC && !PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not a mechanic.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be in a vehicle to use your mechanic tools.");
	SSSShowDialog(playerid, 9);
	return 1;
}

CMD:creategun(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_WDEALER && PlayerInfo[playerid][pVIPJob] != JOB_WDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a weapons dealer.");
	new string[128];
	if(sscanf(params, "s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /creategun [weapon name]");
	    SendClientMessage(playerid, COLOR_GREY, "LEVEL 1: GolfClub(50)  Shovel (50) | Bat (50) | Katana (50)");
	    SendClientMessage(playerid, COLOR_GREY, "LEVEL 1: SDPistol (100) | Shotgun (200)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 2) SendClientMessage(playerid, COLOR_GREY, "LEVEL 2: MP5 (500) | Rifle (750)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 3) SendClientMessage(playerid, COLOR_GREY, "LEVEL 3: Deagle (2000)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 4) SendClientMessage(playerid, COLOR_GREY, "LEVEL 4: AK47 (4000) | M4 (4500)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 5) SendClientMessage(playerid, COLOR_GREY, "LEVEL 5: SPAS12 (6500) | Sniper (7000)");
	    return 1;
	}
	else if(!strcmp(params, "bat", true, 3))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveDodWeapon(playerid, 5, 5);
		PlayerInfo[playerid][pMaterials] -=50;
		format(string, sizeof(string), "* %s has created a baseball bat from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "katana", true, 6))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
        GiveDodWeapon(playerid, 8, 5);
        PlayerInfo[playerid][pMaterials] -=50;
        format(string, sizeof(string), "* %s has created a katana from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "sdpistol", true, 7))
    {
		if(PlayerInfo[playerid][pMaterials] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveDodWeapon(playerid, 23, 5);
		PlayerInfo[playerid][pMaterials] -=100;
		format(string, sizeof(string), "* %s has created a silenced pistol from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
    else if(!strcmp(params, "shotgun", true, 7))
    {
		if(PlayerInfo[playerid][pMaterials] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveDodWeapon(playerid, 25, 5);
		PlayerInfo[playerid][pMaterials] -=200;
		format(string, sizeof(string), "* %s has created a shotgun from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
  	else if(!strcmp(params, "rifle", true, 5))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GREY, "Your Weapon Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 750) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveDodWeapon(playerid, 33, 5);
		PlayerInfo[playerid][pMaterials] -=750;
		format(string, sizeof(string), "* %s has successfully a Rifle from their weaponry materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
    else if(!strcmp(params, "mp5", true, 3))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveDodWeapon(playerid, 29, 5);
		PlayerInfo[playerid][pMaterials] -=500;
		format(string, sizeof(string), "* %s has created an MP5 from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "deagle", true, 6))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 3) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 2000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveDodWeapon(playerid, 24, 5);
		PlayerInfo[playerid][pMaterials] -=2000;
		format(string, sizeof(string), "* %s has created a desert eagle from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "ak47", true, 4))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 4000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveDodWeapon(playerid, 30, 5);
		PlayerInfo[playerid][pMaterials] -=4000;
		format(string, sizeof(string), "* %s has created an AK-47 from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "M4", true, 2))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 4500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveDodWeapon(playerid, 31, 5);
		PlayerInfo[playerid][pMaterials] -=4500;
		format(string, sizeof(string), "* %s has created an M4 from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "spas12", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 6500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveDodWeapon(playerid, 27, 5);
		PlayerInfo[playerid][pMaterials] -=6500;
		format(string, sizeof(string), "* %s has created a combat shotgun from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "sniper", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 7000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveDodWeapon(playerid, 34, 5);
		PlayerInfo[playerid][pMaterials] -=7000;
		format(string, sizeof(string), "* %s has created a sniper rifle from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Invalid weapon name.");
        return 1;
    }
	return 1;
}

CMD:sellgun(playerid, params[])
{
	new string[128], playerb, price, weapon[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_WDEALER && PlayerInfo[playerid][pVIPJob] != JOB_WDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a weapons dealer.");
	if(sscanf(params, "us[32]i", playerb, weapon, price))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sellgun [playerid] [weapon] [price]");
	    SendClientMessage(playerid, COLOR_GREY, "LEVEL 1: Flowers (25) | GolfClub (50) | Shovel (50) | Bat (50) | Katana (50)");
	    SendClientMessage(playerid, COLOR_GREY, "LEVEL 1: SDPistol (100) | Shotgun (200)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 2) SendClientMessage(playerid, COLOR_GREY, "LEVEL 2: MP5 (500) | Rifle (750)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 3) SendClientMessage(playerid, COLOR_GREY, "LEVEL 3: Deagle (2000)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 4) SendClientMessage(playerid, COLOR_GREY, "LEVEL 4: AK47 (4000) | M4 (4500)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 5) SendClientMessage(playerid, COLOR_GREY, "LEVEL 5: SPAS12 (6500) | Sniper (7000)");
	    return 1;
	}
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons to yourself, use /creategun.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "You must be at least level 2 to sell weapons.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
    if(!strcmp(weapon, "flowers", true, 7))
    {
        if(PlayerInfo[playerid][pMaterials] < 25) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 14;
    }
    else if(!strcmp(weapon, "golfclub", true, 8))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 2;
    }
    else if(!strcmp(weapon, "shovel", true, 6))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 6;
    }
	else if(!strcmp(weapon, "bat", true, 3))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 5;
    }
    else if(!strcmp(weapon, "katana", true, 6))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
        BeenOfferedWeapon[playerb] = 8;
    }
    else if(!strcmp(weapon, "sdpistol", true, 7))
    {
		if(PlayerInfo[playerid][pMaterials] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 23;
	}
    else if(!strcmp(weapon, "shotgun", true, 7))
    {
		if(PlayerInfo[playerid][pMaterials] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 25;
	}
  	else if(!strcmp(weapon, "rifle", true, 5))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 750) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 33;
	}
    else if(!strcmp(weapon, "mp5", true, 3))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 29;
    }
    else if(!strcmp(weapon, "deagle", true, 6))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 3) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 2000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 24;
    }
    else if(!strcmp(weapon, "ak47", true, 4))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 4000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 30;
    }
    else if(!strcmp(weapon, "M4", true, 2))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 4500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 31;
    }
    else if(!strcmp(weapon, "spas12", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 6500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 27;
    }
    else if(!strcmp(weapon, "sniper", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 7000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 34;
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Invalid weapon name.");
        return 1;
    }
    SellWeaponTo[playerid] = playerb;
	BuyWeaponFrom[playerb] = playerid;
	BuyWeaponPrice[playerb] = price;
	format(string, sizeof(string), " You have offered %s to sell them a %s for $%d.", RPN(playerb), RWN(BeenOfferedWeapon[playerb]), price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered to sell you a %s for $%d. (/accept weapon) (/cancel weapon)", RPN(playerid), RWN(BeenOfferedWeapon[playerb]), price);
    SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:sellmats(playerid, params[])
{
	new string[128], playerb, amount, price;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_WSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_WSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a weapons smuggler/dealer.");
	if(sscanf(params, "uii", playerb, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sellmats [playerid] [amount] [price]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't sell materials to yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "You must be at least level 2 to sell materials.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(PlayerInfo[playerid][pMaterials] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much materials on you.");
	if(SellMaterialsTo[playerid] == playerb) return SendClientMessage(playerid, COLOR_GREY, "You have already offered that player to sell them materials.");
	if(price <= 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid materials price.");
	// Clearing old buyer
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i))
		{
		    if(SellMaterialsTo[playerid] == i && BuyMaterialsFrom[i] == playerid)
		    {
		        BuyMaterialsFrom[i] = -1; BuyMaterialsAmount[i] = 0; BuyMaterialsPrice[i] = 0; BeenOfferedMaterials[i] = 0;
		    }
		}
	}
	// New buyer
	SellMaterialsTo[playerid] = playerb;
	BuyMaterialsFrom[playerb] = playerid;
	BuyMaterialsAmount[playerb] = amount;
	BuyMaterialsPrice[playerb] = price;
	BeenOfferedMaterials[playerb] = 1;
	format(string, sizeof(string), " You have offered %s to sell them %d materials for $%d.", RPN(playerb), amount, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered to sell you %d materials for $%d. (/accept materials) (/cancel materials)", RPN(playerid), amount, price);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:househelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_YELLOW, "HOUSE: {FFFFFF}/buyhouse");
	if(PlayerInfo[playerid][pHouse] || PlayerInfo[playerid][pVHouse]) SendClientMessage(playerid, COLOR_YELLOW, "HOUSE OWNER: {FFFFFF}/hdeposit /hwithdraw /lock /houseupgrade /sellhousetomarket");
	return 1;
}

CMD:garagehelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_YELLOW, "GARAGE: {FFFFFF}/buygarage");
	if(PlayerInfo[playerid][pGarage] || PlayerInfo[playerid][pVGarage]) SendClientMessage(playerid, COLOR_YELLOW, "GARAGE OWNER: {FFFFFF}/lock /sellgaragetomarket");
	if(PlayerInfo[playerid][pGarage] || PlayerInfo[playerid][pVGarage]) SendClientMessage(playerid, COLOR_YELLOW, "[Usage]: {FFFFFF}Press F or Type /entergarage to enter the garage 'onfoot'.");
	if(PlayerInfo[playerid][pGarage] || PlayerInfo[playerid][pVGarage]) SendClientMessage(playerid, COLOR_YELLOW, "[Usage]: {FFFFFF}Press F or Type /exitgarage to exit the garage 'onfoot'.");
	if(PlayerInfo[playerid][pGarage] || PlayerInfo[playerid][pVGarage]) SendClientMessage(playerid, COLOR_YELLOW, "[Usage]: {FFFFFF}Press H to enter the garage while being in a 'vehicle'.");
	return 1;
}

CMD:hwithdraw(playerid, params[])
{
	new string[128], option[32], amount;
	new idx = PlayerInfo[playerid][pHouse];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pHouse] && !PlayerInfo[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && !PlayerInfo[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && PlayerInfo[playerid][pVHouse])
	{
		idx = PlayerInfo[playerid][pVHouse];
	    if(GetPlayerVirtualWorld(playerid)-500 != idx) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your house.");
	}
    if(sscanf(params, "s[32]", option))
    {
        SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe withdraw [item]");
        SendClientMessage(playerid, COLOR_GREY, "Items: 1) money | 2) weapon | 3) weed | 4) cocaine");
        format(string, sizeof(string), "SAFE: $%d | %d Weed | %d cocaine", HouseInfo[idx][hMoney], HouseInfo[idx][hWeed], HouseInfo[idx][hcocaine]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "SAFE: Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo) | Weapon 3: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][0]), HouseInfo[idx][hGunAmmo][0], RWN(HouseInfo[idx][hGun][1]), HouseInfo[idx][hGunAmmo][1], RWN(HouseInfo[idx][hGun][2]), HouseInfo[idx][hGunAmmo][2]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "SAFE: Weapon 4: %s (%d Ammo) | Weapon 5: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][3]), HouseInfo[idx][hGunAmmo][3], RWN(HouseInfo[idx][hGun][4]), HouseInfo[idx][hGunAmmo][4]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
    }
    if(!strcmp(option, "money", true, 5))
    {
    	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe withdraw money [amount]");
     	if(HouseInfo[idx][hMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money in your house vault.");
    	HouseInfo[idx][hMoney] -= amount;
     	GiveDodMoney(playerid, amount);
     	format(string, sizeof(string), "* %s opens their vault, takes $%d and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(option, "weapon", true, 4))
    {
     	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe withdraw weapon [slot]");
        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Weapon slots are between 1 and 5.");
        amount = amount-1;
        if(!HouseInfo[idx][hGun][amount]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a weapon in this slot.");
        GiveDodWeapon(playerid, HouseInfo[idx][hGun][amount], HouseInfo[idx][hGunAmmo][amount]);
		format(string, sizeof(string), "* %s opens their vault, takes a %s closes it.", RPN(playerid), RWN(HouseInfo[idx][hGun][amount]));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	HouseInfo[idx][hGun][amount] = 0;
		HouseInfo[idx][hGunAmmo][amount] = 0;
    }
    else if(!strcmp(option, "weed", true, 4))
    {
  	 	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe withdraw weed [amount]");
    	if(HouseInfo[idx][hWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed in your house vault.");
    	HouseInfo[idx][hWeed] -= amount;
    	PlayerInfo[playerid][pWeed] += amount;
    	format(string, sizeof(string), "* %s opens their vault, takes %d grams of weed and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(option, "cocaine", true, 4))
    {
    	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe withdraw cocaine [amount]");
    	if(HouseInfo[idx][hcocaine] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much cocaine in your house vault.");
    	HouseInfo[idx][hcocaine] -= amount;
    	PlayerInfo[playerid][pcocaine] += amount;
   	 	format(string, sizeof(string), "* %s opens their vault, takes %d grams of cocaine and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
	return 1;
}


CMD:hdeposit(playerid, params[])
{
	new string[128], option[32], amount, done;
	new idx = PlayerInfo[playerid][pHouse];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pHouse] && !PlayerInfo[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && !PlayerInfo[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && PlayerInfo[playerid][pVHouse])
	{
		idx = PlayerInfo[playerid][pVHouse];
	    if(GetPlayerVirtualWorld(playerid)-500 != idx) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your house.");
	}
	if(sscanf(params, "s[32]", option))
    {
        SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe deposit [item]");
        SendClientMessage(playerid, COLOR_GREY, "Items: money | weapon | weed | cocaine");
        format(string, sizeof(string), "SAFE: $%d | %d Weed | %d cocaine", HouseInfo[idx][hMoney], HouseInfo[idx][hWeed], HouseInfo[idx][hcocaine]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "SAFE: Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo) | Weapon 3: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][0]), HouseInfo[idx][hGunAmmo][0], RWN(HouseInfo[idx][hGun][1]), HouseInfo[idx][hGunAmmo][1], RWN(HouseInfo[idx][hGun][2]), HouseInfo[idx][hGunAmmo][2]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "SAFE: Weapon 4: %s (%d Ammo) | Weapon 5: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][3]), HouseInfo[idx][hGunAmmo][3], RWN(HouseInfo[idx][hGun][4]), HouseInfo[idx][hGunAmmo][4]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
    }
	if(sscanf(params, "s[32]", option))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe deposit [item]");
		SendClientMessage(playerid, COLOR_GREY, "Items: 1) money | 2) weapon | 3) weed | 4) cocaine");
		return 1;
	}
	if(!strcmp(option, "money", true, 5))
	{
		if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe deposit money [amount]");
		if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		HouseInfo[idx][hMoney] += amount;
		GiveDodMoney(playerid, -amount);
		format(string, sizeof(string), "* %s opens their vault, puts $%d inside and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(!strcmp(option, "weapon", true, 4))
	{
		if(!GetPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not holding a weapon in your hand.");
		new tw[2], w[2];
		for(new i=0; i<13; i++)
		{
 			GetPlayerWeaponData(playerid, i, tw[0], tw[1]);
			if(tw[0] == GetPlayerWeapon(playerid))
			{
				w[0] = tw[0];
				w[1] = tw[1];
			}
		}
		if(!HouseInfo[idx][hGun][0])
		{
			HouseInfo[idx][hGun][0] = w[0];
			HouseInfo[idx][hGunAmmo][0] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][1])
		{
			HouseInfo[idx][hGun][1] = w[0];
			HouseInfo[idx][hGunAmmo][1] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][2])
		{
			HouseInfo[idx][hGun][2] = w[0];
			HouseInfo[idx][hGunAmmo][2] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][3])
		{
			HouseInfo[idx][hGun][3] = w[0];
			HouseInfo[idx][hGunAmmo][3] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][4])
		{
			HouseInfo[idx][hGun][4] = w[0];
			HouseInfo[idx][hGunAmmo][4] = w[1];
			done = 1;
		}
		if(done)
		{
			format(string, sizeof(string), "* %s opens their vault, puts a %s inside and closes it.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			RemoveDodWeapon(playerid, w[0]);
		}
		else SendClientMessage(playerid, COLOR_GREY, "Your house vault can't contain any more weapons.");
	}
	else if(!strcmp(option, "weed", true, 4))
	{
		if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe deposit weed [amount]");
		if(PlayerInfo[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed on you.");
		HouseInfo[idx][hWeed] += amount;
		PlayerInfo[playerid][pWeed] -= amount;
		format(string, sizeof(string), "* %s opens their vault, puts %d grams of weed inside and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(!strcmp(option, "cocaine", true, 4))
	{
		if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe deposit cocaine [amount]");
		if(PlayerInfo[playerid][pcocaine] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much cocaine on you.");
		HouseInfo[idx][hcocaine] += amount;
		PlayerInfo[playerid][pcocaine] -= amount;
		format(string, sizeof(string), "* %s opens their vault, puts %d grams of cocaine inside and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}

CMD:tbalance(playerid, params[])
{
	new string[128] ,option, done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(topened[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "You need to open your trunk first.");
   	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        if(sscanf(params, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "___________________[TRUNK:]__________________");
		        format(string, sizeof(string), " %d/50G Weed | %d/50G cocaine", PlayerInfo[playerid][pTWeed], PlayerInfo[playerid][pTcocaine]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), " Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo)", RWN(PlayerInfo[playerid][pTGun][0]), PlayerInfo[playerid][pTGunAmmo][0], RWN(PlayerInfo[playerid][pTGun][1]), PlayerInfo[playerid][pTGunAmmo][1]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
		    }
			done = 1;
	    }
	    GetVehiclePos(PlayerInfo[playerid][pVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        if(sscanf(params, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "___________________[TRUNK:]__________________");
		        format(string, sizeof(string), " %d/50G Weed | %d/50G cocaine", PlayerInfo[playerid][pvTWeed], PlayerInfo[playerid][pvTcocaine]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), " Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo)", RWN(PlayerInfo[playerid][pvTGun][0]), PlayerInfo[playerid][pvTGunAmmo][0], RWN(PlayerInfo[playerid][pvTGun][1]), PlayerInfo[playerid][pvTGunAmmo][1]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
		    }
			done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You don't own any vehicle.");
	    return 1;
	}
    return 1;
}

CMD:tdeposit(playerid, params[])
{
	new string[128] ,option[32], amount, done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(topened[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "You need to open your trunk first.");
   	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh])
    {
        new Float:vx, Float:vy, Float:vz, Float:vvx, Float:vvy, Float:vvz;
	    GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        if(sscanf(params, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /tdeposit [item]");
        		SendClientMessage(playerid, COLOR_GREY, "Weapon | Weed | cocaine");
        		return 1;
		    }
		    else if(!strcmp(option, "weed", true, 4))
			{
				if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /tdeposit weed [amount]");
				if(PlayerInfo[playerid][pTWeed] >= 50) return SendClientMessage(playerid, COLOR_GREY, "Your trunk can't carry anymore weed.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GREY, "You can't store that much weed at once.");
				if(PlayerInfo[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed on you.");
				PlayerInfo[playerid][pTWeed] += amount;
				PlayerInfo[playerid][pWeed] -= amount;
				format(string, sizeof(string), "* %s opens their vehicles trunk and puts %d grams of weed inside it.", RPN(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "cocaine", true, 4))
			{
				if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe deposit cocaine [amount]");
				if(PlayerInfo[playerid][pTcocaine] >= 50) return SendClientMessage(playerid, COLOR_GREY, "Your trunk can't carry anymore cocaine.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GREY, "You can't store that much cocaine at once.");
				if(PlayerInfo[playerid][pcocaine] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much cocaine on you.");
				PlayerInfo[playerid][pTcocaine] += amount;
				PlayerInfo[playerid][pcocaine] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d grams of cocaine inside it.", RPN(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "weapon", true, 4))
			{
				if(!GetPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not holding a weapon in your hand.");
				new tw[2], w[2];
				for(new i=0; i<13; i++)
				{
		 			GetPlayerWeaponData(playerid, i, tw[0], tw[1]);
					if(tw[0] == GetPlayerWeapon(playerid))
					{
						w[0] = tw[0];
						w[1] = tw[1];
					}
				}
				if(!PlayerInfo[playerid][pTGun][0])
				{
					PlayerInfo[playerid][pTGun][0] = w[0];
					PlayerInfo[playerid][pTGunAmmo][0] = w[1];
					done = 1;
				}
				else if(!PlayerInfo[playerid][pTGun][1])
				{
					PlayerInfo[playerid][pTGun][1] = w[0];
					PlayerInfo[playerid][pTGunAmmo][1] = w[1];
					done = 1;
				}
				if(done)
				{
					format(string, sizeof(string), "* %s puts a %s inside their trunk.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					RemovePlayerWeapon(playerid, w[0]);
				}
				else SendClientMessage(playerid, COLOR_GREY, "Your trunk can't contain any more weapons.");
			}
			done = 1;
	    }
	    GetVehiclePos(PlayerInfo[playerid][pVVeh], vvx, vvy, vvz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vvx, vvy, vvz))
	    {
	        if(sscanf(params, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /tdeposit [item]");
        		SendClientMessage(playerid, COLOR_GREY, "Weapon | Weed | cocaine");
        		return 1;
		    }
            else if(!strcmp(option, "weed", true, 4))
			{
				if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /tdeposit weed [amount]");
				if(PlayerInfo[playerid][pvTWeed] >= 50) return SendClientMessage(playerid, COLOR_GREY, "Your trunk can't carry anymore weed.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GREY, "You can't store that much weed at once.");
				if(PlayerInfo[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed on you.");
				PlayerInfo[playerid][pvTWeed] += amount;
				PlayerInfo[playerid][pWeed] -= amount;
				format(string, sizeof(string), "* %s opens their vehicles trunk and puts %d grams of weed inside it.", RPN(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "cocaine", true, 4))
			{
				if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hsafe deposit cocaine [amount]");
				if(PlayerInfo[playerid][pvTcocaine] >= 50) return SendClientMessage(playerid, COLOR_GREY, "Your trunk can't carry anymore cocaine.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GREY, "You can't store that much cocaine at once.");
				if(PlayerInfo[playerid][pcocaine] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much cocaine on you.");
				PlayerInfo[playerid][pvTcocaine] += amount;
				PlayerInfo[playerid][pcocaine] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d grams of cocaine inside it.", RPN(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "weapon", true, 4))
			{
				if(!GetPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not holding a weapon in your hand.");
				new tw[2], w[2];
				for(new i=0; i<13; i++)
				{
		 			GetPlayerWeaponData(playerid, i, tw[0], tw[1]);
					if(tw[0] == GetPlayerWeapon(playerid))
					{
						w[0] = tw[0];
						w[1] = tw[1];
					}
				}
				if(!PlayerInfo[playerid][pvTGun][0])
				{
					PlayerInfo[playerid][pvTGun][0] = w[0];
					PlayerInfo[playerid][pvTGunAmmo][0] = w[1];
					done = 1;
				}
				else if(!PlayerInfo[playerid][pvTGun][1])
				{
					PlayerInfo[playerid][pvTGun][1] = w[0];
					PlayerInfo[playerid][pvTGunAmmo][1] = w[1];
					done = 1;
				}
				if(done)
				{
					format(string, sizeof(string), "* %s puts a %s inside their trunk.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					RemovePlayerWeapon(playerid, w[0]);
				}
				else SendClientMessage(playerid, COLOR_GREY, "Your trunk can't contain any more weapons.");
			}
			done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You don't own any vehicle.");
	    return 1;
	}
    return 1;
}

CMD:twithdraw(playerid, params[])
{
	new string[128] ,option[32], amount, done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(topened[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "You need to open your trunk first.");
   	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        if(sscanf(params, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /twithdraw [item]");
        		SendClientMessage(playerid, COLOR_GREY, "Weapon | Weed | cocaine");
				return 1;
		    }
		    if(!strcmp(option, "weed", true, 4))
		    {
		  	 	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /twithdraw weed [amount]");
		    	if(PlayerInfo[playerid][pTWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed in your trunk.");
		    	PlayerInfo[playerid][pTWeed] -= amount;
		    	PlayerInfo[playerid][pWeed] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of weed from it.", RPN(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "cocaine", true, 4))
		    {
		    	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /twithdraw cocaine [amount]");
		    	if(PlayerInfo[playerid][pTcocaine] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much cocaine in your trunk.");
		    	PlayerInfo[playerid][pTcocaine] -= amount;
		    	PlayerInfo[playerid][pcocaine] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of cocaine from it.", RPN(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "weapon", true, 4))
		    {
		     	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /twithdraw weapon [slot]");
		        if(amount < 1 || amount > 2) return SendClientMessage(playerid, COLOR_GREY, "Weapon slots are between 1 and 2.");
		        amount = amount-1;
		        if(!PlayerInfo[playerid][pTGun][amount]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a weapon in this slot.");
		        GiveDodWeapon(playerid, PlayerInfo[playerid][pTGun][amount], PlayerInfo[playerid][pTGunAmmo][amount]);
				format(string, sizeof(string), "* %s takes a %s from their trunk.", RPN(playerid), RWN(PlayerInfo[playerid][pTGun][amount]));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		     	PlayerInfo[playerid][pTGun][amount] = 0;
				PlayerInfo[playerid][pTGunAmmo][amount] = 0;
		    }
		    done = 1;
	    }
	    GetVehiclePos(PlayerInfo[playerid][pVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        if(sscanf(params, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /twithdraw [item]");
        		SendClientMessage(playerid, COLOR_GREY, "Weapon | Weed | cocaine");
				return 1;
		    }
		    if(!strcmp(option, "weed", true, 4))
		    {
		  	 	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /twithdraw weed [amount]");
		    	if(PlayerInfo[playerid][pvTWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed in your trunk.");
		    	PlayerInfo[playerid][pvTWeed] -= amount;
		    	PlayerInfo[playerid][pWeed] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of weed from it.", RPN(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "cocaine", true, 4))
		    {
		    	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /twithdraw cocaine [amount]");
		    	if(PlayerInfo[playerid][pvTcocaine] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much cocaine in your trunk.");
		    	PlayerInfo[playerid][pvTcocaine] -= amount;
		    	PlayerInfo[playerid][pcocaine] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of cocaine from it.", RPN(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "weapon", true, 4))
		    {
		     	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /twithdraw weapon [slot]");
		        if(amount < 1 || amount > 2) return SendClientMessage(playerid, COLOR_GREY, "Weapon slots are between 1 and 2.");
		        amount = amount-1;
		        if(!PlayerInfo[playerid][pvTGun][amount]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a weapon in this slot.");
		        GiveDodWeapon(playerid, PlayerInfo[playerid][pvTGun][amount], PlayerInfo[playerid][pvTGunAmmo][amount]);
				format(string, sizeof(string), "* %s takes a %s from their trunk.", RPN(playerid), RWN(PlayerInfo[playerid][pvTGun][amount]));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		     	PlayerInfo[playerid][pvTGun][amount] = 0;
				PlayerInfo[playerid][pvTGunAmmo][amount] = 0;
		    }
			done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You don't own any vehicle.");
	    return 1;
	}
    return 1;
}

CMD:vehhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_YELLOW, "VEHICLES DEALERSHIP: {FFFFFF}/buycar /sellcartomarket");
	SendClientMessage(playerid, COLOR_YELLOW, "REGULAR VEHICLES: {FFFFFF}/engine /lights");
	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh]) SendClientMessage(playerid, COLOR_YELLOW, "OWNED VEHICLES: {FFFFFF}/lock /trunk /bonnet /neon /locatecar");
	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh]) SendClientMessage(playerid, COLOR_YELLOW, "OWNED VEHICLES: {FFFFFF}/park /tbalance /tdeposit /twithdraw");
	return 1;
}

CMD:bizhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_YELLOW, "BUSINESS: {FFFFFF}/buybiz");
	if(PlayerInfo[playerid][pBiz] || PlayerInfo[playerid][pVBiz]) SendClientMessage(playerid, COLOR_YELLOW, "BUSINESS OWNER: {FFFFFF}/vault /lock /buyproducts /sellbiztomarket");
	return 1;
}

CMD:skill(playerid, params[])
{
	new string[128], left;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "i", strval(params)))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /skill [skill]");
		SendClientMessage(playerid, COLOR_GREY, "SKILLS: 1) Mechanic | 2) Lawyer | 3) Trucker | 4) Fisher | 5) Weapons Dealer | 6) Weapons Smuggler");
        SendClientMessage(playerid, COLOR_GREY, "SKILLS: 7) Drugs Dealer | 8) Drugs Smuggler | 9) Boxer");
		return 1;
	}
	// L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	if(strval(params) == 9) format(params, 4, "11");
	if(RPJS(playerid, strval(params)) < 100) left = 100 - RPJS(playerid, strval(params));
	else if(RPJS(playerid, strval(params)) < 300) left = 300 - RPJS(playerid, strval(params));
	else if(RPJS(playerid, strval(params)) < 700) left = 700 - RPJS(playerid, strval(params));
	else if(RPJS(playerid, strval(params)) < 1200) left = 1200 - RPJS(playerid, strval(params));
	if(strval(params) == 1)
	{
	    format(string, sizeof(string), "** Mechanic Level: %s. (You need to repair/refill %d more vehicles to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	if(strval(params) == 2)
	{
	    format(string, sizeof(string), "** Lawyer Level: %s. (You need to defend/free %d more players to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 3)
	{
	    format(string, sizeof(string), "** Trucker Level: %s. (You need to deliver %d more packages to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 4)
	{
	    format(string, sizeof(string), "** Fisher Level: %s. (You need to fish %d more fishes to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
    else if(strval(params) == 5)
	{
	    format(string, sizeof(string), "** Weapons Dealer Level: %s. (You need to sell %d more weapons to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 6)
	{
	    format(string, sizeof(string), "** Weapons Smuggler Level: %s. (You need to deliver %d more materials to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 7)
	{
	    format(string, sizeof(string), "** Drugs Dealer Level: %s. (You need to sell %d more drugs to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 8)
	{
	    format(string, sizeof(string), "** Drugs Smuggle Level: %s. (You need to smuggle %d more packages to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 11)
	{
		format(string, sizeof(string), "** Boxer Level: %s. (You need to win %d more fights to level up) **", RPJL(playerid, JOB_BOXER), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}


CMD:sellweed(playerid, params[])
{
	new playerb, string[128], amount, price, maxweed;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DDEALER && PlayerInfo[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Dealer.");
	if(sscanf(params, "uii", playerb, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sellweed [playerid] [amount] [price]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't sell weed to yourself.");
	if(WeedSeller[playerb] == playerid) SendClientMessage(playerid, COLOR_GREY, "You have already offered this player to buy weed.");
	if(PlayerInfo[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that amount of weed on you.");
	if(strval(RPJL(playerb, JOB_DDEALER)) == 1) maxweed = 10;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 2) maxweed = 15;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 3) maxweed = 20;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 4) maxweed = 25;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 5) maxweed = 30;
	if(PlayerInfo[playerb][pWeed] + amount > maxweed) return SendClientMessage(playerid, COLOR_GREY, "Player can't hold that amount of weed at the moment.");
	WeedSeller[playerb] = playerid;
	WeedPrice[playerid][playerb] = price;
	WeedAmount[playerid][playerb] = amount;
	format(string, sizeof(string), " You have offered %s %d grams of weed for $%d.", RPN(playerb), amount, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered you %d grams of weed for $%d. (/accept weed) (/deny weed)", RPN(playerb), amount, price);
    SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:sellcocaine(playerid, params[])
{
	new playerb, string[128], amount, price, maxcocaine;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DDEALER && PlayerInfo[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Dealer.");
	if(sscanf(params, "uii", playerb, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sellcocaine [playerid] [amount] [price]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't sell cocaine to yourself.");
	if(cocaineSeller[playerb] == playerid) SendClientMessage(playerid, COLOR_GREY, "You have already offered this player to buy cocaine.");
	if(PlayerInfo[playerid][pcocaine] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that amount of cocaine on you.");
	if(strval(RPJL(playerb, JOB_DDEALER)) == 1) maxcocaine = 10;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 2) maxcocaine = 15;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 3) maxcocaine = 20;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 4) maxcocaine = 25;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 5) maxcocaine = 30;
	if(PlayerInfo[playerb][pcocaine] + amount > maxcocaine) return SendClientMessage(playerid, COLOR_GREY, "Player can't hold that amount of cocaine at the moment.");
	cocaineSeller[playerb] = playerid;
	cocainePrice[playerid][playerb] = price;
	cocaineAmount[playerid][playerb] = amount;
	format(string, sizeof(string), " You have offered %s %d grams of cocaine for $%d.", RPN(playerb), amount, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered you %d grams of cocaine for $%d. (/accept cocaine) (/deny cocaine)", RPN(playerb), amount, price);
    SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:buyweed(playerid, params[])
{
	new amount, maxweed, string[128];
	if(strval(RPJL(playerid, JOB_DDEALER)) == 1) maxweed = 10;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 2) maxweed = 15;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 3) maxweed = 20;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 4) maxweed = 25;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 5) maxweed = 30;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DDEALER && PlayerInfo[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Dealer.");
   	if(!IsPlayerInRangeOfPoint(playerid, 2, 323.0012,1118.5720,1083.8828)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Weed Pickup.");
   	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /buyweed [amount]");
   	if(amount < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid weed amount.");
   	if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
   	if(amount > Weed) return SendClientMessage(playerid, COLOR_GREY, "The Drugs House doesn't have that amount of weed at the moment.");
    if(PlayerInfo[playerid][pWeed] + amount > maxweed) return SendClientMessage(playerid, COLOR_GREY, "You can't hold that much weed at the moment.");
    GiveDodMoney(playerid, -amount*50);
    if(PointInfo[1][pOwner])
    {
		new idx = PointInfo[1][pOwner];
		FamInfo[idx][fMoney] += amount*50;
		PointInfo[1][pProfit] += amount*50;
    }
    PlayerInfo[playerid][pWeed] += amount;
	Weed -= amount;
	format(string, sizeof(string), "Weed Pickup\n{FFFF00}/buyweed to get weed\nAvailable Stock: %d/2000", Weed);
	UpdateDynamic3DTextLabelText(WeedText, COLOR_RED, string);
    format(string, sizeof(string), "* %s has bought %d grams of weed for $%d.", RPN(playerid), amount, amount*50);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:buycocaine(playerid, params[])
{
	new amount, maxcocaine, string[128];
	if(strval(RPJL(playerid, JOB_DDEALER)) == 1) maxcocaine = 10;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 2) maxcocaine = 15;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 3) maxcocaine= 20;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 4) maxcocaine = 25;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 5) maxcocaine = 30;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DDEALER && PlayerInfo[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Dealer.");
   	if(!IsPlayerInRangeOfPoint(playerid, 2, 2345.3992,-1185.6423,1027.9766)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the cocaine Pickup.");
   	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /buycocaine [amount]");
   	if(amount < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid cocaine amount.");
   	if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
   	if(amount > cocaine) return SendClientMessage(playerid, COLOR_GREY, "The cocaine Lab doesn't have that amount of cocaine at the moment.");
    if(PlayerInfo[playerid][pcocaine] + amount > maxcocaine) return SendClientMessage(playerid, COLOR_GREY, "You can't hold that much cocaine at the moment.");
    GiveDodMoney(playerid, -amount*50);
    if(PointInfo[2][pOwner])
    {
		new idx = PointInfo[2][pOwner];
		FamInfo[idx][fMoney] += amount*50;
		PointInfo[2][pProfit] += amount*50;
    }
    PlayerInfo[playerid][pcocaine] += amount;
	cocaine -= amount;
	format(string, sizeof(string), "cocaine Pickup\n{FFFF00}/buycocaine to get cocaine\nAvailable Stock: %d/2000", cocaine);
	UpdateDynamic3DTextLabelText(cocaineText, COLOR_RED, string);
    format(string, sizeof(string), "* %s has bought %d grams of cocaine for $%d.", RPN(playerid), amount, amount*50);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:getweed(playerid, params[])
{
	new string[128], packages;
	if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] >= 1200) packages = 25;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Smuggler.");
	if(PlayerInfo[playerid][pDPackages]) return SendClientMessage(playerid, COLOR_GREY, "You already have packages.");
	if(!IsPlayerInRangeOfPoint(playerid, 3, 2941.2471,-2053.3892,3.5480)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Weed Packages Pickup.");
   	if(PlayerInfo[playerid][pMoney] < packages*10) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
	PlayerInfo[playerid][pDPackages] = 1;
    GiveDodMoney(playerid, -(packages*10));
    if(PointInfo[0][pOwner])
    {
		new idx = PointInfo[0][pOwner];
		FamInfo[idx][fMoney] += packages*10;
		PointInfo[0][pProfit] += packages*10;
    }
    format(string, sizeof(string), "* %s has loaded %d weed packages from the pickup.", RPN(playerid), packages);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have loaded {FF6347}%d weed{33CCFF} packages for {FF6347}$%d{33CCFF}, deliver them to the Weed Dropoff. (Checkpoint)", packages, packages*10);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    SetPlayerCheckpoint(playerid,2178.5518,-1660.4418,14.9644,3);
    AntiTP[playerid] = 1;
    AntiTPTimer[playerid] = SetTimerEx("AntiTPHacks", 30000, false, "d", playerid);
	return 1;
}

CMD:dropweed(playerid, params[])
{
	new string[128], packages, oldj, newj;
	if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Smuggler.");
   	if(!IsPlayerInRangeOfPoint(playerid, 3, 2178.5518,-1660.4418,14.9644)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Weed Dropoff.");
    AntiTPCheck(playerid);
	if(PlayerInfo[playerid][pDPackages] != 1) return SendClientMessage(playerid, COLOR_GREY, "You have no weed packages on you.");
	if(Weed >= 2000) return SendClientMessage(playerid, COLOR_GREY, "The Drugs House can't hold any more weed at the moment.");
	PlayerInfo[playerid][pDPackages] = 0;
	oldj = strval(RPJL(playerid, JOB_DSMUGGLER));
	PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] ++;
	if(DayRespect == 1)
	{
      PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] ++;
	}
	newj = strval(RPJL(playerid, JOB_DSMUGGLER));
	Weed += packages;
	if(Weed > 2000) Weed = 2000;
	GiveDodMoney(playerid, packages*40);
	if(PointInfo[1][pOwner])
    {
		new idx = PointInfo[1][pOwner];
		FamInfo[idx][fMoney] += packages*40;
		PointInfo[1][pProfit] += packages*40;
    }
	format(string, sizeof(string), "Weed Pickup\n{FFFF00}/buyweed to get weed\nAvailable Stock: %d/2000", Weed);
	UpdateDynamic3DTextLabelText(WeedText, COLOR_RED, string);
    format(string, sizeof(string), "* %s has dropped %d weed packages in the dropoff and collected $%d.", RPN(playerid), packages, packages*40);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have delivered {FF6347}%d{33CCFF} packages for {FF6347}$%d{33CCFF}.", packages, packages*40);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Drugs Smuggler level is now %d, you can now carry %d packages. **", newj, newj*5);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}

	return 1;
}


CMD:getcocaine(playerid, params[])
{
	new string[128], packages;
	if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] >= 1200) packages = 25;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Smuggler.");
	if(PlayerInfo[playerid][pDPackages]) return SendClientMessage(playerid, COLOR_GREY, "You already have packages.");
	if(!IsPlayerInRangeOfPoint(playerid, 3, 2941.1660,-2050.1772,3.5480)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the cocaine Packages Pickup.");
   	if(PlayerInfo[playerid][pMoney] < packages*10) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
	PlayerInfo[playerid][pDPackages] = 2;
    GiveDodMoney(playerid, -(packages*10));
    if(PointInfo[0][pOwner])
    {
		new idx = PointInfo[0][pOwner];
		FamInfo[idx][fMoney] += packages*10;
		PointInfo[0][pProfit] += packages*10;
    }
    format(string, sizeof(string), "* %s has loaded %d cocaine packages from the pickup.", RPN(playerid), packages);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have loaded {FF6347}%d cocaine{33CCFF} packages for {FF6347}$%d{33CCFF}, deliver them to the cocaine Dropoff. (Checkpoint)", packages, packages*10);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    SetPlayerCheckpoint(playerid,2354.7354,-1170.1056,28.0475,3);
    AntiTPTimer[playerid] = SetTimerEx("AntiTPHacks", 30000, false, "d", playerid);
	return 1;
}

CMD:dropcocaine(playerid, params[])
{
	new string[128], packages, oldj, newj;
	if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Smuggler.");
   	if(!IsPlayerInRangeOfPoint(playerid, 3, 2354.7354,-1170.1056,28.0475)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the cocaine Dropoff.");
    AntiTPCheck(playerid);
	if(PlayerInfo[playerid][pDPackages] != 2) return SendClientMessage(playerid, COLOR_GREY, "You have no cocaine packages on you.");
	if(cocaine >= 2000) return SendClientMessage(playerid, COLOR_GREY, "The cocaine Lab can't hold any more cocaine at the moment.");
	PlayerInfo[playerid][pDPackages] = 0;
	oldj = strval(RPJL(playerid,JOB_DSMUGGLER));
	PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] ++;
	if(DayRespect == 1)
	{
      PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] ++;
	}
	newj = strval(RPJL(playerid,JOB_DSMUGGLER));
	cocaine += packages;
	if(cocaine > 2000) cocaine = 2000;
	GiveDodMoney(playerid, packages*40);
	if(PointInfo[2][pOwner])
    {
		new idx = PointInfo[2][pOwner];
		FamInfo[idx][fMoney] += packages*40;
		PointInfo[2][pProfit] += packages*40;
    }
	format(string, sizeof(string), "cocaine Pickup\n{FFFF00}/buycocaine to get cocaine\nAvailable Stock: %d/2000", cocaine);
	UpdateDynamic3DTextLabelText(cocaineText, COLOR_RED, string);
    format(string, sizeof(string), "* %s has dropped %d cocaine packages in the dropoff and collected $%d.", RPN(playerid), packages, packages*40);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have delivered {FF6347}%d{33CCFF} packages for {FF6347}$%d{33CCFF}.", packages, packages*40);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Drugs Smuggler level is now %d, you can now carry %d packages. **", newj, newj*5);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}

	return 1;
}


CMD:getmats(playerid, params[])
{
	new string[128], packages;
	if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_WSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Weapons Smuggler.");
	if(PlayerInfo[playerid][pMPackages]) return SendClientMessage(playerid, COLOR_GREY, "You already have packages.");
   	if(!IsPlayerInRangeOfPoint(playerid, 3, 1423.6010,-1317.9398,13.5547)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Materials Pickup.");
   	if(PlayerInfo[playerid][pMoney] < packages*25) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
	PlayerInfo[playerid][pMPackages] = 1;
    GiveDodMoney(playerid, -(packages*25));
    if(PointInfo[3][pOwner])
    {
		new idx = PointInfo[3][pOwner];
		FamInfo[idx][fMoney] += packages*25;
		PointInfo[3][pProfit] += packages*25;
    }
    format(string, sizeof(string), "* %s has loaded %d materials packages from the pickup.", RPN(playerid), packages);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have loaded {FF6347}%d materials{33CCFF} packages for {FF6347}$%d{33CCFF}, deliver them to the Materials Dropoff. (Checkpoint)", packages, packages*25);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    SetPlayerCheckpoint(playerid,2172.5471,-2264.2207,13.3416,3);
    AntiTPTimer[playerid] = SetTimerEx("AntiTPHacks", 30000, false, "d", playerid);
	return 1;
}

CMD:dropmats(playerid, params[])
{
	new string[128], packages, oldj, newj;
	if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_WSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Weapons Smuggler.");
   	if(!IsPlayerInRangeOfPoint(playerid, 3, 2172.5471,-2264.2207,13.3416)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Materials Dropoff.");
	AntiTPCheck(playerid);
	if(!PlayerInfo[playerid][pMPackages]) return SendClientMessage(playerid, COLOR_GREY, "You have no packages on you.");
	PlayerInfo[playerid][pMaterials] += packages*25;
	if(PointInfo[4][pOwner])
    {
		new idx = PointInfo[4][pOwner];
		FamInfo[idx][fMoney] += packages*25;
		PointInfo[4][pProfit] += packages*25;
    }
	PlayerInfo[playerid][pMPackages] = 0;
	oldj = strval(RPJL(playerid,JOB_WSMUGGLER));
	PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] ++;
	newj = strval(RPJL(playerid,JOB_WSMUGGLER));
    format(string, sizeof(string), "* %s has dropped %d materials packages in the dropoff.", RPN(playerid), packages*25);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have collected {FF6347}%d materials{33CCFF} from the drop off.", packages*25);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Weapons Smuggler level is now %d, you can now carry %d packages. **", newj, newj*5);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

CMD:loadpackages(playerid, params[])
{
	new string[128], packages;
	// L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_TRUCKER && PlayerInfo[playerid][pVIPJob] != JOB_TRUCKER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Trucker.");
   	if(PlayerInfo[playerid][pTPackages] == 1) return SendClientMessage(playerid, COLOR_GREY, "You already have overloaded packages.");
	if(!IsPlayerInAnyVehicle(playerid) || !IsTruckerVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You are not in a Trucker vehicle or you have no trailer attached.");
   	if(!IsPlayerInRangeOfPoint(playerid, 5, -480.1533,-539.1694,25.5296)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a packages pickup.");
   	if(PlayerInfo[playerid][pMoney] < packages*5) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
	PlayerInfo[playerid][pTPackages] ++;
    GiveDodMoney(playerid, -(packages*5));
    PlayerInfo[playerid][pDeliverTruck] = GetPlayerVehicleID(playerid);
	TruckPackages[GetPlayerVehicleID(playerid)] = playerid;
    format(string, sizeof(string), "* %s has loaded %d products packages from the pickup.", RPN(playerid), packages);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have loaded {FF6347}%d products{33CCFF} packages for {FF6347}$%d{33CCFF}, deliver them to the dropoff. (Checkpoint)", packages, packages*5);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    SetPlayerCheckpoint(playerid, 2222.5107,-2682.7368,13.5409, 2);
	return 1;
}
forward PackTimer(playerid);
public PackTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		PackTime[playerid]--;
		if(PackTime[playerid] > 0)
		{
		    SetTimerEx("PackTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}
CMD:deliverpackages(playerid, params[])
{
	new string[128], packages, oldj, newj, price;
	// L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_TRUCKER && PlayerInfo[playerid][pVIPJob] != JOB_TRUCKER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Trucker.");
   	if(!PlayerInfo[playerid][pTPackages]) return SendClientMessage(playerid, COLOR_GREY, "You have no packages on you.");
   	if(PlayerInfo[playerid][pDeliverTruck] != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, COLOR_GREY, "This is not the vehicle that your packages were loaded to.");
   	if(!IsPlayerInRangeOfPoint(playerid, 5, 2222.5107,-2682.7368,13.5409)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a packages dropoff.");
	if(Products >= 10000) return SendClientMessage(playerid, COLOR_GREY, "The dropoff can't hold anymore products at the moment.");
	oldj = strval(RPJL(playerid,JOB_TRUCKER));
	PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] ++;
	if(DayRespect == 1)
	{
      PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] ++;
	}
	Products += packages;
	if(Products > 10000) Products = 10000;
	newj = strval(RPJL(playerid,JOB_TRUCKER));
	if(PlayerInfo[playerid][pTPackages] == 1) {price = packages*500;}
	else if(PlayerInfo[playerid][pTPackages] == 2) {price = packages*600;}
    GiveDodMoney(playerid, price);
    PlayerInfo[playerid][pDeliverTruck] = -1;
    TruckPackages[GetPlayerVehicleID(playerid)] = -1;
    format(string, sizeof(string), "* %s has delivered %d products packages to the dropoff.", RPN(playerid), PlayerInfo[playerid][pTPackages]*5);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have delivered {FF6347}%d products{33CCFF} packages for {FF6347}$%d{33CCFF}", PlayerInfo[playerid][pTPackages]*5, price);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    DisablePlayerCheckpoint(playerid);
    if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Trucker level is now %d, you can now carry %d packages. **", newj, newj*5);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	format(string, sizeof(string), "Packages Dropoff\n{FFFF00}/deliverpackages to deliver crates\nAvailable Products: %d/10000", Products);
	UpdateDynamic3DTextLabelText(ProductsText, COLOR_RED, string);
	PlayerInfo[playerid][pTPackages] = 0;
	return 1;
}


CMD:join(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] && PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You already have a job, /quitjob then try again.");
   	if(PlayerInfo[playerid][pJob] && PlayerInfo[playerid][pVIPJob] && PlayerInfo[playerid][pVIP] >= 2) return SendClientMessage(playerid, COLOR_GREY, "You already have two jobs, /quitjob then try again.");
   	if(DayNoJobs == 1) return SendClientMessage(playerid, COLOR_GREY, "You can't work today! ((/day))");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /join [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, 2330.0693,-2315.4709,13.5469))
	    {
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_MECHANIC;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_MECHANIC;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Mechanic {33CCFF}job, type /jobhelp to view your job commands.");
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 2, 1380.8300,-1088.7698,27.3844))
	    {
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_LAWYER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_LAWYER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Lawyer {33CCFF}job, type /jobhelp to view your job commands.");
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 2, -520.4179,-505.3250,24.6084))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_TRUCKER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_TRUCKER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Trucker {33CCFF}job, type /jobhelp to view your job commands.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 1415.4907,-1301.0790,13.5449))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_WSMUGGLER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_WSMUGGLER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Weapons Smuggler {33CCFF}job, type /help to view your job's commands.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 2165.2358,-2271.5012,13.3413))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_WDEALER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_WDEALER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Weapons Dealer {33CCFF}job, type /help to view your job's commands.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 2178.5518,-1660.4418,14.9644))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_DDEALER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_DDEALER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Drugs Dealer {33CCFF}job, type /jobhelp to view your job commands.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 2354.4045,-1169.8337,28.0339))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_DSMUGGLER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_DSMUGGLER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Drugs Smuggler {33CCFF}job, type /jobhelp to view your job commands.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 2227.9976,-1718.2604,13.5321))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_BODYGUARD;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_BODYGUARD;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Bodyguard {33CCFF}job, type /jobhelp to view your job commands.");

		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 765.9518,15.2308,1000.6991))
		{
		    if(GetPlayerFightingStyle(playerid) != FIGHT_STYLE_BOXING) return SendClientMessage(playerid, COLOR_GREY, "You must use the boxing fighting style to become a boxer.");
			if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_BOXER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_BOXER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Boxer {33CCFF}job, type /help to view your job commands.");
			new rand = random(2);
			if(rand == 0) {SetPlayerSkin(playerid, 80); PlayerInfo[playerid][pModel] = 80;}
			else if(rand == 1) {SetPlayerSkin(playerid, 81); PlayerInfo[playerid][pModel] = 81;}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "You are not near a job location.");
		}
	}
	return 1;
}

CMD:quitjob(playerid, params[])
{
	new string[128], jobid;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pJob] && PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You don't have a job.");
 	if(PlayerInfo[playerid][pVIP] >= 2)
	{
		if(sscanf(params, "is[8]", jobid, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /quitjob [1-2] [confirm]");
		if(jobid == 1 && !PlayerInfo[playerid][pJob]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a job at this slot.");
		if(jobid == 2 && !PlayerInfo[playerid][pVIPJob]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a job at this slot.");
	}
	else if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /quitjob [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    if(PlayerInfo[playerid][pVIP] >= 2)
	    {
	        if(jobid == 1)
	        {
		        format(string, sizeof(string), "* You have quit the {FF6347}%s {33CCFF}job.", RPJN(playerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    	PlayerInfo[playerid][pJob] = JOB_NONE;
	        }
			else if(jobid == 2)
			{
		        format(string, sizeof(string), "* You have quit the {FF6347}%s {33CCFF}job.", RPVJN(playerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    	PlayerInfo[playerid][pVIPJob] = JOB_NONE;
			}
	        return 1;
	    }
	    format(string, sizeof(string), "* You have quit the {FF6347}%s {33CCFF}job.", RPJN(playerid));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    PlayerInfo[playerid][pJob] = JOB_NONE;
	}
	return 1;
}

CMD:houseupgrade(playerid, params[])
{
	new string[128], idx = PlayerInfo[playerid][pHouse], price;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pHouse]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
    if(HouseInfo[idx][hLevel] == 10 && PlayerInfo[playerid][pVIP] == 0) return SendClientMessage(playerid, COLOR_GREY, "You're not a VIP.");
	if(!PlayerInfo[playerid][pVHouse])
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ])) return SendClientMessage(playerid, COLOR_GREY, "You are not near your house.");
	}
	else
	{
	    new done;
   	    if(!IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
 		{
	 		done ++;
	   	    idx = PlayerInfo[playerid][pVHouse];
	   	    if(!IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ])) done ++;
		}
		if(done == 2) return SendClientMessage(playerid, COLOR_GREY, "You are not near your house.");

	}
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /houseupgrade [confirm]");
	if(HouseInfo[idx][hLevel] >= 11) return SendClientMessage(playerid, COLOR_GREY, "Your house already has the maximum level possible.");
	if(!strcmp(params, "confirm", true))
	{
	    if(!PlayerInfo[playerid][pVIP])price = 50000;
	    if(PlayerInfo[playerid][pVIP] == 1) price = 37500;
	    else if(PlayerInfo[playerid][pVIP] == 2) price = 25000;
	    else if(PlayerInfo[playerid][pVIP] == 3) price = 12500;
	    else if(PlayerInfo[playerid][pVIP] == 4) price = 0;
		if(PlayerInfo[playerid][pMoney] < price)
		{
		    format(string, sizeof(string), "You need $%d to upgrade your house.", price);
			SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
		}
		HouseInfo[idx][hLevel] ++;
		GiveDodMoney(playerid, -price);
		format(string, sizeof(string), " You have upgraded your house to level %d.", HouseInfo[idx][hLevel]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
		UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
	}
	return 1;
}
/*CMD:upgrade(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pUpgradePoints]) return SendClientMessage(playerid, COLOR_GREY, "You don't have upgrade points.");
	if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /upgrade [items]");
	if(!strcmp(params, "armor", true))
	{

	}
	return 1;
}*/
/*CMD:bizupgrade(playerid, params[])
{
	new string[128], idx = PlayerInfo[playerid][pBiz];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pBiz]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a business.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your business.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]:  [confirm]");
	if(BizInfo[idx][bLevel] >= 5) return SendClientMessage(playerid, COLOR_GREY, "Your business already has the maximum level possible.");
	if(!strcmp(params, "confirm", true))
	{
	    // L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	    if(strval(RPBL(playerid)) == 1 && RPBS(playerid) >= 100) {BizInfo[idx][bLevel]++; SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have upgraded your business to level 2.");}
	    else if(strval(RPBL(playerid)) == 2 && RPBS(playerid) >= 300) {BizInfo[idx][bLevel]++; SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have upgraded your business to level 3.");}
	    else if(strval(RPBL(playerid)) == 3 && RPBS(playerid) >= 700) {BizInfo[idx][bLevel]++; SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have upgraded your business to level 4.");}
	    else if(strval(RPBL(playerid)) == 4 && RPBS(playerid) >= 1200) {BizInfo[idx][bLevel]++; SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have upgraded your business to level 5.");}
	    else
		{
		    if(strval(RPBL(playerid)) == 1) format(string, sizeof(string), "Your business needs to sell %d more products to level up.", 100 -RPBS(playerid));
		    else if(strval(RPBL(playerid)) == 2) format(string, sizeof(string), "Your business needs to sell %d more products to level up.", 300 -RPBS(playerid));
		    else if(strval(RPBL(playerid)) == 3) format(string, sizeof(string), "Your business needs to sell %d more products to level up.", 700 -RPBS(playerid));
		    else if(strval(RPBL(playerid)) == 4) format(string, sizeof(string), "Your business needs to sell %d more products to level up.", 1200 -RPBS(playerid));
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}*/

CMD:vault(playerid, params[])
{
	new value, string[128];
	new idx = PlayerInfo[playerid][pBiz];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pBiz] && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a busines.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your business.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && PlayerInfo[playerid][pVBiz])
	{
		idx = PlayerInfo[playerid][pVBiz];
	    if(GetPlayerVirtualWorld(playerid)-100 != idx) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your business.");
	}
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /vault [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: withdraw | deposit");
		return 1;
	}
	if(!strcmp(params, "withdraw", false, 8))
	{
	    if(sscanf(params, "s[32]i", params, value))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /vault withdraw [amount]");
	        format(string, sizeof(string), "Current Vault Money: $%d", BizInfo[idx][bMoney]);
	        SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
	    }
	    if(value > BizInfo[idx][bMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have this much money in your business vault.");
	    BizInfo[idx][bMoney] -= value;
	    GiveDodMoney(playerid, value);
	    format(string, sizeof(string), "* %s has withdrawn money from their business vault.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have withdrawn $%d from your business vault, amount left: $%d", value, BizInfo[idx][bMoney]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(!strcmp(params, "deposit", false, 7))
	{
	    if(sscanf(params, "s[32]i", params, value))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /vault deposit [amount]");
	        format(string, sizeof(string), "Current Vault Money: $%d", BizInfo[idx][bMoney]);
	        SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
	    }
	    if(value > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have this much money on you.");
	    BizInfo[idx][bMoney] += value;
	    GiveDodMoney(playerid, -value);
	    format(string, sizeof(string), "* %s has deposited money to their business vault.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have deposited $%d to your business vault, current amount: $%d", value, BizInfo[idx][bMoney]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:buyproducts(playerid, params[])
{
	new amount, price, string[128];
	new idx = PlayerInfo[playerid][pBiz];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pBiz] && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a business.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your business.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && PlayerInfo[playerid][pVBiz])
	{
		idx = PlayerInfo[playerid][pVBiz];
	    if(GetPlayerVirtualWorld(playerid)-100 != idx) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your business.");
	}
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /buyproducts [amount]");
	if(amount < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid products amount.");
	if(Products < amount)
	{
	    format(string, sizeof(string), "The products dropoff currently has %d products only.", Products);
	    SendClientMessage(playerid, COLOR_GREY, string);
	    return 1;
	}
	price = amount*20;
    if(PlayerInfo[playerid][pMoney] < price)
	{
	    format(string, sizeof(string), "You don't have that much money on you. ($%d)", price);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if(BizInfo[idx][bProducts]+amount > 500) return SendClientMessage(playerid, COLOR_GREY, "Your business can't hold that much products.");
    GiveDodMoney(playerid, -price);
    BizInfo[idx][bProducts] += amount;
    Products -= amount;
    format(string, sizeof(string), "* %s has purchased %d products for $%d.", RPN(playerid), amount, price);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "Packages Dropoff\n{FFFF00}/deliverpackages to deliver crates\nAvailable Products: %d/10000", Products);
	UpdateDynamic3DTextLabelText(ProductsText, COLOR_RED, string);
	return 1;
}

CMD:lights(playerid, param[])
{
	new string[128], idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
    idx = GetPlayerVehicleID(playerid);
    new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
	if(!lights)
	{
	    SetVehicleParamsEx(idx, engine, 1, alarm, doors, bonnet, boot, objective);
	    format(string, sizeof(string), "* %s turns their vehicle's lights on.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		GameTextForPlayer(playerid, "~g~Lights On", 3500, 3);
	}
	else
	{
	    SetVehicleParamsEx(idx, engine, 0, alarm, doors, bonnet, boot, objective);
	    format(string, sizeof(string), "* %s turns their vehicle's lights off.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		GameTextForPlayer(playerid, "~r~Lights Off", 3500, 3);
	}
	return 1;
}

CMD:trunk(playerid, params[])
{
	new string[128], done, idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!boot)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 1, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's trunk.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
				topened[playerid] = 1;
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 0, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's trunk.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
				topened[playerid] = 0;
			}
			done = 1;
			return 1;
	    }
	    GetVehiclePos(PlayerInfo[playerid][pVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!boot)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 1, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's trunk.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
				topened[playerid] = 1;
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 0, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's trunk.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
				topened[playerid] = 0;
			}
			done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You don't own any vehicle.");
	    return 1;
	}

	return 1;
}

CMD:bonnet(playerid, params[])
{
	new string[128], done, idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!bonnet)
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 1, boot, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's bonnet.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 0, boot, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's bonnet.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
			}
			done = 1;
			return 1;
	    }
	    GetVehiclePos(PlayerInfo[playerid][pVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!bonnet)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 1, boot, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's bonnet.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 0, boot, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's bonnet.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
			}
			done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You don't own any vehicle.");
	    return 1;
	}

	return 1;
}

CMD:lock(playerid, params[])
{
	new string[128], idx, done, lockdone;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pBiz])
	{
	    idx = PlayerInfo[playerid][pBiz];
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[PlayerInfo[playerid][pBiz]][bX], BizInfo[PlayerInfo[playerid][pBiz]][bY], BizInfo[PlayerInfo[playerid][pBiz]][bZ]))
	    {
	        if(!BizInfo[PlayerInfo[playerid][pBiz]][bStatus])
	        {
		        BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 1;
				format(string, sizeof(string), "Business of %s\nBusiness type: %s\n%s", BizInfo[idx][bOwner], RBT(idx), RBS(idx));
	            UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Business Unlocked", 3500, 3);
			}
			else if(BizInfo[PlayerInfo[playerid][pBiz]][bStatus])
	        {
		        BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 0;
				format(string, sizeof(string), "Business of %s\nBusiness type: %s\n%s", BizInfo[idx][bOwner], RBT(idx), RBS(idx));
	            UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Business Locked", 3500, 3);
			}
			done = 1;
			lockdone = 1;
	    }
    }
    if(PlayerInfo[playerid][pVBiz] && !done)
	{
	    idx = PlayerInfo[playerid][pVBiz];
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
	    {
	        if(!BizInfo[idx][bStatus])
	        {
		        BizInfo[idx][bStatus] = 1;
				format(string, sizeof(string), "Business of %s\nBusiness type: %s\n%s", BizInfo[idx][bOwner], RBT(idx), RBS(idx));
	            UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Business Unlocked", 3500, 3);
			}
			else if(BizInfo[idx][bStatus])
	        {
		        BizInfo[idx][bStatus] = 0;
                format(string, sizeof(string), "Business of %s\nBusiness type: %s\n%s", BizInfo[idx][bOwner], RBT(idx), RBS(idx));
	            UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Business Locked", 3500, 3);
			}
			done = 1;
			lockdone = 1;
	    }
    }
 	if(PlayerInfo[playerid][pHouse])
	{
	    idx = PlayerInfo[playerid][pHouse];
	    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
	        if(!HouseInfo[PlayerInfo[playerid][pHouse]][hStatus])
	        {
		        HouseInfo[PlayerInfo[playerid][pHouse]][hStatus] = 1;
				format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~House Unlocked", 3500, 3);
			}
			else if(HouseInfo[PlayerInfo[playerid][pHouse]][hStatus])
	        {
		        HouseInfo[PlayerInfo[playerid][pHouse]][hStatus] = 0;
				format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~House Locked", 3500, 3);
			}
			done = 1;
			lockdone = 1;
		}
	}
	if(PlayerInfo[playerid][pVHouse] && !done)
	{
		idx = PlayerInfo[playerid][pVHouse];
		if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
	        if(!HouseInfo[PlayerInfo[playerid][pVHouse]][hStatus])
	        {
		        HouseInfo[PlayerInfo[playerid][pVHouse]][hStatus] = 1;
				format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pVHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~House Unlocked", 3500, 3);
			}
			else if(HouseInfo[PlayerInfo[playerid][pVHouse]][hStatus])
	        {
		        HouseInfo[PlayerInfo[playerid][pVHouse]][hStatus] = 0;
				format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pVHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~House Locked", 3500, 3);
			}
			lockdone = 1;
			return 1;
		}
	}
	if(PlayerInfo[playerid][pGarage])
	{
	    idx = PlayerInfo[playerid][pGarage];
	    if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
	    {
	        if(!GarageInfo[PlayerInfo[playerid][pGarage]][gStatus])
	        {
		        GarageInfo[PlayerInfo[playerid][pGarage]][gStatus] = 1;
				format(string, sizeof(string), "{F81414}Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
	            UpdateDynamic3DTextLabelText(GarageInfo[PlayerInfo[playerid][pGarage]][gText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their garage keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Garage Unlocked", 3500, 3);
			}
			else if(GarageInfo[PlayerInfo[playerid][pGarage]][gStatus])
	        {
		        GarageInfo[PlayerInfo[playerid][pGarage]][gStatus] = 0;
		        format(string, sizeof(string), "{F81414}Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
	            UpdateDynamic3DTextLabelText(GarageInfo[PlayerInfo[playerid][pGarage]][gText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their garage keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Garage Locked", 3500, 3);
			}
			done = 1;
			lockdone = 1;
		}
	}
	if(PlayerInfo[playerid][pVGarage] && !done)
	{
		idx = PlayerInfo[playerid][pVGarage];
		if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
	    {
	        if(!GarageInfo[PlayerInfo[playerid][pVGarage]][gStatus])
	        {
		        GarageInfo[PlayerInfo[playerid][pVGarage]][gStatus] = 1;
		        format(string, sizeof(string), "{F81414}Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
	            UpdateDynamic3DTextLabelText(GarageInfo[PlayerInfo[playerid][pVGarage]][gText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their garage keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Garage Unlocked", 3500, 3);
			}
			else if(GarageInfo[PlayerInfo[playerid][pVGarage]][gStatus])
	        {
		        GarageInfo[PlayerInfo[playerid][pVGarage]][gStatus] = 0;
				format(string, sizeof(string), "{F81414}Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
	            UpdateDynamic3DTextLabelText(GarageInfo[PlayerInfo[playerid][pVGarage]][gText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their garage keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Garage Locked", 3500, 3);
			}
			lockdone = 1;
			return 1;
		}
	}
	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 3, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(doors)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, 0, bonnet, boot, objective);
			    PlayerInfo[playerid][vLocked] = 0;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Vehicle Unlocked", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, 1, bonnet, boot, objective);
			    PlayerInfo[playerid][vLocked] = 1;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Vehicle Locked", 3500, 3);
			}
			lockdone = 1;
			return 1;
	    }
	    GetVehiclePos(PlayerInfo[playerid][pVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 3, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(doors)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, 0, bonnet, boot, objective);
			    PlayerInfo[playerid][vVLocked] = 0;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Vehicle Unlocked", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, 1, bonnet, boot, objective);
			    PlayerInfo[playerid][vVLocked] = 1;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Vehicle Locked", 3500, 3);
			}
			lockdone = 1;
	    }
	    return 1;
    }
    if(!lockdone)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not near something you can lock/unlock.");
	}
	return 1;
}

CMD:buygarage(playerid, params[])
{
	new string[128], done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pGarage] && PlayerInfo[playerid][pVGarage] && PlayerInfo[playerid][pVIP] >= 3) return SendClientMessage(playerid, COLOR_GREY, "You already own two garages.");
	if(PlayerInfo[playerid][pGarage] && PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You already own a garage.");
	for(new idx=1; idx<MAX_GARAGES; idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
	    {
			if(!strcmp("The State", GarageInfo[idx][gOwner], false))
			{
			    if(PlayerInfo[playerid][pMoney] < GarageInfo[idx][gPrice]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to buy this garage.");
				GiveDodMoney(playerid, -GarageInfo[idx][gPrice]);
				if(PlayerInfo[playerid][pGarage]) PlayerInfo[playerid][pVGarage] = idx;
				else PlayerInfo[playerid][pGarage] = idx;
			    format(GarageInfo[idx][gOwner], 32, "%s", RPNU(playerid));
			    format(string, sizeof(string), "{F81414}Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
				UpdateDynamic3DTextLabelText(GarageInfo[idx][gText], COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_GREEN, " You have successfully bought a garage.");
				SendClientMessage(playerid, COLOR_WHITE, " Type /garagehelp to view your garage commands.");
				format(string, sizeof(string), "%s has bought garage id %d.", RPN(playerid), idx);
				Log("logs/garage.log", string);
				idx = MAX_GARAGES;
				done = 1;
			}
			if(idx == MAX_GARAGES-1 && !done)
			{
			    SendClientMessage(playerid, COLOR_GREY, "This garage is owned by someone else.");
			}
	    }
	    if(idx == MAX_GARAGES-1 && !done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near a buyable garage.");
	    }
	}
	return 1;
}

CMD:sellgaragetomarket(playerid, params[])
{
	new string[128], done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pGarage] && !PlayerInfo[playerid][pVGarage]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a garage.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sellgaragetomarket [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    new idx = PlayerInfo[playerid][pGarage];
	    if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[PlayerInfo[playerid][pGarage]][gX], GarageInfo[PlayerInfo[playerid][pGarage]][gY], GarageInfo[PlayerInfo[playerid][pGarage]][gZ]))
	    {
	        GiveDodMoney(playerid, (75*GarageInfo[PlayerInfo[playerid][pGarage]][gPrice])/100);
			GarageInfo[PlayerInfo[playerid][pGarage]][gStatus] = 0;
		    format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(idx), GarageInfo[idx][gPrice]);
		    UpdateDynamic3DTextLabelText(GarageInfo[PlayerInfo[playerid][pGarage]][gText], COLOR_WHITE, string);
		    PlayerInfo[playerid][pGarage] = 0;
		    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your garage to The State. (75 percent of the original price was paid back)");
            format(string, sizeof(string), "%s has sold garage id %d to the market.", RPN(playerid), idx);
			Log("logs/garage.log", string);
			done = 1;
	    }
		if(!done)
		{
  			idx = PlayerInfo[playerid][pVGarage];
		    if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
		    {
		        GiveDodMoney(playerid, (75*GarageInfo[idx][gPrice])/100);
				GarageInfo[idx][gStatus] = 0;
			    format(GarageInfo[idx][gOwner], 32, "The State");
			    format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(idx), GarageInfo[idx][gPrice]);
			    UpdateDynamic3DTextLabelText(GarageInfo[idx][gText], COLOR_WHITE, string);
			    PlayerInfo[playerid][pVGarage] = 0;
			    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your garage to The State. (75 percent of the original price was paid back)");
	            format(string, sizeof(string), "%s has sold garage id %d to the market.", RPN(playerid), idx);
				Log("logs/garage.log", string);
				done = 1;
		    }
		}
	    if(!done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near your garage.");
	        return 1;
	    }
    }
	return 1;
}

CMD:buyhouse(playerid, params[])
{
	new string[128], done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pHouse] && PlayerInfo[playerid][pVHouse] && PlayerInfo[playerid][pVIP] >= 3) return SendClientMessage(playerid, COLOR_GREY, "You already own two houses.");
	if(PlayerInfo[playerid][pHouse] && PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You already own a house.");
	for(new idx=1; idx<MAX_HOUSES; idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
			if(!strcmp("The State", HouseInfo[idx][hOwner], false))
			{
			    if(PlayerInfo[playerid][pMoney] < HouseInfo[idx][hPrice]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to buy this house.");
				GiveDodMoney(playerid, -HouseInfo[idx][hPrice]);
				if(PlayerInfo[playerid][pHouse]) PlayerInfo[playerid][pVHouse] = idx;
				else PlayerInfo[playerid][pHouse] = idx;
			    format(HouseInfo[idx][hOwner], 32, "%s", RPNU(playerid));
			    format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
				UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_GREEN, " You have successfully bought a house.");
				SendClientMessage(playerid, COLOR_WHITE, " Type /househelp to view your house commands.");
				format(string, sizeof(string), "%s has bought house id %d.", RPN(playerid), idx);
				Log("logs/house.log", string);
				idx = MAX_HOUSES;
				done = 1;
			}
			if(idx == MAX_HOUSES-1 && !done)
			{
			    SendClientMessage(playerid, COLOR_GREY, "This house is owned by someone else.");
			}
	    }
	    if(idx == MAX_HOUSES-1 && !done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near a buyable house.");
	    }
	}
	return 1;
}

CMD:sellhousetomarket(playerid, params[])
{
	new string[128], done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pHouse] && !PlayerInfo[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sellhousetomarket [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    new idx = PlayerInfo[playerid][pHouse];
	    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[PlayerInfo[playerid][pHouse]][hX], HouseInfo[PlayerInfo[playerid][pHouse]][hY], HouseInfo[PlayerInfo[playerid][pHouse]][hZ]))
	    {
	        GiveDodMoney(playerid, (75*HouseInfo[PlayerInfo[playerid][pHouse]][hPrice])/100);
			HouseInfo[PlayerInfo[playerid][pHouse]][hStatus] = 0;
		    format(HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], 32, "The State");
		    format(string, sizeof(string), "Owner: %s\nHouse Type: %s\nFor Sale\nPrice: $%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
		    UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hText], COLOR_WHITE, string);
		    PlayerInfo[playerid][pHouse] = 0;
		    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your house to The State. (75 percent of the original price was paid back)");
            format(string, sizeof(string), "%s has sold house id %d to the market.", RPN(playerid), idx);
			Log("logs/house.log", string);
			done = 1;
	    }
		if(!done)
		{
  			idx = PlayerInfo[playerid][pVHouse];
		    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
		    {
		        GiveDodMoney(playerid, (75*HouseInfo[idx][hPrice])/100);
				HouseInfo[idx][hStatus] = 0;
			    format(HouseInfo[idx][hOwner], 32, "The State");
			    format(string, sizeof(string), "Owner: %s\nHouse Type: %s\nFor Sale\nPrice: $%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
			    UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
			    PlayerInfo[playerid][pVHouse] = 0;
			    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your house to The State. (75 percent of the original price was paid back)");
	            format(string, sizeof(string), "%s has sold house id %d to the market.", RPN(playerid), idx);
				Log("logs/house.log", string);
				done = 1;
		    }
		}
	    if(!done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near your house.");
	        return 1;
	    }
    }
	return 1;
}

CMD:buybiz(playerid, params[])
{
	new string[128], done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pBiz] && PlayerInfo[playerid][pVBiz] && PlayerInfo[playerid][pVIP] >= 4) return SendClientMessage(playerid, COLOR_GREY, "You already own two businesses.");
	if(PlayerInfo[playerid][pBiz] && PlayerInfo[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GREY, "You already own a business.");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
	    {
			if(!strcmp("The State", BizInfo[idx][bOwner], false))
			{
			    if(PlayerInfo[playerid][pMoney] < BizInfo[idx][bPrice]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to buy this business.");
				GiveDodMoney(playerid, -BizInfo[idx][bPrice]);
				if(PlayerInfo[playerid][pBiz]) PlayerInfo[playerid][pVBiz] = idx;
				else PlayerInfo[playerid][pBiz] = idx;
			    format(BizInfo[idx][bOwner], 32, "%s", RPNU(playerid));
			    format(string, sizeof(string), "Business of %s\nBusiness type: %s\n%s", BizInfo[idx][bOwner], RBT(idx), RBS(idx));
				UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_GREEN, " You have successfully bought a business.");
				SendClientMessage(playerid, COLOR_WHITE, " Type /bizhelp to view your business commands.");
				format(string, sizeof(string), "%s has bought business id %d.", RPN(playerid), idx);
				Log("logs/business.log", string);
				idx = MAX_BIZ;
				done = 1;
			}
			if(idx == MAX_BIZ-1 && !done)
			{
			    SendClientMessage(playerid, COLOR_GREY, "This business is owned by someone else.");
			}
	    }
	    if(idx == MAX_BIZ-1 && !done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near a buyable business.");
	    }
	}
	return 1;
}



CMD:sellbiztomarket(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pBiz] && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a business.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sellbiztomarket [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    new done;
	    if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[PlayerInfo[playerid][pBiz]][bX], BizInfo[PlayerInfo[playerid][pBiz]][bY], BizInfo[PlayerInfo[playerid][pBiz]][bZ]))
	    {
	        new idx = PlayerInfo[playerid][pBiz];
	        GiveDodMoney(playerid, (75*BizInfo[PlayerInfo[playerid][pBiz]][bPrice])/100);
			BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 0;
		    format(BizInfo[PlayerInfo[playerid][pBiz]][bOwner], 32, "The State");
		    format(string, sizeof(string), "Owner: %s\nBusiness Type: %s\nStatus: For Sale\nPrice: $%d", BizInfo[idx][bOwner], RBT(idx), BizInfo[idx][bPrice]);
		    UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your business to The State. (75 percent of original price was paid back)");
            format(string, sizeof(string), "%s has sold business id %d to the market.", RPN(playerid), PlayerInfo[playerid][pBiz]);
			Log("logs/business.log", string);
			PlayerInfo[playerid][pBiz] = 0;
			done = 1;
	    }
	    if(!done)
	    {
	        new idx = PlayerInfo[playerid][pVBiz];
   	 		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
		    {
		        GiveDodMoney(playerid, (75*BizInfo[idx][bPrice])/100);
				BizInfo[idx][bStatus] = 0;
			    format(BizInfo[idx][bOwner], 32, "The State");
			    format(string, sizeof(string), "Owner: %s\nBusiness Type: %s\nStatus: For Sale\nPrice: $%d", BizInfo[idx][bOwner], RBT(idx), BizInfo[idx][bPrice]);
			    UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
			    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your business to The State. (75 percent of original price was paid back)");
	            format(string, sizeof(string), "%s has sold business id %d to the market.", RPN(playerid), idx);
				Log("logs/business.log", string);
				PlayerInfo[playerid][pVBiz] = 0;
				done = 1;
		    }
	    }
		if(!done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near your business.");
	        return 1;
	    }
    }
	return 1;
}

CMD:mc(playerid, params[])
{
    new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/a)dminChat [text]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "*%s %s: {FFFFFF}%s", RPALN(playerid), RPN(playerid), params);
	SendMapperMessage(COLOR_GREEN, 1, string);
	return 1;
}


CMD:jetpack(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pMapper] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(PlayerInfo[playerid][pJetpack] == 0)
    {
	PlayerInfo[playerid][pJetpack] = 1;
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    SetPlayerPos(playerid, X, Y, Z);
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	}
	else if(PlayerInfo[playerid][pJetpack] == 1)
	{
	PlayerInfo[playerid][pJetpack] = 0;
    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
    SetPlayerPos(playerid, X, Y, Z);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	return 1;
}

CMD:o(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3 && !OOCStatus && PlayerInfo[playerid][pMapper] < 1) return SendClientMessage(playerid, COLOR_GREY, "The global OOC chat is currently disabled.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/o)oc [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(PlayerInfo[playerid][pAdmin] || PlayerInfo[playerid][pMapper]) format(string, sizeof(string), "(( {FF6347}%s %s: {E0FFFF}%s ))", RPALN(playerid), RPN(playerid), params);
	else format(string, sizeof(string), "(( %s: %s ))", RPN(playerid), params);
	SendClientMessageToAll(COLOR_OOC, string);
	Log("logs/chat.log", string);
	return 1;
}

CMD:newbie(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3 && !NewbieStatus) return SendClientMessage(playerid, COLOR_GREY, "The newbie chat is currently disabled.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /newbie [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(strlen(params) > 128) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters limit is 128.");
	if(NewbieTime[playerid] > 0)
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before using the newbie chat again.", NewbieTime[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if(PlayerInfo[playerid][pNMute]) return SendClientMessage(playerid, COLOR_GREY, "You are muted from the newbie channel.");
	if(PlayerInfo[playerid][pLevel] == 1) format(string, sizeof(string), "** Newbie %s: %s", RPN(playerid), params);
	if(PlayerInfo[playerid][pLevel] >= 2) format(string, sizeof(string), "** Player %s: %s", RPN(playerid), params);
	if(PlayerInfo[playerid][pVIP]) format(string, sizeof(string), "** %s VIP %s: %s", RPVIPN(playerid), RPN(playerid), params);
	if(PlayerInfo[playerid][pHelper]) format(string, sizeof(string), "** Community Helper %s: %s", RPN(playerid), params);
	if(PlayerInfo[playerid][pAdmin] > 3) format(string, sizeof(string), "** %s %s: %s", RPALN(playerid), RPN(playerid), params);
//	if(PlayerInfo[playerid][pOldskool]) format(string, sizeof(string), "** Oldskool %s: %s", RPN(playerid), params);
	//if(PlayerInfo[playerid][pLoyalTag] && !PlayerInfo[playerid][pLoyal]) format(string, sizeof(string), "** Loyal %s: %s", RPN(playerid), params);
	if(!PlayerInfo[playerid][pHelper] && !PlayerInfo[playerid][pAdmin]) NewbieTime[playerid] = 40;
	SendClientMessageToAll(COLOR_NEWBIE, string);
	Log("logs/newbie.log", string);
	SetTimerEx("NewbieTimer", 1000, false, "i", playerid);
	return 1;
}

CMD:poll(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /poll [question]");
	if(strlen(params) > 128) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters limit is 128.");
	if(PollOn) return SendClientMessage(playerid, COLOR_GREY, "There is already an poll started.");
	format(string, sizeof(string), "{FF6347}**{FFFFFF} %s %s {FF6347}Started an Poll! **", RPALN(playerid), RPN(playerid));
	SendClientMessageToAll(COLOR_WHITE, string);
	format(string, sizeof(string), "{FF6347}** Question:{FFFFFF} %s {FF6347}**", params);
	SendClientMessageToAll(COLOR_WHITE, string);
	format(string, sizeof(string), "{FF6347}**{FFFFFF} Press {FFFFFF}Y{FF6347} to vote {FFFFFF}Yes{FF6347}, Press {FFFFFF}N{FF6347} to vote {FFFFFF}No{FF6347}. **");
	SendClientMessageToAll(COLOR_WHITE, string);
	format(string, sizeof(string), "{FF6347}** Poll ending in {FFFFFF}30{FF6347} Seconds. **");
	SendClientMessageToAll(COLOR_WHITE, string);
	PollOn = 1;
	PollN = 0;
	foreach(Player, i)
	{
	        	PollVoted[i] = 0;
	}
	PollY = 0;
	SetTimer("pollend", 30000, false);
	return 1;
}


CMD:gate(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    // Dynamic Gates
    for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(GateInfo[idx][gModel] && IsPlayerInRangeOfPoint(playerid, 8, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]))
	    {
	        if(strlen(GateInfo[idx][gPassword]))
	        {
	            if(sscanf(params, "s[256]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gate [password]");
	            if(strcmp(params, GateInfo[idx][gPassword])) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate password.");
	            if(!GateInfo[idx][gStatus])
		        {
		            GateInfo[idx][gStatus] = 1;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
		        }
		        else
		        {
		            GateInfo[idx][gStatus] = 0;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
		        }
	        }
	        else
	        {
		        if(!GateInfo[idx][gStatus])
		        {
		            GateInfo[idx][gStatus] = 1;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
		        }
		        else
		        {
		            GateInfo[idx][gStatus] = 0;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
		        }
	        }
	        idx = MAX_GATES;
	        return 1;
	    }
	}
    // Static Gates
	if(IsACop(playerid) && IsPlayerInRangeOfPoint(playerid, 6, 1544.7363,-1627.0232,13.3672)) // NYPD Barrier
	{
	    if(!NYPDBarrierStatus)
	    {
	        NYPDBarrierStatus = 1;
	        MoveDynamicObject(NYPDBarrier, 1544.6943359375, -1630.73046875, 13.27956199646+0.0001, 0.0002, 0, 0, 90);
	    }
	    else
	    {
	        NYPDBarrierStatus = 0;
	        MoveDynamicObject(NYPDBarrier, 1544.6943359375, -1630.73046875, 13.27956199646-0.0001, 0.0003, 0, 90, 90);
	    }
	    return 1;
	}
	else if(IsACop(playerid) && IsPlayerInRangeOfPoint(playerid, 7, 1588.4501,-1638.5692,13.3672)) // NYPD Gate
	{
	   	if(!NYPDGateStatus)
	    {
	        NYPDGateStatus = 1;
	        MoveDynamicObject(NYPDGate, 1588.6501464844, -1638.0750732422, 6.2343215942383, 3);
	    }
	    else
	    {
	        NYPDGateStatus = 0;
	        MoveDynamicObject(NYPDGate, 1588.6428222656, -1638.02734375, 15.240161895752, 3);
	    }
	    return 1;
	}
	else if(IsFBI(playerid) && IsPlayerInRangeOfPoint(playerid, 7, 282.0358,-1544.4222,25.0337)) // NYPD Gate
	{
	   	if(!FBIGateStatus)
	    {
	        FBIGateStatus = 1;
	        MoveDynamicObject(FBIGate, 284.29998779, -1543.40002441, 20.20000076, 3);
	    }
	    else
	    {
	        FBIGateStatus = 0;
	        MoveDynamicObject(FBIGate, 284.29998779, -1543.40002441, 26.20000076, 3);
	    }
    }
	else if(IsAReporter(playerid) && IsPlayerInRangeOfPoint(playerid, 6, 778.0338,-1385.0182,13.7254)) // NA Gate 1
	{
	    if(!SAGateStatus1)
	    {
	        SAGateStatus1 = 1;
	        MoveDynamicObject(SAGate1, 770.497985, -1384.939453, 14.392275, 3);
	    }
	    else
	    {
	        SAGateStatus1 = 0;
	        MoveDynamicObject(SAGate1, 777.457580, -1384.939453, 14.392275, 3);
	    }
	}
	else if(IsAReporter(playerid) && IsPlayerInRangeOfPoint(playerid, 6, 777.5819,-1330.1381,13.5500)) // NA Gate 2
	{
	    if(!SAGateStatus2)
	    {
	        SAGateStatus2 = 1;
	        MoveDynamicObject(SAGate2, 783.026306, -1330.353393, 14.167037, 3);
	    }
	    else
	    {
	        SAGateStatus2 = 0;
	        MoveDynamicObject(SAGate2, 778.548583, -1330.212890, 14.167037, 3);
	    }
	}
	else if(IsHitman(playerid) && IsPlayerInRangeOfPoint(playerid, 6, 2192.741455, -2653.159423, 13.996870)) //hitman gate
	{
	    if(!hitmangateStatus)
	    {
	        hitmangateStatus = 1;
	        MoveDynamicObject(hitmangate, 2192.741455, -2653.159423, 5.316853, 3);
		}
		else
		{
			hitmangateStatus = 0;
			MoveDynamicObject(hitmangate, 2192.741455, -2653.159423, 13.996870, 3);
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "You aren't near a gate you can open.");
	return 1;
}

CMD:door(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsFBI(playerid) && !IsNG(playerid) && !IsChief(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a LEO.");
	if(IsPlayerInRangeOfPoint(playerid, 3, 246.381317,72.578338,1003.706604) || IsPlayerInRangeOfPoint(playerid, 3, 246.381317,72.292190,1003.706604))
	{
	    if(!NYPDLobbyStatus) // NYPD LOBBY
	    {
	        MoveDynamicObject(NYPDLobby[0], 247.3080, 72.3000, 1003.6700, 1.50);
	    	MoveDynamicObject(NYPDLobby[1], 245.480, 72.5750, 1003.6650, 1.50);
	    	MoveDynamicObject(NYPDLobby[2], 247.888, 72.4500, 1003.7000, 1.50);
	    	MoveDynamicObject(NYPDLobby[3], 244.908, 72.4500, 1003.7000, 1.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the lobby door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        NYPDLobbyStatus = 1;
         	SetTimer("NYPDLobbyTimer", 3000, false);
	    }
	    else if(NYPDLobbyStatus)
	    {
	    	MoveDynamicObject(NYPDLobby[0], 246.4050, 72.3000, 1003.6700, 1.50);
	    	MoveDynamicObject(NYPDLobby[1], 246.4050, 72.5750, 1003.6650, 1.50);
	    	MoveDynamicObject(NYPDLobby[2], 246.9850, 72.4500, 1003.7000, 1.50);
	    	MoveDynamicObject(NYPDLobby[3], 245.8330, 72.4500, 1003.7000, 1.50);
			format(string, sizeof(string), "* %s %s puts their finger on the scanner and closes the lobby door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			NYPDLobbyStatus = 0;
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3, 259.105194,90.812126,1002.584350) || IsPlayerInRangeOfPoint(playerid, 3, 258.843353,90.840599,1002.584350))
	{
	    if(!NYPDCellsStatus) // NYPD CELLS
	    {
	        MoveDynamicObject(NYPDCells[0], 259.105194,91.844230,1002.584350, 1.50);
	    	MoveDynamicObject(NYPDCells[1], 258.843353,89.812141,1002.584350, 1.50);
	    	MoveDynamicObject(NYPDCells[2], 258.949157,92.435539,1002.528625, 1.50);
	    	MoveDynamicObject(NYPDCells[3], 258.949157,89.254486,1002.528625, 1.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the cells door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        NYPDCellsStatus = 1;
         	SetTimer("NYPDCellsTimer", 3000, false);
	    }
	    else if(NYPDCellsStatus)
	    {
	    	MoveDynamicObject(NYPDCells[0], 259.105194,90.812126,1002.584350, 1.50);
	    	MoveDynamicObject(NYPDCells[1], 258.843353,90.840599,1002.584350, 1.50);
	    	MoveDynamicObject(NYPDCells[2], 258.949157,91.412040,1002.528625, 1.50);
	    	MoveDynamicObject(NYPDCells[3], 258.949157,90.292076,1002.528625, 1.50);
			format(string, sizeof(string), "* %s puts their finger on the scanner and closes the cells door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			NYPDCellsStatus = 0;
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3, 1558.970703125,-1677.9114990234,1722.1081542969))
	{
        if(!IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an LEO.");
	    if(!DoorsStatus) // NYPD CELLS
	    {
	        MoveDynamicObject(door1, 1558.1387939453, -1677.8883056641, 1722.1081542969, 1.50);
	    	MoveDynamicObject(door2, 1562.7950439453, -1677.8798828125, 1722.1081542969, 1.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        DoorsStatus = 1;
         	//SetTimer("NYPDCellsTimer", 3000, false);
	    }
	    else if(DoorsStatus)
	    {
	    	MoveDynamicObject(door1, 1558.970703125, -1677.9114990234, 1722.1081542969, 1.50);
	    	MoveDynamicObject(door2, 1561.9755859375, -1677.8798828125, 1722.1081542969, 1.50);
			format(string, sizeof(string), "* %s puts their finger on the scanner and closes the door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			DoorsStatus = 0;
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3, 1552.7789306641,-1691.4653320313,1722.1081542969))
   	{
        if(!IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an LEO.");
	    if(!DoorsStatus) // NYPD CELLS
	    {
	    	MoveDynamicObject(door3, 1549.6147460938, -1691.4772949219, 1722.1081542969, 1.50);
	    	MoveDynamicObject(door4, 1554.2923583984, -1691.4328613281, 1722.1081542969, 1.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        DoorsStatus = 1;
         	//SetTimer("NYPDCellsTimer", 3000, false);
	    }
	    else if(DoorsStatus)
	    {
	    	MoveDynamicObject(door3, 1550.4266357422, -1691.5009765625, 1722.1081542969, 1.50);
	    	MoveDynamicObject(door4, 1553.4294433594, -1691.4515380859, 1722.1081542969, 1.50);
			format(string, sizeof(string), "* %s puts their finger on the scanner and closes the door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			DoorsStatus = 0;
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 1560.1090087891,-1653.4477539063,1719.5637207031))
   	{
        if(!IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an LEO.");
	    if(!DoorsStatus) // NYPD CELLS
	    {
	    	MoveDynamicObject(door5, 1560.1309774200, -1651.7266845703, 1719.5637207031, 1.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        DoorsStatus = 1;
         	//SetTimer("NYPDCellsTimer", 3000, false);
	    }
	    else if(DoorsStatus)
	    {
	    	MoveDynamicObject(door5, 1560.1090087891, -1653.4477539063, 1719.5637207031, 1.50);
			format(string, sizeof(string), "* %s puts their finger on the scanner and closes the door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			DoorsStatus = 0;
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 0.7, 255.494674,85.290985,1002.445312)) // NYPD Cells Office Left
	{
	    if(!NYPDOfficeStatus[0])
	    {
	        NYPDOfficeStatus[0] = 1;
	        MoveDynamicObject(NYPDOffice[0], 255.494674,85.290985,1005.445312, 3, 0, 0, 0);
	    }
	    else if(NYPDOfficeStatus[0])
	    {
	        NYPDOfficeStatus[0] = 0;
	        MoveDynamicObject(NYPDOffice[0], 255.494674,85.290985,1002.445312, 3, 0, 0, 0);
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 0.7, 254.380661,85.286033,1002.445312)) // NYPD Cells Office Right
	{
		if(!NYPDOfficeStatus[1])
	    {
	        NYPDOfficeStatus[1] = 1;
	        MoveDynamicObject(NYPDOffice[1], 254.380661,85.286033,1005.445312, 3, 0, 0, 180);
	    }
	    else if(NYPDOfficeStatus[1])
	    {
	        NYPDOfficeStatus[1] = 0;
	        MoveDynamicObject(NYPDOffice[1], 254.380661,85.286033,1002.445312, 3, 0, 0, 180);
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3, 222.1266,69.7867,1005.0391))
	{
	    if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not the NYPD Chief.");
	    if(!NYPDChiefStatus) // Chief's Office
	    {
	       	MoveDynamicObject(NYPDChief[0], 222.331802,70.714004,1005.079895, 1.50);
	    	MoveDynamicObject(NYPDChief[1], 222.002853,68.871803,1005.072875, 1.50);
         	MoveDynamicObject(NYPDChief[2], 222.120773,71.322158,1005.128601, 1.50);
	    	MoveDynamicObject(NYPDChief[3], 222.120773,68.324714,1005.128601, 1.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the office door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        NYPDChiefStatus = 1;
	    }
	    else if(NYPDChiefStatus)
	    {
	    	MoveDynamicObject(NYPDChief[0], 222.281802,69.786598,1005.079895, 1.50);
	    	MoveDynamicObject(NYPDChief[1], 222.002853,69.801109,1005.072875, 1.50);
	    	MoveDynamicObject(NYPDChief[2], 222.120773,70.343833,1005.128601, 1.50);
	    	MoveDynamicObject(NYPDChief[3], 222.120773,69.220504,1005.128601, 1.50);
			format(string, sizeof(string), "* %s puts their finger on the scanner and closes the office door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			NYPDChiefStatus = 0;
	    }//new prison doors
	}
 	else if(IsPlayerInRangeOfPoint(playerid, 3, 1797.00830078,-1525.15258789,5699.42480469) || IsPlayerInRangeOfPoint(playerid, 3, 1793.6631,-1523.9191,5700.4287))
	{
	    if(!PrDoorStatus1)
	    {
	        MoveDynamicObject(edoor5,1797.00830078+1,-1525.15258789,5699.42480469,0.50);
            MoveDynamicObject(edoor6,1794.00976562-1,-1525.18676758,5699.42480469,0.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        PrDoorStatus1 = 1;
	        SetTimer("PrDoorsTimer", 3000, false);
	    }
	    else if(PrDoorStatus1)
	    {
	    	MoveDynamicObject(edoor5,1797.00830078,-1525.15258789,5699.42480469,0.50);
            MoveDynamicObject(edoor6,1794.00976562,-1525.18676758,5699.42480469,0.50);
			format(string, sizeof(string), "* %s puts their finger on the scanner and closes the door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PrDoorStatus1 = 0;
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3, 1812.0830,-1545.2319,5700.4287) || IsPlayerInRangeOfPoint(playerid, 3, 1810.3752,-1548.3003,5700.4287))
	{
	    if(!PrDoorStatus2)
	    {
	        MoveDynamicObject(pdoor1,1808.76147461-1,-1547.63208008,5699.42480469,0.50);
            MoveDynamicObject(pdoor2,1811.76184082+1,-1547.60510254,5699.42480469,0.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        PrDoorStatus2 = 1;
	        SetTimer("PrDoorsTimer", 3000, false);
	    }
	    else if(PrDoorStatus2)
	    {
	    	MoveDynamicObject(pdoor1,1808.76147461,-1547.63208008,5699.42480469,0.50);
            MoveDynamicObject(pdoor2,1811.76184082,-1547.60510254,5699.42480469,0.50);
			format(string, sizeof(string), "* %s puts their finger on the scanner and closes the door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PrDoorStatus2 = 0;
	    }
	}else if(IsPlayerInRangeOfPoint(playerid, 3, 1812.0830,-1545.2319,5700.4287)){
	}
	else
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not near a door you can open.");
	}
	return 1;
}
CMD:vipelevator(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pVIP] && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(IsPlayerInRangeOfPoint(playerid, 3, 1786.6985,-1300.3511,13.4811) || IsPlayerInRangeOfPoint(playerid, 3, 1786.6985,-1300.3511,13.4811))
	{
	    if(ElDoorStatus == 0)
	    {
	        MoveDynamicObject(ElDoor[0], 1784.879272, -1299.391357, 14.544997, 1.50);
	    	MoveDynamicObject(ElDoor[1], 1788.323120, -1299.361206, 14.545944, 1.50);
	    	format(string, sizeof(string), "* %s pushes the button and calls the elevator.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        ElDoorStatus = 1;
         	SetTimer("ElevatorUp", 5000, false);
         	SetTimer("TopFloor", 10000, false);
	    }

	}
		if(IsPlayerInRangeOfPoint(playerid, 3, 1829.9160,-1301.6019,132.0686))
	    {
	    	format(string, sizeof(string), "* %s pushes the button and calls the elevator.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			ElDoorStatus = 1;
	        SetPlayerPos(playerid, 1786.7578,-1302.9718,13.7572);
	        SetPlayerFacingAngle(playerid, 180);
	        MoveDynamicObject(ElDoor[0], 1784.879272, -1299.391357, 14.544997, 1.50);
	    	MoveDynamicObject(ElDoor[1], 1788.323120, -1299.361206, 14.545944, 1.50);
	        GameTextForPlayer(playerid, "Ground floor", 3000, 1);
	        SetTimer("ElDoorClose", 5000, false);
		}
		if(IsPlayerInRangeOfPoint(playerid, 3, 393.3230,-1162.3744,1227.8639))//fbi elevator roof up
		{
		    format(string, sizeof(string), "* %s pushes the button and calls the elevator.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SetPlayerPos(playerid, 1665.8561,-1650.3574,76.2188);
			SetPlayerFacingAngle(playerid, 132.7227);
		}
		if(IsPlayerInRangeOfPoint(playerid, 3, 1665.8561,-1650.3574,76.2188))//fbi elevator roof down
		{
		    format(string, sizeof(string), "* %s pushes the button and calls the elevator.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SetPlayerPos(playerid, 393.3230,-1162.3744,1227.8639);
			SetPlayerFacingAngle(playerid, 0);
			GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
			TogglePlayerControllable(playerid, 0);
   			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
      		PlayerInfo[playerid][pSpawnFreeze] = 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 3, 389.6462,-1162.8457,1227.8639))//fbi elevator locker room down
		{
		    format(string, sizeof(string), "* %s pushes the button and calls the elevator.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SetPlayerPos(playerid, 396.9394,-1166.8578,1223.6667);
			SetPlayerFacingAngle(playerid, 272.0529);
			GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
			TogglePlayerControllable(playerid, 0);
   			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
      		PlayerInfo[playerid][pSpawnFreeze] = 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 3, 396.9394,-1166.8578,1223.6667))//fbi elevator locker room up
		{
		    format(string, sizeof(string), "* %s pushes the button and calls the elevator.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SetPlayerPos(playerid, 389.6462,-1162.8457,1227.8639);
			SetPlayerFacingAngle(playerid, 0);
			GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
			TogglePlayerControllable(playerid, 0);
   			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
      		PlayerInfo[playerid][pSpawnFreeze] = 1;
		}
	return 1;
}

CMD:frisk(playerid, params[])
{
	new playerb, string[128], weaps, weapons[13][2];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	//if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a LEO.");
	if(sscanf(params,"u",playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /frisk [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 3)) return SendClientMessage(playerid, COLOR_GREY, "You can't frisk someone from that distance.");
	if(!IsPlayerCuffed(playerb) && !Tied[playerb] && GetPlayerSpecialAction(playerb) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GREY, "Player is not cuffed, tied nor has their hands up.");
	SendClientMessage(playerid, COLOR_GREEN, "____________________________");
	format(string, sizeof(string), "*** %s's Items ***", RPN(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), " Money ($%d)", PlayerInfo[playerb][pMoney]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	if(PlayerInfo[playerb][pMaterials]) {format(string, sizeof(string), "Low-Class Materials (%d)", PlayerInfo[playerb][pMaterials]); SendClientMessage(playerid, COLOR_WHITE, string);}
	if(PlayerInfo[playerb][pMMaterials]) {format(string, sizeof(string), "Medium-Class Materials (%d)", PlayerInfo[playerb][pMMaterials]); SendClientMessage(playerid, COLOR_WHITE, string);}
	if(PlayerInfo[playerb][pHMaterials]) {format(string, sizeof(string), "High-Class Materials (%d)", PlayerInfo[playerb][pHMaterials]); SendClientMessage(playerid, COLOR_WHITE, string);}
	if(PlayerInfo[playerb][pWeed]) {format(string, sizeof(string), " Weed (%d)", PlayerInfo[playerb][pWeed]); SendClientMessage(playerid, COLOR_WHITE, string);}
	if(PlayerInfo[playerb][pcocaine]) {format(string, sizeof(string), " cocaine(%d)", PlayerInfo[playerb][pcocaine]); SendClientMessage(playerid, COLOR_WHITE, string);}
	format(string, sizeof(string), "*** %s's Weapons ***", RPN(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	for(new i=0; i<13; i++)
	{
       	GetPlayerWeaponData(playerb, i, weapons[i][0], weapons[i][1]);
        if(weapons[i][0] != PlayerInfo[playerb][pWeapon][i] && weapons[i][1] != 0)
        {
	        format(string, sizeof(string), " %s (Ammo: %d) (Hacked)", RWN(weapons[i][0]), weapons[i][1]);
	        SendClientMessage(playerid, COLOR_MEDIC, string);
	        weaps++;
        }
        else if(weapons[i][0] == PlayerInfo[playerb][pWeapon][i] && weapons[i][0] != 0)
        {
            format(string, sizeof(string), " %s (Ammo: %d)", RWN(PlayerInfo[playerb][pWeapon][i]), weapons[i][1]);
	        SendClientMessage(playerid, COLOR_MEDIC, string);
	        weaps++;
        }
	}
	if(weaps == 0) return SendClientMessage(playerid, COLOR_MEDIC, "None");
	format(string, sizeof(string), "* %s has frisked %s.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:showbadge(playerid, params[])
{
	new playerb, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsAGov(playerid) && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/Government Official/FBI Agent.");
	if(sscanf(params,"u",playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /showbadge [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 5)) return SendClientMessage(playerid, COLOR_GREY, "You can't flash your badge to someone from that distance.");
	if(IsACop(playerid)) SendClientMessage(playerb, COLOR_BLUE, "[Los Santos Police Department]");
	else if(IsAGov(playerid)) SendClientMessage(playerb, COLOR_BLUE, "[Los Santos Government]");
	else if(IsFBI(playerid)) SendClientMessage(playerb, COLOR_DARKRED, "[Federal Bureau Of Investigation]");
	format(string, sizeof(string), " Name: {FFFFFF}%s", RPN(playerid));
	SendClientMessage(playerb, COLOR_BLUE, string);
	format(string, sizeof(string), " Rank: {FFFFFF}%s", RPFRN(playerid));
	SendClientMessage(playerb, COLOR_BLUE, string);
	format(string, sizeof(string), "* %s flashes their badge to %s.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:giveweplic(playerid, params[])
{
	new playerb, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsAGov(playerid) && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/Government Official/FBI Agent.");
	if(sscanf(params,"u",playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /giveweplic [playerid]");
		if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't give yourself a weapon license.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	format(string, sizeof(string), "* %s gave %s a weapon license.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	PlayerInfo[playerb][pWepLic] = 1;
	return 1;
}

CMD:locker(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(IsACop(playerid))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.2,256.2174,77.3295,1004.0344)) return SendClientMessage(playerid, COLOR_GREY, "You aren't near your locker.");
		if(DayNoPD == 1) return SendClientMessage(playerid, COLOR_OOC, "You can't access your locker ((/day)).");
	    SSSShowDialog(playerid, 5);
	}
	else if(IsAGov(playerid))
	{
	    if(PlayerInfo[playerid][pFacRank] != 0) return SendClientMessage(playerid, COLOR_GREY, "Only bodyguards can access the lockers. (Rank 0)");
		if(!IsPlayerInRangeOfPoint(playerid, 2, 352.1964,173.3516,1025.7891)) return SendClientMessage(playerid, COLOR_GREY, "You aren't near your locker.");
		GiveDodWeapon(playerid, 29, 500);
		GiveDodWeapon(playerid, 24, 200);
		format(string, sizeof(string), "* %s grabs a Desert Eagel and an MP5 from the lockers.", RPN(playerid), params);
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(IsAReporter(playerid))
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 2, 1203.1322,-751.8103,1073.1819)) return SendClientMessage(playerid, COLOR_GREY, "You aren't near your locker.");
		SSSShowDialog(playerid, 27);
	}
	else if(IsMedic(playerid))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3, 2460.0559,-1395.4246,883.9200)) return SendClientMessage(playerid, COLOR_GREY, "You aren't near your locker.");
		SSSShowDialog(playerid, 32);
	}
	else if(IsFBI(playerid))
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3, 1564.0781,-1671.5887,1723.1050)) return SendClientMessage(playerid, COLOR_GREY, "You aren't near your locker.");
	    SSSShowDialog(playerid, 35);
	}
	else if(IsNG(playerid))
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3, 1802.9681,-1531.8873,5700.4287)) return SendClientMessage(playerid, COLOR_GREY, "You aren't near your locker.");
	    SSSShowDialog(playerid, 43);
	}
	else SendClientMessage(playerid, COLOR_GREY, "You are not near a locker you can open.");
	return 1;
}

CMD:gov(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsAGov(playerid) && !IsMedic(playerid) && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Officer/Government Official.");
	if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a faction leader.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/gov)ernment announcement [text]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "|___________ %s News Announcement ___________|", RPFNEx(playerid));
	SendClientMessageToAll(COLOR_WHITE, string);
	format(string, sizeof(string), "** %s %s: %s **", RPFRN(playerid), RPN(playerid), params);
	SendClientMessageToAll(COLOR_BLUE, string);
	return 1;
}
CMD:hitfind(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsAHitman(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
	if(Tracking[playerid] != -1)
	{
	    playerb = Tracking[playerid];
	    Tracking[playerid] = -1;
	    SetPlayerMarkerForPlayer(playerid, playerb, GetPlayerColor(playerb));
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You shut your tracker down.");
	    return 1;
	}
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hitfind [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pNumber]) return SendClientMessage(playerid, COLOR_GREY, "Player has no cellphone.");
	if(GetPlayerInterior(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is in an interior.");
	if(GetPlayerVirtualWorld(playerb) != GetPlayerVirtualWorld(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Player is in another virtual world.");
	// Tracking
    Tracking[playerid] = playerb;
    format(string, sizeof(string), " You turned your tracker on. (Tracking: %s)", RPN(playerb));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    SetPlayerMarkerForPlayer(playerid, playerb, COLOR_PINK);
	return 1;
}
CMD:track(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsAHitman(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
	if(IsACop(playerid) && !PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(Tracking[playerid] != -1)
	{
	    playerb = Tracking[playerid];
	    Tracking[playerid] = -1;
	    SetPlayerMarkerForPlayer(playerid, playerb, GetPlayerColor(playerb));
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You shut your tracker down.");
	    return 1;
	}
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /track [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pNumber]) return SendClientMessage(playerid, COLOR_GREY, "Player has no cellphone.");
	if(GetPlayerInterior(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is in an interior.");
	if(GetPlayerVirtualWorld(playerb) != GetPlayerVirtualWorld(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Player is in another virtual world.");
	// Tracking
    Tracking[playerid] = playerb;
    format(string, sizeof(string), " You turned your tracker on. (Tracking: %s)", RPN(playerb));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    SetPlayerMarkerForPlayer(playerid, playerb, MARKER_LIGHTBLUE);
	return 1;
}



CMD:detain(playerid, params[])
{
	new playerb, seatid, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
	if(sscanf(params, "ui", playerb, seatid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /detain [playerid] [seatid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You can't detain someone from this disatance.");
	if(!IsPlayerCuffed(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not cuffed.");
	if(seatid < 2 || seatid > 3) return SendClientMessage(playerid, COLOR_GREY, "You can only detain people in seats 2 and 3.");
	PutPlayerInVehicle(playerb, LastCar[playerid], seatid);
	format(string, sizeof(string), "* %s grabs %s from their cuffs and throws him inside the NYPD cruiser.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:drunktest(playerid, params[])
{
 	new playerb, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	 if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a LEO.");
	 if(sscanf(params,"u",playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: f [playerid]");
	 if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	 if(!IsPlayerNearPlayer(playerid, playerb, 3)) return SendClientMessage(playerid, COLOR_GREY, "You can't frisk someone from that distance.");
	 if(!IsPlayerCuffed(playerb) && !Tied[playerb] && GetPlayerSpecialAction(playerb) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GREY, "Player is not cuffed, tied nor has their hands up.");
	 SendClientMessage(playerid, COLOR_BLUE, "____________DRUNK_TEST________________");

 for(new i=0; i<1; i++)
 {

	if(GetPlayerDrunkLevel(playerb) >= 3000)
 	{
  		format(string, sizeof(string), "Drunk test positive - %s is drunk.", RPN(playerb));
  		SendClientMessage(playerid, COLOR_RED, string);
  		format(string, sizeof(string), "Drunk test positive - you are drunk.");
  		SendClientMessage(playerb, COLOR_RED, string);
  	}
   	else
    {
		format(string, sizeof(string), "Drunk test negative - %s is NOT drunk.", RPN(playerb));
		SendClientMessage(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "Drunk test negative - you not are not drunk.");
		SendClientMessage(playerb, COLOR_GREEN, string);
  	}
 }
 format(string, sizeof(string), "* %s has drunk tested %s.", RPN(playerid), RPN(playerb));
 SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 return 1;
}

CMD:cuff(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /cuff [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
    if(DayNoPD == 1) return SendClientMessage(playerid, COLOR_OOC, "You don't have cuffs on you today. ((/day)).");
	if(!IsPlayerTazed(playerb) && GetPlayerSpecialAction(playerb) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GREY, "Player is not tazed nor has their hands up.");
	// /me Message & Animation
	GameTextForPlayer(playerb, "~r~Cuffed", 3500, 3);
    format(string, sizeof(string), "* %s pulls a pair of steel cuffs from their belt and puts %s's hands inside them.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	ClearAnimations(playerb);
	//ApplyAnimation(playerb,"ped","cower",1,1,0,0,0,0,1);
	TogglePlayerControllable(playerb, 1);
	//ApplyAnimation(playerb,"ped","cower",1,1,0,0,0,0,1);
	SetPlayerAttachedObject(playerb, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
    SetPlayerSpecialAction(playerb,SPECIAL_ACTION_CUFFED);
	// Tazed Setting
	TogglePlayerTazed(playerb, 0);
	TogglePlayerCuffed(playerb, 1);
	// Cuff Timeout
	CuffTimeout[playerb] = 300;
	KillTimer(TazeCountDown[playerb]);
	CuffCountDown[playerb] = SetTimerEx("CuffTimer", 1000, true, "d", playerb);
	return 1;
}
CMD:legcuff(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI Agent.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /legcuff [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
    if(DayNoPD == 1) return SendClientMessage(playerid, COLOR_OOC, "You don't have cuffs on you today. ((/day)).");
	//if(!IsPlayerTazed(playerb) && GetPlayerSpecialAction(playerb) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GREY, "Player is not tazed nor has their hands up.");
	// /me Message & Animation
	GameTextForPlayer(playerb, "~r~Cuffed", 3500, 3);
    format(string, sizeof(string), "* %s pulls a pair of steel cuffs from their belt and puts %s's legs inside them.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	ClearAnimations(playerb);
	//ApplyAnimation(playerb,"ped","cower",1,1,0,0,0,0,1);
	TogglePlayerControllable(playerb, 0);
	//ApplyAnimation(playerb,"ped","cower",1,1,0,0,0,0,1);
	//SetPlayerAttachedObject(playerb, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
    //SetPlayerSpecialAction(playerb,SPECIAL_ACTION_CUFFED);
	// Tazed Setting
	//TogglePlayerTazed(playerb, 0);
	//TogglePlayerCuffed(playerb, 1);
	// Cuff Timeout
	//CuffTimeout[playerb] = 300;
	//KillTimer(TazeCountDown[playerb]);
	//CuffCountDown[playerb] = SetTimerEx("CuffTimer", 1000, true, "d", playerb);
	return 1;
}
CMD:bk(playerid, params[])
{
	new string[128], Float:bkx, Float:bky, Float:bkz;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a LEO.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	GetPlayerPos(playerid, bkx, bky, bkz);
	format(string, sizeof(string), "[Central Dispatch]: %s is requesting backup,his coordinates have been marked on the GPS.", RPN(playerid));
	SendCopMessage(COLOR_RADIO, string);
	foreach(Player, i)
	{
		if(IsACop(i))
		{
			SetPlayerMapIcon(i, 99, bkx, bky, bkz, 0, COLOR_BLUE, 3);
		}
	}
	return 1;
}

CMD:cbk(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a LEO.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	format(string, sizeof(string), "[Central Dispatch]: %s has cleared his backup request.", RPN(playerid));
 	SendCopMessage(COLOR_RADIO, string);
	foreach(Player, i)
	{
		if(IsACop(i))
		{
			    RemovePlayerMapIcon(i, 99);
		}
	}
	return 1;
}

CMD:uncuff(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a LEO.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /uncuff [playerid]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't uncuff yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(!IsPlayerCuffed(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not cuffed");
	if(IsPlayerTied(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is tied.");
	CuffTimeout[playerb] = 0;
	format(string, sizeof(string), "* %s reaches to %s and uncuffs them.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	TogglePlayerTazed(playerb, 0);
	TogglePlayerCuffed(playerb, 0);
	Uncuffed[playerb] = 1;
	KillTimer(CuffCountDown[playerid]);
	RemovePlayerAttachedObject(playerb, 0);
	SetPlayerSpecialAction(playerb, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(playerb, 1);
	return 1;
}

CMD:auncuff(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You are not an admin.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /auncuff [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerCuffed(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not cuffed");
	if(IsPlayerTied(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is tied.");
	CuffTimeout[playerb] = 0;
	format(string, sizeof(string), "* %s reaches to %s and uncuffs them.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	TogglePlayerTazed(playerb, 0);
	TogglePlayerCuffed(playerb, 0);
	Uncuffed[playerb] = 1;
	KillTimer(CuffCountDown[playerid]);
	RemovePlayerAttachedObject(playerb, 0);
	SetPlayerSpecialAction(playerb, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(playerb, 1);
	return 1;
}
CMD:tazer(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsNG(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an LEO.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't use this command while being in a vehicle.");
	if(!Tazer[playerid])
	{
	    Tazer[playerid] = 1;
	    format(string, sizeof(string), "* %s takes out their tazer from their holster and loads it.", RPN(playerid));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    if(PlayerInfo[playerid][pWeapon][2] == 24)
	    {
			ReplaceTazer[playerid] = 1;
			GetPlayerWeaponData(playerid, 2, OldGun[playerid], OldAmmo[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "Your desert eagle will be given back when you holster your tazer.");
	    }
	    GunsBeingRemoved[playerid] = 1;
	    RemoveDodWeapon(playerid, 24);
	    GunsBeingRemoved[playerid] = 1;
	    GiveDodWeapon(playerid, 23, 500);
	    GunsBeingRemoved[playerid] = 1;
    }
    else
    {
        Tazer[playerid] = 0;
        RemoveDodWeapon(playerid, 23);
   		format(string, sizeof(string), "* %s unloads their tazer and puts it back to their holster.", RPN(playerid));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    if(ReplaceTazer[playerid])
        {

            ReplaceTazer[playerid] = 0;
            GunsBeingRemoved[playerid] = 1;
            GiveDodWeapon(playerid, OldGun[playerid], OldAmmo[playerid]);
            GunsBeingRemoved[playerid] = 1;
            OldGun[playerid] = 0;
            OldAmmo[playerid] = 0;
            SendClientMessage(playerid, COLOR_WHITE, "You have recieved your desert eagle back as you've holstered your tazer.");
        }
    }
	return 1;
}

CMD:next(playerid, params[])
{
	new family = PlayerInfo[playerid][pFam];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!fskin[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not choosing a family skin.");
	if(pskin[playerid] >= 6)
	{
		pskin[playerid] = 0;
		SetPlayerSkin(playerid, FamInfo[family][fSkins][pskin[playerid]]);
	}
	else
	{
		SetPlayerSkin(playerid, FamInfo[family][fSkins][pskin[playerid]+1]);
		pskin[playerid] ++;
	}
	return 1;
}

CMD:done(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!fskin[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not choosing a family skin.");
    if(GetPlayerSkin(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "This skin slot is empty, choose another one.");
	PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have chosen your family skin.");
	fskin[playerid] = 0; pskin[playerid] = 0;
    TogglePlayerControllable(playerid, 1);
    return 1;
}


CMD:accept(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /accept [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: faction | materials | weapon | family");
		return 1;
	}
	if(!strcmp(params, "faction", true))
	{
	    if(!Invited[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You haven't been invited to a faction.");
	    {
	        new idx = Faction[playerid];
			PlayerInfo[playerid][pFac] = Faction[playerid];
			PlayerInfo[playerid][pFacRank] = 0;
			FacInfo[idx][facMembers] ++;
			PlayerInfo[playerid][pFacLeader] = 0;
			PlayerInfo[playerid][pFacDiv] = 0;
			PlayerInfo[playerid][pFacDivLeader] = 0;
			Invited[playerid] = 0;
			Faction[playerid] = 0;
			format(string, sizeof(string), " You have accepted %s's invitation to join the {33AA33}%s {33CCFF}faction.", RPN(Inviter[playerid]), RPFNEx(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has accepted your faction invitation.", RPN(playerid));
			SendClientMessage(Inviter[playerid], COLOR_LIGHTBLUE, string);
			return 1;
	    }
	}
	else if(!strcmp(params, "family", true))
	{
	    if(!fInvited[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You haven't been invited to a family.");
	    {
	        new idx = Family[playerid];
			PlayerInfo[playerid][pFam] = Family[playerid];
			PlayerInfo[playerid][pFamRank] = 1;
			FamInfo[idx][fMembers] ++;
			fInvited[playerid] = 0;
			Family[playerid] = 0;
			format(string, sizeof(string), " You have accepted %s's invitation to join the {33AA33}%s {33CCFF}family.", RPN(fInviter[playerid]), FamInfo[idx][fName]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has accepted your family invitation.", RPN(playerid));
			SendClientMessage(fInviter[playerid], COLOR_LIGHTBLUE, string);
			TogglePlayerControllable(playerid, 0);
			new family = PlayerInfo[playerid][pFam]; fskin[playerid] = 1; pskin[playerid] = 0;
			SetPlayerSkin(playerid, FamInfo[family][fSkins][0]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, " Type /next for the next family skin, type /done to choose a skin.");
			return 1;
	    }
	}
	else if(!strcmp(params, "materials", true))
	{
	    if(BeenOfferedMaterials[playerid])
	    {
			new playerb = BuyMaterialsFrom[playerid];
		    new amount = BuyMaterialsAmount[playerid];
		    new price = BuyMaterialsPrice[playerid];
		    if(PlayerInfo[playerb][pMaterials] < amount)
			{
			    SellMaterialsTo[playerb] = -1;
				BuyMaterialsFrom[playerid] = -1;
				BuyMaterialsAmount[playerid] = 0;
				BuyMaterialsPrice[playerid] = 0;
				BeenOfferedMaterials[playerid] = 0;
				SendClientMessage(playerid, COLOR_GREY, "That player doesn't have that much materials on them.");
				SendClientMessage(playerb, COLOR_GREY, "The trade has been cancelled as you don't have the materials you offered.");
				return 1;
			}
			if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much on you right now.");
			if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
			PlayerInfo[playerid][pMaterials] += amount;
			PlayerInfo[playerb][pMaterials] -= amount;
			GiveDodMoney(playerid, -price);
			GiveDodMoney(playerb, price);
			format(string, sizeof(string), "* %s takes out a bag of materials, hands it to %s and takes $%d from him", RPN(playerb), RPN(playerid), price);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), " You have bought %d materials for $%d from %s.", amount, price, RPN(playerb));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has bought %d materials for $%d from you.", RPN(playerid), amount, price);
			SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
			SellMaterialsTo[playerb] = -1;
			BuyMaterialsFrom[playerid] = -1;
			BuyMaterialsAmount[playerid] = 0;
			BuyMaterialsPrice[playerid] = 0;
			BeenOfferedMaterials[playerid] = 0;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you materials.");
		    return 1;
		}
	}
	else if(!strcmp(params, "weapon", true))
	{
	    if(BeenOfferedWeapon[playerid])
	    {
			new playerb = BuyWeaponFrom[playerid], price = BuyWeaponPrice[playerid], materials;
		    if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much on you right now.");
			if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
			// Seller Materials
			if(BeenOfferedWeapon[playerid] == 14) materials = 25;
			else if(BeenOfferedWeapon[playerid] == 2) materials = 50;
			else if(BeenOfferedWeapon[playerid] == 6) materials = 50;
			else if(BeenOfferedWeapon[playerid] == 5) materials = 50;
			else if(BeenOfferedWeapon[playerid] == 8) materials = 50;
			else if(BeenOfferedWeapon[playerid] == 23) materials = 100;
			else if(BeenOfferedWeapon[playerid] == 25) materials = 200;
			else if(BeenOfferedWeapon[playerid] == 29) materials = 500;
			else if(BeenOfferedWeapon[playerid] == 33) materials = 750;
			else if(BeenOfferedWeapon[playerid] == 24) materials = 2000;
			else if(BeenOfferedWeapon[playerid] == 30) materials = 4000;
			else if(BeenOfferedWeapon[playerid] == 31) materials = 4500;
			else if(BeenOfferedWeapon[playerid] == 27) materials = 6500;
			else if(BeenOfferedWeapon[playerid] == 34) materials = 7000;

			// The deal
			if(PlayerInfo[playerb][pMaterials] < materials)
			{
			    SellWeaponTo[playerb] = -1;
				BuyWeaponFrom[playerid] = -1;
				BuyWeaponPrice[playerid] = 0;
				BeenOfferedWeapon[playerid] = 0;
				SendClientMessage(playerid, COLOR_GREY, "That player doesn't have the materials needed for that weapon");
				SendClientMessage(playerb, COLOR_GREY, "The trade has been cancelled as you don't have enough materials for the weapon you offered.");
			    return 1;
			}
			PlayerInfo[playerb][pJobSkill][JOB_WDEALER] ++;
			GiveDodMoney(playerid, -price);
			GiveDodMoney(playerb, price);
			PlayerInfo[playerb][pMaterials] -= materials;
			GiveDodWeapon(playerid, BeenOfferedWeapon[playerid], 5);
			format(string, sizeof(string), "* %s takes out a %s, hands it to %s and takes $%d from him", RPN(playerb), RWN(BeenOfferedWeapon[playerid]), RPN(playerid), price);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), " You have bought a %s for $%d from %s.", RWN(BeenOfferedWeapon[playerid]), price, RPN(playerb));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has bought a %s for $%d from you.", RPN(playerid), RWN(BeenOfferedWeapon[playerid]), price);
			SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
			SellWeaponTo[playerb] = -1;
			BuyWeaponFrom[playerid] = -1;
			BuyWeaponPrice[playerid] = 0;
			BeenOfferedWeapon[playerid] = 0;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you a weapon.");
		    return 1;
		}
	}
	else if(!strcmp(params, "free", true))
	{
		if(!PlayerInfo[playerid][pPrison]) return SendClientMessage(playerid, COLOR_GREY, "You are not prisoned.");
		if(FreeBy[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to free you.");
		GiveDodMoney(playerid, -FreePrice[FreeBy[playerid]][playerid]);
		GiveDodMoney(FreeBy[playerid], FreePrice[FreeBy[playerid]][playerid]);
		PlayerInfo[FreeBy[playerid]][pJobSkill][JOB_LAWYER] ++;
		FreeTimeout[FreeBy[playerid]] = 60;
		if(PlayerInfo[playerid][pMoney] < FreePrice[FreeBy[playerid]][playerid]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		PlayerInfo[playerid][pPrisonTime] -= FreeTime[playerid]*60;
		SetTimerEx("FreeTimer", 1000, false, "i", FreeBy[playerid]);
		format(string, sizeof(string), " Lawyer %s has reduced your prison sentence by %d for $%d.", RPN(FreeBy[playerid]), FreeTime[playerid], FreePrice[FreeBy[playerid]][playerid]);
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " You have reduced %s's prison sentence by %d for $%d.", RPN(playerid), FreeTime[playerid], FreePrice[FreeBy[playerid]][playerid]);
	    SendClientMessage(FreeBy[playerid], COLOR_LIME, string);
	    FreePrice[FreeBy[playerid]][playerid] = 0;
		FreeBy[playerid] = -1;
		FreeTime[playerid] = 0;
		return 1;
	}
	else if(!strcmp(params, "defend", true))
	{
		new playerb = DefendBy[playerid];
		if(!PlayerInfo[playerid][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "You are not wanted.");
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to defend you.");
		GiveDodMoney(playerid, -DefendPrice[playerb][playerid]);
		GiveDodMoney(playerb, DefendPrice[playerb][playerid]);
		PlayerInfo[playerb][pJobSkill][JOB_LAWYER] ++;
		DefendTimeout[DefendBy[playerid]] = 60;
		if(PlayerInfo[playerid][pMoney] < DefendPrice[playerb][playerid]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		PlayerInfo[playerid][pWanted] --;
		SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)-1);
		SetTimerEx("DefendTimer", 1000, false, "i", playerb);
		format(string, sizeof(string), " Lawyer %s has defended you for one crime for $%d.", RPN(playerb), DefendPrice[playerb][playerid]);
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " You have defended %s's for one crime $%d.", RPN(playerid), DefendPrice[playerb][playerid]);
	    SendClientMessage(playerb, COLOR_LIME, string);
        DefendPrice[playerb][playerid] = 0;
		DefendBy[playerid] = -1;
		return 1;
	}
	else if(!strcmp(params, "weed", true))
	{
		new seller = WeedSeller[playerid];
		if(seller == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you weed.");
		if(!IsPlayerNearPlayer(playerid, seller, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	    if(PlayerInfo[seller][pWeed] < WeedAmount[seller][playerid])
		{
		    WeedSeller[playerid] = -1;
			WeedPrice[seller][playerid] = 0;
			WeedAmount[seller][playerid] = 0;
			SendClientMessage(playerid, COLOR_GREY, "That player doesn't have that much weed on them.");
			SendClientMessage(seller, COLOR_GREY, "The trade has been cancelled as you don't have the weed you offered.");
			return 1;
		}
		if(WeedPrice[seller][playerid] > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		GiveDodMoney(playerid, -WeedPrice[seller][playerid]);
		GiveDodMoney(seller, WeedPrice[seller][playerid]);
		PlayerInfo[seller][pWeed] -= WeedAmount[seller][playerid];
		PlayerInfo[playerid][pWeed] += WeedAmount[seller][playerid];
		PlayerInfo[seller][pJobSkill][JOB_DDEALER] ++;
		format(string, sizeof(string), "* %s takes out a pack of weed, hands it to %s and takes $%d from him", RPN(seller), RPN(playerid), WeedPrice[seller][playerid]);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have bought %d grams of weed $%d from %s.", WeedAmount[seller][playerid], WeedPrice[seller][playerid], RPN(seller));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has bought %d grams of weed for $%d from you.", RPN(playerid), WeedAmount[seller][playerid], WeedPrice[seller][playerid]);
		SendClientMessage(seller, COLOR_LIGHTBLUE, string);
		WeedSeller[playerid] = -1;
		WeedPrice[seller][playerid] = 0;
		WeedAmount[seller][playerid] = 0;
	}
	else if(!strcmp(params, "cocaine", true))
	{
		new seller = cocaineSeller[playerid];
		if(seller == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you cocaine.");
		if(!IsPlayerNearPlayer(playerid, seller, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	    if(PlayerInfo[seller][pcocaine] < cocaineAmount[seller][playerid])
		{
		    cocaineSeller[playerid] = -1;
			cocainePrice[seller][playerid] = 0;
			cocaineAmount[seller][playerid] = 0;
			SendClientMessage(playerid, COLOR_GREY, "That player doesn't have that much cocaine on them.");
			SendClientMessage(seller, COLOR_GREY, "The trade has been cancelled as you don't have the cocaine you offered.");
			return 1;
		}
		if(cocainePrice[seller][playerid] > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		GiveDodMoney(playerid, -cocainePrice[seller][playerid]);
		GiveDodMoney(seller, cocainePrice[seller][playerid]);
		PlayerInfo[seller][pcocaine] -= cocaineAmount[seller][playerid];
		PlayerInfo[playerid][pcocaine] += cocaineAmount[seller][playerid];
		PlayerInfo[seller][pJobSkill][JOB_DDEALER] ++;
		format(string, sizeof(string), "* %s takes out a pack of cocaine, hands it to %s and takes $%d from him", RPN(seller), RPN(playerid), cocainePrice[seller][playerid]);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have bought %d grams of cocaine $%d from %s.", cocaineAmount[seller][playerid], cocainePrice[seller][playerid], RPN(seller));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has bought %d grams of cocaine for $%d from you.", RPN(playerid), cocaineAmount[seller][playerid], cocainePrice[seller][playerid]);
		SendClientMessage(seller, COLOR_LIGHTBLUE, string);
		cocaineSeller[playerid] = -1;
		cocainePrice[seller][playerid] = 0;
		cocaineAmount[seller][playerid] = 0;
	}
	else if(!strcmp(params, "ticket", true))
	{
		new playerb = TicketBy[playerid];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has written you a ticket.");
	    new amount = TicketPrice[playerb][playerid];
	    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
		if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		GiveDodMoney(playerid, -amount);
		GiveDodMoney(playerb, amount);
		format(string, sizeof(string), "* %s takes the ticket from %s and gives him some money.", RPN(playerid), RPN(playerb));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have paid $%d to %s for the ticket.", amount, RPN(playerb));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has paid $%d to you for the ticket.", RPN(playerid), amount);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
		TicketBy[playerid] = -1;
		TicketPrice[playerb][playerid] = 0;
	}
	else if(!strcmp(params, "vest", true))
	{
	    new playerb = VestBy[playerid], Float:A;
        if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a vest.");
        if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
   		if(Boxing[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't buy a vest in a boxing match.");
        new price = VestPrice[playerb][playerid];
        if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
        if(A > 50)
		{
			SendClientMessage(playerid, COLOR_GREY, "Your armor is already over 50.");
			SendClientMessage(playerb, COLOR_GREY, "Player's vest is already over 50, your offer has been cancelled.");
			VestPrice[playerb][playerid] = 0;
			VestBy[playerb] = -1;
			return 1;
		}
		GetPlayerArmour(playerid, A);
		GiveDodMoney(playerid, -price);
		GiveDodMoney(playerb, price);
		SetPlayerArmour(playerid, 50);
		format(string, sizeof(string), " You have paid $%d to %s for the vest.", price, RPN(playerb));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has paid $%d to you for the vest.", RPN(playerid), price);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	    VestPrice[playerb][playerid] = 0;
		VestBy[playerb] = -1;
	}
	else if(!strcmp(params, "fight", true))
	{
	    if(GetPlayerSkin(playerid) != 80 && GetPlayerSkin(playerid) != 81) return SendClientMessage(playerid, COLOR_GREY, "You are not wearing a boxing uniform.");
        if(GetPlayerFightingStyle(playerid) != FIGHT_STYLE_BOXING) return SendClientMessage(playerid, COLOR_GREY, "You must use the boxing fighting style to fight.");
		new playerb = BoxBy[playerid];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a fight.");
		if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
		if(BoxingMatch) return SendClientMessage(playerid, COLOR_GREY, "Another boxing match is going on.");
		// Setting Boxers
		Boxer[1] = playerb;
		pBoxer[playerb] = 1;
		Boxer[2] = playerid;
		pBoxer[playerid] = 2;
		// Setting them to boxing
		Boxing[playerb] = 1;
		Boxing[playerid] = 1;
		// Ending the boxing offer
		BoxBy[playerb] = -1;
		BoxBy[playerid] = -1;
		// Setting Their HP & Armor
		SetPlayerHealth(playerb, 100);
		SetPlayerArmour(playerb, 0);
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 0);
		// Setting their positions
		SetPlayerPos(playerb, 763.1202,2.4917,1001.5942); // Boxer 1 spot
		SetPlayerFacingAngle(playerb, 136.4230);
		SetCameraBehindPlayer(playerb);
	    SetPlayerPos(playerid, 758.5969,-1.9768,1001.5942); // Boxer 2 spot
	    SetPlayerFacingAngle(playerid, 315.0247);
	    SetCameraBehindPlayer(playerid);
	    // Freezing them
	    TogglePlayerControllable(playerb, 0);
		TogglePlayerControllable(playerid, 0);
		// Setting global box countdown
		BoxTime = 40;
		BoxingMatch = 1;
		// Timer to unfreeze them
		SetTimerEx("BoxCountDown", 1000, false, "ii", playerid, playerb);
		// Global Message
		SendClientMessageToAll(COLOR_WHITE, "Boxing News: A boxing match is starting in 40 seconds, place your bets in ganton gym.");
		// Removing Weapons
		SendClientMessage(playerb, COLOR_LIGHTRED, " You will recieve your weapons after the match.");
		SendClientMessage(playerid, COLOR_LIGHTRED, " You will recieve your weapons after the match.");
	}
	else if(!strcmp(params, "live", true))
	{
		new playerb = LiveBy[playerid];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a live news conference.");
		LiveBy[playerid] = -1;
		LiveRequest[playerb] = 0;
		Live[playerid] = 1;
		Live[playerb] = 1;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now on air, you can speak on live news using your normal chat.");
		SendClientMessage(playerb, COLOR_LIGHTBLUE, "You are now on air, you can speak on live news using your normal chat. (/live to end the conference)");
	}
	return 1;
}


CMD:cancel(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /cancel [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: faction | materials");
		return 1;
	}
	if(!strcmp(params, "faction", true))
	{
	    if(!Invited[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You haven't been invited to a faction.");
	    {
			PlayerInfo[playerid][pFac] = 0;
			PlayerInfo[playerid][pFacRank] = 0;
			PlayerInfo[playerid][pFacLeader] = 0;
			PlayerInfo[playerid][pFacDiv] = 0;
			PlayerInfo[playerid][pFacDivLeader] = 0;
			Invited[playerid] = 0;
			Faction[playerid] = 0;
			format(string, sizeof(string), " You have cancelled %s's faction invitation.", RPN(Inviter[playerid]));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has cancelled your faction invitation.", RPN(playerid));
			SendClientMessage(Inviter[playerid], COLOR_LIGHTBLUE, string);
	    }
	}
	else if(!strcmp(params, "family", true))
	{
	    if(!fInvited[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You haven't been invited to a family.");
	    {
			PlayerInfo[playerid][pFam] = 0;
			PlayerInfo[playerid][pFamRank] = 0;
			fInvited[playerid] = 0;
			Family[playerid] = 0;
			format(string, sizeof(string), " You have cancelled %s's family invitation.", RPN(fInviter[playerid]));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has cancelled your family invitation.", RPN(playerid));
			SendClientMessage(fInviter[playerid], COLOR_LIGHTBLUE, string);
	    }
	}
	else if(!strcmp(params, "materials", true))
	{
	    if(BeenOfferedMaterials[playerid])
	    {
			new playerb = BuyMaterialsFrom[playerid];
			if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
			format(string, sizeof(string), " You have cancelled %d's materials offer.", RPN(playerb));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has cancelled your materials offer.", RPN(playerid));
			SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
			SellMaterialsTo[playerb] = -1;
			BuyMaterialsFrom[playerid] = -1;
			BuyMaterialsAmount[playerid] = 0;
			BuyMaterialsPrice[playerid] = 0;
			BeenOfferedMaterials[playerid] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you materials.");
		    return 1;
		}
	}
	else if(!strcmp(params, "weapon", true))
	{
		if(BeenOfferedWeapon[playerid])
	    {
			new playerb = BuyWeaponFrom[playerid];
			if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
			format(string, sizeof(string), " You have cancelled %s's weapon offer.", RPN(playerb));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has cancelled your weapon offer.", RPN(playerid));
			SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
			SellWeaponTo[playerb] = -1;
			BuyWeaponFrom[playerid] = -1;
			BuyWeaponPrice[playerid] = 0;
			BeenOfferedWeapon[playerid] = 0;
			sellgunlowmats[playerid] = 0;
			sellgunmedmats[playerid] = 0;
			sellgunhighmats[playerid] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you a weapon.");
		    return 1;
		}
	}
	else if(!strcmp(params, "free", true))
	{
		if(!PlayerInfo[playerid][pPrison]) return SendClientMessage(playerid, COLOR_GREY, "You are not prisoned.");
		if(FreeBy[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to free you.");
		format(string, sizeof(string), " You have cancelled %s's prison sentence reducing offer.", RPN(FreeBy[playerid]));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " %s has cancelled your prison sentence reducing offer.", RPN(playerid));
	    SendClientMessage(FreeBy[playerid], COLOR_LIME, string);
		FreeTime[playerid] = 0;
		FreePrice[FreeBy[playerid]][playerid] = 0;
		FreeBy[playerid] = -1;
	}
	else if(!strcmp(params, "defend", true))
	{
		if(!PlayerInfo[playerid][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "You are not wanted.");
		if(DefendBy[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to defend you.");
		format(string, sizeof(string), " You have cancelled %s's defend offer.", RPN(DefendBy[playerid]));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " %s has cancelled your defend request.", RPN(playerid));
	    SendClientMessage(DefendBy[playerid], COLOR_LIME, string);
		DefendPrice[DefendBy[playerid]][playerid] = 0;
		DefendBy[playerid] = -1;
	}
	else if(!strcmp(params, "weed", true))
	{
		new seller = WeedSeller[playerid];
		if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(seller == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you weed.");
		format(string, sizeof(string), " You have cancelled %s's weed offer.", RPN(seller));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has cancelled your weed offer.", RPN(playerid));
		SendClientMessage(seller, COLOR_LIGHTBLUE, string);
		WeedSeller[playerid] = -1;
		WeedPrice[seller][playerid] = 0;
		WeedAmount[seller][playerid] = 0;
	}
    else if(!strcmp(params, "cocaine", true))
	{
		new seller = cocaineSeller[playerid];
		if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(seller == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you cocaine.");
		format(string, sizeof(string), " You have cancelled %s's cocaine offer.", RPN(seller));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has cancelled your cocaine offer.", RPN(playerid));
		SendClientMessage(seller, COLOR_LIGHTBLUE, string);
		cocaineSeller[playerid] = -1;
		cocainePrice[seller][playerid] = 0;
		cocaineAmount[seller][playerid] = 0;
	}
	else if(!strcmp(params, "contract", true))
	{
		if(IsAHitman(playerid))
		{
    	   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
			if(Hitman[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "You are not assigned to any contracts.");
			format(string, sizeof(string), "HitmanWarn: %s has cancelled their contract assignment on %s's head.", RPN(playerid), RPN(Hitman[playerid]));
			SendHitmanMessage(COLOR_YELLOW, string);
			Hitman[playerid] = -1;
		}
	}
	else if(!strcmp(params, "vest", true))
	{
	    new playerb = VestBy[playerid];
	    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
        if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a vest.");
        if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
		format(string, sizeof(string), " You have cancelled %s's vest offer.", RPN(playerb));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has cancelled your vest offer.", RPN(playerid));
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	    VestPrice[playerb][playerid] = 0;
		VestBy[playerb] = -1;
	}
	else if(!strcmp(params, "fight", true))
	{
		new playerb = BoxBy[playerid];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a fight.");
        format(string, sizeof(string), " You have canceled %s's boxing match offer.", RPN(playerb));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " %s has cancelled your boxing match offer.", RPN(playerid));
		SendClientMessage(playerb, COLOR_LIME, string);
		// Ending the boxing offer
		BoxBy[playerid] = -1;
	}
	else if(!strcmp(params, "live", true))
	{
		new playerb = LiveBy[playerid];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a live news conference.");
		LiveBy[playerid] = -1;
		LiveRequest[playerb] = 0;
		Live[playerid] = 0;
		Live[playerb] = 0;
		format(string, sizeof(string), " You have canceled %s's live news conference.", RPN(playerb));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " %s has canceled your live news conference.", RPN(playerid));
		SendClientMessage(playerb, COLOR_LIME, string);
	}
	return 1;
}

CMD:uninvite(playerid, params[])
{
	new playerb, string[128], idx = PlayerInfo[playerb][pFac];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a faction leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /uninvite [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac] != PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your faction.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't uninvite yourself.");
	FacInfo[idx][facMembers] --;
	if(PlayerInfo[playerb][pFacLeader])
	{
		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	}
	PlayerInfo[playerb][pFac] = 0;
	PlayerInfo[playerb][pFacRank] = 0;
	PlayerInfo[playerb][pFacLeader] = 0;
	PlayerInfo[playerb][pFacDuty] = 0;
	SetPlayerColor(playerb, TRANSPARENT_WHITE);
	format(string, sizeof(string), " You have kicked %s out of the {33AA33}%s {33CCFF}faction.", RPN(playerb), RPFNEx(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has kicked you out of the {33AA33}%s {33CCFF}faction, you are now a civilian.", RPN(playerid), RPFNEx(playerid));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:fackick(playerid, params[])
{
	new playerb, string[128], idx = PlayerInfo[playerb][pFac];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pFacMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fackick [playerid]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in a faction.");
	SetPlayerColor(playerb, TRANSPARENT_WHITE);
	format(string, sizeof(string), " You have kicked %s out of the {33AA33}%s {33CCFF}faction.", RPN(playerb), RPFNEx(playerb));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " Administrator %s has kicked you out of the {33AA33}%s {33CCFF}faction, you are now a civilian.", RPN(playerid), RPFNEx(playerb));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	FacInfo[idx][facMembers] --;
	if(PlayerInfo[playerb][pFacLeader])
	{
		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	}
	PlayerInfo[playerb][pFac] = 0;
	PlayerInfo[playerb][pFacRank] = 0;
	PlayerInfo[playerb][pFacLeader] = 0;
	PlayerInfo[playerb][pFacDuty] = 0;
	return 1;
}


CMD:finvite(playerid, params[])
{
	new playerb, string[128], idx = PlayerInfo[playerid][pFam];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a family leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /finvite [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFam]) return SendClientMessage(playerid, COLOR_GREY, "Player is already in a family.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't invite yourself.");
	// Inviting
	fInvited[playerb] = 1;
	fInviter[playerb] = playerid;
	Family[playerb] = idx;
	format(string, sizeof(string), " You have invited %s to join the {33AA33}%s {33CCFF}family.", RPN(playerb), FamInfo[idx][fName]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has invited you to join the {33AA33}%s {33CCFF}family. (/accept family) (/cancel family)", RPN(playerid), FamInfo[idx][fName]);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:funinvite(playerid, params[])
{
	new playerb, string[128], idx = PlayerInfo[playerid][pFam];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a family leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fuinvite [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFam] != PlayerInfo[playerid][pFam]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your family.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't unnvite yourself.");
	if(!strcmp(RPN(playerb), FamInfo[idx][fLeader], false)) return SendClientMessage(playerid, COLOR_GREY, "You cannot uninvite the family leader.");
	PlayerInfo[playerb][pFam] = 0;
	PlayerInfo[playerb][pFamRank] = 0;
	FamInfo[idx][fMembers] --;
	format(string, sizeof(string), " You have kicked %s out of the {33AA33}%s {33CCFF}family.", RPN(playerb), FamInfo[idx][fName]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has kicked you out of the {33AA33}%s {33CCFF}family.", RPN(playerid), FamInfo[idx][fName]);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);

	return 1;
}

CMD:invite(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a faction leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /invite [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is already in a faction.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't invite yourself.");
	// Inviting
	Invited[playerb] = 1;
	Inviter[playerb] = playerid;
	Faction[playerb] = PlayerInfo[playerid][pFac];
	format(string, sizeof(string), " You have invited %s to join the {33AA33}%s {33CCFF}faction.", RPN(playerb), RPFNEx(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has invited you to join the {33AA33}%s {33CCFF}faction. (/accept faction) (/cancel faction)", RPN(playerid), RPFNEx(playerid));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:setrank(playerid, params[])
{
	new playerb, rank, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a faction leader.");
	if(sscanf(params, "ui", playerb, rank)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setrank [playerid] [rank]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't change your rank.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac] != PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your faction.");
	if(rank < 0 || rank > 6) return SendClientMessage(playerid, COLOR_GREY, "Ranks are between 0 and 6.");
	if(PlayerInfo[playerb][pFacRank] == rank) return SendClientMessage(playerid, COLOR_GREY, "Player already has that rank.");
	if(PlayerInfo[playerb][pFacRank] < rank)
	{
	    PlayerInfo[playerb][pFacRank] = rank;
		format(string, sizeof(string), "You have {33AA33}promoted {33CCFF}%s to {33AA33}%s (%d){33CCFF}.", RPN(playerb), RPFRN(playerb), rank);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s has {33AA33}promoted {33CCFF}you to {33AA33}%s (%d){33CCFF}.", RPN(playerid), RPFRN(playerb), rank);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	}
	else if(PlayerInfo[playerb][pFacRank] > rank)
	{
	    PlayerInfo[playerb][pFacRank] = rank;
		format(string, sizeof(string), "You have {FF9900}demoted {33CCFF}%s to {FF9900}%s (%d){33CCFF}.", RPN(playerb), RPFRN(playerb), rank);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s has {FF9900}demoted {33CCFF}you to {FF9900}%s (%d){33CCFF}.", RPN(playerid), RPFRN(playerb), rank);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:adjustrankname(playerid, params[])
{
	new rank, name[32], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a faction leader.");
	if(sscanf(params, "is[32]", rank, name)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /adjustrankname [rank] [name]");
	switch(rank)
	{
	    case 0:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank0], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 0's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 1:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank1], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 1's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 2:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank2], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 2's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 3:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank3], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 3's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 4:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank4], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 4's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 5:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank5], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 5's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 6:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank6], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 6's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	}
	return 1;
}

CMD:dinvite(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacDivLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a division leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dinvite");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac] != PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your faction.");
	if(PlayerInfo[playerb][pFacDiv]) return SendClientMessage(playerid, COLOR_GREY, "Player is already in a division.");
	PlayerInfo[playerb][pFacDiv] = PlayerInfo[playerid][pFacDiv];
	PlayerInfo[playerb][pFacDivLeader] = 0;
	format(string, sizeof(string), "You have assigned %s to the {33AA33}%s {33CCFF}division.", RPN(playerb), RPFDN(playerb));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has assigned you to the {33AA33}%s {33CCFF}division.", RPN(playerid), RPFDN(playerb));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:duninvite(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacDivLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a division leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dinvite");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac] != PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your faction.");
	if(PlayerInfo[playerb][pFacDiv] != PlayerInfo[playerid][pFacDiv]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in in your division.");
	PlayerInfo[playerb][pFacDiv] = 0;
	PlayerInfo[playerb][pFacDivLeader] = 0;
	format(string, sizeof(string), "You have removed %s from the {33AA33}%s {33CCFF}division.", RPN(playerb), RPFDN(playerb));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has removed you from to the {33AA33}%s {33CCFF}division.", RPN(playerid), RPFDN(playerb));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:setdivision(playerid, params[])
{
	new playerb, division, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD faction leader.");
	if(sscanf(params, "ui", playerb, division))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: setdivision [playerid] [division]");
		format(string, sizeof(string), "DIVISIONS: 1) %s | 2) %s | 3) %s | 4) %s", FacInfo[1][fDiv1], FacInfo[1][fDiv2], FacInfo[1][fDiv3], FacInfo[1][fDiv4]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac] != PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your faction.");
	if(division < 0 || division > 4) return SendClientMessage(playerid, COLOR_GREY, "Divisions are between 1 and 4.");
	if(PlayerInfo[playerb][pFacDiv] == division) return SendClientMessage(playerid, COLOR_GREY, "Player is already in a division.");
    PlayerInfo[playerb][pFacDiv] = division;
    PlayerInfo[playerb][pFacDivLeader] = division;
	format(string, sizeof(string), "You have assigned %s to lead the {33AA33}%s {33CCFF}division.", RPN(playerb), RPFDN(playerb));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has assigned you to lead the {33AA33}%s {33CCFF}division.", RPN(playerid), RPFDN(playerb));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:adjustdivisionname(playerid, params[])
{
	new division, name[32], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD faction leader.");
	if(sscanf(params, "is[32]", division, name)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /adjustdivisionname [division] [name]");
	switch(division)
	{
	    case 1:
	    {
	        format(FacInfo[1][fDiv1], 32, "%s", name);
	        format(string, sizeof(string), "You have set division 1's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 2:
	    {
	        format(FacInfo[1][fDiv2], 32, "%s", name);
	        format(string, sizeof(string), "You have set division 2's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 3:
	    {
	        format(FacInfo[1][fDiv3], 32, "%s", name);
	        format(string, sizeof(string), "You have set division 3's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 4:
	    {
	        format(FacInfo[1][fDiv4], 32, "%s", name);
	        format(string, sizeof(string), "You have set division 4's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	}
	return 1;
}

CMD:admins(playerid, params[])
{
	new online, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 1) SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command!");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pHelper])
	    {
	        online ++;
	    }
	}
	format(string, sizeof(string), "|_____Intense Role-Play Admins Team_____|");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pAdmin])
	    {
	        format(string, sizeof(string), " %s %s ", RPALN(i), RPN(i));
	        SendClientMessage(playerid, COLOR_DARKRED, string);
	    }
	}
	return 1;
}



CMD:members(playerid, params[])
{
	new string[128], online;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFac])
	{
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pFac] == PlayerInfo[playerid][pFac])
		    {
		        online ++;
		    }
		}
		format(string, sizeof(string), "Online Faction Members: %d", online);
		SendClientMessage(playerid, COLOR_ORANGE, string);
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pFac] == PlayerInfo[playerid][pFac])
		    {
		        if(PlayerInfo[i][pFacLeader])
		        {
		            if(PlayerInfo[playerid][pFacLeader] && PlayerInfo[i][pFacDiv]) format(string, sizeof(string), "- [Leader] [%s] [%s (%d)] %s", RPFDN(i), RPFRN(i), PlayerInfo[i][pFacRank], RPN(i));
		            else format(string, sizeof(string), "- [Leader] [%s (%d)] %s", RPFRN(i), PlayerInfo[i][pFacRank], RPN(i));
		            if(PlayerInfo[playerid][pFac] == 3) format(string, sizeof(string), "- [Leader] [%s (%d)] %s (Success: %d | Fail: %d)", RPFRN(i), PlayerInfo[i][pFacRank], RPN(i), PlayerInfo[i][pCSuccess], PlayerInfo[i][pCFail]);
		        }
		        else
		        {
		            if(PlayerInfo[playerid][pFacLeader] && PlayerInfo[i][pFacDiv]) format(string, sizeof(string), "- [%s] [%s (%d)] %s", RPFDN(i), RPFRN(i), PlayerInfo[i][pFacRank], RPN(i));
		            else format(string, sizeof(string), "- [%s (%d)] %s", RPFRN(i), PlayerInfo[i][pFacRank], RPN(i));
  					if(PlayerInfo[playerid][pFac] == 3) format(string, sizeof(string), "- [%s (%d)] %s (Success: %d | Fail: %d)", RPFRN(i), PlayerInfo[i][pFacRank], RPN(i), PlayerInfo[i][pCSuccess], PlayerInfo[i][pCFail]);

				}
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    }
		}
	}
	if(PlayerInfo[playerid][pFam])
	{
	    online = 0;
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pFam] == PlayerInfo[playerid][pFam])
		    {
		        online ++;
		    }
		}
		format(string, sizeof(string), "Online Family Members: %d", online);
		SendClientMessage(playerid, COLOR_ORANGE, string);
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pFam] == PlayerInfo[playerid][pFam])
		    {
	            format(string, sizeof(string), "- [%s (%d)] %s", RPFaRN(i), PlayerInfo[i][pFamRank], RPN(i));
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    }
		}
	}
	return 1;
}

CMD:quitfaction(playerid, params[])
{
	new string[128], faction[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "You are not in a faction.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /quitfaction [confirm]");
	if(!strcmp(params, "confirm", true))
	{
		// Detecting Faction
		if(PlayerInfo[playerid][pFac] == 1) format(faction, sizeof(faction), "Los Santos Police Department");
		else if(PlayerInfo[playerid][pFac] == 2) format(faction, sizeof(faction), "Government");
		else if(PlayerInfo[playerid][pFac] == 3) format(faction, sizeof(faction), "Hitman Agency");
		else if(PlayerInfo[playerid][pFac] == 4) format(faction, sizeof(faction), "Los Santos News Agency");
		// Quitting Faction
  		new idx = PlayerInfo[playerid][pFac];
		if(PlayerInfo[playerid][pFacLeader])
		{
			format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
		}
		FacInfo[idx][facMembers] --;
		PlayerInfo[playerid][pFac] = 0;
		PlayerInfo[playerid][pFacRank] = 0;
		PlayerInfo[playerid][pFacLeader] = 0;
		format(string, sizeof(string), " You have quit the {33AA33}%s {33CCFF}faction, you are now a civilian.", faction);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:quitfamily(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFam]) return SendClientMessage(playerid, COLOR_GREY, "You are not in a  family.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /quitfamily [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    new idx = PlayerInfo[playerid][pFam];
		format(string, sizeof(string), " You have quit the {33AA33}%s {33CCFF}family.", FamInfo[idx][fName]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		FamInfo[idx][fMembers] --;
		PlayerInfo[playerid][pFam] = 0;
		PlayerInfo[playerid][pFamRank] = 0;
	}
	return 1;
}

CMD:san(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAReporter(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a news reporter.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /san [text]");
	if(AntiAdv(playerid, params)) return 1;
    format(string, sizeof(string), "** %s %s: %s", RPFRN(playerid), RPN(playerid), params);
	SendPlayerFactionMessage(playerid, 0, COLOR_LIGHTGREEN, string);
	Log("logs/NA.log", string);
	return 1;
}

CMD:news(playerid, params[])
{
	new string[128];
	if(!IsAReporter(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a news reporter.");
	if(!IsNewsVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You are not in a news vehicle.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /news [text]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "** [News] %s: %s", RPN(playerid), params);
	SendClientMessageToAll(COLOR_ORANGE, string);
	Log("logs/news.log", string);
	return 1;
}

CMD:newsvault(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAReporter(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a news reporter.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1202.8289,-762.5840,1073.1819)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the News Agency Vault.");
	format(string, sizeof(string), "[News Agency Vault]: The vault contains $%d.", NewsMoney);
	SendClientMessage(playerid, COLOR_DARKRED, string);
	return 1;
}

CMD:vaultwithdraw(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAReporter(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1202.8289,-762.5840,1073.1819)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the News Agency Vault.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /vaultwithdraw [amount]");
	if(amount > NewsMoney) return SendClientMessage(playerid, COLOR_GREY, "The vault doesn't have that much money inside it.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	NewsMoney -= amount;
	GiveDodMoney(playerid, amount);
	format(string, sizeof(string), "[News Agency Warning]: %s has withdrawn $%d from the vault, amount left: $%d.", RPN(playerid), amount, NewsMoney);
	SendPlayerFactionMessage(playerid, 0, COLOR_DARKRED, string);
	Log("logs/newsvault.log", string);
	return 1;
}

CMD:live(playerid, params[])
{
	new string[128], playerb;
	if(!IsAReporter(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a news reporter.");
	if(!IsNewsVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You are not in a news vehicle.");
	if(Live[playerid])
	{
	    foreach(Player, i)
	    {
	        if(Live[i] && i != playerid) playerb = i;
	    }
	    Live[playerid] = 0;
	    Live[playerb] = 0;
	    LiveConference = 0;
	    SendClientMessage(playerid, COLOR_LIGHTRED, "You have ended the live news conference.");
	    SendClientMessage(playerb, COLOR_LIGHTRED, "The live news conference has ended.");
	}
	else
	{
	    if(LiveRequest[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You have already offered someone a live news conference.");
	    if(LiveConference) return SendClientMessage(playerid, COLOR_GREY, "Another live news conference is already being held.");
		if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /live [playerid]");
		if(playerb == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't offer yourself to a live news conference.");
		if(LiveBy[playerb] != -1) return SendClientMessage(playerid, COLOR_GREY, "Player has been already offered a live news conference.");
		LiveBy[playerb] = playerid;
		LiveRequest[playerid] = 1;
		format(string, sizeof(string), " You have offered %s a live news conference.", RPN(playerb));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " News Reporter %s has offered you a live news conference. (/accept live) (/cancel live)", RPN(playerid));
		SendClientMessage(playerb, COLOR_LIME, string);
	}
	return 1;
}

CMD:r(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsAGov(playerid) && !IsMedic(playerid) && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/FBI agent/Government Official/Medic.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/r)adio [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(PlayerInfo[playerid][pFacDiv]){format(string, sizeof(string), "** [%s] %s %s: %s", RPFDN(playerid), RPFRN(playerid), RPN(playerid), params);}
	else {format(string, sizeof(string), "** %s %s: %s", RPFRN(playerid), RPN(playerid), params);}
	SendPlayerFactionMessage(playerid, 0, COLOR_RADIO, string);
	SetPlayerChatBubble(playerid,params,COLOR_RADIO,20.0,5000);
	if(IsACop(playerid)) Log("logs/NYPD.log", string);
	else if(IsAGov(playerid)) Log ("logs/GOV.log", string);
	else if(IsMedic(playerid)) Log("logs/LSFMD.log", string);
	else if(IsNG(playerid)) Log("logs/NG.log", string);
	return 1;
}

CMD:d(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid) && !IsAGov(playerid) && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an NYPD Oficer/Government Official/FBI Agent.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/d)epartments radio [text]");
	if(AntiAdv(playerid, params)) return 1;
	// Raido Message
	format(string, sizeof(string), "** [%s] %s %s: %s", RPFN(playerid),  RPFRN(playerid), RPN(playerid), params);
	SetPlayerChatBubble(playerid,params,COLOR_DEPTRADIO,20.0,5000);
	foreach(Player, i)
	{
	    if(IsACop(i) || IsAGov(i) || IsFBI(i) || IsNG(i))
	    {
			SendClientMessage(i, COLOR_DEPTRADIO, string);
	    }
	}
	Log("logs/departments.log", string);
	return 1;
}

CMD:rolldice(playerid, params[])
{
	new string[128], val1, val2;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pDice]) return SendClientMessage(playerid, COLOR_GREY, "You have no dice on you.");
	val1 = 1+random(6);
	val2 = 1+random(6);
    format(string, sizeof(string), "* %s rolls a pair of dice on the floor, the first dice shows %d while the other shows %d.", RPN(playerid), val1, val2);
	SendNearbyMessage(playerid, 4, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:prices(playerid, params[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 && BizInfo[idx][bType] != 2 && BizInfo[idx][bType] != 3 && BizInfo[idx][bType] != 4 && BizInfo[idx][bType] != 6 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside a business.");
	if(BizInfo[idx][bType] == 1)
	{
	    format(string, sizeof(string), "** %s's 24/7 Market menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
		SendClientMessage(playerid, COLOR_WHITE, " Cellphone ($100) | Phonebook ($50) | Dice ($20) | Cigar ($100)");
		SendClientMessage(playerid, COLOR_WHITE, " Speedometer ($200) | Sprunk ($30) | Spraycan ($100) | Rope ($60)");
		SendClientMessage(playerid, COLOR_WHITE, " Blindfold ($60) | WalkieTalkie ($200) | Smartphone($500)");
		SendClientMessage(playerid, COLOR_WHITE, " Camera ($300) | GasCan ($100)");
		//if(BizInfo[idx][bLevel] >= 5) SendClientMessage(playerid, COLOR_WHITE, " Radio ($300)");
	}
	else if(BizInfo[idx][bType] == 3)
	{
	    format(string, sizeof(string), "** %s's Ammunation menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
		SendClientMessage(playerid, COLOR_WHITE, " 1) Shotgun Ammo ($400) | 2) Rifle Ammo ($2000)");
		SendClientMessage(playerid, COLOR_WHITE, " 3) Gun Ammo ($800)");
		SendClientMessage(playerid, COLOR_WHITE, " 4) Light-Machinegun Ammo ($1200)");
		SendClientMessage(playerid, COLOR_WHITE, " 5) Heavy-Machinegun Ammo ($2200)");
		SendClientMessage(playerid, COLOR_WHITE, " 6) Vest ($1000)");
	}
	else if(BizInfo[idx][bType] == 4)
	{
	    format(string, sizeof(string), "** %s's Club menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
		SendClientMessage(playerid, COLOR_WHITE, "1) Sprunk ($50) | 2) Beer ($100) | 3) Vodka ($200)");
	}
	else if(BizInfo[idx][bType] == 6)
	{
	    format(string, sizeof(string), "** %s's Fast Food menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
		SendClientMessage(playerid, COLOR_WHITE, "1) Small Meal ($10) | 2) Medium Meal ($30) | 3) Big Meal ($50)");
	}
	return 1;
}


/*CMD:speedo(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pSpeedo]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a speedometer.");
	if(!Speedo[playerid])
	{
	    Speedo[playerid] = 1;
	    format(string, sizeof(string), "You have turned your speedometer {33AA33}on{33CCFF}.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else
	{
	    Speedo[playerid] = 0;
	    format(string, sizeof(string), "You have turned your speedometer {FF9900}off{33CCFF}.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}*/


CMD:namechange(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 361.8299,173.3985,1008.3828)) return SendClientMessage(playerid, COLOR_GREY, "You are not at the cityhall.");
	SSSShowDialog(playerid, 41);
	return 1;
}
CMD:agechange(playerid, params[])
{
    new string[128], age;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(sscanf(params, "i", age)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /agechange [18-80]");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 361.8299,173.3985,1008.3828)) return SendClientMessage(playerid, COLOR_GREY, "You are not at the cityhall.");
	if(age < 18 || age > 80)
	age = PlayerInfo[playerid][pAge];
	GiveDodMoney(playerid, PlayerInfo[playerid][pLevel] * -700);
    format(string, sizeof(string), "You've changed your age to %d, and you've charged %d for it", PlayerInfo[playerid][pAge], PlayerInfo[playerid][pLevel] * -700);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}
CMD:sexchange(playerid, params[])
{
    new string[128], sex;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(sscanf(params, "i", sex)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sexchange [1-Male / 2-Female]");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 361.8299,173.3985,1008.3828)) return SendClientMessage(playerid, COLOR_GREY, "You are not at the cityhall.");
	if(sex < 1 || sex > 2)
	if(sex == 1) format(string, sizeof(string), "Male");
    else if(sex == 2) format(string, sizeof(string), "Female");
	GiveDodMoney(playerid, PlayerInfo[playerid][pLevel] * -700);
	sex = PlayerInfo[playerid][pGender];
    format(string, sizeof(string), "You've changed your Gender to %s, and you've charged %d for it", string, PlayerInfo[playerid][pLevel] * -700);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}
CMD:phchange(playerid, params[])
{
	new string[128], number, File:file = fopen("cellphones.cfg", io_read);
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pHasCellphone]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a cellphone yet.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 361.8299,173.3985,1008.3828)) return SendClientMessage(playerid, COLOR_GREY, "You are not at the cityhall.");
	if(sscanf(params, "i", number)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /phchange [desired number]");
	if(number < -1) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == -1) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 0) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 1) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 2) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 3) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 4) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 5) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 6) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 8) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 9) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 10) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 11) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 12) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 13) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 14) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 15) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 16) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 17) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 18) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 19) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 20) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 21) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 22) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 23) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 24) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 25) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 26) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 27) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 28) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 29) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 30) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 31) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 32) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 33) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 34) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 35) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 36) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 37) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 38) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 39) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 40) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 41) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 42) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 43) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 44) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 45) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 46) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 47) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 48) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 49) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 50) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 50) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 51) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 52) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 53) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 54) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 55) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 56) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 57) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 58) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 59) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 60) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 61) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 62) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 63) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 64) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 65) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 66) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 67) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 68) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 69) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 70) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 71) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 72) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 73) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 74) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 75) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 76) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 77) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 78) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 79) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 80) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 81) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 82) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 83) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 84) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 85) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 86) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 87) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 89) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 90) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 91) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 91) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 92) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 93) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 94) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 95) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 96) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 97) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 98) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number == 99) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
	if(number > 99999999999) return SendClientMessage(playerid, COLOR_GREY, "Your number can't be low than 100 and more than 99999999999");
    if(PlayerInfo[playerid][pNumber] == number) return SendClientMessage(playerid, COLOR_GREY, "You already have this phone number.");
	new idx = 1;
	while(fread(file, string))
	{
	    if(strval(string) == number) return SendClientMessage(playerid, COLOR_GREY, "This number is already registered.");
	    if(strval(string) == PlayerInfo[playerid][pNumber])
	    {
			fdeleteline("cellphones.cfg", idx);
	    }
	    idx ++;
	}
	fclose(file);
	file = fopen("cellphones.cfg", io_append);
	format(string, sizeof(string), "%d\r\n", number);
	fwrite(file, string);
	fclose(file);
	if(!PlayerInfo[playerid][pNumber])
	{
	    SendClientMessage(playerid, COLOR_WHITE, " You have changed your Phone Number for free as it's the first time.");
	}
	else
	{
		GiveDodMoney(playerid, PlayerInfo[playerid][pLevel] * -1200);
		TaxMoney += 500;
        format(string, sizeof(string), " You've changed your number and you've been charged $%d.", PlayerInfo[playerid][pLevel] * -1200);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	PlayerInfo[playerid][pNumber] = number;
	return 1;
}
CMD:call(playerid, params[])
{
	new string[128], phonenumb;

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /call [phonenumber]");

	phonenumb = strval(params);

	if(PlayerInfo[playerid][pNumber] == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You don't have a cell phone.");
		return 1;
	}
	if(PhoneOnline[playerid] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Your phone is off.");
		return 1;
	}
	format(string, sizeof(string), "* %s takes out a cellphone.", RPN(playerid));
	SendNearbyMessage(playerid, 30.0, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	if(phonenumb == 911)
	{
		SendClientMessage(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /hangup to hang up.");
		SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Which service do you require, police or paramedic?");
		Mobile[playerid] = 911;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerAttachedObject(playerid, 9, 330, 6);
		return 1;
	}
	if(phonenumb == PlayerInfo[playerid][pNumber])
	{
		SendClientMessage(playerid, COLOR_WHITE, "  You just get a busy tone...");
		return 1;
	}
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're already in a call...");
		return 1;
	}
	foreach(Player, i)
	{
		if(PlayerInfo[i][pNumber] == phonenumb && phonenumb != 0)
		{
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PhoneOnline[giveplayerid] > 0)
					{
						SendClientMessage(playerid, COLOR_GREY, "That player's phone is switched off.");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Mobile[giveplayerid] != INVALID_PLAYER_ID)
					{
						SendClientMessage(playerid, COLOR_WHITE, "You just get a busy tone...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Spec[giveplayerid]!=0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "You just get a busy tone...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Mobile[giveplayerid] == INVALID_PLAYER_ID)
					{
						format(string, sizeof(string), "Your mobile is ringing - type /pickup to answer it. [Caller ID: %s]", RPN(playerid));
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						format(string, sizeof(string), "* %s's phone begins to ring.", RPN(i));
						SendClientMessage(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /hangup to hang up.");
						SendNearbyMessage(playerid, 30.0, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						CellTime[playerid] = 1;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						SetPlayerAttachedObject(playerid, 9, 330, 6);
						return 1;
					}
				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "Your call can't be completed as dialed, please check the number and try again.");
	return 1;
}

CMD:hangup(playerid,params[])
{
	new caller = Mobile[playerid];
	if((IsPlayerConnected(caller) && caller != INVALID_PLAYER_ID)|| caller == 911 || caller == 912 || caller == 913 || caller == 914)
	{
		if(caller < 500)
		{
			SendClientMessage(caller,  COLOR_WHITE, "   They hung up.");
			CellTime[caller] = 0;
			Mobile[caller] = INVALID_PLAYER_ID;
		}
		CellTime[playerid] = 0;
		SendClientMessage(playerid,  COLOR_WHITE, "   You hung up.");
		Mobile[playerid] = INVALID_PLAYER_ID;
		CellTime[playerid] = 0;
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
        RemovePlayerAttachedObject(caller, 9);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 9);
		return 1;
	}
	SendClientMessage(playerid,  COLOR_GREY, "   Your phone is in your pocket.");
	return 1;
}
CMD:pickup(playerid, params[])
{
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessage(playerid, COLOR_WHITE, "  you're already on a call...");
		return 1;
	}
	foreach(Player, i)
	{
		if(Mobile[i] == playerid)
		{
			Mobile[playerid] = i; //caller connecting
			SendClientMessage(i,  COLOR_WHITE, "   They picked up the call.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 9, 330, 6);
		}
	}
	return 1;
}
CMD:sms(playerid, params[])
{
	new number, string[128], text[64],done;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pHasCellphone]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a cellphone yet.");
	if(sscanf(params, "is[64]", number, text)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sms [number] [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(PhoneOff[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Your phone is turned off.");
	if(number == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid phone number.");
	if(!strlen(text)) return SendClientMessage(playerid, COLOR_GREY, "You haven't entered any text to SMS.");
	if(strlen(text) > 64) return SendClientMessage(playerid, COLOR_GREY, "You may only use 64 characters per SMS.");
	format(string, sizeof(string), "* %s takes out their cellphone and starts pressing some keys.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
		{
		    if(PlayerInfo[i][pCellphone] == number)
		    {
		        if(PhoneOff[i]) return SendClientMessage(playerid, COLOR_GREY, "Player has their phone turned off.");
		        format(string, sizeof(string), "* %s's cellphone beeps once.", RPN(i));
				SendNearbyMessage(i, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        format(string, sizeof(string), "[SMS TO] %s: %s, (Ph: %d)", RPN(i), text, number);
		        SendClientMessage(playerid, COLOR_YELLOW, string);
		        format(string, sizeof(string), "[SMS FROM] %s: %s, (Ph: %d)", RPN(playerid), text, PlayerInfo[playerid][pCellphone]);
		        SendClientMessage(i, COLOR_YELLOW, string);
		        GiveDodMoney(playerid, -1);
		        TaxMoney += 1;
				done = 1;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
				new log[256];
				format(log, sizeof(log), "%s to %s: %s", RPN(playerid), RPN(i), text);
				Log("logs/sms.log", log);
				foreach(Player, x)
				{
				    if(PlayerInfo[x][pAdmin] >= 6 && SMSes[x] && x != playerid && x != i)
				    {
				        format(log, sizeof(log), "[SMS] %s to %s: %s", RPN(playerid), RPN(i), text);
				        SendClientMessage(x, COLOR_YELLOW, log);
				    }
				}
		    }
	    }
	}
	if(done != 1)
	{
	    SendClientMessage(playerid, COLOR_GREY, "Number is not currently available.");
	}
	return 1;
}


/*CMD:smartphone(playerid, params[])
{
	new id, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHasCellphone] != 2) return SendClientMessage(playerid, COLOR_GREY, "You don't own a smartphone.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /smartphone [options]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: browse | music | advertise");
		return 1;
	}
	if(!strcmp(params, "browse", true, 6))
	{
	    if(!PlayerInfo[playerid][pInternet]) return SendClientMessage(playerid, COLOR_GREY, "Your smartphone's internet service is not currently running.");
		SSSShowDialog(playerid, 8);
		format(string, sizeof(string), "* %s opens the web browser via their smartphone.", RPN(playerid));
		SendNearbyMessage(playerid, 4, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		return 1;
	}
	else if(!strcmp(params, "music", true, 5))
	{
	    if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /smartphone music [songid] (0 = off)");
		switch(id)
		{
		    case 0: {StopAudioStreamForPlayer(playerid); return 1;}
		    case 1: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing '2pac-Soon as I get home'");
		    case 2: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Wiz Khalifa-Reefer Party'");
		    case 3: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Kottonmouth kings-King Klick'");
		    case 4: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Eazy E ft. 2pac ft. The Game ft. 50 Cent-How we do(Steevo Remix)'");
		    case 5: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing '2pac-Hit Em Up'");
		    case 6: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Wiz Khalifa ft.Too Short-On My Level'");
		    case 7: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Ice Cube-Why We Thugs'");
		    case 8: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Ice Cube-Smoke Some Weed'");
		    case 9: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Young Jeezy-Put On'");
		    case 10: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing '2pac-Ambitionz As A Ridah'");
		    case 11: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Wiz Khalifa ft.Tinie Tempah-Pass Out'");
		    case 12: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Wiz Khalifa-Black And Yellow'");
		    case 13: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Nero-Innocence'");
		    case 14: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Jay Cole-Nobody's Perfect'");
		    case 15: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'LMFAO-Sexy And I Know It'");
		    case 16: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Jojo-Marvin's Room'");
		    case 17: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Lil Debie ft.V-NASTY-Gotta Ball'");
		    case 18: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'The Weeknd-Rolling Stone'");
		    case 19: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Eazy E-Real Muthaphuckin' G's'");
		    case 20: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Dr. Dre ft.Snoop Doggy Dogg-Fuck Wit Dre Day'");
		    case 21: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'The Game ft.50 Cent-Hate It Or Love It'");
		    case 22: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'The Game-Dreams'");
		    case 23: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Notorious B.I.G-Notorious Thugs'");
		}
		if(id == 0)format(string, sizeof(string), "* %s takes off their headset and stops the song being played on their smartphone.", RPN(playerid));
		else format(string, sizeof(string), "* %s puts on their headset and plays a song on their smartphone.", RPN(playerid));
		SendNearbyMessage(playerid, 4, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        return 1;
	}
	else if(!strcmp(params, "advertise", true, 9))
	{
	    if(!PlayerInfo[playerid][pInternet]) return SendClientMessage(playerid, COLOR_GREY, "Your smartphone's internet service is not currently running.");
		SSSShowDialog(playerid, 15);
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}


CMD:internet(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pHasCellphone]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a smartphone.");
    if(!PlayerInfo[playerid][pInternet])
    {
        if(PlayerInfo[playerid][pMoney] < 150) return SendClientMessage(playerid, COLOR_GREY, "You need $150 to activate the internet service.");
        GiveDodMoney(playerid, -150);
        TaxMoney += 150;
        PlayerInfo[playerid][pInternet] = 1;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have {33CCFF}activated {33CCFF}your smartphone's internet service.");
        SendClientMessage(playerid, COLOR_WHITE, " You will be charged $50 each paycheck for the internet service, you was also charged $150 for service activation.");
    }
    else
    {
        PlayerInfo[playerid][pInternet] = 0;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have {FF9900}deactivated {33CCFF}your smartphone's internet service.");
    }
	return 1;
}
*/



CMD:wt(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pWT]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a WalkieTalkie.");
	if(PlayerInfo[playerid][pWTC] == 0) return SendClientMessage(playerid, COLOR_GREY, "Your WalkieTalkie is turned off.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /wt [text]");
	if(AntiAdv(playerid, params)) return 1;
	foreach(Player, i)
	{
		if(PlayerInfo[playerid][pWTC] == PlayerInfo[i][pWTC])
		{
			format(string, sizeof(string), "** WalkieTalkie %s: %s **", RPN(playerid), params);
			SendClientMessage(i, COLOR_NEWS, string);
		}
	}
	SetPlayerChatBubble(playerid,params,COLOR_NEWS,20.0,5000);
	return 1;
}

CMD:wtc(playerid, params[])
{
	new string[128], channel;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pWT]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a WalkieTalkie.");
	if(sscanf(params, "i", channel)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /wtc [channel]");
	PlayerInfo[playerid][pWTC] = channel;
	if(channel == 0) format(string, sizeof(string), " You have turned your WalkieTalkie off.");
	else format(string, sizeof(string), " You have adjust your WalkieTalkie's channel to %d Hz.", channel);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:blindfold(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pBlindfold]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a blindfold.");
	if(sscanf(params, "u",  playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /blindfold [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to blindfold someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not the vehicle driver.");
	if(!IsPlayerTied(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not tied.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't blindfold yourself.");
	Blindfolded[playerb] = 1;
	PlayerInfo[playerid][pBlindfold]--;
	SetPlayerCameraPos(playerb, -833.5241,-1358.8575,86.9054);
	SetPlayerCameraLookAt(playerb, -833.5241,-1358.8575,0);
	GameTextForPlayer(playerb, "~r~Blindfolded", 2500, 3);
	format(string, sizeof(string), "* %s takes out a blindfold and puts it on %s's eyes.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " Type /unblindfold to remove the blindfold on someone's eyes.");
	return 1;
}

CMD:unblindfold(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u",  playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /unblindfold [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to blindfold someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not the vehicle driver.");
	if(!Blindfolded[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player is not blindfolded.");
	if(playerid == playerb && Tied[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "You can't unblindfold yourself while being tied.");
	Blindfolded[playerb] = 0;
	SetCameraBehindPlayer(playerb);
	GameTextForPlayer(playerb, "~G~Unblindfolded", 2500, 3);
	format(string, sizeof(string), "* %s takes out a blindfold and puts it on %s's eyes.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " Type /unblindfold to remove the blindfold on someone's eyes.");
	return 1;
}

CMD:eject(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u",  playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /eject [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to tie someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not the vehicle driver.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't  eject yourself.");
	RemovePlayerFromVehicle(playerb);
	format(string, sizeof(string), "* %s has thrown %s out of the vehicle.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:sb(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle.");
	if(seatbelt[playerid] == 0){
	format(string, sizeof(string), "* %s puts his seatbelt on.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " Type /sb again to put your seatbelt off.");
	seatbelt[playerid] = 1;
	}
	else if(seatbelt[playerid] == 1){
	format(string, sizeof(string), "* %s puts his seatbelt off.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	seatbelt[playerid] = 0;
	}
	return 1;
}

CMD:tie(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pRope]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a rope.");
	if(sscanf(params, "u",  playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /tie [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to tie someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not the vehicle driver.");
	if(IsPlayerTied(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is already tied.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't tie yourself.");
	TogglePlayerTied(playerb, 1);
	PlayerInfo[playerid][pRope]--;
	TogglePlayerControllable(playerb, 0);
	SetCameraBehindPlayer(playerb);
	GameTextForPlayer(playerb, "~r~Tied", 2500, 3);
	format(string, sizeof(string), "* %s takes out a rope and ties %s after a strong resistance.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " Type /untie to untie someone.");
	return 1;
}

CMD:untie(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u",  playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /untie [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerTied(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not tied.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't untie yourself.");
	TogglePlayerTied(playerb, 0);
	TogglePlayerControllable(playerb, 1);
	SetCameraBehindPlayer(playerb);
	GameTextForPlayer(playerb, "~g~Untied", 2500, 3);
	format(string, sizeof(string), "* %s takes out a knife and cuts the rope around %s.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:colorcar(playerid, params[])
{
	new string[128], col1, col2;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pSpray]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a spraycan.");
	if(sscanf(params, "ii", col1, col2)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /colorcar [color1] [color2]");
	if(col1 < 0 || col1 > 126 || col2 < 0 || col2 > 126) return SendClientMessage(playerid, COLOR_GREY, "Colors are between 1 and 126.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to color it.");
	ChangeVehicleColor(GetPlayerVehicleID(playerid), col1, col2);
	if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	{
	    PlayerInfo[playerid][vC1] = col1;
	    PlayerInfo[playerid][vC2] = col2;
	}
	else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	{
	    PlayerInfo[playerid][vVC1] = col1;
	    PlayerInfo[playerid][vVC2] = col2;
	}
	PlayerInfo[playerid][pSpray] --;
	format(string, sizeof(string), "* %s has changed the color of the vehicle he's inside.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:paintcar(playerid, params[])
{
	new string[128], col1;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pSpray]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a spraycan.");
	if(sscanf(params, "ii", col1)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /paintcar [paintjobid]");
	if(col1 < -1 || col1 > 6) return SendClientMessage(playerid, COLOR_GREY, "Paintjobs are between 0 and 6.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to paint it.");
	ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), col1);
	PlayerInfo[playerid][vPJ] = col1;
	PlayerInfo[playerid][pSpray] --;
	format(string, sizeof(string), "* %s has changed the paintjob of the vehicle he's inside.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:buyviptoys(playerid, params[])
{
	new option, index, model, string[128];
	if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!IsPlayerInRangeOfPoint(playerid, 2, 1817.5709,-1317.3975,131.9368)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the VIP Toys shop.");
	if(sscanf(params, "ii", option, index))
	{
		ShowPlayerDialog(playerid, 9182, DIALOG_STYLE_MSGBOX, "[Usage]: /buyviptoys [model] [slot (0-9)]", "Hair (1-5) | Headphones (12-15) | Guitar (16)\nTopHat (17) | Motorcycle Helmets (18-22) | Smoke Puff (23) \n\nBronze VIP: Slots 0~3 (4 Slots)\nSilver VIP: Slots 0~5 (6 Slots)\nGold VIP: Slots 0~7 (8 Slots)\nPlatinum VIP: Slots 0~9 (10 Slots)", "Close", "Close");
	    return 1;
	}
	if(option < 1 || option > 85) return SendClientMessage(playerid, COLOR_GREY, "Toys are between 1 and 75.");
	if(index < 0 || index > 9) return SendClientMessage(playerid, COLOR_GREY, "Slots are between 0 and 9.");
	if(index > 1 && PlayerInfo[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 2 slots.");
	if(index > 3 && PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 4 slots.");
	if(index > 5 && PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 6 slots.");
	if(index > 7 && PlayerInfo[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 8 slots.");
	switch(option)
	{
	    case 1 : model = 18640; case 2 : model = 18975; case 3 : model = 19077; case 4 : model = 19136; case 5 : model = 19274;
	    case 6 : model = 18643; case 7 : model = 19080; case 8 : model = 19081; case 9 : model = 19082; case 10: model = 19083;
	    case 11: model = 19084; case 12: model = 19421; case 13: model = 19422; case 14: model = 19423; case 15: model = 19424;
	    case 16: model = 19317; case 17: model = 19352; case 18: model = 18645; case 19: model = 18976; case 20: model = 18977;
		case 21: model = 18978; case 22: model = 18979; case 23: model = 18675;
	}
	if(PlayerInfo[playerid][pMoney] < 300) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
	PlayerInfo[playerid][pToyModel][index] = model;
	GiveDodMoney(playerid, -300);
	format(string, sizeof(string), "* %s has bought a VIP toy.", RPN(playerid), params);
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 	SendClientMessage(playerid, COLOR_WHITE, " You can view and edit your toys using /toys.");
	return 1;
}

CMD:buypolicetoys(playerid, params[])
{
	new option, index, model;
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a LEO.");
    if(!IsPlayerInRangeOfPoint(playerid, 2.2,253.2935,76.9233,1003.6406)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Police Accessories shop.");
	if(sscanf(params, "ii", option, index))
	{
		ShowPlayerDialog(playerid, 9183, DIALOG_STYLE_MSGBOX, "[Usage]: /buypolicetoys [model] [slot (0-9)]", "Police Vest(1) | SWAT Helmet(2) | Police Shield(3) | Tazer (4) | Police Radio (5)\n\nBronze VIP: Slots 0~3 (4 Slots)\nSilver VIP: Slots 0~5 (6 Slots)\nGold VIP: Slots 0~7 (8 Slots)\nPlatinum VIP: Slots 0~9 (10 Slots)", "Close", "Close");
	    return 1;
	}
	if(option < 1 || option > 5) return SendClientMessage(playerid, COLOR_GREY, "Toys are between 1 and 75.");
	if(index < 0 || index > 9) return SendClientMessage(playerid, COLOR_GREY, "Slots are between 0 and 9.");
	if(index > 1 && PlayerInfo[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 2 slots.");
	if(index > 3 && PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 4 slots.");
	if(index > 5 && PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 6 slots.");
	if(index > 7 && PlayerInfo[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 8 slots.");
	switch(option)
	{
	    case 1 : model = 19142; case 2 : model = 19141; case 3 : model = 18637; case 4 : model = 18642; case 5 : model = 330;
	}
	PlayerInfo[playerid][pToyModel][index] = model;
 	SendClientMessage(playerid, COLOR_WHITE, " You can view and edit your toys using /toys.");
	return 1;
}

CMD:buytoys(playerid, params[])
{
	new option, index, model, idx = GetPlayerVirtualWorld(playerid)-100, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 2 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside a Clothes Shop.");
	if(sscanf(params, "ii", option, index))
	{
		ShowPlayerDialog(playerid, 9182, DIALOG_STYLE_MSGBOX, "[Usage]: /buytoys [model] [slot (0-9)]", "Glasses (1-30) | Watches (31-45) | Bandanas (46-65) | Hats (66-75)\nMasks (76-85)\n Police Vest (86)\n\nRegular Players: Slots 0~1 (2 Slots)\nBronze VIP: Slots 0~3 (4 Slots)\nSilver VIP: Slots 0~5 (6 Slots)\nGold VIP: Slots 0~7 (8 Slots)\nPlatinum VIP: Slots 0~9 (10 Slots)", "Close", "Close");
	    return 1;
	}
	if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
	if(option < 1 || option > 85) return SendClientMessage(playerid, COLOR_GREY, "Toys are between 1 and 86.");
	if(index < 0 || index > 9) return SendClientMessage(playerid, COLOR_GREY, "Slots are between 0 and 9.");
	if(index > 1 && PlayerInfo[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 2 slots.");
	if(index > 3 && PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 4 slots.");
	if(index > 5 && PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 6 slots.");
	if(index > 7 && PlayerInfo[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 8 slots.");
	switch(option)
	{
	    case 1 : model = 19006; case 2 : model = 19007; case 3 : model = 19008; case 4 : model = 19009; case 5 : model = 19010; // Glasses
	    case 6 : model = 19011; case 7 : model = 19012; case 8 : model = 19013; case 9 : model = 19014; case 10: model = 19015;
	    case 11: model = 19016; case 12: model = 19017; case 13: model = 19018; case 14: model = 19019; case 15: model = 19020;
	    case 16: model = 19021; case 17: model = 19022; case 18: model = 19023; case 19: model = 19024; case 20: model = 19025;
	    case 21: model = 19026; case 22: model = 19027; case 23: model = 19028; case 24: model = 19029; case 25: model = 19030;
	    case 26: model = 19031; case 27: model = 19032; case 28: model = 19033; case 29: model = 19034; case 30: model = 19035;
	    case 31: model = 19039; case 32: model = 19040; case 33: model = 19041; case 34: model = 19042; case 35: model = 19043; // Watches
	    case 36: model = 19044; case 37: model = 19045; case 38: model = 19046; case 39: model = 19047; case 40: model = 19048;
	    case 41: model = 19049; case 42: model = 19050; case 43: model = 19051; case 44: model = 19052; case 45: model = 19053;
	    case 46: model = 18891; case 47: model = 18892; case 48: model = 18893; case 49: model = 18894; case 50: model = 18895; // Bandanas
	    case 51: model = 18896; case 52: model = 18897; case 53: model = 18898; case 54: model = 18899; case 55: model = 18900;
	    case 56: model = 18901; case 57: model = 18902; case 58: model = 18903; case 59: model = 18904; case 60: model = 18905;
	    case 61: model = 18906; case 62: model = 18907; case 63: model = 18908; case 64: model = 18909; case 65: model = 18910;
	    case 66: model = 18926; case 67: model = 18927; case 68: model = 18928; case 69: model = 18929; case 70: model = 18930; // Hats
	    case 71: model = 18931; case 72: model = 18932; case 73: model = 18933; case 74: model = 18934; case 75: model = 18935;
	    case 76: model = 18911; case 77: model = 18912; case 78: model = 18913; case 79: model = 18914; case 80: model = 18915; // Masks
	    case 81: model = 18916; case 82: model = 18917; case 83: model = 18918; case 84: model = 18919; case 85: model = 18920;
	    case 86 : model = 19142;
	}
	if(PlayerInfo[playerid][pMoney] < 300) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
	PlayerInfo[playerid][pToyModel][index] = model;
	GiveDodMoney(playerid, -300);
	format(string, sizeof(string), "* %s has bought a toy for $300.", RPN(playerid), params);
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 	SendClientMessage(playerid, COLOR_WHITE, " You can view and edit your toys using /toys.");
	return 1;
}

CMD:toys(playerid, params[])
{
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SSSShowDialog(playerid, 23);
	return 1;
}
/*CMD:buyclothes(playerid, params[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 2 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside a Clothes Shop.");
	//if(sscanf(params, "i", skin)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /buyclothes [skinid]");
	if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
	if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
	//if(skin < 0 || skin > 299 || skin == 0 || skin == 274 || skin == 275 || skin == 276 || skin == 277  || skin == 278 || skin == 279 || skin == 280 || skin == 281 || skin == 282 || skin == 283
	//|| skin == 284 || skin == 285 || skin == 286 || skin == 287 || skin == 288) return SendClientMessage(playerid, COLOR_GREY, "Invalid skin id.");
	for(new f=1; f<MAX_FAMILIES; f++)
	{
	    if(FamInfo[f][fTaken])
	    {
			for(new s=0; s<7; s++)
			{
			    if(FamInfo[f][fSkins][s] == skin && PlayerInfo[playerid][pFam] != f) return SendClientMessage(playerid, COLOR_GREY, "This skin is restricted to a family.");
			}
	    }
	}
	ShowModelSelectionMenu(playerid, skinlist, "Select Skin");
	BizInfo[idx][bMoney] += 100;
	BizInfo[idx][bProducts] --;
	GiveDodMoney(playerid, -100);
	return 1;
}*/
CMD:buyclothes(playerid, params[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, string[128], skin;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 2 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside a Clothes Shop.");
	if(sscanf(params, "i", skin)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /buyclothes [skinid]");
	if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
	if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
	if(skin < 0 || skin > 299 || skin == 0 || skin == 274 || skin == 275 || skin == 276 || skin == 277  || skin == 278 || skin == 279 || skin == 280 || skin == 281 || skin == 282 || skin == 283
	|| skin == 284 || skin == 285 || skin == 286 || skin == 287 || skin == 288) return SendClientMessage(playerid, COLOR_GREY, "Invalid skin id.");
	for(new f=1; f<MAX_FAMILIES; f++)
	{
	    if(FamInfo[f][fTaken])
	    {
			for(new s=0; s<7; s++)
			{
			    if(FamInfo[f][fSkins][s] == skin && PlayerInfo[playerid][pFam] != f) return SendClientMessage(playerid, COLOR_GREY, "This skin is restricted to a family.");
			}
	    }
	}
	PlayerInfo[playerid][pModel] = skin;
	SetPlayerSkin(playerid, skin);
	BizInfo[idx][bMoney] += 100;
	BizInfo[idx][bProducts] --;
	GiveDodMoney(playerid, -100);
	format(string, sizeof(string), "* %s has bought new clothes for $100.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}


CMD:buy(playerid, params[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, string[128], type, price;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 && BizInfo[idx][bType] != 2 && BizInfo[idx][bType] != 3 && BizInfo[idx][bType] != 4 && BizInfo[idx][bType] != 6 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside a business.");
	if(BizInfo[idx][bType] == 1)
	{
		if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /buy [item]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
		if(!strcmp(params, "cellphone", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    new randphone = random(100) + random(8999);//minimum 100  max 9999
			PlayerInfo[playerid][pNumber] = randphone;
		    PlayerInfo[playerid][pHasCellphone] = 1;
			BizInfo[idx][bMoney] += 100;
			BizInfo[idx][bProducts] --;
			BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -100);
			format(string, sizeof(string), "* %s has bought a cellphone for $100.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " (( Check /stats to check your new Phone Number ))");
		}
		if(!strcmp(params, "phonebook", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pPhonebook] = 1;
		    BizInfo[idx][bMoney] += 50;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -50);
			format(string, sizeof(string), "* %s has bought an electronic phonebook for $50.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /phonebook to find someone's number.");
		}
		if(!strcmp(params, "dice", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 20) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pDice] = 1;
		    BizInfo[idx][bMoney] += 20;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -20);
			format(string, sizeof(string), "* %s has bought a pair of special dice for $20.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /rolldice to roll a dice.");
		}
		if(!strcmp(params, "cigar", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pCigar] = 5;
		    BizInfo[idx][bMoney] += 100;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -100);
			format(string, sizeof(string), "* %s has bought 5 cuban cigars for $100.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /use to smoke a cigar.");
		}
		// Level 2: Speedometer | Sprunk | Spraycan | Rope
		if(!strcmp(params, "speedometer", true))
		{
			if(PlayerInfo[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pSpeedo] = 1;
		    BizInfo[idx][bMoney] += 200;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -200);
			format(string, sizeof(string), "* %s has bought a speedometer for $200.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /tog to toggle speedometer on/off.");
		}
		if(!strcmp(params, "sprunk", true))
		{
	        if(PlayerInfo[playerid][pMoney] < 30) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pSprunk] = 5;
		    BizInfo[idx][bMoney] += 30;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -30);
			format(string, sizeof(string), "* %s has bought 5 redbull cans for $30.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /sprunk to drink a sprunk can.");
		}
		if(!strcmp(params, "spraycan", true))
		{
	        if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pSpray] = 10;
		    BizInfo[idx][bMoney] += 100;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -100);
			format(string, sizeof(string), "* %s has bought a duko spraycan $100.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /colorcar & /paintcar to color/paint a car.");
		}
		if(!strcmp(params, "rope", true))
		{
	        if(PlayerInfo[playerid][pMoney] < 60) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pRope] = 5;
		    BizInfo[idx][bMoney] += 60;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -60);
			format(string, sizeof(string), "* %s has bought 5 strong ropes for $60.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /tie to tie someone.");
		}
		// Level 3: Blindfold | WalkieTalkie
		if(!strcmp(params, "blindfold", true))
		{
	    	if(PlayerInfo[playerid][pMoney] < 60) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pBlindfold] = 5;
		    BizInfo[idx][bMoney] += 60;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -60);
			format(string, sizeof(string), "* %s has bought 5 blindfolds for $600.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /blindfold to blindfold someone.");
		}
		if(!strcmp(params, "walkietalkie", true))
		{
	        if(PlayerInfo[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pWT] = 1;
		    BizInfo[idx][bMoney] += 200;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -200);
			format(string, sizeof(string), "* %s has bought a WalkieTalkie for $200.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /wtc to adjust the WalkieTalkie's channel, /wt to talk on it.");
		}
		if(!strcmp(params, "smartphone", true))
		{
	        if(PlayerInfo[playerid][pMoney] < 500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pHasCellphone] = 2;
		    BizInfo[idx][bMoney] += 500;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -500);
			format(string, sizeof(string), "* %s has bought a smartphone for $500.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /smartphone to view your new cellphone commands.");
		}
		// Level 4: Camera | Gas
		if(!strcmp(params, "camera", true))
		{
	        if(PlayerInfo[playerid][pMoney] < 300) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
			GiveDodWeapon(playerid, 43, 999999);
		    BizInfo[idx][bMoney] += 300;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -300);
			format(string, sizeof(string), "* %s has bought a professional camera for $300.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can start taking photos using your camera.");
		}
		if(!strcmp(params, "gascan", true))
		{
	        if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pGas] = 1;
		    BizInfo[idx][bMoney] += 100;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -100);
			format(string, sizeof(string), "* %s has bought a gas can for $100.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /gascan inside a vehicle anywhere now.");
		}
		// Level 5: Radio
		/*if(!strcmp(params, "radio", true))
		{
		    if(BizInfo[idx][bLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "This 24/7 Market doesn't have this product yet.");
	        if(PlayerInfo[playerid][pMoney] < 600) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pRadio] = 1;
		    BizInfo[idx][bMoney] += 600;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveDodMoney(playerid, -600);
			format(string, sizeof(string), "* %s has bought a radio for $600.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /music to play music using your radio.");
		}*/
	}
	else if(BizInfo[idx][bType] == 3)
	{
		if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /buy [type]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
		if(type == 1) price = 400;
		else if(type == 2) price = 2000;
		else if(type == 3) price = 800;
		else if(type == 4) price = 1200;
		else if(type == 5) price = 2200;
		else if(type == 6) price = 1000;
		else if(type == 7) price = 5000;
		if(type < 1 || type > 7) return SendClientMessage(playerid, COLOR_GREY, "Products are between 1 and 7");
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		switch(type)
		{
		    case 1:
		    {
				if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 26 && GetPlayerWeapon(playerid) != 27) return SendClientMessage(playerid, COLOR_GREY, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 25) GiveDodWeapon(playerid, 25, 120);
				if(GetPlayerWeapon(playerid) == 26) GiveDodWeapon(playerid, 26, 120);
				if(GetPlayerWeapon(playerid) == 27) GiveDodWeapon(playerid, 27, 120);
				format(string, sizeof(string), "* %s has bought 120 shotgun bullets for $%d.", RPN(playerid), price);
		    }
		    case 2:
		    {
				if(GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34) return SendClientMessage(playerid, COLOR_GREY, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 33) GiveDodWeapon(playerid, 33, 200);
				if(GetPlayerWeapon(playerid) == 34) GiveDodWeapon(playerid, 34, 200);
				format(string, sizeof(string), "* %s has bought 100 rifle bullets for $%d.", RPN(playerid), price);
		    }
		    case 3:
		    {
				if(GetPlayerWeapon(playerid) != 22 && GetPlayerWeapon(playerid) != 23 && GetPlayerWeapon(playerid) != 24) return SendClientMessage(playerid, COLOR_GREY, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 22) GiveDodWeapon(playerid, 22, 120);
				if(GetPlayerWeapon(playerid) == 23) GiveDodWeapon(playerid, 23, 120);
				if(GetPlayerWeapon(playerid) == 24) GiveDodWeapon(playerid, 24, 120);
				format(string, sizeof(string), "* %s has bought 120 gun bullets for $%d.", RPN(playerid), price);
		    }
		    case 4:
		    {
				if(GetPlayerWeapon(playerid) != 28 && GetPlayerWeapon(playerid) != 29 && GetPlayerWeapon(playerid) != 32) return SendClientMessage(playerid, COLOR_GREY, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 28) GiveDodWeapon(playerid, 28, 200);
				if(GetPlayerWeapon(playerid) == 29) GiveDodWeapon(playerid, 29, 200);
				if(GetPlayerWeapon(playerid) == 32) GiveDodWeapon(playerid, 32, 200);
				format(string, sizeof(string), "* %s has bought 200 light-machinegun bullets for $%d.", RPN(playerid), price);
		    }
		    case 5:
		    {
				if(GetPlayerWeapon(playerid) != 30 && GetPlayerWeapon(playerid) != 31) return SendClientMessage(playerid, COLOR_GREY, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 30) GiveDodWeapon(playerid, 30, 200);
				if(GetPlayerWeapon(playerid) == 31) GiveDodWeapon(playerid, 31, 200);
				format(string, sizeof(string), "* %s has bought 200 heavy-machinegun bullets for $%d.", RPN(playerid), price);
		    }
		    case 6:
		    {
		        new Float:Armour; GetPlayerArmour(playerid, Armour);
		        if(Armour >= 80) return SendClientMessage(playerid, COLOR_GREY, "You don't need a vest.");
				SetPlayerArmour(playerid, 80);
				format(string, sizeof(string), "* %s has bought a vest for $%d.", RPN(playerid), price);
		    }
		}
		GiveDodMoney(playerid, -price);
		BizInfo[idx][bMoney] += price;
		BizInfo[idx][bProducts] --;
		BizInfo[idx][bSold] ++;
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		return 1;
	}
	else if(BizInfo[idx][bType] == 4)
	{
		if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /buy [type]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
		if(type == 1) price = 50;
		else if(type == 2) price = 100;
		else if(type == 3) price = 200;
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		switch(type)
		{
		    case 1:
		    {
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		        format(string, sizeof(string), "* %s has bought a sprunk can $%d.", RPN(playerid), price);
		    }
		    case 2:
		    {
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		        format(string, sizeof(string), "* %s has bought a bottle of beer for $%d.", RPN(playerid), price);
		    }
		    case 3:
		    {
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		        format(string, sizeof(string), "* %s has bought a bottle of vodka for $%d.", RPN(playerid), price);
		    }
		}
		GiveDodMoney(playerid, -price);
		BizInfo[idx][bMoney] += price;
		BizInfo[idx][bProducts] --;
		BizInfo[idx][bSold] ++;
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(BizInfo[idx][bType] == 6)
	{
		if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /buy [type]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
		if(type == 1) price = 10;
		else if(type == 2) price = 30;
		else if(type == 3) price = 50;
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		new Float:pH;
		switch(type)
		{
		    case 1:
		    {
		        GetPlayerHealth(playerid, pH);
		        SetPlayerHealth(playerid, pH+20);
		        GetPlayerHealth(playerid, pH);
		        if(pH > 100) SetPlayerHealth(playerid, 100);
		        format(string, sizeof(string), "* %s has bought a small meal for $%d.", RPN(playerid), price);
		    }
		    case 2:
		    {
		        GetPlayerHealth(playerid, pH);
		        SetPlayerHealth(playerid, pH+40);
		        GetPlayerHealth(playerid, pH);
		        if(pH > 100) SetPlayerHealth(playerid, 100);
		        format(string, sizeof(string), "* %s has bought a medium meal for $%d.", RPN(playerid), price);
		    }
		    case 3:
		    {
		        SetPlayerHealth(playerid, 100);
		        format(string, sizeof(string), "* %s has bought a large meal for $%d.", RPN(playerid), price);
		    }
		}
		GiveDodMoney(playerid, -price);
		BizInfo[idx][bMoney] += price;
		BizInfo[idx][bProducts] --;
		BizInfo[idx][bSold] ++;
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}

/*CMD:store(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(IsPlayerInRangeOfPoint(playerid, 2, 2271.6699,-1742.9114,13.5469))
	{
	    SSSShowDialog(playerid, 34);
	}
	return 1;
}*/

CMD:phonebook(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pPhonebook]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a phonebook.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /phonebook [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerid][pNumber]) return SendClientMessage(playerid, COLOR_GREY, "Player has no cellphone.");
	format(string, sizeof(string), "[Phonebook] Name: %s - Ph: %d", RPN(playerb), PlayerInfo[playerb][pNumber]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:ad(playerid, params[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, price = strlen(params) * 6, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pLevel] < 2) SendClientMessage(playerid, COLOR_GREY, "You need to be at least level 2 to create an advertisement.");
	if(PlayerInfo[playerid][pADMute] > 0) return SendClientMessage(playerid, COLOR_GREY, "You are muted from advertising.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 5 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside an Advertisement Agency.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /ad [advertisement]");
	if(strlen(params) > 64) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters allowed per advertisement are 64.");
	if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
	if(HasAD[playerid]) return SendClientMessage(playerid, COLOR_GREY, " You must wait for your advertisement to be published before making a new one.");
	if(AdQueue == MAX_ADS-1) return SendClientMessage(playerid, COLOR_GREY, " There are no queue slots for your advertisement.");
	// Advertisement
	HasAD[playerid] = 1;
	if(LastAd) SendClientMessage(playerid, COLOR_LIGHTBLUE, " Your advertisement has been placed in the queue, wait for about 60 seconds maximum.");
    format(AD[AdQueue], 128, "Advertisement: %s, Contact: %s - Ph: %d", params, RPN(playerid), PlayerInfo[playerid][pNumber]);
    iAD[AdQueue] = 0;
    format(iAdName[AdQueue], 32, "%s", BizInfo[idx][bOwner]);
    AdQueue++;
    GiveDodMoney(playerid, -price);
    BizInfo[idx][bMoney] += price/2;
    BizInfo[idx][bProducts] --;
    NewsMoney = price/2;
    format(string, sizeof(string), "* %s has placed an advertisement in the queue for $%d.", RPN(playerid), price);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " You have been charged $5 per character.");
	return 1;
}

CMD:enter(playerid, params[])
{
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	for(new idx=0; idx<MAX_DOORS; idx++) // Dynamic Doors
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]))
	    {
	        if(DoorInfo[idx][dIInt] == 83 && DoorInfo[idx][dIVW] == 8473 && BankBlock)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "You can't enter the bank as it is being robbed at the moment.");
	            return 1;
	        }
	        if(DoorInfo[idx][dCInt])
	        {
	            GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
				TogglePlayerControllable(playerid, 0);
	            SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
	            PlayerInfo[playerid][pSpawnFreeze] = 1;
	        }
	        PlayerInfo[playerid][pSpawnFreeze] = 0;
	        SetPlayerInterior(playerid, DoorInfo[idx][dIInt]);
	        SetPlayerVirtualWorld(playerid, DoorInfo[idx][dIVW]);
	        SetPlayerFacingAngle(playerid, DoorInfo[idx][dIA]);
	        SetCameraBehindPlayer(playerid);
	        SetPlayerPos(playerid, DoorInfo[idx][dIX], DoorInfo[idx][dIY], DoorInfo[idx][dIZ]);
	        return 1;
	    }
	}
	if(IsPlayerInRangeOfPoint(playerid,8.0,1554.6433,-1675.7488,16.1953)) //NYPD
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,6);
				SetPlayerPos(playerid,246.8240,62.6125,1003.6406);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,1498.6595,-2182.5081,14.1682)) //lsfmd
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,2408.0505,-1330.7889,879.7735);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,1462.5475,-1012.7440,26.8438)) //Bank
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,2305.5840,-16.0986,26.7496);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,649.2127,-1360.7007,13.5856)) //News
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1217.1357,-751.8235,1073.1819);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,2229.4753,-1721.8873,13.5673)) //gym
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,5);
				SetPlayerPos(playerid,772.111999,-3.898649,1000.728820);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,2352.0059,-1170.1798,28.0511)) //crack
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,5);
				SetPlayerPos(playerid,2350.339843,-1181.649902,1027.976562);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
    if(IsPlayerInRangeOfPoint(playerid,8.0,2165.950927,-1671.177368,15.073158)) //drug house
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,5);
				SetPlayerPos(playerid,318.589019,1114.814331,1083.882812);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,1481.050415,-1772.313476,18.795755)) //Cityhall
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,3);
				SetPlayerPos(playerid,389.894622,173.829742,1008.382812);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,962.3975,-1433.5745,14.0537)) //DMV
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,1);
				SetPlayerPos(playerid,962.3975,-1433.5745,14.0537);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,1568.619873,-1690.286743,5.890625)) //PoliceDep
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,6);
				SetPlayerPos(playerid,246.388671,87.625534,1003.640625);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,1564.787231,-1666.779052,28.395605)) //PoliceDep
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,6);
				SetPlayerPos(playerid,242.435791,66.315818,1003.640625);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,1570.653930,-1337.241455,16.484375)) //Star Tower
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1548.597290,-1364.126464,326.218292);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,330.9090,-1510.1177,36.0391)) //FBI
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1552.0837,-1684.6237,1723.1050);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,1154.0901,-1772.2408,16.5992)) //NG
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1811.1195,-1515.6746,5700.4287);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
	if(IsPlayerInRangeOfPoint(playerid,8.0,1219.3258,-1812.1523,16.5938)) //univ
			{
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1427.7701,-1917.0431,1227.8771);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			}
        	return 1;
}
CMD:entergarage(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
 	for(new idx=1; idx<MAX_GARAGES; idx++) // Dynamic Garages
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
	    {
	        new vehicleid = GetPlayerVehicleID(playerid);
		    if(!GarageInfo[idx][gStatus] && PlayerInfo[playerid][pGarage] != idx) return SendClientMessage(playerid, COLOR_GREY, "This garage is locked.");
		    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        format(string, sizeof(string), "* %s lifts the door and enters the garage.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SetPlayerVirtualWorld(playerid, idx+500);
			if(GarageInfo[idx][gLevel] == 1)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
				    SetVehiclePos(vehicleid, -1749.8448,677.3413,105.1406);
			        SetCameraBehindPlayer(playerid);
			        SetVehicleVirtualWorld(vehicleid, idx+500);
				}
				else
				{
				    SetPlayerPos(playerid, -1749.8448,677.3413,105.1406);
				    SetPlayerInterior(playerid, 0);
				    SetCameraBehindPlayer(playerid);
				}
			}
			return 1;
		}
	}
	return 1;
}
CMD:exitgarage(playerid, params[])
{
	new done, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(IsPlayerInRangeOfPoint(playerid, 20, -1749.8448,677.3413,105.1406)) // Garages
    {
        new idx;
        idx = GetPlayerVirtualWorld(playerid)-500;
        if(!done && idx < MAX_GARAGES && GarageInfo[idx][gLevel])
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
			format(string, sizeof(string), "* %s lifts the door up and exits the garage.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			//if(IsPlayerInAnyVehicle(playerid))
			{
			    SetVehiclePos(vehicleid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
		        SetCameraBehindPlayer(playerid);
		        SetVehicleVirtualWorld(vehicleid, 0);
		        SetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
			    SetPlayerInterior(playerid, 0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid, 0);
			    PutPlayerInVehicle(playerid, vehicleid, 0);
			}
			else
			{
			    SetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
			    SetPlayerInterior(playerid, 0);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerVirtualWorld(playerid, 0);
			}
	        done = 1;
        }
	}
	return 1;
}
CMD:exit(playerid, params[])
{
	new done, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    for(new idx=0; idx<MAX_DOORS; idx++) // Dynamic Doors
	{
	    if(!done && IsPlayerInRangeOfPoint(playerid, 2, DoorInfo[idx][dIX], DoorInfo[idx][dIY], DoorInfo[idx][dIZ]) && GetPlayerVirtualWorld(playerid) == DoorInfo[idx][dIVW] && GetPlayerInterior(playerid) == DoorInfo[idx][dIInt])
	    {
	        if(BankRobber[playerid] && BankBlock && GetPlayerInterior(playerid) == 83 && GetPlayerVirtualWorld(playerid) == 8473)
	        {
	       	    new Rob = BankRobber[playerid]-1;
			    DisablePlayerCheckpoint(playerid);
				BankRobbersCount --;
				format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
				DeliverMoney[playerid] = 0;
				//
				foreach(Player, i)
				{
				    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
				    {
						if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
						else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
						else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
						else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
						else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
					}
				}
				format(string, sizeof(string), "** %s has went out of the bank before loading money and has failed the robbery. **", RPN(playerid));
				SendRobberyMessage(COLOR_LIGHTRED, string);
				SendCopMessage(COLOR_LIGHTRED, string);
				BankRobber[playerid] = 0;
				if(BankRobbersCount == 0)
				{
					TextDrawHideForAll(Textdraw0);
					TextDrawHideForAll(Textdraw1);
					TextDrawHideForAll(Textdraw2);
					TextDrawHideForAll(Textdraw3);
					TextDrawHideForAll(Textdraw4);
					TextDrawHideForAll(Textdraw5);
//					BankRobbery = 0;
					RobberyStarted = 0;
					format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
					SendClientMessageToAll(COLOR_YELLOW, string);
					TotalRobbers = 0;
					new copsonline;
					foreach(Player, i)
					{
					    if(IsACop(i)) copsonline++;
					}
					foreach(Player, i)
					{
					    if(IsACop(i))
					    {
							new Saved = (TotalRobbers*10000-(TotalStolen*10000));
							GiveDodMoney(i, Saved/copsonline);
							format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
							SendClientMessage(i, COLOR_LIME, string);
					    }
					}
				}
	            return 1;
	        }
	        if(DoorInfo[idx][dCExt])
	        {
	            GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
				TogglePlayerControllable(playerid, 0);
	            SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
	            PlayerInfo[playerid][pSpawnFreeze] = 1;
	        }
	        PlayerInfo[playerid][pSpawnFreeze] = 0;
	        SetPlayerInterior(playerid, DoorInfo[idx][dOInt]);
	        SetPlayerVirtualWorld(playerid, DoorInfo[idx][dOVW]);
	        SetPlayerFacingAngle(playerid, DoorInfo[idx][dOA]);
	        SetCameraBehindPlayer(playerid);
	        SetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
	        done = 1;
	    }
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,246.6680,63.2917,1003.6406)) //NYPD
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 1553.5128,-1675.7775,16.1953);
			    SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,2408.0505,-1330.7889,879.7735)) //lsfmd
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 1498.6595,-2182.5081,14.1682);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1217.1357,-751.8235,1073.1819)) //news
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 649.2127,-1360.7007,13.5856);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,2305.5840,-16.0986,26.7496)) //Bank
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 1462.409545,-1011.160156,26.843750);
			    SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,772.111999,-3.898649,1000.728820)) //gym
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 2229.4753,-1721.8873,13.5673);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,2350.339843,-1181.649902,1027.976562)) //Cocaine Lab
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 2352.0059,-1170.1798,28.0511);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,318.589019,1114.814331,1083.882812)) //Drug House
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 2165.950927,-1671.177368,15.073158);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,389.894622,173.829742,1008.382812)) //cityhall
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 1481.050415,-1772.313476,18.795755);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1957.368408,-1134.920776,987.529846)) //NG Locker Room
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 2045.037719,-1908.032592,13.546875);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,246.388671,87.625534,1003.640625)) //PoliceDep
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 1568.619873,-1690.286743,5.890625);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,242.435791,66.315818,1003.640625)) //PoliceDep
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 1564.787231,-1666.779052,28.395605);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1548.597290,-1364.126464,326.218292)) //Star Tower
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 1570.653930,-1337.241455,16.484375);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1552.0837,-1684.6237,1723.1050)) //FBI
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 330.9090,-1510.1177,36.0391);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1811.1195,-1515.6746,5700.4287)) //NG
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 1154.0901,-1772.2408,16.5992);
                SetPlayerVirtualWorld(playerid, 0);
			}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1811.1195,-1515.6746,5700.4287)) //NG
			{
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, 1154.0901,-1772.2408,16.5992);
                SetPlayerVirtualWorld(playerid, 0);
			}
        	return 1;
}

CMD:paintball(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHours] < 2) return SendClientMessage(playerid, COLOR_GREY, "You need atleast 2 respect points to join paintball.");
	if(IsPlayerInRangeOfPoint(playerid, 2, 1310.1110,-1368.5656,13.517786)) //Paintball Entrance
	if(sscanf(params,"s[32]", params))
	{
     SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /paintball [option]");
	    SendClientMessage(playerid, COLOR_GREY, "OPTIONS: join | quit");
	    return 1;
	}
	if(!strcmp(params, "join", true))
	{
	    PlayerPaintballing[playerid] = 2;
			GetPlayerWeaponData(playerid, 0, pbeGuns[0][playerid], pbeGunsA[0][playerid]);
			GetPlayerWeaponData(playerid, 1, pbeGuns[1][playerid], pbeGunsA[1][playerid]);
			GetPlayerWeaponData(playerid, 2, pbeGuns[2][playerid], pbeGunsA[2][playerid]);
			GetPlayerWeaponData(playerid, 3, pbeGuns[3][playerid], pbeGunsA[3][playerid]);
			GetPlayerWeaponData(playerid, 4, pbeGuns[4][playerid], pbeGunsA[4][playerid]);
			GetPlayerWeaponData(playerid, 5, pbeGuns[5][playerid], pbeGunsA[5][playerid]);
			GetPlayerWeaponData(playerid, 6, pbeGuns[6][playerid], pbeGunsA[6][playerid]);
			GetPlayerWeaponData(playerid, 7, pbeGuns[7][playerid], pbeGunsA[7][playerid]);
			GetPlayerWeaponData(playerid, 8, pbeGuns[8][playerid], pbeGunsA[8][playerid]);
			GetPlayerWeaponData(playerid, 9, pbeGuns[9][playerid], pbeGunsA[9][playerid]);
			GetPlayerWeaponData(playerid, 10, pbeGuns[10][playerid], pbeGunsA[10][playerid]);
			GetPlayerWeaponData(playerid, 11, pbeGuns[11][playerid], pbeGunsA[11][playerid]);
	    StartPaintball();
	}
	else if(!strcmp(params, "quit", true))
	if(PlayerPaintballing[playerid] == 1)
    {
	    SetPlayerPos(playerid,1310.1110,-1368.5656,13.517786);
	    SetPlayerHealth(playerid, 100);
	    SetPlayerArmour(playerid, 0);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
		SendClientMessage(playerid, COLOR_LIGHTRED, "You've quited the paintball.");
		GunsBeingRemoved[playerid] = 1;
		ResetPlayerWeapons(playerid);
	    PlayerPaintballing[playerid] = 0;
		    GiveDodWeapon(playerid, pbeGuns[0][playerid], pbeGunsA[0][playerid]);
		    GiveDodWeapon(playerid, pbeGuns[1][playerid], pbeGunsA[1][playerid]);
		    GiveDodWeapon(playerid, pbeGuns[2][playerid], pbeGunsA[2][playerid]);
		    GiveDodWeapon(playerid, pbeGuns[3][playerid], pbeGunsA[3][playerid]);
		    GiveDodWeapon(playerid, pbeGuns[4][playerid], pbeGunsA[4][playerid]);
		    GiveDodWeapon(playerid, pbeGuns[5][playerid], pbeGunsA[5][playerid]);
		    GiveDodWeapon(playerid, pbeGuns[6][playerid], pbeGunsA[6][playerid]);
		    GiveDodWeapon(playerid, pbeGuns[7][playerid], pbeGunsA[7][playerid]);
		    GiveDodWeapon(playerid, pbeGuns[8][playerid], pbeGunsA[8][playerid]);
		    GiveDodWeapon(playerid, pbeGuns[9][playerid], pbeGunsA[9][playerid]);
		    GiveDodWeapon(playerid, pbeGuns[10][playerid], pbeGunsA[10][playerid]);
		    GiveDodWeapon(playerid, pbeGuns[11][playerid], pbeGunsA[11][playerid]);
		for(new icon = 0;icon < 99;icon++)
		{
		    RemovePlayerMapIcon(playerid, icon);
		}
	}
	return 1;
}


CMD:stats(playerid, params[])
{
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	ShowStats(playerid, playerid);
	return 1;
}

CMD:inv(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	format(string, sizeof(string), "Credits of Intense Role-Play");
	SendClientMessage(playerid, COLOR_BLUE, string);
	format(string, sizeof(string), "Gamemode Scripted by Blade_Longwei!");
	SendClientMessage(playerid, COLOR_BLUE, string);
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	return 1;
}

CMD:bizstats(playerid, params[])
{
	new string[128], playerb = playerid, status[16], status2[16];
	// Business Status for non-owners
	if(PlayerInfo[playerb][pBiz]) format(status, sizeof(status), "%s", RBS(PlayerInfo[playerb][pBiz]));
	else if(!PlayerInfo[playerb][pBiz]) format(status, sizeof(status), "None");
	if(PlayerInfo[playerb][pVBiz]) format(status2, sizeof(status2), "%s", RBS(PlayerInfo[playerb][pVBiz]));
	else if(!PlayerInfo[playerb][pVBiz]) format(status2, sizeof(status2), "None");
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "_____________________________________________________");
	format(string, sizeof(string), "Businesses of %s", RPN(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Business 1: %s | ID: %s | Status: %s | Products: %s | Vault: %s", RBT(PlayerInfo[playerb][pBiz]), RPBK(playerb), status, RPBP(playerb), RPBM(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Business 2: %s | ID: %s | Status: %s | Products: %s | Vault: %s", RBT(PlayerInfo[playerb][pVBiz]), RPVIPBK(playerb), status2, RPVIPBP(playerb), RPVIPBM(playerb));
	SendClientMessage(playerid, COLOR_FADE2, string);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "_____________________________________________________");
	return 1;
}

CMD:helpme(playerid, params[])
{
    new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHelper]) return SendClientMessage(playerid, COLOR_GREY, "You can't submit a help request as a helper.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /helpme [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(HelpTime[playerid] > 0)
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before making a help message again.", HelpTime[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	format(string, sizeof(string), "Help Report from {FF6347}[%d] {FFFF91}%s: %s", playerid, RPN(playerid), params);
	SendHelperMessage(COLOR_REPORT, 1, string);
	format(string, sizeof(string), "Help Report from [%d] %s: %s", playerid, RPN(playerid), params);
	Log("logs/hreports.log", string);
	SendClientMessage(playerid, COLOR_YELLOW, "Your help request have been sent to the online helpers, Please be patient.");
	HelpTime[playerid] = 25;
	SetTimerEx("HelpTimer", 1000, false, "i", playerid);
	return 1;
}

CMD:report(playerid, params[])
{
    new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /report [text]");
	if(PlayerInfo[playerid][pRMute] > 0) return SendClientMessage(playerid, COLOR_GREY, "You are muted from reporting.");
	if(AntiAdv(playerid, params)) return 1;
	if(strlen(params) > 128) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters limit is 128.");
	if(ReportTime[playerid] > 0)
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before making a report message again.", ReportTime[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
 	format(string, sizeof(string), "Report from {FF6347}[%d] {FFFF91}%s: %s", playerid, RPN(playerid), params);
	SendAdminMessage(COLOR_REPORT, 1, string);
	format(string, sizeof(string), "Report from [%d] %s: %s", playerid, RPN(playerid), params);
	Log("logs/reports.log", string);
	SendClientMessage(playerid, COLOR_ORANGE, "Your report have been sent to the online admins, Please be patient.");
	ReportTime[playerid] = 25;
	SetTimerEx("ReportTimer", 1000, false, "i", playerid);
	return 1;
}


CMD:b(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /b [text] (Local OOC Chat)");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "%s: (( %s ))", RPN(playerid), params);
	SendNearbyMessage(playerid, 10, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	Log("logs/chat.log", string);
	return 1;
}

CMD:s(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/s)hout [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(strlen(PlayerInfo[playerid][pAccent])) format(string, sizeof(string), "%s shouts: [%s Accent] %s!", RPN(playerid), PlayerInfo[playerid][pAccent], params);
	else format(string, sizeof(string), "%s shouts: %s!", RPN(playerid), params);
	SendNearbyMessage(playerid, 30, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	Log("logs/chat.log", string);
	return 1;
}

CMD:l(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/l)ow [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(strlen(PlayerInfo[playerid][pAccent])) format(string, sizeof(string), "%s mummbles: [%s Accent] %s", RPN(playerid), PlayerInfo[playerid][pAccent], params);
	else format(string, sizeof(string), "%s mumbles: %s", RPN(playerid), params);
	SendNearbyMessage(playerid, 1.5, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	Log("logs/chat.log", string);
	return 1;
}

CMD:w(playerid, params[])
{
    new playerb, text[128], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "us[128]", playerb, text)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/w)hisper [playerid] [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!strlen(text)) return SendClientMessage(playerid, COLOR_GREY, "You haven't entered any text to whisper.");
	if(IsPlayerNearPlayer(playerid, playerb, 1))
	{

		if(strlen(PlayerInfo[playerid][pAccent])) format(string, sizeof(string), "Whisper to %s: [%s Accent] %s", RPN(playerb), PlayerInfo[playerid][pAccent], text);
		else format(string, sizeof(string), "Whisper to %s: %s", RPN(playerb), text);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		if(strlen(PlayerInfo[playerid][pAccent])) format(string, sizeof(string), "Whisper from %s: [%s Accent] %s", RPN(playerid), PlayerInfo[playerid][pAccent], text);
		else format(string, sizeof(string), "Whisper from %s: %s", RPN(playerid), text);
		SendClientMessage(playerb, COLOR_YELLOW, string);
		new log[256];
		format(log, sizeof(log), "%s to %s: %s", RPN(playerid), RPN(playerb), text);
		Log("logs/whisper.log", log);
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pAdmin] >= 6 && Whispers[i] && i != playerid && i != playerb)
		    {
		        format(log, sizeof(log), "[WHISPER] %s to %s: %s", RPN(playerid), RPN(playerb), text);
		        SendClientMessage(i, COLOR_YELLOW, log);
		    }
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not near that player.");
	}
	return 1;
}

CMD:me(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /me [action]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "* %s %s", RPN(playerid), params);
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:trollme(playerid, params[])
{
	new playerb, text[128], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "us[128]", playerb, text)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /trollme [playerid] [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!strlen(text)) return SendClientMessage(playerid, COLOR_GREY, "You haven't entered any text.");
	format(string, sizeof(string), "* %s %s", RPN(playerb), text);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 	return 1;
}

CMD:trolldo(playerid, params[])
{
    new playerb, text[128], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "us[128]", playerb, text)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /trolldo [playerid] [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!strlen(text)) return SendClientMessage(playerid, COLOR_GREY, "You haven't entered any text.");
	format(string, sizeof(string), "* %s (( %s ))", text, RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 	return 1;
}

CMD:do(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /me [action]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "* %s (( %s ))", params, RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

// ANIMATIONS

CMD:animlist(playerid, params[])
{
	return cmd_animhelp(playerid, params);
}

CMD:animhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________________________________");
	SendClientMessage(playerid,COLOR_WHITE,"Available Animations:");
	SendClientMessage(playerid,0xB4B5B7FF,"/handsup /handsdown /drunk /bomb /laugh /lookout /dj /skate /dance /crossarms /fucku");
	SendClientMessage(playerid,0xB4B5B7FF,"/hide /vomit /wave /taichi /kiss /robman /reload /deal /fallover /cocaine");
	SendClientMessage(playerid,0xBFC0C2FF,"/chat /dance /gift /piss /lean /cpr /cry /cheer /pedmove /wank /bitchslap");
	SendClientMessage(playerid,0xCBCCCEFF,"/slapass /fuckme /bj /rap /hitch /stand /greet /followme /getjiggy");
	SendClientMessage(playerid,0xD8D8D8FF,"/what /signal /crabs /salute /stop /washhands /gesture /hurt /showoff /dive /relax");
	SendClientMessage(playerid,0xD8D8D8FF,"/checktime /rob /sitdown /sleep /smoke /nobreath /sit");
	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________________________________");
	return 1;
}

CMD:sit(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sit [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sit [1-5]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"BEACH","bather",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:nobreath(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /nobreath [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sit [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PED","IDLE_tired",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"FAT","IDLE_tired",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:sitdown(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sitdown [1-7]");
	if(animid < 1 || animid > 7) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sitdown [1-7]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"Attractors","Stepsit_in",4.0,0,0,0,1,0); // Not looping
		case 2: LoopingAnim(playerid,"CRIB","PED_Console_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"INT_HOUSE","LOU_In",4.0,0,0,0,1,0); // Not looping
		case 4: LoopingAnim(playerid,"MISC","SEAT_LR",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"MISC","Seat_talk_01",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"MISC","Seat_talk_02",4.0,1,0,0,0,0);
		case 7: LoopingAnim(playerid,"ped","SEAT_down",4.0,0,0,0,1,0); // Not looping
	}
	return 1;
}

CMD:handsup(playerid, params[])
{
    new string[128];
   	if(IsPlayerCuffed(playerid) || IsPlayerTazed(playerid) || IsPlayerTied(playerid) || Boxing[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't do that at this time.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	format(string, sizeof(string), "* %s puts their hands up.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " You can put your hands down again using /handsdown.");
	return 1;
}

CMD:handsdown(playerid, params[])
{
	new string[128];
	if(IsPlayerCuffed(playerid) || IsPlayerTazed(playerid) || IsPlayerTied(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't do that at this time.");
	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GREY, "Your hands are already down.");
	ClearAnimations(playerid);
	format(string, sizeof(string), "* %s puts their hands down.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:dance(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dance [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dance [1-4]");
	switch(animid)
	{
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	}
	return 1;
}

CMD:crossarms(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /crossarms [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /crossarms [1-5]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
		case 2: LoopingAnim(playerid, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);
		case 3: LoopingAnim(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 0, 1, 1, 1, -1);
		case 4: LoopingAnim(playerid,"GRAVEYARD","mrnM_loop",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:getjiggy(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /getjiggy [1-10]");
	if(animid < 1 || animid > 10) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /getjiggy [1-10]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"DANCING","DAN_Down_A",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"DANCING","DAN_Left_A",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"DANCING","DAN_Loop_A",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"DANCING","DAN_Right_A",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"DANCING","DAN_Up_A",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"DANCING","dnce_M_a",4.0,1,0,0,0,0);
		case 7: LoopingAnim(playerid,"DANCING","dnce_M_b",4.0,1,0,0,0,0);
		case 8: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 9: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 10: LoopingAnim(playerid,"DANCING","dnce_M_d",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:pedmove(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /pedmove[1-26]");
	if(animid < 1 || animid > 26) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /pedmove [1-26]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PED","JOG_femaleA",4.0,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","JOG_maleA",4.0,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"PED","run_fat",4.0,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","run_fatold",4.0,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","run_old",4.0,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"PED","Run_Wuzi",4.0,1,1,1,1,1);
		case 8: LoopingAnim(playerid,"PED","swat_run",4.0,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"PED","WALK_fat",4.0,1,1,1,1,1);
		case 10: LoopingAnim(playerid,"PED","WALK_fatold",4.0,1,1,1,1,1);
		case 11: LoopingAnim(playerid,"PED","WALK_gang1",4.0,1,1,1,1,1);
		case 12: LoopingAnim(playerid,"PED","WALK_gang2",4.0,1,1,1,1,1);
		case 13: LoopingAnim(playerid,"PED","WALK_old",4.0,1,1,1,1,1);
		case 14: LoopingAnim(playerid,"PED","WALK_shuffle",4.0,1,1,1,1,1);
		case 15: LoopingAnim(playerid,"PED","woman_run",4.0,1,1,1,1,1);
		case 16: LoopingAnim(playerid,"PED","WOMAN_runbusy",4.0,1,1,1,1,1);
		case 17: LoopingAnim(playerid,"PED","WOMAN_runfatold",4.0,1,1,1,1,1);
		case 18: LoopingAnim(playerid,"PED","woman_runpanic",4.0,1,1,1,1,1);
		case 19: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.0,1,1,1,1,1);
		case 20: LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.0,1,1,1,1,1);
		case 21: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 22: LoopingAnim(playerid,"PED","WOMAN_walknorm",4.0,1,1,1,1,1);
		case 23: LoopingAnim(playerid,"PED","WOMAN_walkold",4.0,1,1,1,1,1);
		case 24: LoopingAnim(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,1);
		case 25: LoopingAnim(playerid,"PED","WOMAN_walksexy",4.0,1,1,1,1,1);
		case 26: LoopingAnim(playerid,"PED","WOMAN_walkshop",4.0,1,1,1,1,1);
	}
	return 1;
}

CMD:rap(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /rap [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /rap [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);
		case 2: LoopingAnim(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0);
		case 3: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);
	}
	return 1;
}

CMD:reload(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /reload [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /reload [1-5]");
	switch(animid)
	{
		case 1: ApplyAnimation(playerid,"COLT45","colt45_reload", 4.0, 0, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid,"COLT45","sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid,"BUDDY","buddy_reload", 4.0, 0, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid,"RIFLE","RIFLE_load", 4.0, 0, 0, 0, 0, 0);
		case 5: ApplyAnimation(playerid,"PYTHON","python_reload", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

CMD:dj(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dj [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dj [1-4]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SCRATCHING","scdldlp",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"SCRATCHING","scdlulp",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"SCRATCHING","scdrdlp",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"SCRATCHING","scdrulp",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:skate(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /skate [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /skate [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SKATE","skate_idle", 4.0, 1, 1, 1, 1, 1);
		case 2: LoopingAnim(playerid,"SKATE","skate_run", 4.0, 1, 1, 1, 1, 1);
		case 3: LoopingAnim(playerid,"SKATE","skate_sprint", 4.0, 1, 1, 1, 1, 1);
	}
	return 1;
}

CMD:wank(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /wank [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /wank [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PAULNMAC","wank_in",4.0,1,1,1,1,0);
		case 2: LoopingAnim(playerid,"PAULNMAC","wank_loop",4.0,1,1,1,1,0);
		case 3: OnePlayAnim(playerid,"PAULNMAC","wank_out",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:fuckme(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fuckme [1-8]");
	if(animid < 1 || animid > 8) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fuckme [1-8]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,0);
		case 4: LoopingAnim(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,0);
		case 5: LoopingAnim(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,0);
		case 6: LoopingAnim(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,0);
		case 7: LoopingAnim(playerid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,0);
		case 8: LoopingAnim(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,0);
	}
	return 1;
}

CMD:bj(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /bj [1-12]");
	if(animid < 1 || animid > 12) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /bj [1-12]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,0);
		case 4: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,0);
		case 5: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,0);
		case 6: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,0);
		case 7: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,0);
		case 8: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,0);
		case 9: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,0,1,1,1,0);
		case 10: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,0,1,1,1,0);
		case 11: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,0);
		case 12: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,0);
	}
	return 1;
}

CMD:signal(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /signal [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /signal [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"POLICE","CopTraf_Come",4.0,0,0,0,0,0);
		case 2: LoopingAnim(playerid,"POLICE","CopTraf_Stop",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:lean(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /lean [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /lean [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.1,0,0,0,1,0);
		case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.1,0,0,0,1,0);
	}
	return 1;
}

CMD:fallover(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fallover [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fallover [1-4]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
		case 4: LoopingAnim(playerid, "PED", "BIKE_fallR", 4.0, 0, 1, 1, 0, 0);
	}
	return 1;
}

CMD:wave(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /wave [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /wave [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"ON_LOOKERS","wave_loop",4.0,1,0,0,0,0);
		case 2: OnePlayAnim(playerid,"KISSING","gfwave2",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"PED","endchat_03",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:cheer(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /cheer [1-8]");
	if(animid < 1 || animid > 8) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /cheer [1-8]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"ON_LOOKERS","shout_01",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"ON_LOOKERS","shout_02",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"ON_LOOKERS","shout_in",4.0,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"RIOT","RIOT_ANGRY_B",4.0,1,0,0,0,0);
		case 5: OnePlayAnim(playerid,"RIOT","RIOT_CHANT",4.0,0,0,0,0,0);
		case 6: OnePlayAnim(playerid,"RIOT","RIOT_shout",4.0,0,0,0,0,0);
		case 7: OnePlayAnim(playerid,"STRIP","PUN_HOLLER",4.0,0,0,0,0,0);
		case 8: OnePlayAnim(playerid,"OTB","wtchrace_win",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:deal(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deal [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deal [1-2]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"DEALER", "DEALER_DEAL",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"DEALER","shop_pay",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:chat(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /chat [1-7]");
	if(animid < 1 || animid > 7) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /chat [1-7]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"GANGS","prtial_gngtlkA",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"GANGS","prtial_gngtlkB",4.0,0,0,0,0,0);
		case 4: OnePlayAnim(playerid,"GANGS","prtial_gngtlkE",4.0,0,0,0,0,0);
		case 5: OnePlayAnim(playerid,"GANGS","prtial_gngtlkF",4.0,0,0,0,0,0);
		case 6: OnePlayAnim(playerid,"GANGS","prtial_gngtlkG",4.0,0,0,0,0,0);
		case 7: OnePlayAnim(playerid,"GANGS","prtial_gngtlkH",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:gesture(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gesture [1-15]");
	if(animid < 1 || animid > 15) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gesture [1-15]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"GHANDS","gsign1",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"GHANDS","gsign1LH",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"GHANDS","gsign2",4.0,0,0,0,0,0);
		case 4: OnePlayAnim(playerid,"GHANDS","gsign2LH",4.0,0,0,0,0,0);
		case 5: OnePlayAnim(playerid,"GHANDS","gsign3",4.0,0,0,0,0,0);
		case 6: OnePlayAnim(playerid,"GHANDS","gsign3LH",4.0,0,0,0,0,0);
		case 7: OnePlayAnim(playerid,"GHANDS","gsign4",4.0,0,0,0,0,0);
		case 8: OnePlayAnim(playerid,"GHANDS","gsign4LH",4.0,0,0,0,0,0);
		case 9: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
		case 10: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
		case 11: OnePlayAnim(playerid,"GHANDS","gsign5LH",4.0,0,0,0,0,0);
		case 12: OnePlayAnim(playerid,"GANGS","Invite_No",4.0,0,0,0,0,0);
		case 13: OnePlayAnim(playerid,"GANGS","Invite_Yes",4.0,0,0,0,0,0);
		case 14: OnePlayAnim(playerid,"GANGS","prtial_gngtlkD",4.0,0,0,0,0,0);
		case 15: OnePlayAnim(playerid,"GANGS","smkcig_prtl",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:use(playerid, params[])
{
	new string[128];
	if(sscanf(params, "s[8]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /use [type]");
		SendClientMessage(playerid, COLOR_GREY, "TYPES: Cigar | Weed | cocaine");
		return 1;
	}
	if(IsPlayerCuffed(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	if(!strcmp(params, "cigar", true))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
		if(!PlayerInfo[playerid][pCigar]) return SendClientMessage(playerid, COLOR_GREY, "You don't have any cigars on you.");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		PlayerInfo[playerid][pCigar] --;
		format(string, sizeof(string), "* %s takes out a cuban cigar and lights it up.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(!strcmp(params, "weed", true))
	{
	    //if(GetPlayerDrunkLevel(playerid) >= 5000) return SendClientMessage(playerid, COLOR_GREY, "You are too drunk/stoned to use drugs.");
    	if(PlayerInfo[playerid][pStoned] >= 5) return SendClientMessage(playerid, COLOR_GREY, "You are too stoned to use drugs.");
	    new Float:H;
	    if(!PlayerInfo[playerid][pWeed]) return SendClientMessage(playerid, COLOR_GREY, "You don't have any weed on you.");
	    if(DrugTimeout[playerid]) return SendClientMessage(playerid, COLOR_GREY, " You can't use drugs at the moment.");
	    GetPlayerHealth(playerid, H);
	    if(H >= 100) return SendClientMessage(playerid, COLOR_GREY, "You have full health already.");
	    // Animation
	    if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",8,0,0,0,0,0,1);
		else ApplyAnimation(playerid,"ped","Smoke_in_car",2.1,0,0,0,0,0,1);
		// Effects
	    SetPlayerHealth(playerid, H+10);
	    GetPlayerHealth(playerid, H);
	    if(H > 100) SetPlayerHealth(playerid, 100);
	    PlayerInfo[playerid][pWeed] --;
	    //SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid)+1700);
	    PlayerInfo[playerid][pStoned] ++;
		format(string, sizeof(string), "* %s takes out a joint and smokes it.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		DrugTimeout[playerid] = 5;
		SetTimerEx("DrugTimer", 5000, false, "i", playerid);
		/*if(GetPlayerDrunkLevel(playerid) >= 5000)
		{
			SetPlayerWeather(playerid, -66);
			SetTimerEx("Stoned", 8000, false, "i", playerid);
		}*/
		if(PlayerInfo[playerid][pStoned] >= 3)
		{
			SetPlayerWeather(playerid, -66);
			KillTimer(StonedTimer[playerid]);
			StonedTimer[playerid] = SetTimerEx("Stoned", 30000, false, "i", playerid);
		}
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",8,0,0,0,0,0,1);
		else ApplyAnimation(playerid,"ped","Smoke_in_car",2.1,0,0,0,0,0,1);
	}
	else if(!strcmp(params, "cocaine", true))
	{
	    //if(GetPlayerDrunkLevel(playerid) >= 5000) return SendClientMessage(playerid, COLOR_GREY, "You are too drunk/stoned to use drugs.");
    	if(PlayerInfo[playerid][pStoned] >= 5) return SendClientMessage(playerid, COLOR_GREY, "You are too stoned to use drugs.");
	    new Float:A;
	    if(!PlayerInfo[playerid][pcocaine]) return SendClientMessage(playerid, COLOR_GREY, "You don't have any cocaine on you.");
	    if(DrugTimeout[playerid]) return SendClientMessage(playerid, COLOR_GREY, " You can't use drugs at the moment.");
	    GetPlayerArmour(playerid, A);
	    if(A >= 100) return SendClientMessage(playerid, COLOR_GREY, "You have full armor already.");
	    // Animation
	    if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		else ApplyAnimation(playerid,"ped","Smoke_in_car",2.1,0,0,0,0,0);
	    // Effects
	    SetPlayerArmour(playerid, A+10);
	    GetPlayerArmour(playerid, A);
	    if(A > 100) SetPlayerArmour(playerid, 100);
	    PlayerInfo[playerid][pcocaine] --;
	    //SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid)+1700);
	    PlayerInfo[playerid][pStoned] ++;
		format(string, sizeof(string), "* %s takes out a pipe, fills it with cocaine and smokes it.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		DrugTimeout[playerid] = 5;
		SetTimerEx("DrugTimer", 5000, false, "i", playerid);
		/*if(GetPlayerDrunkLevel(playerid) >= 5000)
		{
			SetPlayerWeather(playerid, -68);
			SetTimerEx("Stoned", 8000, false, "i", playerid);
		}*/
		if(PlayerInfo[playerid][pStoned] >= 3)
		{
			SetPlayerWeather(playerid, -66);
			KillTimer(StonedTimer[playerid]);
			StonedTimer[playerid] = SetTimerEx("Stoned", 30000, false, "i", playerid);
		}
	}
	return 1;
}



CMD:sprunk(playerid, params[])
{
	new string[128];
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(!PlayerInfo[playerid][pSprunk]) return SendClientMessage(playerid, COLOR_GREY, "You don't have any sprunks on you.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	PlayerInfo[playerid][pSprunk] --;
	format(string, sizeof(string), "* %s takes out a sprunk can and opens it up.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:hurt(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hurt [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hurt [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SWAT","gnstwall_injurd",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"SWEET","Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	}
	return 1;
}

CMD:checktime(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_watch",4.0,0,0,0,0,0);
	return 1;
}


CMD:dive(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"DODGE","Crush_Jump",4.0,0,1,1,1,0);
	return 1;
}

CMD:showoff(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"Freeweights","gym_free_celebrate",4.0,0,0,0,0,0);
	return 1;
}

CMD:crabs(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"MISC","Scratchballs_01",4.0,0,0,0,0,0);
	return 1;
}

CMD:salute(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"ON_LOOKERS","Pointup_loop",4.0,0,0,0,0,0);
	return 1;
}

CMD:stop(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"PED","endchat_01",4.0,0,0,0,0,0);
	return 1;
}

CMD:washhands(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"BD_FIRE","wash_up",4.0,0,0,0,0,0);
	return 1;
}

CMD:cry(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.0,1,0,0,0,0);
	return 1;
}

CMD:what(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"RIOT","RIOT_ANGRY", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:piss(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	return 1;
}

CMD:followme(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.0,0,0,0,0,0);
	return 1;
}

CMD:greet(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.0,0,0,0,0,0);
	return 1;
}

CMD:stand(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"WUZI","Wuzi_stand_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:hitch(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:bitchslap(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"MISC","bitchslap",4.0,0,0,0,0,0);
	return 1;
}

CMD:cpr(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
	ApplyAnimation(playerid,"KISSING","gift_give",4.0,0,0,0,0,0);
	return 1;
}

CMD:gift(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"KISSING","gift_give",4.0,0,0,0,0,0);
	return 1;
}

CMD:slapass(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.0,0,0,0,0,0);
	return 1;
}

CMD:drunk(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	return 1;
}

CMD:bomb(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:rob(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:laugh(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:lookout(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:robman(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:hide(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:vomit(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:eat(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:sleep(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sleep [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sleep [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"CRACK","crckdeth4",4.0,0,0,0,1,0);
		case 2: LoopingAnim(playerid,"CRACK","crckidle2",4.0,0,0,0,1,0);
	}
	return 1;
}
CMD:give(playerid, params[])
{
	new string[128], playerb, amount = PlayerInfo[playerid][pWeed] && PlayerInfo[playerid][pcocaine] && PlayerInfo[playerid][pMaterials];
	if(sscanf(params, "us[32]d", playerb, params, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /give [playerid] [type] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "TYPES: Weed | Cocaine | Material");
		return 1;
	}
	if(!IsPlayerNearPlayer(playerid, playerb, 5)) return SendClientMessage(playerid, COLOR_GREY, "You can't give anything to someone from this disatance.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(IsPlayerCuffed(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
    if(!strcmp(params, "Weed", true))
	{
	    //if(GetPlayerDrunkLevel(playerid) >= 5000) return SendClientMessage(playerid, COLOR_GREY, "You are too drunk/stoned to use drugs.");
	    if(amount > PlayerInfo[playerid][pWeed] || amount < 1) return SendClientMessage(playerid, COLOR_GREY, "   You don't have that much.");
	    PlayerInfo[playerid][pWeed] = PlayerInfo[playerid][pWeed] -amount;
	    PlayerInfo[playerb][pWeed] = PlayerInfo[playerb][pWeed] +amount;
	    format(string, sizeof(string), "* %s takes out a bag of Weed and hands it to %s.", RPN(playerid), RPN(playerb));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have given %s %d of Weed.", RPN(playerb), amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    format(string, sizeof(string), " %s has given you %d of Weed.", RPN(playerid), amount);
	    SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	}
	if(!strcmp(params, "cocaine", true))
	{
	    //if(GetPlayerDrunkLevel(playerid) >= 5000) return SendClientMessage(playerid, COLOR_GREY, "You are too drunk/stoned to use drugs.");
	    if(amount > PlayerInfo[playerid][pcocaine] || amount < 1) return SendClientMessage(playerid, COLOR_GREY, "   You don't have that much.");
	    PlayerInfo[playerid][pcocaine] = PlayerInfo[playerid][pcocaine] -amount;
	    PlayerInfo[playerb][pcocaine] = PlayerInfo[playerb][pcocaine] +amount;
	    format(string, sizeof(string), "* %s takes out a bag of Ccaine and hands it to %s.", RPN(playerid), RPN(playerb));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have given %s %d of Cocaine.", RPN(playerb), amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    format(string, sizeof(string), " %s has given you %d of Cocaine.", RPN(playerid), amount);
        SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	}
	if(!strcmp(params, "material", true))
	{
	    //if(GetPlayerDrunkLevel(playerid) >= 5000) return SendClientMessage(playerid, COLOR_GREY, "You are too drunk/stoned to use drugs.");
	    if(amount > PlayerInfo[playerid][pMaterials] || amount < 1) return SendClientMessage(playerid, COLOR_GREY, "   You don't have that much.");
	    PlayerInfo[playerid][pMaterials] = PlayerInfo[playerid][pMaterials] -amount;
	    PlayerInfo[playerb][pMaterials] = PlayerInfo[playerb][pMaterials] +amount;
	    format(string, sizeof(string), "* %s takes out a bag of Materials and hands it to %s.", RPN(playerid), RPN(playerb));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have given %s %d of Materials.", RPN(playerb), amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    format(string, sizeof(string), " %s has given you %d of Materials.", RPN(playerid), amount);
        SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	}
	return 1;
}
CMD:take(playerid, params[])
{
	new string[128], playerb;
	if(sscanf(params, "us[32]d", playerb, params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /take [playerid] [type]");
		SendClientMessage(playerid, COLOR_GREY, "TYPES: Weed | Cocaine | Cellphone | CarLicense | FlyingLicense | WeaponLicense | Material | Weapons");
		return 1;
	}
	if(!IsPlayerNearPlayer(playerid, playerb, 5)) return SendClientMessage(playerid, COLOR_GREY, "You can't take anything from someone from this disatance.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsACop(playerid) && !IsFBI(playerid) && !IsNG(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an LEO.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
    if(!strcmp(params, "Weed", true))
	{
	    PlayerInfo[playerb][pcocaine] = 0;
	    format(string, sizeof(string), "* %s has taken all %s Weed.", RPN(playerid), RPN(playerb));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(params, "cocaine", true))
	{
	    PlayerInfo[playerb][pcocaine] = 0;
	    format(string, sizeof(string), "* %s has taken all %s cocaine.", RPN(playerid), RPN(playerb));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
 if(!strcmp(params, "cellphone", true))
	{
	    PlayerInfo[playerb][pNumber] = 0;
	    format(string, sizeof(string), "* %s has taken %s's cellphone.", RPN(playerid), RPN(playerb));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(params, "carlicense", true))
	{
	    PlayerInfo[playerb][pCarLic] = 0;
	    format(string, sizeof(string), "* %s has taken %s's driver license.", RPN(playerid), RPN(playerb));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(params, "flyinglicense", true))
	{
	    PlayerInfo[playerb][pFlyLic] = 0;
	    format(string, sizeof(string), "* %s has taken %s's flying license.", RPN(playerid), RPN(playerb));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(params, "weaponlicense", true))
	{
	    PlayerInfo[playerb][pWepLic] = 0;
	    format(string, sizeof(string), "* %s has taken %s's weapon license.", RPN(playerid), RPN(playerb));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(params, "material", true))
	{
	    PlayerInfo[playerb][pMaterials] = 0;
	    format(string, sizeof(string), "* %s has taken %s's driver license.", RPN(playerid), RPN(playerb));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(params, "weapons", true))
	{
            ResetDodWeapons(playerb);
		    format(string, sizeof(string), "* %s has taken %s's weapons.", RPN(playerid), RPN(playerb));
	        SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}
CMD:crack(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:relax(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid, "CRACK", "crckidle1",4.0,0,1,1,1,-1);
	return 1;
}
CMD:fucku(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return 1;
}

CMD:taichi(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:kiss(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.0,0,0,0,0,0);
	return 1;
}

CMD:bt(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pTester]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /bt [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(!PlayerInfo[playerid][pAdmin]) format(string, sizeof(string), "*Tester %s: {FFFFFF}%s", RPN(playerid), params);
	else format(string, sizeof(string), "*%s %s: {FFFFFF}%s", RPALN(playerid), RPN(playerid), params);
	SendTesterMessage(COLOR_GREEN, string);
	Log("logs/betachat.log", string);
	return 1;
}


/*CMD:ro(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!BankRobber[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not robbing the bank.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/ro)bbery [text]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "** [Bank Robbery] %s: %s", RPN(playerid), params);
	SendRobberyMessage(COLOR_LIGHTGREEN, string);
	return 1;
}

CMD:robberyhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_YELLOW, "BANK ROBBERY: {FFFFFF}/ro /setuprobbery /joinrobbery /acceptrobbery /startrobbery");
	return 1;
}

CMD:setuprobbery(playerid, params[])
{
	new string[128], cops;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(IsACop(playerid) || IsAGov(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Police and Government can't rob the bank.");
	if(BankRobbery) return SendClientMessage(playerid, COLOR_GREY, "A bank robbery is already being setup.");
	if(BankRobberyTime)
	{
		format(string, sizeof(string), "You need to wait %d more hours before robbing the bank again.", BankRobberyTime);
		SendClientMessage(playerid, COLOR_GREY, string);
	    return 1;
	}
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pFac] == 1 && PlayerInfo[i][pFacDuty]) cops ++;
	}
	if(cops < 2) return SendClientMessage(playerid, COLOR_GREY, "There aren't enough police officers on duty to start a robbery.");
	BankRobbery = 1;
	format(BankRobbers[0], MAX_PLAYER_NAME, "%s", RPN(playerid));
	BankRobber[playerid] = 1;
	BankRobbersCount = 1;
	SendClientMessage(playerid, COLOR_LIGHTGREEN, " Other players can join using /joinrobbery, chat with robbers using /ro.");
	TextDrawShowForPlayer(playerid, Textdraw0);
	TextDrawSetString(Textdraw1, BankRobbers[0]);
	TextDrawShowForPlayer(playerid, Textdraw1);
	return 1;
}

CMD:joinrobbery(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(IsACop(playerid) || IsAGov(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Police and Government can't rob the bank.");
	if(!BankRobbery) return SendClientMessage(playerid, COLOR_GREY, "There's no bank robbery being setup.");
	if(BankRobber[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are already robbing the bank.");
	if(RobberyRequest[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You have already requested to join the robbery.");
	if(RobberyStarted) return SendClientMessage(playerid, COLOR_GREY, "The bank robbery has already started.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN, " You have requested to join the robbery, wait for the robbery orgainzer to take an action.");
	format(string, sizeof(string), "Bank Robbery: %s [ID %d] has requested to join the bank robbery. (/acceptrobbery)", RPN(playerid), playerid);
	SendRobberyMessage(COLOR_LIGHTGREEN, string);
	RobberyRequest[playerid] = 1;
	return 1;
}


CMD:acceptrobbery(playerid, params[])
{
	new string[128], playerb;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!BankRobbery) return SendClientMessage(playerid, COLOR_GREY, "There's no bank robbery being setup.");
	if(BankRobber[playerid] != 1) return SendClientMessage(playerid, COLOR_GREY, "You are not the bank robbery leader.");
	if(BankRobbersCount >= 5) return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 5 players robbing the bank.");
	if(RobberyStarted) return SendClientMessage(playerid, COLOR_GREY, "The bank robbery has already started.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /acceptrobbery [playerid]");
	if(!RobberyRequest[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player hasn't requested to join the robbery.");
	RobberyRequest[playerb] = 0;
	BankRobbersCount ++;
	BankRobber[playerb] = BankRobbersCount;
	format(BankRobbers[BankRobbersCount-1], MAX_PLAYER_NAME, "%s", RPN(playerb));
	format(string, sizeof(string), "Bank Robbery: %s has accepted %s's request to join the bank robbery.", RPN(playerid), RPN(playerb));
	SendRobberyMessage(COLOR_LIGHTGREEN, string);
	// Textdraw
	if(BankRobbersCount == 2) {TextDrawSetString(Textdraw2, BankRobbers[1]);}
	else if(BankRobbersCount == 3) {TextDrawSetString(Textdraw3, BankRobbers[2]);}
	else if(BankRobbersCount == 4) {TextDrawSetString(Textdraw4, BankRobbers[3]);}
	else if(BankRobbersCount == 5) {TextDrawSetString(Textdraw5, BankRobbers[4]);}
	foreach(Player, i)
	{
	    if(BankRobber[i])
	    {
	        TextDrawShowForPlayer(i, Textdraw0);
			TextDrawShowForPlayer(i, Textdraw1);
	    	if(BankRobbersCount >= 2) {TextDrawShowForPlayer(i, Textdraw2);}
			else if(BankRobbersCount >= 3) {TextDrawShowForPlayer(i, Textdraw3);}
			else if(BankRobbersCount >= 4) {TextDrawShowForPlayer(i, Textdraw4);}
			else if(BankRobbersCount >= 5) {TextDrawShowForPlayer(i, Textdraw5);}
	    }
	}
	return 1;
}

CMD:startrobbery(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!BankRobbery) return SendClientMessage(playerid, COLOR_GREY, "There's no bank robbery being setup.");
	if(BankRobber[playerid] != 1) return SendClientMessage(playerid, COLOR_GREY, "You are not the bank robbery leader.");
	if(RobberyStarted) return SendClientMessage(playerid, COLOR_GREY, "The bank robbery has already started.");
	if(BankRobbersCount < 2) return SendClientMessage(playerid, COLOR_GREY, "There aren't enough robbers to rob the bank.");
	if(!IsPlayerInRangeOfPoint(playerid, 3, 2242.1460,1632.3909,961.7531)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the bank vault.");
	BankC4 = CreateDynamicObject(1654, 2242.0234,1632.7185,960.8000, 0, 89.325012207031, 3.9700012207031);
	RobberyStarted = 1;
	SetTimer("BankVaultTimer", 10000, false);
	SendRobberyMessage(COLOR_LIGHTRED, "** The bank vault is going to explode in 10 seconds, move away from it **");
	SendCopMessage(COLOR_BLUE, "LS Bank: There is a group of people attempting to rob the bank!");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pFac] == 1)
	    {
	        TextDrawShowForPlayer(i, Textdraw0);
			TextDrawShowForPlayer(i, Textdraw1);
	    	if(BankRobbersCount >= 2) {TextDrawShowForPlayer(i, Textdraw2);}
			else if(BankRobbersCount >= 3) {TextDrawShowForPlayer(i, Textdraw3);}
			else if(BankRobbersCount >= 4) {TextDrawShowForPlayer(i, Textdraw4);}
			else if(BankRobbersCount >= 5) {TextDrawShowForPlayer(i, Textdraw5);}
	    }
	    if(BankRobber[i])
	    {
		    ClearDodWantedLevels(i);
		    AddDodWantedLevel(i, "Bank Robbery");
		    AddDodWantedLevel(i, "Bank Robbery");
		    AddDodWantedLevel(i, "Bank Robbery");
		    AddDodWantedLevel(i, "Bank Robbery");
		    AddDodWantedLevel(i, "Bank Robbery");
		    AddDodWantedLevel(i, "Bank Robbery");
		    TotalRobbers ++;
	    }
	}
	BankRobberyTime = 4;
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	foreach(Player, i)
	{
	    if(!BankRobber[i] && GetPlayerInterior(i) == 83 && GetPlayerVirtualWorld(i) == 8473)
	    {
	        SetPlayerPos(i, 1462.4095,-1011.1602,26.8438);
	        SetPlayerInterior(i, 0);
	        SetPlayerVirtualWorld(i, 0);
	        SendClientMessage(i, COLOR_LIGHTRED, "** The bank is being robbed, you have been thrown out by the robbers. **");
	    }
	}
	BankBlock = 1;
	return 1;
}

*/

// Admin Commands

CMD:ah(playerid, params[])
{
	return cmd_ahelp(playerid, params);
}
CMD:buylevel(playerid, params[])
{
			if(PlayerInfo[playerid][pLevel] >= 0)
			{
					new nxtlevel = PlayerInfo[playerid][pLevel]+1;
					new string[128];
					new costlevel = nxtlevel*levelcost;//10k for testing purposes
					new expamount = nxtlevel*levelexp;
					if(PlayerInfo[playerid][pMoney] < costlevel)
					{
						format(string, sizeof(string), "   You can't afford that ($%d) !",costlevel);
						SendClientMessage(playerid, COLOR_GREY, string);
						return 1;
					}
					else if(PlayerInfo[playerid][pExp] < expamount)
					{
						format(string, sizeof(string), "   You need %d respect points, you curently have %d !",expamount,PlayerInfo[playerid][pExp]);
						SendClientMessage(playerid, COLOR_GREY, string);
						return 1;
					}
					else
					{
						format(string, sizeof(string), "~r~Level up~n~~w~level %d", nxtlevel);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pMoney] = PlayerInfo[playerid][pMoney]-costlevel;
						GivePlayerMoney(playerid, (0 - costlevel));
						PlayerInfo[playerid][pLevel]++;
						//PlayerInfo[playerid][pUpgradePoints]+3;
						//format(string, sizeof(string), "You have recieved 3 Upgrade Points");
						//SendClientMessage(playerid, COLOR_GREY, string);
                        SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
						PlayerInfo[playerid][pExp] -= expamount;
						new total = PlayerInfo[playerid][pExp];
						if(total > 0) { PlayerInfo[playerid][pExp] = total; }
						else { PlayerInfo[playerid][pExp] = 0; }
						GameTextForPlayer(playerid, string, 5000, 1);
					}
				}
            return 1;
}
/*CMD:ahelp(playerid, params[])
{
*7 Admin: {FFFFFF}/motd /clearads /online /editpoint /makegateowner /deletebug");
}*/

CMD:ahelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________Admins Commands from Intense Role-Play_______________");
	if(PlayerInfo[playerid][pAdmin] >= 1)SendClientMessage(playerid, COLOR_DARKRED, "*Moderator: {FFFFFF}/a /skick /sban /spec /pm /aod");
	if(PlayerInfo[playerid][pAdmin] >= 2)SendClientMessage(playerid, COLOR_DARKRED, "*Admin: {FFFFFF}/kick /ban /goto /check /slap /sobeit /ch /auncuff /rmute /asellcar");
	if(PlayerInfo[playerid][pAdmin] >= 2)SendClientMessage(playerid, COLOR_DARKRED, "*Admin: {FFFFFF}/bowners /banreason /warns /flag /nmute /ipcheck /fly /automaticrefund");
	if(PlayerInfo[playerid][pAdmin] >= 2)SendClientMessage(playerid, COLOR_DARKRED, "*Admin: {FFFFFF}/gotoloc /gethere /sendto /setskin /setvw /setint /tuteject");
	if(PlayerInfo[playerid][pAdmin] >= 2)SendClientMessage(playerid, COLOR_DARKRED, "*Admin: {FFFFFF}/warn /mark /clearflag /forcetut /approve /unfreeze");
	if(PlayerInfo[playerid][pAdmin] >= 3)SendClientMessage(playerid, COLOR_DARKRED, "*Admin: {FFFFFF}/disarm /hoseject /tog /prison /prisoners /lastads /deny /freeze /banaccount");
	if(PlayerInfo[playerid][pAdmin] >= 3)SendClientMessage(playerid, COLOR_DARKRED, "*Admin: {FFFFFF}/fine /pfine /clearchat /whitelist /eventhelp");
	if(PlayerInfo[playerid][pAdmin] >= 3)SendClientMessage(playerid, COLOR_DARKRED, "*Admin: {FFFFFF}/givecookie /getveh /carhops /speedhacks /cnn /blowguns");
	if(PlayerInfo[playerid][pAdmin] >= 4)SendClientMessage(playerid, COLOR_DARKRED, "*Admin: {FFFFFF}/unban /unbanip /gotopos /givemoney /sethp /setarmor /tod");
	if(PlayerInfo[playerid][pAdmin] >= 4)SendClientMessage(playerid, COLOR_DARKRED, "*Admin: {FFFFFF}/veh /setname /clearwarns /setarmorall /sethpall /familieshelp /endday");
	if(PlayerInfo[playerid][pAdmin] >= 4)SendClientMessage(playerid, COLOR_DARKRED, "*Admin: {FFFFFF}/switchfam /refuel /respawn /switchfac /nearheal /trollme /trolldo /fackick /refund /createday");
	if(PlayerInfo[playerid][pAdmin] >= 5)SendClientMessage(playerid, COLOR_DARKRED, "*General Admin: {FFFFFF}/makeleader /poll /setmoney /givegun /dynamics /forcepaycheck /setstat");
	if(PlayerInfo[playerid][pAdmin] >= 5)SendClientMessage(playerid, COLOR_DARKRED, "*General Admin: {FFFFFF} /contracts /clearcontract /clearwanted /rangeban /firehell /donatorcar");
	if(PlayerInfo[playerid][pAdmin] >= 5)SendClientMessage(playerid, COLOR_DARKRED, "*General Admin: {FFFFFF}/rangeban /firehell /makemapper");
	if(PlayerInfo[playerid][pAdmin] >= 6)SendClientMessage(playerid, COLOR_DARKRED, "*Senior Admin: {FFFFFF}/music /listen /forceduty /makehelper /makegangmod");
	if(PlayerInfo[playerid][pAdmin] >= 6)SendClientMessage(playerid, COLOR_DARKRED, "*Senior Admin: {FFFFFF}/makefacmod /makebanappealer /makemapper");
	if(PlayerInfo[playerid][pAdmin] >= 6)SendClientMessage(playerid, COLOR_DARKRED, "*Senior Admin: {FFFFFF}/editdrugs /makevip /maketester");
    if(PlayerInfo[playerid][pAdmin] >= 7)SendClientMessage(playerid, COLOR_DARKRED, "*Head-Admin: {FFFFFF}/makeadmin /saveserver /gmx /arrestpoint /deleteaccount ");
    if(PlayerInfo[playerid][pAdmin] >= 7)SendClientMessage(playerid, COLOR_DARKRED, "*Head-Admin: {FFFFFF}/motd /clearads /online /editpoint /makegateowner");
    if(PlayerInfo[playerid][pAdmin] >= 8)SendClientMessage(playerid, COLOR_DARKRED, "*Server Owner: {FFFFFF}/suggestions /zombiegate /zombiehide /makezedtester /unzedtester");
    if(PlayerInfo[playerid][pAdmin] >= 9)SendClientMessage(playerid, COLOR_DARKRED, "*Server Scripter: {FFFFFF}/suggestions /zombiegate /zombiehide /makezedtester /unzedtester");
	if(PlayerInfo[playerid][pGangMod]) SendClientMessage(playerid, COLOR_GREEN, "Family Moderator: {FFFFFF}/fcreate /fdelete /fedit /fstrike /fstrikes /switchfam");
	if(PlayerInfo[playerid][pFacMod]) SendClientMessage(playerid, COLOR_GREEN, "Faction Moderator: {FFFFFF}/makeleader /fackick /switchfac /facstrike");
	if(PlayerInfo[playerid][pBanAppealer]) SendClientMessage(playerid, COLOR_GREEN, "Ban Appealer: {FFFFFF}/unban /unbanip");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	return 1;
}

CMD:makegateowner(playerid, params[])
{
	new playerb, slot, idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "uii", playerb, slot, idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /makegateowner [playerid] [slot(1-3)] [gateid] {AFAFAF}(Gate ID 0 to remove ownership)");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(idx > 0 && !GateInfo[idx][gModel] || idx < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
	if(slot < 1 || slot > 3) return SendClientMessage(playerid, COLOR_GREY, "Gate slots are between 1 and 3.");
	switch(slot)
	{
	    case 1: PlayerInfo[playerb][pGate][0] = idx;
	    case 2: PlayerInfo[playerb][pGate][1] = idx;
	    case 3: PlayerInfo[playerb][pGate][2] = idx;
	}
	if(idx == 0)
	{
		format(string, sizeof(string), " Administrator %s removed your gate ownership in slot %d.", RPN(playerid), slot);
		SendClientMessage(playerb, COLOR_WHITE, string);
		format(string, sizeof(string), "AdmWarn: %s has removed %s's gate ownership in slot %d.", RPN(playerid), RPN(playerb), slot);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/gates.log", string);
	}
	else
	{
		format(string, sizeof(string), " Administrator %s has made you an owner of gate ID %d.", RPN(playerid), idx, slot);
		SendClientMessage(playerb, COLOR_WHITE, string);
		format(string, sizeof(string), "AdmWarn: %s has made %s an owner of gate ID %d. (Slot %d)", RPN(playerid), RPN(playerb), idx, slot);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/gates.log", string);
	}
	return 1;
}

CMD:ipcheck(playerid, params[])
{
    new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /ipcheck [playerid]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	format(string, sizeof(string), "{FF9900}Name: {FFFFFF}%s {FF9900}| IP: {FFFFFF}%s", RPN(playerb), RPIP(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	return 1;
}

CMD:unloyal(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /unloyal [playerid]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(PlayerInfo[playerb][pLoyal]) return SendClientMessage(playerid, COLOR_GREY, "Player does not have loyalty status.");
	PlayerInfo[playerb][pLoyal] = 1;
	format(string, sizeof(string), "AdmWarn: %s has removed %s's loyalty status.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	SendClientMessage(playerb, COLOR_DARKRED, string);
	Log("logs/loyal.log", string);
	return 1;
}

CMD:getveh(playerid, params[])
{
	new world = GetPlayerVirtualWorld(playerid);
	new veh, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(sscanf(params, "i", veh)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /getveh [vehicleid]");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(veh == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle id.");
    new Float:pos[3]; GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
   	SetVehiclePos(veh, pos[0], pos[1], pos[2]);
   	SetVehicleVirtualWorld(veh, world);
   	LinkVehicleToInterior(veh, GetPlayerInterior(playerid));
   	format(string, sizeof(string), " You have teleported vehicle ID %d to you.", veh);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}


CMD:firehell(playerid, params[])
{
	new amount, string[128], Float:Pos[4];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, 0xFFFFFFFF, "[Usage]: /firehell [explosions]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(amount < 1) return SendClientMessage(playerid, 0xFFFFFFFF, "Amount of explosions can't be below 1.");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), Pos[3]);
	else GetPlayerFacingAngle(playerid, Pos[3]);
	for(new i=1; i<amount+1; i++)
	{
		Pos[0] = Pos[0] + 15*floatcos(90+Pos[3], degrees);
		Pos[1] = Pos[1]+ 15*floatsin(90-Pos[3], degrees);
		CreateExplosion(Pos[0], Pos[1], Pos[2], 0, 5.0);
	}
	format(string, sizeof(string), "You have created %d explosions.", amount);
	SendClientMessage(playerid, 0xFFFFFFFF, string);
	return 1;
}

CMD:respawn(playerid, params[])
{
	new string[128], veh;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(!strcmp(params, "all", true))
    {
        for(new i=0; i<MAX_VEHICLES; i++)
        {
        	new vehs;
			foreach(Player, x)
			{
   				if(GetPlayerVehicleID(x) == i)
		    	{
		     		vehs = 1;
			    }
			}
			if(!vehs)
			{
				SetVehicleToRespawn(i);
			}
			vehs = 0;
        }
		format(string, sizeof(string), "AdmCmd: %s has respawned all unused vehicles.", RPN(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, string);
        return 1;
    }
    if(sscanf(params, "i", veh)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /respawn [vehicleid/all]");
    SetVehicleToRespawn(veh);
    format(string, sizeof(string), "AdmWarn: %s has respawned vehicle ID %d.", RPN(playerid), veh);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:refuel(playerid, params[])
{
	new string[128], veh;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(!strcmp(params, "all", true))
    {
        for(new i=0; i<MAX_VEHICLES; i++)
        {
            Fuel[i] = 100;
        }
		format(string, sizeof(string), "AdmCmd: %s has refilled all vehicles' gas tanks.", RPN(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, string);
        return 1;
    }
    if(sscanf(params, "i", veh)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /refuel [vehicleid/all]");
    Fuel[veh] = 100;
    format(string, sizeof(string), "AdmWarn: %s has refilled vehicle ID %d's gas tank.", RPN(playerid), veh);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:maketester(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /maketester [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pTester])
	{
		PlayerInfo[playerb][pTester] = 0;
		format(string, sizeof(string), " %s has removed you from the Beta Testers team.", RPN(playerid));
		SendClientMessage(playerb, COLOR_GREEN, string);
		format(string, sizeof(string), "AdmWarn: %s has removed %s from the Beta Testers team.", RPN(playerid), RPN(playerb));
	}
	else
	{
	    PlayerInfo[playerb][pTester] = 1;
	    format(string, sizeof(string), " %s has made you a Beta Tester.", RPN(playerid));
		SendClientMessage(playerb, COLOR_GREEN, string);
		format(string, sizeof(string), "AdmWarn: %s has made %s a Beta Tester.", RPN(playerid), RPN(playerb));
	}
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/maketester.log", string);
	return 1;
}

CMD:setreferrals(playerid, params[])
{
	new playerb, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setreferrals [playerid] [referrals]");
	format(string, sizeof(string), "AdmWarn: %s has set %s's referral points to %d. (Old Points: %d)", RPN(playerid), RPN(playerb), amount, PlayerInfo[playerb][pRefPoints]);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/referral.log", string);
	PlayerInfo[playerb][pRefPoints] = amount;
	format(string, sizeof(string), " Administrator %s has set your referral points to %d.", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:makevip(playerid, params[])
{
	new playerb, viplevel, viptime, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "uii", playerb, viplevel, viptime)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /makevip [playerid] [level] [days]");
	if(viplevel < 0 || viplevel > 4) return SendClientMessage(playerid, COLOR_GREY, "VIP packages are between 1 and 4.");
	if(viptime < 1 || viptime > 30) return SendClientMessage(playerid, COLOR_GREY, "VIP days are between 1 and 30.");
	if(viplevel == 0)
	{
	    PlayerInfo[playerb][pVIP] = 0;
		PlayerInfo[playerb][pVIPDay] = 0;
		PlayerInfo[playerb][pVIPMonth] = 0;
		PlayerInfo[playerb][pVIPHour] = 0;
		PlayerInfo[playerb][pVIPTemp] = 0;
		format(string, sizeof(string), "AdmWarn: %s has removed %s's VIP package.", RPN(playerid), RPN(playerb));
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/makevip.log", string);
		format(string, sizeof(string), " Adminisistrator %s has removed your VIP package.", RPN(playerid));
		SendClientMessage(playerb, COLOR_VIP, string);
		return 1;
	}
	// Calculating
	new Year, Month, Day;
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	if(Day+viptime >= 30)
	{
	    new ActualDay;
		Month ++;
		ActualDay = viptime - (30-Day);
		PlayerInfo[playerb][pVIPDay] = ActualDay;
		PlayerInfo[playerb][pVIPMonth] = Month;
		PlayerInfo[playerb][pVIPHour] = Hour;
	}
	else
	{
	    PlayerInfo[playerb][pVIPDay] = Day+viptime;
		PlayerInfo[playerb][pVIPMonth] = Month;
		PlayerInfo[playerb][pVIPHour] = Hour;
	}
	// Done
	PlayerInfo[playerb][pVIP] = viplevel;
	PlayerInfo[playerb][pVIPTemp] = 0;
	format(string, sizeof(string), "AdmWarn: %s has given %s %s VIP package for %d days.", RPN(playerid), RPN(playerb), RPVIPN(playerb), viptime);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/makevip.log", string);
	format(string, sizeof(string), " Adminisistrator %s has given you %s VIP package for %d days.", RPN(playerid), RPVIPN(playerb), viptime);
	SendClientMessage(playerb, COLOR_VIP, string);
	return 1;
}

CMD:editdrugs(playerid, params[])
{
	new string[128], option[8], amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[8]i", option, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /editdrugs [type] [amount]");
		format(string, sizeof(string), "Weed: %d - cocaine: %d", Weed, cocaine);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if(amount < 0 || amount > 2000) return SendClientMessage(playerid, COLOR_GREY, "Drugs amount is between 0 and 2000.");
	if(!strcmp(option, "weed", true, 4))
	{
	    Weed = amount;
		format(string, sizeof(string), "Weed Pickup\n{FFFF00}/buyweed to get weed\nAvailable Stock: %d/2000", Weed);
		UpdateDynamic3DTextLabelText(WeedText, COLOR_RED, string);
		format(string, sizeof(string), "AdmWarn: %s has set the Drugs House's stock to %d grams.", RPN(playerid), amount);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/editdrugs.log", string);
	}
	else if(!strcmp(option, "cocaine", true, 5))
	{
	    cocaine = amount;
		format(string, sizeof(string), "cocaine Pickup\n{FFFF00}/buycocaine to get cocaine\nAvailable Stock: %d/2000", cocaine);
		UpdateDynamic3DTextLabelText(cocaineText, COLOR_RED, string);
		format(string, sizeof(string), "AdmWarn: %s has set the cocaine Lab's stock to %d grams.", RPN(playerid), amount);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/editdrugs.log", string);
	}
	return 1;
}

CMD:eventhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
    SendClientMessage(playerid, COLOR_YELLOW, "EVENT: {FFFFFF}/seteventinfo /announceevent /lockevent /startevent /endevent");

	return 1;
}

CMD:seteventinfo(playerid, params[])
{
	new string[128], option[32], amount;
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[32]", option))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /seteventinfo [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: position | weapon | health | armor");
		return 1;
	}
	if(!strcmp(option, "position", true))
	{
	    GetPlayerPos(playerid, ePos[0], ePos[1], ePos[2]);
		eInt = GetPlayerInterior(playerid);
		eVW = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have set the event's position.");
		return 1;
	}
	else if(!strcmp(option, "weapon", true, 6))
	{
	    new wep;
	    if(sscanf(params, "s[8]ii", option, wep, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /seteventinfo weapon [slot] [weaponid]");
		if(wep < 1 || wep > 3) return SendClientMessage(playerid, COLOR_GREY, "Weapon slots are between 1 and 3.");
		if(amount < 0 || amount > 46 || amount == 19 || amount == 20 || amount == 21) return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon id.");
	    switch(wep)
	    {
	        case 1: EventWep[0] = amount;
	        case 2: EventWep[1] = amount;
	        case 3: EventWep[2] = amount;
	    }
	    format(string, sizeof(string), " You have set weapon slot %d's id to %d.", wep, amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(!strcmp(option, "health", true, 6))
	{
	    if(sscanf(params, "s[8]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /seteventinfo health [amount]");
	    EventHealth = amount;
	    format(string, sizeof(string), " You have set the event's health to %d.", amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

	}
	else if(!strcmp(option, "armor", true, 5))
	{
	    if(sscanf(params, "s[8]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /seteventinfo armor [amount]");
	    EventArmor = amount;
	    format(string, sizeof(string), " You have set the event's armor to %d.", amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

	}
	return 1;
}

CMD:startevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!EventOn) return SendClientMessage(playerid, COLOR_GREY, "There's no current event happening.");
	if(!EventLocked) return SendClientMessage(playerid, COLOR_GREY, "The event must be locked before it starts.");
	if(EventOn == 2) return SendClientMessage(playerid, COLOR_GREY, "The event has already started.");
    SendClientMessageToAll(COLOR_LIGHTRED, "*** The event has started ***");
    EventOn = 2;
	foreach(Player, i)
	{
	    if(Event[i])
	    {
	        GivePlayerWeapon(i, EventWep[0], 999999);
	        GivePlayerWeapon(i, EventWep[1], 999999);
	        GivePlayerWeapon(i, EventWep[2], 999999);
	        SetPlayerHealth(i, EventHealth);
	        SetPlayerArmour(i, EventArmor);
	    }
	}
	return 1;
}

CMD:lockevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!EventOn) return SendClientMessage(playerid, COLOR_GREY, "There's no current event happening.");
	if(EventOn == 2) return SendClientMessage(playerid, COLOR_GREY, "The event has already started.");
	if(!EventLocked)
	{
	    SendClientMessageToAll(COLOR_LIGHTRED, "*** The event has been locked ***");
	    EventLocked = 1;
    }
    else
    {
	    SendClientMessageToAll(COLOR_LIGHTRED, "*** The event has been unlocked ***");
	    EventLocked = 0;
    }
	return 1;
}

CMD:announceevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(ePos[0] == 0 && ePos[1] == 0 && ePos[2] == 0) return SendClientMessage(playerid, COLOR_GREY, "You have to at least set the event's position before opening it.");
	if(EventOn) return SendClientMessage(playerid, COLOR_GREY, "The event has been announced already.");
	if(EventOn == 2) return SendClientMessage(playerid, COLOR_GREY, "The event has already started.");
	EventOn = 1;
	SendClientMessageToAll(COLOR_LIGHTRED, "*** An event has started, /joinevent to join ***");
    cmd_joinevent(playerid, params);
	return 1;
}

CMD:endevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!EventOn) return SendClientMessage(playerid, COLOR_GREY, "There's no current event happening.");
    SendClientMessageToAll(COLOR_LIGHTRED, "*** The event has ended ***");
	foreach(Player, i)
	{
	    if(Event[i])
	    {
	        GunsBeingRemoved[i] = 1;
		    ResetPlayerWeapons(i);
		    GunsBeingRemoved[playerid] = 1;
		    SetPlayerPos(i, PlayerInfo[i][pX], PlayerInfo[i][pY], PlayerInfo[i][pZ]);
			SetPlayerInterior(i, PlayerInfo[i][pInt]);
			SetPlayerVirtualWorld(i, PlayerInfo[i][pVW]);
			SetPlayerHealth(i, PlayerInfo[i][pHealth]);
			SetPlayerArmour(i, PlayerInfo[i][pArmor]);
			for(new w = 0; w < 13; w++)
			{
			    GiveDodWeapon(i, PlayerInfo[i][pWeapon][w], PlayerInfo[i][pWeaponAmmo][w]);
			}
			Event[i] = 0;
		}
		EventOn = 0; EventLocked = 0;
		ePos[0] = 0; ePos[1] = 0; ePos[2] = 0; EventWep[0] = 0; EventWep[1] = 0; EventWep[2] = 0;
		eInt = 0; eVW = 0; EventHealth = 0; EventArmor = 0;
	}

	return 1;
}

CMD:listen(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /listen [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Whisper | SMS | PM");
		return 1;
	}
	if(!strcmp(params, "whisper", true))
	{
	    if(!Whispers[playerid])
	    {
	        Whispers[playerid] = 1;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have started listening to whispers.");
	    }
	    else
	    {
	        Whispers[playerid] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have stopped listening to whispers.");
	    }
	}
	else if(!strcmp(params, "sms", true))
	{
		if(!SMSes[playerid])
	    {
	        SMSes[playerid] = 1;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have started listening to SMSes.");
	    }
	    else
	    {
	        SMSes[playerid] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have stopped listening to SMSes.");
	    }
	}
	else if(!strcmp(params, "pm", true))
	{
	    if(!PMs[playerid])
	    {
	        PMs[playerid] = 1;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have started listening to PMs.");
	    }
	    else
	    {
	        PMs[playerid] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have stopped listening to PMs.");
	    }
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid listening option.");
	return 1;
}

CMD:editpoint(playerid, params[])
{
	new string[128], point, time;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "ii", point, time)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /editpoint [point] [time]");
	if(point < 1 || point > 5) return SendClientMessage(playerid, COLOR_GREY, "Points are between 1 and 5.");
	if(time < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid time.");
	point = point-1;
    PointInfo[point][pTime] = time;
    format(string, sizeof(string), "AdmWarn: %s has set the %s point to be capturable in %d hours.", RPN(playerid), PointInfo[point][pName], PointInfo[point][pTime]);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:online(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Real Online Players]:");
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
		    format(string, sizeof(string), "%d) {FFFFFF}%s ", i, RPN(i));
		    SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}



CMD:music(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[256]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /music [url]");
	if(!strcmp(params, "stop", true, 4))
	{
		StopAudioStreamForPlayer(playerid);
	    SendClientMessage(playerid, COLOR_LIGHTRED, " You have stopped listening to music.");
	    return 1;
	}
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	format(string, sizeof(string), "AdmCmd: %s has started playing a song globally. ('/music stop' to stop listening)", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	foreach(Player, i)
	{
		PlayAudioStreamForPlayer(i, params);
	}
	return 1;
}

CMD:switchfam(playerid, params[])
{
	new string[128], input;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", input)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /switchfam [slot]");
	if(input < 1 || input > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10");
	PlayerInfo[playerid][pFam] = input;
	PlayerInfo[playerid][pFamRank] = 6;
	format(string, sizeof(string), " You have switched to the %s family.", FamInfo[input][fName]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:switchfac(playerid, params[])
{
	new string[128], input;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pFacMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", input))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /switchfac [faction]");
		SendClientMessage(playerid, COLOR_GREY, "FACTIONS: 0) Civilian | 1) NYPD | 2) Government | 3) Hitman Agency | 4) News Agency 5) LSFMD");
		SendClientMessage(playerid, COLOR_GREY, "FACTIONS: 6) FBI");
		return 1;
	}
	if(input < 0 || input > 7) return SendClientMessage(playerid, COLOR_GREY, "Factions are between 0 and 7");
	PlayerInfo[playerid][pFac] = input;
	PlayerInfo[playerid][pFacRank] = 6;
	format(string, sizeof(string), " You have switched to the %s faction.", RPFN(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}
CMD:ch(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /ch [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(HHcheckUsed != 0)
    {
        SendClientMessage(playerid, COLOR_WHITE, "The health hack check is being used by another admin, please try again in a moment!");
        return 1;
    }
	HHcheckUsed = 1;
   	format(string, sizeof(string), "AdmWarn: %s has initiated a health hack check on %s.", RPN(playerid), RPN(playerb));
   	SendAdminMessage(COLOR_DARKRED, 1, string);
	GetPlayerHealth(playerb, HHcheckFloats[playerb][0]);
	GetPlayerArmour(playerb, HHcheckFloats[playerb][1]);
	GetPlayerPos(playerb, HHcheckFloats[playerb][2], HHcheckFloats[playerb][3], HHcheckFloats[playerb][4]);
	GetPlayerFacingAngle(playerb, HHcheckFloats[playerb][5]);
	HHcheckVW[playerb] = GetPlayerVirtualWorld(playerb);
	HHcheckInt[playerb] = GetPlayerInterior(playerb);
	TogglePlayerControllable(playerb, 1);
   	SetPlayerCameraPos(playerb, 2057.1284,-1913.4607,661.1432);
	SetPlayerCameraLookAt(playerb, 1909.5645,-1876.0581,661.1432);
    SetPlayerVirtualWorld(playerb, 0);
	SetPlayerInterior(playerb, 1);
    SetPlayerHealth(playerb, 100);
    SetPlayerArmour(playerb, 0);
	SetPlayerPos(playerb, -1400.994873, 106.899650, 1032.273437);
	SetPlayerFacingAngle(playerb, 90.66);
	CreateExplosion(-1400.994873, 106.899650 , 1032.273437, 8, 20);
	SetTimerEx("HealthHackCheck", 1250, 0, "dd", playerid, playerb);
	return 1;
}
CMD:aname(playerid, params[])
{
	new string[128], file[32], text[MAX_PLAYER_NAME];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[24]", text)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /aname [name]");
	if(aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You must be off duty to change your admin name.");
	if(strlen(text) < 2) return SendClientMessage(playerid, COLOR_GREY, "The admin name needs to be atleast 2 characters.");
	// Start of detecting space in name
	new end, temp[32], temp2[32];
	end = strfind(text, " ",true);
	if(end != -1)
	{
	    strmid(temp, text, 0, end);
	    format(temp, sizeof(temp), "%s_", temp);
	    strdel(text, 0, end);
		strmid(temp2, text, 1, strlen(text));
	    format(text, 24, "");
	    strcat(text, temp, sizeof(temp));
	    strcat(text, temp2, sizeof(temp2));
	}
	// End of detecting space in name
	format(file, sizeof(file), "users/%s.ini", text);
	if(dini_Exists(file))
	{
	    format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	    if(strlen(dini_Get(file, "AdminName")) && strcmp(dini_Get(file, "AdminName"), text))
	    {
	     	SendClientMessage(playerid, COLOR_GREY, "Name is already in use.");
	        return 1;
	    }
	}
	format(string, sizeof(string), " You have changed your admin name to: {FF6347}%s", text);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "%s has changed their admin name to %s.", RPN(playerid), text);
	Log("logs/aname.log", string);
	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
	if(dini_Exists(file)) dini_Remove(file);
	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	dini_Set(file, "AdminName", text);
	format(file, sizeof(file), "users/%s.ini",dini_Get(file, "AdminName"));
	dini_Create(file);
	dini_Set(file, "OldName", RPNU(playerid));
	dini_IntSet(file, "Admin", PlayerInfo[playerid][pAdmin]);
	dini_IntSet(file, "AdminAccount", 1);
	dini_IntSet(file, "Age", 25);
	dini_IntSet(file, "Gender", 1);
	dini_IntSet(file, "Tutorial", 1);
	dini_Set(file, "IP", PlayerInfo[playerid][pIP]);
	return 1;
}

/*CMD:forceduty(playerid, params[])
{
	new string[128], file[32], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /forceduty [adminid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player is not an admin.");
	cmd_aduty(playerb, params);
	format(string, sizeof(string), "AdmWarn: %s has forced %s to change their admin duty status.", RPN(playerid), RPN(playerb), dini_Get(file, "AdminName"));
    SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}



CMD:aduty(playerid, params[])
{
	new string[128], file[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");

	{
		format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
    	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Choose an admin name using /aname first.");
    	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
        format(string, sizeof(string), "AdmWarn: %s has went on admin duty. (Admin name: %s)", RPN(playerid), dini_Get(file, "AdminName"));
		SendAdminMessage(COLOR_DARKRED, 1, string);
		SaveChar(playerid);
		ClearChar(playerid);
		format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		SetPlayerName(playerid, dini_Get(file, "AdminName"));
		LoadChar(playerid);
		aDuty[playerid] = 1;
		SpawnChar(playerid);
	    GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 16);
	    format(string, sizeof(string), "%s", RPALN(playerid));
		if(IsValidDynamic3DTextLabel(aDutyText[playerid]))  DestroyDynamic3DTextLabel(aDutyText[playerid]);
		if(PlayerInfo[playerid][pAdmin] == 1) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIGHTGREEN, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 2) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIME, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 3) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 4) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 5) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_RED, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 6) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_DARKRED, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 7) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_DARKRED, 0, 0, -20, 25, playerid);
     	if(PlayerInfo[playerid][pAdmin] == 8) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIGHTRED, 0, 0, -20, 25, playerid);
        if(PlayerInfo[playerid][pAdmin] == 9) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_CYAN, 0, 0, -20, 25, playerid);
        Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, aDutyText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
	}
	else
	{
	    if(Spec[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't go off admin duty while spectating someone.");
	    format(file, sizeof(file), "users/%s.ini",RPNU(playerid));
	    SaveChar(playerid);
	    ClearChar(playerid);
	    SetPlayerName(playerid, dini_Get(file, "OldName"));
		LoadChar(playerid);
		aDuty[playerid] = 0;
		SpawnChar(playerid);
	    format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	    format(string, sizeof(string), "AdmWarn: %s has went off admin duty. (Admin name: %s)", RPN(playerid), dini_Get(file, "AdminName"));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
		DestroyDynamic3DTextLabel(aDutyText[playerid]);
	}
	return 1;
}*/

CMD:aod(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid])
	{
        format(string, sizeof(string), "{FFFFFF}[{FF0000}AdmWarn{FFFFFF}]: %s is {009900}ON DUTY.", RPN(playerid));
		SendAdminMessage(COLOR_DARKRED, 1, string);
		aDuty[playerid] = 1;
	    format(string, sizeof(string), "%s", RPALN(playerid));
		if(IsValidDynamic3DTextLabel(aDutyText[playerid]))  DestroyDynamic3DTextLabel(aDutyText[playerid]);
		if(PlayerInfo[playerid][pAdmin] == 1) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIGHTGREEN, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 2) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIME, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 3) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 4) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 5) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_RED, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 6) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_DARKRED, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 7) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_DARKRED, 0, 0, -20, 25, playerid);
        if(PlayerInfo[playerid][pAdmin] == 8) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIGHTRED, 0, 0, -20, 25, playerid);
        Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, aDutyText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
        PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
	}
	else
	{
	    if(Spec[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't go off admin duty while spectating someone.");
		aDuty[playerid] = 0;
	    format(string, sizeof(string), "{FFFFFF}[{FF0000}AdmWarn{FFFFFF}]: %s is {FF0000}OFF DUTY.", RPN(playerid));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
		DestroyDynamic3DTextLabel(aDutyText[playerid]);
	}
	return 1;
}

CMD:mod(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pMapper] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!mDuty[playerid])
	{
        format(string, sizeof(string), "MapperWarn: %s has went on mapper duty.", RPN(playerid));
		SendMapperMessage(COLOR_GREEN, 1, string);
		mDuty[playerid] = 1;
	    format(string, sizeof(string), "%s", RPALN(playerid));
		if(IsValidDynamic3DTextLabel(aDutyText[playerid]))  DestroyDynamic3DTextLabel(aDutyText[playerid]);
		if(PlayerInfo[playerid][pMapper] == 1) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIGHTGREEN, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pMapper] == 2) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIME, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pMapper] == 3) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pMapper] == 4) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pMapper] == 5) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_RED, 0, 0, -20, 25, playerid);
        Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, aDutyText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
        PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
	}
	else
	{
		mDuty[playerid] = 0;
        format(string, sizeof(string), "MapperWarn: %s has went off mapper duty.", RPN(playerid));
		SendMapperMessage(COLOR_GREEN, 1, string);
		DestroyDynamic3DTextLabel(aDutyText[playerid]);
	}
	return 1;
}


CMD:nmute(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pHelper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /nmute [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pNMute])
	{
	    format(string, sizeof(string), "AdmWarn: %s has muted %s from newbie chat.", RPN(playerid), RPN(playerb));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
	    format(string, sizeof(string), "HelpWarn: %s has muted %s from newbie chat.", RPN(playerid), RPN(playerb));
	    SendHelperMessage(COLOR_DARKRED, 1, string);
	    PlayerInfo[playerb][pNMute] = 1;
	    SendClientMessage(playerb, COLOR_LIGHTRED, " You have been muted from the newbie channel by an administrator for abuse.");
	}
	else
	{
	    format(string, sizeof(string), "AdmWarn: %s has unmuted %s from newbie chat.", RPN(playerid), RPN(playerb));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
	    format(string, sizeof(string), "HelpWarn: %s has unmuted %s from newbie chat.", RPN(playerid), RPN(playerb));
	    SendHelperMessage(COLOR_DARKRED, 1, string);
	    PlayerInfo[playerb][pNMute] = 0;
	    SendClientMessage(playerb, COLOR_LIGHTRED, " You have been unmuted from the newbie channel by an administrator.");
	}
	return 1;
}

CMD:rmute(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /rmute [playerid]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pRMute])
	{
	    format(string, sizeof(string), "AdmWarn: %s has muted %s from reporting.", RPN(playerid), RPN(playerb));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
	    PlayerInfo[playerb][pRMute] = 1;
	    SendClientMessage(playerb, COLOR_LIGHTRED, " You have been muted from reporting by an administrator for abuse.");
	}
	else
	{
	    format(string, sizeof(string), "AdmWarn: %s has unmuted %s from reporting.", RPN(playerid), RPN(playerb));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
	    PlayerInfo[playerb][pRMute] = 0;
	    SendClientMessage(playerb, COLOR_LIGHTRED, " You have been unmuted from reporting by an administrator.");
	}
	return 1;
}
CMD:admute(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /adrmute [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pADMute])
	{
	    format(string, sizeof(string), "AdmWarn: %s has muted %s from advertising.", RPN(playerid), RPN(playerb));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
	    PlayerInfo[playerb][pADMute] = 1;
	    SendClientMessage(playerb, COLOR_LIGHTRED, " You have been muted from advertising by an administrator for abuse.");
	}
	else
	{
	    format(string, sizeof(string), "AdmWarn: %s has unmuted %s from advertising.", RPN(playerid), RPN(playerb));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
	    PlayerInfo[playerb][pADMute] = 0;
	    SendClientMessage(playerb, COLOR_LIGHTRED, " You have been unmuted from advertising by an administrator.");
	}
	return 1;
}
CMD:setpass(playerid, params[])
{
    new playerb[32], string[128], file[32], password[256];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[32]s[256]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setpass [playername] [password]");
	if(RPIDFN(playerb) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player is connected to the server.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	WP_Hash(password, sizeof(password), params);
	dini_Set(file, "Password", password);
	format(string, sizeof(string), "AdmWarn: %s has changed %s's password.", RPN(playerid), playerb);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/changepass.log", string);
	format(string, sizeof(string), " You have changed {FF6347}%s{FFFFFF}'s password to: {FF6347}%s", playerb, params);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:flag(playerid, params[])
{
    new string[128], playerb[32], file[32];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[32]s[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /flag [playername] [text]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(AntiAdv(playerid, params)) return 1;
    format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	if(RPIDFN(playerb) == INVALID_PLAYER_ID || RPIDFN(playerb) != INVALID_PLAYER_ID && !IsPlayerLoggedIn(RPIDFN(playerb)))
	{
	    dini_Set(file, "Flag", params);
	}
	else
	{
		format(PlayerInfo[RPIDFN(playerb)][pFlag], 64, "%s", params);
	}
	format(string, sizeof(string), "AdmWarn: %s has placed a flag on %s.", RPN(playerid), playerb);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:showflag(playerid, params[])
{
    new string[128], playerb;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /showflag [playerid]");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!strlen(PlayerInfo[playerb][pFlag])) return SendClientMessage(playerid, COLOR_GREY, "Player is not flagged.");
	format(string, sizeof(string), "[FLAG] {FFFFFF}%s {FF9900}- {FFFFFF}%s", RPN(playerb), PlayerInfo[playerb][pFlag]);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	return 1;
}

CMD:showflags(playerid, params[])
{
    new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Flagged Players]");
	foreach(Player, i)
	{
	    if(strlen(PlayerInfo[i][pFlag]))
	    {
	        format(string, sizeof(string), "- %s", RPN(i));
	        SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	}
	return 1;
}

CMD:clearflag(playerid, params[])
{
    new string[128], playerb[32], file[32];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[32]s[128]", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /clearflag [playername]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	if(RPIDFN(playerb) == INVALID_PLAYER_ID || RPIDFN(playerb) != INVALID_PLAYER_ID && !IsPlayerLoggedIn(RPIDFN(playerb)))
	{
	    if(!strlen(dini_Get(file, "Flag"))) return SendClientMessage(playerid, COLOR_GREY, "Player is not flagged.");
	    dini_Set(file, "Flag", "");
	}
	else
	{
	    if(!strlen(PlayerInfo[RPIDFN(playerb)][pFlag])) return SendClientMessage(playerid, COLOR_GREY, "Player is not flagged.");
		format(PlayerInfo[RPIDFN(playerb)][pFlag], 64, "");
	}
	format(string, sizeof(string), "AdmWarn: %s has cleared the flag on %s.", RPN(playerid), playerb);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:clearchat(playerid, params[])
{
    new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	format(string, sizeof(string), "AdmCmd: %s has cleared the chat window.", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	return 1;
}

CMD:fineall(playerid, params[])
{
	new string[128], amount;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fineall [amount]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
            foreach(Player, i)
			{
			    if(IsPlayerLoggedIn(i))
			    {
      	         GiveDodMoney(i, -amount);
			    }
			}
	format(string, sizeof(string), "AdmCmd: %s has fined everyone in the server! ($%d)", RPN(playerid), amount);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Log("logs/fine.log", string);
	return 1;
}

CMD:fine(playerid, params[])
{
	new string[128], playerb, amount;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "uis[32]", playerb, amount, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fine [playerid] [amount] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	GiveDodMoney(playerb, -amount);
	format(string, sizeof(string), "AdmCmd: %s has been fined $%d by %s, reason: %s", RPN(playerb), amount, RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Log("logs/fine.log", string);
	return 1;
}

CMD:pfine(playerid, params[])
{
	new string[128], playerb, amount, percent;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "uis[32]", playerb, percent, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /pfine [playerid] [percent] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(percent < 0 || percent > 100) return SendClientMessage(playerid, COLOR_GREY, "Percent is between 0 and 100.");
	new idx = PlayerInfo[playerid][pHouse];
	new idx2 = PlayerInfo[playerid][pBiz];
	new TotalWealth = PlayerInfo[playerb][pMoney]+PlayerInfo[playerb][pBank]+HouseInfo[idx][hMoney]+BizInfo[idx2][bMoney];
	amount = (percent*(TotalWealth))/100;
	GiveDodMoney(playerb, -amount);
	format(string, sizeof(string), "AdmCmd: %s has been fined $%d (%d percent) by %s, reason: %s", RPN(playerb), amount, percent, RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Log("logs/fine.log", string);
	return 1;
}

CMD:motd(playerid, params[])
{
	new string[128], motd;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "is[128]", motd, params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /motd [type] [motd]");
	    SendClientMessage(playerid, COLOR_GREY, "TYPES: 1) Server | 2) Admin");
		return 1;
	}
	if(motd < 0 || motd > 2) return SendClientMessage(playerid, COLOR_GREY, "MOTDs are between 1 and 3.");
	switch(motd)
	{
		case 1:
		{
			format(ServerMOTD, sizeof(ServerMOTD), "%s", params);
			format(string, sizeof(string), "SERVER MOTD: {FFFFFF}%s", ServerMOTD);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
		}
		case 2:
		{
			format(AdminMOTD, sizeof(AdminMOTD), "%s", params);
			format(string, sizeof(string), "ADMIN MOTD: {FFFFFF}%s", AdminMOTD);
			SendAdminMessage(COLOR_DARKRED, 1, string);
		}
	}
	return 1;
}

CMD:createday(playerid, params[])
{
	new string[128], dayz;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", dayz))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /createday [dayid]");
	    SendClientMessage(playerid, COLOR_LIME, "GOOD DAYS: {FFFFFF}1) Day of no drops | 2) Day of rising economy | 3)Day Of Hard Labour | 7) Day of Grand Opening");
	    SendClientMessage(playerid, COLOR_RED, "BAD DAYS: {FFFFFF}4) Education day | 5) Sunday | 6) Day Of National Protests");
		return 1;
	}
	if(dayz < 0 || dayz > 7) return SendClientMessage(playerid, COLOR_GREY, "Special days are between 1 and 6.");
	switch(dayz)
	{
		case 1:
		{
		    DayNoDrops = 1;
		    DayPaycheck = 0;
		    DayGrandOpening = 0;
		    DayNoPD = 0;
		    DayNoShops = 0;
		    DayNoJobs = 0;
			format(string, sizeof(string), "%s %s has just created a special day %s.", RPALN(playerid), RPN(playerid), SPDN());
			SendClientMessageToAll(COLOR_LIGHTBLUE, string);
			SendClientMessageToAll(COLOR_LIME, "_____________Roleplay Explanation_____________");
			SendClientMessageToAll(COLOR_WHITE, "Today the NYPD is busy in stopping crimes.");
			SendClientMessageToAll(COLOR_WHITE, "Therefore the doctors won't take your weapons");
			SendClientMessageToAll(COLOR_WHITE, "  in the hospital.");
			SendClientMessageToAll(COLOR_LIGHTRED, "((Today you don't lose weapons when you die.))");
			SendClientMessageToAll(COLOR_LIME, "_______________________________________________");
			SetTimer("DayOver", 7200000, false);
			SendRconCommand("hostname Intense RolePlay [Day of no drops]");
		}
		case 2:
		{
			DayPaycheck = 1;
			DayNoDrops = 0;
			DayGrandOpening = 0;
			DayNoPD = 0;
			DayNoShops = 0;
			DayNoJobs = 0;
			format(string, sizeof(string), "%s %s has just created a special day %s.", RPALN(playerid), RPN(playerid), SPDN());
			SendClientMessageToAll(COLOR_LIGHTBLUE, string);
			SendClientMessageToAll(COLOR_LIME, "_____________Roleplay Explanation_____________");
			SendClientMessageToAll(COLOR_WHITE, "Today The Government won a project.");
			SendClientMessageToAll(COLOR_WHITE, "Therefore the paycheck salaries have been raised.");
			SendClientMessageToAll(COLOR_LIGHTRED, "  ((Today you get 25 percent bigger paychecks.))");
			SendClientMessageToAll(COLOR_LIME, "_______________________________________________");
			SetTimer("DayOver", 7200000, false);
			SendRconCommand("hostname Intense Roleplay [Day of rising economey]");
		}
		case 3:
		{
		    DayRespect = 1;
		    DayGrandOpening = 0;
		    DayNoJobs = 0;
		    DayNoShops = 0;
		    DayPaycheck = 0;
		    DayNoDrops = 0;
		    DayNoPD = 0;
		    format(string, sizeof(string), "%s %s has just created a special day %s.", RPALN(playerid), RPN(playerid), SPDN());
			SendClientMessageToAll(COLOR_LIGHTBLUE, string);
			SendClientMessageToAll(COLOR_LIME, "_____________Roleplay Explanation_____________");
			SendClientMessageToAll(COLOR_WHITE, "Today we celeberate the Day Of Hard Labour,therefore");
			SendClientMessageToAll(COLOR_WHITE, "  respect is easily earned on the streets of LS.");
			SendClientMessageToAll(COLOR_LIGHTRED, "     ((Today you get double respect and job skills.))");
			SendClientMessageToAll(COLOR_LIME, "_______________________________________________");
			SetTimer("DayOver", 7200000, false);
			SendRconCommand("hostname Intense Roleplay [Day of hard labour]");
		}
		case 4:
		{
			DayNoPD = 1;
			DayGrandOpening = 0;
			DayPaycheck = 0;
			DayNoDrops = 0;
			DayNoShops = 0;
			DayNoJobs = 0;
			Tazer[playerid] = 0;
	        RemoveDodWeapon(playerid, 23);
		    if(ReplaceTazer[playerid] == 1)
	        {
	            ReplaceTazer[playerid] = 0;
	            GunsBeingRemoved[playerid] = 1;
	            GiveDodWeapon(playerid, OldGun[playerid], OldAmmo[playerid]);
	            GunsBeingRemoved[playerid] = 1;
	            OldGun[playerid] = 0;
	            OldAmmo[playerid] = 0;
	            SendClientMessage(playerid, COLOR_WHITE, "You have recieved your desert eagle back as you've holstered your tazer.");
	        }
			PlayerInfo[playerid][pFacDuty] = 0;
			format(string, sizeof(string), "%s %s has just created a special day %s.", RPALN(playerid), RPN(playerid), SPDN());
			SendClientMessageToAll(COLOR_LIGHTBLUE, string);
			SendClientMessageToAll(COLOR_RED, "_____________Roleplay Explanation_____________");
			SendClientMessageToAll(COLOR_WHITE, "Today the Governor has called all services");
			SendClientMessageToAll(COLOR_WHITE, "and their leaders in the city hall,therefore");
			SendClientMessageToAll(COLOR_WHITE, "      there is no services on duty.");
			SendClientMessageToAll(COLOR_LIGHTRED, "((Today members of factions can't go on duty.))");
			SendClientMessageToAll(COLOR_RED, "_______________________________________________");
			SetTimer("DayOver", 3600000, false);
			SendRconCommand("hostname Intense Roleplay [Day of education]");
		}
		case 5:
		{
		    DayGrandOpening = 0;
		    DayNoShops = 1;
		    DayPaycheck = 0;
		    DayNoDrops = 0;
		    DayNoPD = 0;
		    DayNoJobs = 0;
		    format(string, sizeof(string), "%s %s has just created a special day %s.", RPALN(playerid), RPN(playerid), SPDN());
			SendClientMessageToAll(COLOR_LIGHTBLUE, string);
			SendClientMessageToAll(COLOR_RED, "_____________Roleplay Explanation_____________");
			SendClientMessageToAll(COLOR_WHITE, "      It's Sunday-all shops are closed!");
			SendClientMessageToAll(COLOR_LIGHTRED, "  ((Today you can't enter any shops/businesses.))");
			SendClientMessageToAll(COLOR_RED, "_______________________________________________");
			SetTimer("DayOver", 3600000, false);
			SendRconCommand("hostname Intense Roleplay [Day of sunday holiday]");
		}
		case 6:
		{
		    DayGrandOpening = 0;
		    DayNoJobs = 1;
		    DayNoShops = 0;
		    DayPaycheck = 0;
		    DayNoDrops = 0;
		    DayNoPD = 0;
		    PlayerInfo[playerid][pJob] = 0;
		    PlayerInfo[playerid][pVIPJob] = 0;
		    format(string, sizeof(string), "%s %s has just created a special day %s.", RPALN(playerid), RPN(playerid), SPDN());
			SendClientMessageToAll(COLOR_LIGHTBLUE, string);
			SendClientMessageToAll(COLOR_RED, "_____________Roleplay Explanation_____________");
			SendClientMessageToAll(COLOR_WHITE, "Today there was a break in global economy,therefore");
			SendClientMessageToAll(COLOR_WHITE, "  all the people went out on a national protest.");
			SendClientMessageToAll(COLOR_LIGHTRED, "     ((Today you can't join or do any job.))");
			SendClientMessageToAll(COLOR_RED, "_______________________________________________");
			SetTimer("DayOver", 3600000, false);
			SendRconCommand("hostname Intense Roleplay [Day of national protests]");
		}
   		case 7:
		{
		    DayGrandOpening = 1;
		    DayNoJobs = 0;
		    DayNoShops = 0;
		    DayPaycheck = 0;
		    DayNoDrops = 0;
		    DayNoPD = 0;
		    PlayerInfo[playerid][pJob] = 0;
		    PlayerInfo[playerid][pVIPJob] = 0;
		    format(string, sizeof(string), "%s %s has just created a special day %s.", RPALN(playerid), RPN(playerid), SPDN());
			SendClientMessageToAll(COLOR_LIGHTBLUE, string);
			SendClientMessageToAll(COLOR_RED, "_____________Roleplay Explanation_____________");
			SendClientMessageToAll(COLOR_WHITE, "((Today, we are celebrating the grand opening!))");
			SendClientMessageToAll(COLOR_WHITE, "((Everyone gets refunded and 1 house for free!))");
			SendClientMessageToAll(COLOR_LIGHTRED, " ((Welcome to Intense Role-Play. We are glad you've decided to join us.)) ");
			SendClientMessageToAll(COLOR_RED, "_______________________________________________");
			SetTimer("DayOver", 3600000, false);
			SendRconCommand("hostname Intense Roleplay [Grand Opening - Refunds and Free house]");
		}
	}
	return 1;
}

CMD:endday(playerid, params[])
{
   // new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    //format(string, sizeof(string), "%s has just ended %s.", RPN(playerid), SPDN());
	//SendClientMessageToAll(COLOR_LIGHTRED, string);
	DayNoDrops = 0;
	DayPaycheck = 0;
	DayNoPD = 0;
	DayNoShops = 0;
	DayNoJobs = 0;
	DayGrandOpening = 0;
	DayRespect = 0;
	SendRconCommand("hostname Intense Role-Play [www.intenseroleplay.tk]");
	return 1;
}

CMD:day(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(DayNoDrops == 1)
    {
            SendClientMessageToAll(COLOR_LIME, "_____________Roleplay Explanation_____________");
			SendClientMessageToAll(COLOR_WHITE, "Today the NYPD is busy in stopping crimes.");
			SendClientMessageToAll(COLOR_WHITE, "Therefore the doctors won't take your weapons");
			SendClientMessageToAll(COLOR_WHITE, "  in the hospital.");
			SendClientMessageToAll(COLOR_LIGHTRED, "((Today you don't lose weapons when you die.))");
			SendClientMessageToAll(COLOR_LIME, "_______________________________________________");
	}
	else if(DayPaycheck == 1)
	{
        SendClientMessage(playerid, COLOR_LIME, "_____________Roleplay Explanation:_____________");
  		SendClientMessage(playerid, COLOR_WHITE, "Today the Los Santos Government won a community");
		SendClientMessage(playerid, COLOR_WHITE, "project,therefore everyones salary is bigger.");
		SendClientMessage(playerid, COLOR_LIGHTRED, "  ((Today you get 25 percent bigger paychecks.))");
		SendClientMessage(playerid, COLOR_LIME, "_______________________________________________");
	}
	else if(DayNoPD == 1)
	{
		SendClientMessageToAll(COLOR_RED, "_____________Roleplay Explanation:_____________");
		SendClientMessageToAll(COLOR_WHITE, "Today the Governor has called all services");
		SendClientMessageToAll(COLOR_WHITE, "and their leaders in the city hall,therefore");
		SendClientMessageToAll(COLOR_WHITE, "      there is no services on duty.");
		SendClientMessageToAll(COLOR_LIGHTRED, "((Today members of factions can't go on duty.))");
		SendClientMessageToAll(COLOR_RED, "_______________________________________________");
	}
	else if(DayNoShops == 1)
	{
	    SendClientMessage(playerid, COLOR_RED, "_____________Roleplay Explanation:_____________");
		SendClientMessage(playerid, COLOR_WHITE, "      It's Sunday-all shops are closed!");
		SendClientMessage(playerid, COLOR_LIGHTRED, "  ((Today you can't enter any shops/businesses.))");
		SendClientMessage(playerid, COLOR_RED, "_______________________________________________");
    }
    else if(DayNoJobs == 1)
	{
	    SendClientMessage(playerid, COLOR_RED, "_____________Roleplay Explanation:_____________");
		SendClientMessage(playerid, COLOR_WHITE, "Today there was a break in global economy,therefore");
		SendClientMessage(playerid, COLOR_WHITE, "  all the people went out on a national protest.");
		SendClientMessage(playerid, COLOR_LIGHTRED, "     ((Today you can't join or do any job.))");
		SendClientMessage(playerid, COLOR_RED, "_______________________________________________");
    }
    else if(DayRespect == 1)
    {
        SendClientMessage(playerid, COLOR_LIME, "_____________Roleplay Explanation:_____________");
		SendClientMessage(playerid, COLOR_WHITE, "Today we celebrate the Day Of Hard Labour,therefore");
		SendClientMessage(playerid, COLOR_WHITE, "  respect is easily earned on the streets of LS.");
		SendClientMessage(playerid, COLOR_LIGHTRED, "     ((Today you get double respect & skills.))");
		SendClientMessage(playerid, COLOR_LIME, "_______________________________________________");
	}
	else if(DayGrandOpening == 1)
	{
	    SendClientMessage(playerid, COLOR_LIME, "_____________Roleplay Explanation:_____________");
	    SendClientMessage(playerid, COLOR_WHITE, "Today we celebrate the Day of Grand Opening, therefor");
	    SendClientMessage(playerid, COLOR_WHITE, " Everyone is refunded money they spend as a new player. ");
	    SendClientMessage(playerid, COLOR_WHITE, " Also, they recieve 1 free house (Level 1 style) ");
	    SendClientMessage(playerid, COLOR_WHITE, " (( We are thank you for joining our community )) ");
		SendClientMessage(playerid, COLOR_LIME, "_______________________________________________");
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Today is just an ordinary day.");
	}
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3 && PlayerInfo[playerid][pMapper] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /unfreeze [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	TogglePlayerControllable(playerb, 1);
	format(string, sizeof(string), " You have unfreezed %s.", RPN(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has unfreezed you.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:freeze(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3 && PlayerInfo[playerid][pMapper] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /freeze [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	TogglePlayerControllable(playerb, 0);
	format(string, sizeof(string), " You have freezed %s.", RPN(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has freezed you.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:clearwanted(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /clearwanted [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "Player is not wanted.");
	PlayerInfo[playerb][pWanted] = 0;
	SetPlayerWantedLevel(playerb, 0);
	format(PlayerInfo[playerb][pContractBy], 32, "");
	format(string, sizeof(string), "AdmWarn: %s has cleared %s's wanted level.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	SendCopMessage(COLOR_DARKRED, string);
	SendClientMessage(playerb, COLOR_DARKRED, string);
	return 1;
}

CMD:clearcontract(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /clearcontract [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pContract]) return SendClientMessage(playerid, COLOR_GREY, "Player has no contract on their head.");
	PlayerInfo[playerb][pContract] = 0;
	format(PlayerInfo[playerb][pContractBy], 32, "");
	format(string, sizeof(string), "AdmWarn: %s has cleared the contract on %s's head.", RPN(playerid), RPN(playerb));
	SendHitmanMessage(COLOR_YELLOW, string);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:pm(playerid, params[])
{
 new playerb, string[128], text[128];
 if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
//    if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pMapper] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
 if(sscanf(params, "us[128]", playerb, text)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /pm [playerid] [text]");
 if(AntiAdv(playerid, params)) return 1;
 if(!strlen(text)) return SendClientMessage(playerid, COLOR_GREY, "You haven't entered any text to PM.");
 if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
 format(string, sizeof(string), "PM to %s: %s", RPN(playerb), text);
 SendClientMessage(playerid, COLOR_YELLOW, string);
 format(string, sizeof(string), "PM from %s: %s", RPN(playerid), text);
 SendClientMessage(playerb, COLOR_YELLOW, string);
 format(string, sizeof(string), "PM from %s to %s: %s", RPN(playerid), RPN(playerb), text);
 Log("logs/pm.log", string);
 foreach(Player, i)
 {
     if(IsPlayerLoggedIn(i))
     {
         format(string, sizeof(string), "[PM] %s to %s: %s", RPN(playerid), RPN(playerb), text);
         SendClientMessage(i, COLOR_YELLOW, string);
     }
 }
 return 1;
}


CMD:setstat(playerid, params[])
{
	new string[128], playerb, stat, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "uii", playerb, stat, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setstat [playerid] [statid] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "STATS: 1) Age | 2) Level | 3) Gender | 4) Bank | 5) Phone | 6) Mechanic | 7) Lawyer | 8) Trucker");
		SendClientMessage(playerid, COLOR_GREY, "STATS: 9) Weapons Dealer | 10) Weapons Smuggler | 11) Drugs Dealer | 12) Drugs Smuggler | 13) Boxer | 14) Weed | 15) cocaine");
		SendClientMessage(playerid, COLOR_GREY, "STATS: 16) Mats | 17) Respect Points");
		return 1;
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	switch(stat)
	{
	    case 1:
	    {
	        PlayerInfo[playerb][pAge] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Age to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 2:
	    {
	        PlayerInfo[playerb][pLevel] = amount;
	        SetPlayerScore(playerb, amount);
			format(string, sizeof(string), "AdmWarn: %s has set %s's Level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 3:
	    {
			if(amount < 1 || amount > 2) return SendClientMessage(playerid, COLOR_GREY, "Gender is between 1 and 2.");
	        if(amount == 1) format(string, sizeof(string), "Male");
	        else if(amount == 2) format(string, sizeof(string), "Female");
	        PlayerInfo[playerb][pGender] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Gender to %s.", RPN(playerid), RPN(playerb), string);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 4:
	    {
	        PlayerInfo[playerb][pBank] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Bank Balance to $%d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 5:
	    {
			if(amount != 0)
			{
	        	new idx = 1, File:file = fopen("cellphones.cfg", io_read);
				while(fread(file, string))
				{
				    if(strval(string) == amount) return SendClientMessage(playerid, COLOR_GREY, "This number is already registered.");
				    if(strval(string) == PlayerInfo[playerb][pNumber])
				    {
						fdeleteline("cellphones.cfg", idx);
				    }
				    idx ++;
				}
				fclose(file);
				file = fopen("cellphones.cfg", io_append);
				format(string, sizeof(string), "%d\r\n", amount);
				fwrite(file, string);
				fclose(file);
			}
	        PlayerInfo[playerb][pNumber] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Cellphone Number to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 6:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_MECHANIC] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Mechanic level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 7:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_LAWYER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Lawyer level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 8:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_TRUCKER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Trucker level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 9:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_WDEALER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Weapons Dealer level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 10:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_WSMUGGLER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Weapons Smuggler level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 11:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_DDEALER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Drugs Dealer level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 12:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_DSMUGGLER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Drugs Smuggler level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 13:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_BOXER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Boxer level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 14:
	    {
	        PlayerInfo[playerb][pWeed] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Weed to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 15:
	    {
	        PlayerInfo[playerb][pcocaine] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's cocaine to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 16:
	    {
	        PlayerInfo[playerb][pMaterials] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Materials to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 17:
	    {
	        PlayerInfo[playerb][pExp] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Respect Points to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	}
	if(amount > 0 && amount < 12) Log("logs/setstat.log", string);
	return 1;
}

CMD:automaticrefund(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /automaticrefund [playerid]");
		return 1;
	}
	if(!PlayerInfo[playerb][pNew]) return SendClientMessage(playerid, COLOR_GREY, "This player is not new.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	GiveDodMoney(playerb, 30000);
	PlayerInfo[playerb][pLevel] = 5;
	SetPlayerScore(playerb, PlayerInfo[playerb][pLevel]);
	format(string, sizeof(string), "AdmWarn: %s %s has autorefunded %s.", RPALN(playerid), RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	format(string, sizeof(string), "Administrator %s has given you a starter package that contains, Level 5, and $50000.", RPN(playerid));
	SendClientMessage(playerb, COLOR_LIGHTRED, string);
	return 1;
}

CMD:deleteaccount(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deleteaccount [name]");
	format(string, sizeof(string), "users/%s.ini", params);
	if(!dini_Exists(string)) return SendClientMessage(playerid, COLOR_GREY, "Userfile not found.");
	dini_Remove(string);
	format(string, sizeof(string), "AdmWarn: %s has deleted %s's userfile.", RPN(playerid), params);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/deleteaccount.log", string);
	return 1;
}

CMD:approve(playerid, params[])
{
	new string[128], option[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
   	if(sscanf(params, "s[32]", option))
   	{
   	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /approve [option]");
   	    SendClientMessage(playerid, COLOR_GREY, "OPTIONS: taxrequest | namechange | pnamechange");
   	    return 1;
   	}
   	if(!strcmp(option, "taxrequest", true, 10))
   	{
   	    if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to approve tax percent requests.");
		if(TaxRequester == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has requested a tax percent change.");
		format(string, sizeof(string), "AdmCmd: %s has accepted %s's request to change the tax percent to %d.", RPN(playerid), RPN(TaxRequester), TaxPercent);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/settax.log", string);
		format(string, sizeof(string), " Administrator %s has approved your requset to change the tax percent.", RPN(playerid));
        SendClientMessage(TaxRequester, COLOR_LIGHTBLUE, string);		TaxPercent = TempTaxPercent;
		TempTaxPercent = 0;
		TaxRequester = -1;
	}
	else if(!strcmp(option, "namechange", true, 10))
	{
	    new playerb, parm[42];
		if(sscanf(params, "s[32]u", option, playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /approve namechange [playerid]");
		if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to approve namechange requests.");
		if(!strlen(VIPName[playerb])) return SendClientMessage(playerid, COLOR_GREY, "Player hasn't requested a namechange.");
		format(parm, sizeof(parm), "%d %s", playerb, VIPName[playerb]);
		Approve[playerid] = 1;
		cmd_setname(playerid, parm);
		format(VIPName[playerb], MAX_PLAYER_NAME, "");
	}
	else if(!strcmp(option, "pnamechange", true, 10))
	{
	    new playerb, parm[42];
		if(sscanf(params, "s[32]u", option, playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /approve playernamechange [playerid]");
		if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to approve namechange requests.");
		if(!strlen(PlayerName[playerb])) return SendClientMessage(playerid, COLOR_GREY, "Player hasn't requested a namechange.");
		format(parm, sizeof(parm), "%d %s", playerb, PlayerName[playerb]);
		Approve[playerid] = 1;
		cmd_setname(playerid, parm);
		GiveDodMoney(playerb, PlayerInfo[playerb][pLevel] * -1200);
		format(string, sizeof(string), " Administrator %s has approved your namechange request, and have taken $%d from you.", RPN(playerid), PlayerInfo[playerb][pLevel] * -1200);
		SendClientMessage(playerb, COLOR_WHITE, string);
		format(PlayerName[playerb], MAX_PLAYER_NAME, "");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}

CMD:deny(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(sscanf(params, "s[32]", params))
   	{
   	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deny [option]");
   	    SendClientMessage(playerid, COLOR_GREY, "OPTIONS: taxrequest | namechange | pnamechange");
   	    return 1;
   	}
   	if(!strcmp(params, "taxrequest", false))
   	{
   	    if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to deny tax percent requests.");
		if(TaxRequester == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has requested a tax percent change.");
		if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
		format(string, sizeof(string), "AdmCmd: %s has denied %s's request to change the tax percent to %d.", RPN(playerid), RPN(TaxRequester), TempTaxPercent);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/settax.log", string);
		format(string, sizeof(string), " Administrator %s has denied your requset to change the tax percent.", RPN(playerid));
        SendClientMessage(TaxRequester, COLOR_LIGHTBLUE, string);
		TempTaxPercent = 0;
		TaxRequester = -1;
	}
	else if(!strcmp(params, "namechange", true, 10))
	{
	    new playerb;
		if(sscanf(params, "s[32]u", params, playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deny namechange [playerid]");
		if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to approve namechange requests.");
		if(!strlen(VIPName[playerb])) return SendClientMessage(playerid, COLOR_GREY, "Player hasn't requested a namechange.");
		format(VIPName[playerb], MAX_PLAYER_NAME, "");
		format(string, sizeof(string), "AdmWarn: %s has denied %s's namechange request.", RPN(playerid), RPN(playerb));
		SendAdminMessage(COLOR_DARKRED, 1, string);
		format(string, sizeof(string), " Administrator %s has denied your namechange request.", RPN(playerid));
		SendClientMessage(playerb, COLOR_WHITE, string);
	}
	else if(!strcmp(params, "pnamechange", true, 10))
	{
	    new playerb;
		if(sscanf(params, "s[32]u", params, playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deny playernamechange [playerid]");
		if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to approve namechange requests.");
		if(!strlen(PlayerName[playerb])) return SendClientMessage(playerid, COLOR_GREY, "Player hasn't requested a namechange.");
		format(PlayerName[playerb], MAX_PLAYER_NAME, "");
		format(string, sizeof(string), "AdmWarn: %s has denied %s's namechange request.", RPN(playerid), RPN(playerb));
		SendAdminMessage(COLOR_DARKRED, 1, string);
		format(string, sizeof(string), " Administrator %s has denied your namechange request.", RPN(playerid));
		SendClientMessage(playerb, COLOR_WHITE, string);
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}

CMD:clearads(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	dini_Remove("logs/advertisements.log");
	dini_Create("logs/advertisements.log");
	format(string, sizeof(string), "AdmWarn: %s has cleared the advertisements log.", RPN(playerid));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:lastads(playerid, params[])
{
	new string[128], File: file = fopen("logs/advertisements.log", io_read), idx=1;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Advertisements Log]:");
	while(fread(file, string))
	{
	    format(string, sizeof(string), "%d) %s", idx, string);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    idx ++;
	}
	fclose(file);
	return 1;
}

CMD:setname(playerid, params[])
{
	new playerb ,string[128], string2[128], file[64], idx, idx2, idx3, idx4, text[MAX_PLAYER_NAME];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 4 && !Approve[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(Approve[playerid]) Approve[playerid] = 0;
	if(sscanf(params, "us[24]", playerb, text)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setname [playerid] [name]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    // Start of detecting space in name
	new end, temp[32], temp2[32];
	end = strfind(text, " ",true);
	if(end != -1)
	{
	    strmid(temp, text, 0, end);
	    format(temp, sizeof(temp), "%s_", temp);
	    strdel(text, 0, end);
		strmid(temp2, text, 1, strlen(text));
	    format(text, 24, "");
	    strcat(text, temp, sizeof(temp));
	    strcat(text, temp2, sizeof(temp2));
	}
	// End of detecting space in name
    format(string, sizeof(string), "AdmCmd: %s has changed %s's name to %s.", RPN(playerid), RPN(playerb), text);
    format(string2, sizeof(string2), " Administrator %s has changed your name to {FF6347}%s{FFFFFF}.", RPN(playerid), text);
	format(file, sizeof(file), "users/%s.ini", text);
	if(dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Name already in use.");
	idx = PlayerInfo[playerb][pBiz];
	idx2 = PlayerInfo[playerb][pHouse];
	idx3 = PlayerInfo[playerb][pVBiz];
	idx4 = PlayerInfo[playerb][pVHouse];
    format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	dini_Remove(file);
	SetPlayerName(playerb, text);
	PlayerInfo[playerb][pBiz] = idx;
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	dini_Create(file);
	SaveChar(playerb);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	SendClientMessage(playerb, COLOR_WHITE, string2);
	if(idx)
	{
		format(BizInfo[idx][bOwner], 32, "%s", text);
  		format(string, sizeof(string), "Business of %s\nBusiness type: %s\n%s", BizInfo[idx][bOwner], RBT(idx), RBS(idx));
		UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
	}
	if(idx2)
	{
 		idx = idx2;
		format(HouseInfo[idx][hOwner], 32, "%s", text);
  		format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
		UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
	}
	if(idx3)
	{
		idx = idx3;
  		format(BizInfo[idx][bOwner], 32, "%s", text);
    	format(string, sizeof(string), "Business of %s\nBusiness type: %s\n%s", BizInfo[idx][bOwner], RBT(idx), RBS(idx));
		UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
	}
	if(idx4)
	{
 		idx = idx4;
   		format(HouseInfo[idx][hOwner], 32, "%s", text);
    	format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
		UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
	}
	return 1;
}

CMD:forcepaycheck(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	format(string, sizeof(string), "AdmCmd: %s has forced paychecks to be given now.", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        PlayerInfo[i][pMinutes] = 60;
	    }
	}
	Paycheck();
	return 1;
}

CMD:givecookieall(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	format(string, sizeof(string), "AdmCmd: %s has given a cookie to everyone online.", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        PlayerInfo[playerb][pCookies] ++;
	    }
	}
	return 1;
}

CMD:arrestpoint(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	GetPlayerPos(playerid, ap[0], ap[1], ap[2]);
	DestroyDynamic3DTextLabel(apt);
	DestroyPickup(apt2);
	apt = CreateDynamic3DTextLabel("Arrest Point\n{FFFF00}/arrest to arrest a suspect", COLOR_RED, ap[0], ap[1], ap[2], 12);
	apt2 = CreatePickup(1314, 1, ap[0], ap[1], ap[2]);
	SendClientMessage(playerid, COLOR_WHITE, " You have changed the NYPD's arrest point.");
	return 1;
}

CMD:prison(playerid, params[])
{
	new playerb, time, string[128], RandomCell;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "uis[64]", playerb, time, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /prison [playerid] [time] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(time == 0)
	{
	    if(!PlayerInfo[playerb][pPrison]) return SendClientMessage(playerid, COLOR_GREY, "Player is not prisoned.");
	    ClearDodWantedLevels(playerb);
	    ResetPlayerWeapons(playerb);
		ResetDodWeapons(playerb);
	    SetPlayerColor(playerb, TRANSPARENT_WHITE);
	    PlayerInfo[playerb][pPrison] = 0;
		PlayerInfo[playerb][pPrisonTime] = time;
		format(PlayerInfo[playerb][pPrisonReason], 64, "");
		format(PlayerInfo[playerb][pPrisonBy], 32, "");
		SetPlayerInterior(playerb, 0);
		SetPlayerVirtualWorld(playerb, 0);
		RandomCell = random(sizeof(RandomPrison));
		SetPlayerFacingAngle(playerb, 357.5062);
		SetPlayerPos(playerb, 1548.8394,-1669.6111,13.5656);
		SetCameraBehindPlayer(playerb);
		format(string, sizeof(string), "AdmCmd: %s has been released by %s, reason: %s", RPN(playerb), RPN(playerid), params);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		Log("logs/prison.log", string);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, " You have been released by an administrator, try to be a better player.");
		TogglePlayerControllable(playerb, 1);
	}
	else
	{
	    ClearDodWantedLevels(playerb);
	    SetPlayerColor(playerb, TRANSPARENT_ORANGE);
		PlayerInfo[playerb][pPrison] = 2;
		PlayerInfo[playerb][pPrisonTime] = time*60;
		format(PlayerInfo[playerb][pPrisonReason], 64, "%s", params);
		format(PlayerInfo[playerb][pPrisonBy], 32, "%s", RPN(playerid));
		SetPlayerInterior(playerb, 0);
		SetPlayerVirtualWorld(playerb, 0);
		RandomCell = random(sizeof(RandomPrison));
		SetPlayerFacingAngle(playerb, RandomPrison[RandomCell][3]);
		TogglePlayerControllable(playerb, 0);
		SetTimerEx("EnterExitTimer", 5000, false, "i", playerb);
		SetPlayerPos(playerb, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
		SetCameraBehindPlayer(playerb);
		format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: %s", RPN(playerb), RPN(playerid), params);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		Log("logs/prison.log", string);
		format(string, sizeof(string), " You have been prisoned by an administrator for %d minutes (%d seconds)", PlayerInfo[playerb][pPrisonTime]/60, PlayerInfo[playerb][pPrisonTime]);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
		GameTextForPlayer(playerb, "~w~Loading Objects", 3500, 3);
		TogglePlayerControllable(playerb, 0);
        SetTimerEx("EnterExitTimer", 5000, false, "i", playerb);
        PlayerInfo[playerb][pSpawnFreeze] = 1;
        // Clearing robbery
		if(BankRobber[playerb])
		{
		    new Rob = BankRobber[playerb]-1;
		    DisablePlayerCheckpoint(playerb);
			BankRobbersCount --;
			format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
			DeliverMoney[playerb] = 0;
			//
			foreach(Player, i)
			{
			    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
			    {
					if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
					else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
					else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
					else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
					else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
				}
			}
			format(string, sizeof(string), "** %s has been admin-prisoned and has failed the robbery. **", RPN(playerb));
			SendRobberyMessage(COLOR_LIGHTRED, string);
			SendCopMessage(COLOR_LIGHTRED, string);
			BankRobber[playerb] = 0;
			if(BankRobbersCount == 0)
			{
				TextDrawHideForAll(Textdraw0);
				TextDrawHideForAll(Textdraw1);
				TextDrawHideForAll(Textdraw2);
				TextDrawHideForAll(Textdraw3);
				TextDrawHideForAll(Textdraw4);
				TextDrawHideForAll(Textdraw5);
//				BankRobbery = 0;
				RobberyStarted = 0;
				format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
				SendClientMessageToAll(COLOR_YELLOW, string);
				TotalRobbers = 0;
				new copsonline;
				foreach(Player, i)
				{
				    if(IsACop(i)) copsonline++;
				}
				foreach(Player, i)
				{
				    if(IsACop(i))
				    {
						new Saved = (TotalRobbers*10000-(TotalStolen*10000));
						GiveDodMoney(i, Saved/copsonline);
						format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
						SendClientMessage(i, COLOR_LIME, string);
				    }
				}
			}
		}
	}
	RemovePlayerAttachedObject(playerb, 0);
	SetPlayerSpecialAction(playerb, SPECIAL_ACTION_NONE);
	return 1;
}

CMD:prisoners(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Admin Prisoners]:");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pPrison] == 2)
	    {
			format(string, sizeof(string), "Name: %s | Reason: %s | Time Left: %d seconds | By: %s", RPN(i), PlayerInfo[i][pPrisonReason], PlayerInfo[i][pPrisonTime], PlayerInfo[i][pPrisonBy]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:familieshelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
    SendClientMessage(playerid, COLOR_YELLOW, "FAMILIES: {FFFFFF}/fcreate /fdelete /fedit /fstrike /fstrikes");
	return 1;
}

CMD:fedit(playerid, params[])
{
	new string[128], option[32], idx, skin, skinid, veh, vehid, col1, col2;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "is[32]", idx, option))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fedit [slot] [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: skin | name | leader | vehicle");
		return 1;
	}
	if(idx < 1 || idx > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10.");
	if(!FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GREY, "Family slot is not being used.");
    if(!strcmp(option, "skin", true, 4))
    {
	    if(sscanf(params, "is[32]ii", idx, option, skin, skinid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fedit [familyslot] skin [skinslot] [skinid]");
		if(skin < 1 || skin > 7) return SendClientMessage(playerid, COLOR_GREY, "Skin slots are between 1 and 7.");
		skin = skin-1;
		FamInfo[idx][fSkins][skin] = skinid;
		/*switch(skin)
		{
		    case 1: FamInfo[idx][fSkins][0] = skinid;
		    case 2: FamInfo[idx][fSkins][1] = skinid;
		    case 3: FamInfo[idx][fSkins][2] = skinid;
		    case 4: FamInfo[idx][fSkins][3] = skinid;
		    case 5: FamInfo[idx][fSkins][4] = skinid;
		    case 6: FamInfo[idx][fSkins][5] = skinid;
		    case 7: FamInfo[idx][fSkins][6] = skinid;
		}*/
		format(string, sizeof(string), "AdmWarn: %s has set family %d's skin slot %d to %d.", RPN(playerid), idx, skin+1, skinid);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		return 1;
	}
	else if(!strcmp(option, "name", true, 4))
	{
	    if(sscanf(params, "is[32]s[32]", idx, option, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fedit [familyslot] name [familyname]");
		format(FamInfo[idx][fName], 32, "%s", params);
		format(string, sizeof(string), "AdmWarn: %s has set family %d's name to %s.", RPN(playerid), idx, params);
		SendAdminMessage(COLOR_DARKRED, 1, string);
	}
	else if(!strcmp(option, "leader", true, 6))
	{
  		if(sscanf(params, "is[32]s[32]", idx, option, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fedit [familyslot] leader [leadername]");
		format(FamInfo[idx][fLeader], 32, "%s", params);
		format(string, sizeof(string), "AdmWarn: %s has set family %d's leader name to %s.", RPN(playerid), idx, params);
		SendAdminMessage(COLOR_DARKRED, 1, string);
	}
	else if(!strcmp(option, "vehicle", true, 7))
	{
 		if(sscanf(params, "is[32]iiii", idx, option, veh, vehid, col1, col2)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fedit [familyslot] vehicle [vehiclelot] [vehiclemodel] [color1] [color2]");
		if(veh < 1 || veh > 5) return SendClientMessage(playerid, COLOR_GREY, "Vehicle slots are between 1 and 5.");
		veh = veh-1;
		if(FamInfo[idx][fVehType][veh])
		{
		    FamInfo[idx][fVehType][veh] = 0;
		    FamInfo[idx][fVehCoX][veh] = 0;
			FamInfo[idx][fVehCoY][veh] = 0;
			FamInfo[idx][fVehCoZ][veh] = 0;
			FamInfo[idx][fVehRot][veh] = 0;
			FamInfo[idx][fVehCol1][veh] = 0;
			FamInfo[idx][fVehCol2][veh] = 0;
			DestroyVehicle(FamInfo[idx][fVeh][veh]);
		}
		if(vehid)
		{
			FamInfo[idx][fVehType][veh] = vehid;
			GetPlayerPos(playerid, FamInfo[idx][fVehCoX][veh], FamInfo[idx][fVehCoY][veh], FamInfo[idx][fVehCoZ][veh]);
			GetPlayerFacingAngle(playerid, FamInfo[idx][fVehRot][veh]);
			FamInfo[idx][fVehCol1][veh] = col1;
			FamInfo[idx][fVehCol2][veh] = col2;
			FamInfo[idx][fVeh][veh] = CreateVehicle(vehid, FamInfo[idx][fVehCoX][veh], FamInfo[idx][fVehCoY][veh], FamInfo[idx][fVehCoZ][veh], FamInfo[idx][fVehRot][veh], FamInfo[idx][fVehCol1][veh], FamInfo[idx][fVehCol2][veh], 1200);
	        ChangeVehicleColor(FamInfo[idx][fVeh][veh], FamInfo[idx][fVehCol1][veh], FamInfo[idx][fVehCol2][veh]);
	        Fam[FamInfo[idx][fVeh][veh]] = idx;
			format(string, sizeof(string), "AdmWarn: %s has set family %d's vehicle slot %d to ID %d.", RPN(playerid), idx, veh+1, vehid);
			SendAdminMessage(COLOR_DARKRED, 1, string);
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}

CMD:fcreate(playerid, params[])
{
	new string[128], playerb, idx;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
   	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "ui", playerb, idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fcreate [playerid] [slot]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(idx < 1 || idx > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10.");
	if(FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GREY, "Family slot is already in use.");
	FamInfo[idx][fTaken] = 1;
	FamInfo[idx][fMembers] ++;
	PlayerInfo[playerb][pFam] = idx;
	PlayerInfo[playerb][pFamRank] = 6;
	FamInfo[idx][fStrikes] = 0;
	format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "%s", RPN(playerb));
	format(string, sizeof(string), "AdmWarn: %s has given %s family slot %d.", RPN(playerid), RPN(playerb), idx);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/families.log", string);
	format(string, sizeof(string), " %s has given you family slot {33AA33}%d {33CCFF}ownership.", RPN(playerid), idx);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:fstrike(playerid, params[])
{
	new string[128], idx;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fstrike [slot]");
	if(idx < 1 || idx > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10.");
	if(!FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GREY, "Family slot is not being used.");
	FamInfo[idx][fStrikes] ++;
	format(string, sizeof(string), "AdmWarn: %s has given family slot %d a strike.", RPN(playerid), idx);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/families.log", string);
	if(FamInfo[idx][fStrikes] >= 3)
	{
		format(string, sizeof(string), "AdmWarn: %s has disbanded family slot %d. (3 Strikes)", RPN(playerid), idx);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/families.log", string);
		foreach(Player, i)
		{
		    if(IsPlayerLoggedIn(i))
		    {
		        if(PlayerInfo[i][pFam] == idx)
		        {
		            PlayerInfo[i][pFam] = 0;
		            PlayerInfo[i][pFamRank] = 0;
			        format(string, sizeof(string), " %s has disbanded your family, you have been autokicked from the family.", RPN(playerid));
					SendClientMessage(i, COLOR_LIGHTBLUE, string);
		        }
		    }
		}
		FamInfo[idx][fTaken] = 0;
		format(FamInfo[idx][fName], 32, "None");
		format(FamInfo[idx][fMOTD], 64, "");
		FamInfo[idx][fColor] = 0;
		format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "None");
		FamInfo[idx][fMembers] = 0;
		FamInfo[idx][fSafeX] = 0;
		FamInfo[idx][fSafeY] = 0;
		FamInfo[idx][fSafeZ] = 0;
		FamInfo[idx][fMoney] = 0;
		FamInfo[idx][fMats] = 0;
		FamInfo[idx][fWeed] = 0;
		FamInfo[idx][fcocaine] = 0;
		format(FamInfo[idx][fRank1], 32, "");
		format(FamInfo[idx][fRank2], 32, "");
		format(FamInfo[idx][fRank3], 32, "");
		format(FamInfo[idx][fRank4], 32, "");
		format(FamInfo[idx][fRank5], 32, "");
		format(FamInfo[idx][fRank6], 32, "");
		FamInfo[idx][fSkins][0] = 0;
		FamInfo[idx][fSkins][1] = 0;
		FamInfo[idx][fSkins][2] = 0;
		FamInfo[idx][fSkins][3] = 0;
		FamInfo[idx][fSkins][4] = 0;
		FamInfo[idx][fSkins][5] = 0;
		FamInfo[idx][fSkins][6] = 0;
		DestroyDynamicPickup(FamInfo[idx][fPickup]);
		DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
		for(new veh=0; veh<5; veh++)
		{
			if(FamInfo[idx][fVehType][veh])
			{
			    FamInfo[idx][fVehType][veh] = 0;
			    FamInfo[idx][fVehCoX][veh] = 0;
				FamInfo[idx][fVehCoY][veh] = 0;
				FamInfo[idx][fVehCoZ][veh] = 0;
				FamInfo[idx][fVehRot][veh] = 0;
				FamInfo[idx][fVehCol1][veh] = 0;
				FamInfo[idx][fVehCol2][veh] = 0;
				DestroyVehicle(FamInfo[idx][fVeh][veh]);
			}
		}
	}
	return 1;
}

CMD:facstrike(playerid, params[])
{
	new string[128], idx, faction[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /facstrike [faction]");
	if(idx < 1 || idx > 4) return SendClientMessage(playerid, COLOR_GREY, "Factions are between 1 and 4.");
	FacInfo[idx][facStrikes] ++;
	if(idx == 1) format(faction, sizeof(faction), "Los Santos Police Department");
	else if(idx == 2) format(faction, sizeof(faction), "Government");
	else if(idx == 3) format(faction, sizeof(faction), "Hitman Agency");
	else if(idx == 4) format(faction, sizeof(faction), "SA News Agency");
	format(string, sizeof(string), "AdmWarn: %s has given the %s faction a strike.", RPN(playerid), faction);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/factions.log", string);
	if(FacInfo[idx][facStrikes] >= 3)
	{
		format(string, sizeof(string), "AdmWarn: %s has disbanded the %s faction. (3 Strikes)", RPN(playerid), faction);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/factions.log", string);
		foreach(Player, i)
		{
		    if(IsPlayerLoggedIn(i))
		    {
		        if(PlayerInfo[i][pFac] == idx)
		        {
		            PlayerInfo[i][pFac] = 0;
		            PlayerInfo[i][pFacRank] = 0;
			        format(string, sizeof(string), " %s has disbanded the %s, you have been autokicked from the faction.", RPN(playerid), faction);
					SendClientMessage(i, COLOR_LIGHTBLUE, string);
		        }
		    }
		}
		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
		FacInfo[idx][facStrikes] = 0;
		FacInfo[idx][facMembers] = 0;
		format(FacInfo[idx][fRank0], 32, "");
		format(FacInfo[idx][fRank1], 32, "");
		format(FacInfo[idx][fRank2], 32, "");
		format(FacInfo[idx][fRank3], 32, "");
		format(FacInfo[idx][fRank4], 32, "");
		format(FacInfo[idx][fRank5], 32, "");
		format(FacInfo[idx][fRank6], 32, "");
		format(FacInfo[idx][fDiv1], 32, "");
		format(FacInfo[idx][fDiv2], 32, "");
		format(FacInfo[idx][fDiv3], 32, "");
		format(FacInfo[idx][fDiv4], 32, "");
	}
	return 1;
}

CMD:fstrikes(playerid, params[])
{
	new string[128], idx, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "ii", idx, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fstrike [slot] [strikes]");
	if(idx < 1 || idx > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10.");
	if(amount < 0 || amount > 3) return SendClientMessage(playerid, COLOR_GREY, "Strikes are between 0 and 3.");
	if(!FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GREY, "Family slot is not being used.");
	FamInfo[idx][fStrikes] ++;
	format(string, sizeof(string), "AdmWarn: %s has set family slot %d's strikes to %d.", RPN(playerid), idx, amount);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/families.log", string);
	FamInfo[idx][fStrikes] = amount;
	if(FamInfo[idx][fStrikes] >= 3)
	{
		format(string, sizeof(string), "AdmWarn: %s has disbanded family slot %d. (3 Strikes)", RPN(playerid), idx);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/families.log", string);
		foreach(Player, i)
		{
		    if(IsPlayerLoggedIn(i))
		    {
		        if(PlayerInfo[i][pFam] == idx)
		        {
		            PlayerInfo[i][pFam] = 0;
		            PlayerInfo[i][pFamRank] = 0;
			        format(string, sizeof(string), " %s has disbanded your family, you have been autokicked from the family.", RPN(playerid));
					SendClientMessage(i, COLOR_LIGHTBLUE, string);
		        }
		    }
		}
		FamInfo[idx][fTaken] = 0;
		format(FamInfo[idx][fName], 32, "None");
		format(FamInfo[idx][fMOTD], 64, "");
		FamInfo[idx][fColor] = 0;
		format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "None");
		FamInfo[idx][fMembers] = 0;
		FamInfo[idx][fSafeX] = 0;
		FamInfo[idx][fSafeY] = 0;
		FamInfo[idx][fSafeZ] = 0;
		FamInfo[idx][fMoney] = 0;
		FamInfo[idx][fMats] = 0;
		FamInfo[idx][fWeed] = 0;
		FamInfo[idx][fcocaine] = 0;
		format(FamInfo[idx][fRank1], 32, "");
		format(FamInfo[idx][fRank2], 32, "");
		format(FamInfo[idx][fRank3], 32, "");
		format(FamInfo[idx][fRank4], 32, "");
		format(FamInfo[idx][fRank5], 32, "");
		format(FamInfo[idx][fRank6], 32, "");
		FamInfo[idx][fSkins][0] = 0;
		FamInfo[idx][fSkins][1] = 0;
		FamInfo[idx][fSkins][2] = 0;
		FamInfo[idx][fSkins][3] = 0;
		FamInfo[idx][fSkins][4] = 0;
		FamInfo[idx][fSkins][5] = 0;
		FamInfo[idx][fSkins][6] = 0;
		DestroyDynamicPickup(FamInfo[idx][fPickup]);
		DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
		for(new veh=0; veh<5; veh++)
		{
			if(FamInfo[idx][fVehType][veh])
			{
			    FamInfo[idx][fVehType][veh] = 0;
			    FamInfo[idx][fVehCoX][veh] = 0;
				FamInfo[idx][fVehCoY][veh] = 0;
				FamInfo[idx][fVehCoZ][veh] = 0;
				FamInfo[idx][fVehRot][veh] = 0;
				FamInfo[idx][fVehCol1][veh] = 0;
				FamInfo[idx][fVehCol2][veh] = 0;
				DestroyVehicle(FamInfo[idx][fVeh][veh]);
			}
		}
	}
	return 1;
}

CMD:fdelete(playerid, params[])
{
	new string[128], idx;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fdelete [slot]");
	if(idx < 1 || idx > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10.");
	if(!FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GREY, "Family slot is not being used.");
	format(string, sizeof(string), "AdmWarn: %s has disbanded family slot %d", RPN(playerid), idx);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/families.log", string);
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        if(PlayerInfo[i][pFam] == idx)
	        {
	            PlayerInfo[i][pFam] = 0;
	            PlayerInfo[i][pFamRank] = 0;
		        format(string, sizeof(string), " %s has disbanded your family, you have been autokicked from the family.", RPN(playerid));
				SendClientMessage(i, COLOR_LIGHTBLUE, string);
	        }
	    }
	}
	FamInfo[idx][fTaken] = 0;
	format(FamInfo[idx][fName], 32, "None");
	format(FamInfo[idx][fMOTD], 64, "");
	FamInfo[idx][fColor] = 0;
	format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "None");
	FamInfo[idx][fMembers] = 0;
	FamInfo[idx][fSafeX] = 0;
	FamInfo[idx][fSafeY] = 0;
	FamInfo[idx][fSafeZ] = 0;
	FamInfo[idx][fMoney] = 0;
	FamInfo[idx][fMats] = 0;
	FamInfo[idx][fWeed] = 0;
	FamInfo[idx][fcocaine] = 0;
	format(FamInfo[idx][fRank1], 32, "");
	format(FamInfo[idx][fRank2], 32, "");
	format(FamInfo[idx][fRank3], 32, "");
	format(FamInfo[idx][fRank4], 32, "");
	format(FamInfo[idx][fRank5], 32, "");
	format(FamInfo[idx][fRank6], 32, "");
	FamInfo[idx][fSkins][0] = 0;
	FamInfo[idx][fSkins][1] = 0;
	FamInfo[idx][fSkins][2] = 0;
	FamInfo[idx][fSkins][3] = 0;
	FamInfo[idx][fSkins][4] = 0;
	FamInfo[idx][fSkins][5] = 0;
	FamInfo[idx][fSkins][6] = 0;
	DestroyDynamicPickup(FamInfo[idx][fPickup]);
	DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
	for(new veh=0; veh<5; veh++)
	{
		if(FamInfo[idx][fVehType][veh])
		{
		    FamInfo[idx][fVehType][veh] = 0;
		    FamInfo[idx][fVehCoX][veh] = 0;
			FamInfo[idx][fVehCoY][veh] = 0;
			FamInfo[idx][fVehCoZ][veh] = 0;
			FamInfo[idx][fVehRot][veh] = 0;
			FamInfo[idx][fVehCol1][veh] = 0;
			FamInfo[idx][fVehCol2][veh] = 0;
			DestroyVehicle(FamInfo[idx][fVeh][veh]);
		}
	}
	return 1;
}

CMD:dynamics(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(PlayerInfo[playerid][pAdmin] >= 5)
    {
    SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
    SendClientMessage(playerid, COLOR_YELLOW, "DOORS: {FFFFFF}/createdoor /deletedoor /gotodoor /dedit /dused");
    SendClientMessage(playerid, COLOR_YELLOW, "GATES: {FFFFFF}/creategate /deletegate /gotogate /gedit /gused");
    SendClientMessage(playerid, COLOR_YELLOW, "MAPICONS: {FFFFFF}/createmapicon /deletemapicon /gotomapicon /medit /mused");
    SendClientMessage(playerid, COLOR_YELLOW, "BUSINESSES: {FFFFFF}/createbiz /deletebiz /gotobiz /asellbiz /bedit /bused /nearbiz");
    SendClientMessage(playerid, COLOR_YELLOW, "HOUSES: {FFFFFF}/createhouse /deletehouse /gotohouse /asellhouse /hedit /hused /nearhouse");
    SendClientMessage(playerid, COLOR_YELLOW, "GARAGES: {FFFFFF}/creategarage /deletegarage /gotogarage /garageused /garageedit /neargarage");
    }
    if(PlayerInfo[playerid][pAdmin] == 3 && PlayerInfo[playerid][pAdmin] == 4)
    {
        SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	    SendClientMessage(playerid, COLOR_YELLOW, "BUSINESSES: {FFFFFF}/createbiz /deletebiz /gotobiz /asellbiz /bedit /nearbiz");
	    SendClientMessage(playerid, COLOR_YELLOW, "HOUSES: {FFFFFF}/createhouse /deletehouse /gotohouse /asellhouse /hedit /nearhouse");
	    SendClientMessage(playerid, COLOR_YELLOW, "GARAGES: {FFFFFF}/creategarage /deletegarage /gotogarage /garageedit /asellgarage /neargarage");
	}
	return 1; // DynamicGates
}





CMD:gedit(playerid, params[])
{
	new string[128], idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
 	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gedit [option] [gateid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: object | close | open | speed | password");
		return 1;
	}
	if(!strcmp(params, "object", true, 5))
	{
	    new object;
	    if(sscanf(params, "s[128]ii", params, idx, object)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gedit object [gateid] [objectid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
        if(object == 0)
		{
			format(string, sizeof(string), "%d", object);
			cmd_deletegate(playerid, string);
			return 1;
		}
		GateInfo[idx][gModel] = object;
		DestroyDynamicObject(GateInfo[idx][gGate]);
		GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
	    format(string, sizeof(string), " You have set gate ID %d's object ID to %d.", idx, object);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(!strcmp(params, "close", true, 5))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gedit position [gateid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
		gEdit[playerid] = 1;
		gEditID[playerid] = idx;
		GetDynamicObjectPos(GateInfo[idx][gGate], gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		GetDynamicObjectRot(GateInfo[idx][gGate], gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		EditDynamicObject(playerid, GateInfo[idx][gGate]);
	    format(string, sizeof(string), " You are now editing gate ID %d's closing position.", idx);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(!strcmp(params, "open", true, 4))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gedit open [gateid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
		gEdit[playerid] = 2;
		gEditID[playerid] = idx;
		GetDynamicObjectPos(GateInfo[idx][gGate], gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		GetDynamicObjectRot(GateInfo[idx][gGate], gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		EditDynamicObject(playerid, GateInfo[idx][gGate]);
	    format(string, sizeof(string), " You are now editing gate ID %d's opening position.", idx);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(!strcmp(params, "speed", true, 5))
	{
	    new Float:speed;
	    if(sscanf(params, "s[128]if", params, idx, speed)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gedit open [gateid] [speed]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
		GateInfo[idx][gSpeed] = speed;
	    format(string, sizeof(string), " You have set gate ID %d's moving speed to %f.", idx, speed);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(!strcmp(params, "password", true, 8))
	{
	    new password[256];
	    if(sscanf(params, "s[128]is[256]", params, idx, password)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gedit open [gateid] [password]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
		format(GateInfo[idx][gPassword], 256, "%s", password);
	    format(string, sizeof(string), " You have set gate ID %d's password to {FF6347}%s", idx, password);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:gotogate(playerid, params[])
{
    new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gotogate [gateid]");
	if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
	SetPlayerPos(playerid, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]);
	format(string, sizeof(string), " You have teleported to gate ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:gused(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Gates]:");
	for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(GateInfo[idx][gModel])
	    {
			format(string, sizeof(string), "ID: %d | Object: %d | Speed: %f | Password: %s", idx, GateInfo[idx][gModel], GateInfo[idx][gSpeed], GateInfo[idx][gPassword]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:deletegate(playerid, params[])
{
	new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deletegate [gateid]");
	if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
	GateInfo[idx][gModel] = 0;
	GateInfo[idx][gCX] = 0;
	GateInfo[idx][gCY] = 0;
	GateInfo[idx][gCZ] = 0;
	GateInfo[idx][gCRX] = 0;
	GateInfo[idx][gCRY] = 0;
	GateInfo[idx][gCRZ] = 0;
	GateInfo[idx][gOX] = 0;
	GateInfo[idx][gOY] = 0;
	GateInfo[idx][gOZ] = 0;
	GateInfo[idx][gORX] = 0;
	GateInfo[idx][gORY] = 0;
	GateInfo[idx][gORZ] = 0;
	GateInfo[idx][gStatus] = 0;
	format(GateInfo[idx][gPassword], 256, "");
	GateInfo[idx][gSpeed] = 0;
	DestroyDynamicObject(GateInfo[idx][gGate]);
	DestroyDynamic3DTextLabel(GateInfo[idx][gText]);
	format(string, sizeof(string), "AdmWarn: %s has deleted gate ID %d.", RPN(playerid), idx);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/gates.log", string);
	foreach(Player, i)
	{
		if(PlayerInfo[i][pGate][0] == idx)
		{
		    PlayerInfo[i][pGate][0] = 0;
		    SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 1.");
		    format(string, sizeof(string), "AdmWarn: %s has deleted %s's slot 1 gate. (ID: %d)", RPN(playerid), RPN(i), idx);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/gates.log", string);
		}
		if(PlayerInfo[i][pGate][1] == idx)
		{
		    PlayerInfo[i][pGate][1] = 0;
		    SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 2.");
		    format(string, sizeof(string), "AdmWarn: %s has deleted %s's slot 2 gate. (ID: %d)", RPN(playerid), RPN(i), idx);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/gates.log", string);
		}
		if(PlayerInfo[i][pGate][2] == idx)
		{
		    PlayerInfo[i][pGate][2] = 0;
		    SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 3.");
		    format(string, sizeof(string), "AdmWarn: %s has deleted %s's slot 3 gate. (ID: %d)", RPN(playerid), RPN(i), idx);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/gates.log", string);
		}
	}
	return 1;
}

CMD:creategate(playerid, params[])
{
	new string[128], object;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", object)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /creategate [objectid]");
	for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(!GateInfo[idx][gModel])
	    {
	        GetPlayerPos(playerid, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]);
  			GateInfo[idx][gModel] = object;
			GateInfo[idx][gCX] = GateInfo[idx][gCX] + 2;
			GateInfo[idx][gCY] = GateInfo[idx][gCY] + 2;
			GateInfo[idx][gCRX] = 0;
			GateInfo[idx][gCRY] = 0;
			GateInfo[idx][gCRZ] = 0;
			GetPlayerPos(playerid, GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ]);
			GateInfo[idx][gOX] = GateInfo[idx][gOX] + 2;
			GateInfo[idx][gOY] = GateInfo[idx][gOY] + 2;
			GateInfo[idx][gORX] = 0;
			GateInfo[idx][gORY] = 0;
			GateInfo[idx][gORZ] = 0;
			GateInfo[idx][gStatus] = 0;
			format(GateInfo[idx][gPassword], 256, "");
			GateInfo[idx][gSpeed] = 2;
			// Creating
			format(string, sizeof(string), "Gate ID: %d", idx);
			GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
			GateInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], 10);
			// Text
			format(string, sizeof(string), "AdmWarn: %s has created gate ID %d. (Object: %d)", RPN(playerid), idx, object);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/gates.log", string);
			idx = MAX_GATES;
		}
	}
	return 1;
}

CMD:mused(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used MapIcons]:");
	for(new idx=0; idx<MAX_MAPICONS; idx++)
	{
	    if(MapIconInfo[idx][mpType])
	    {
			format(string, sizeof(string), "ID: %d | Pickup: %d", idx, MapIconInfo[idx][mpType]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:medit(playerid, params[])
{
	new string[128], idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
 	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /medit [option] [mapiconid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Position | Icon");
		return 1;
	}
	if(!strcmp(params, "position", true, 8))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /medit position [mapiconid]");
        if(MapIconInfo[idx][mpType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon id.");
        GetPlayerPos(playerid, MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ]);
        DestroyDynamicMapIcon(MapIconInfo[idx][mpID]);
		MapIconInfo[idx][mpID] = CreateDynamicMapIcon(MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ], MapIconInfo[idx][mpType], 0 ,0);
	    format(string, sizeof(string), " You have set mapicon ID %d's position to your coordinates.", idx);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "icon", true, 4))
	{
	    new pickup;
	    if(sscanf(params, "s[128]ii", params, idx, pickup)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /medit icon [mapiconid] [iconid]");
        if(pickup == 0 || pickup == 1) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon type.");
        if(MapIconInfo[idx][mpType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon id.");
        MapIconInfo[idx][mpType] = pickup;
        DestroyDynamicMapIcon(MapIconInfo[idx][mpID]);
		MapIconInfo[idx][mpID] = CreateDynamicMapIcon(MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ], MapIconInfo[idx][mpType], 0 ,0);
	    format(string, sizeof(string), " You have set mapicon ID %d's icon to %d.", idx, pickup);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:gotomapicon(playerid, params[])
{
    new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gotomapicon [doorid]");
	if(!MapIconInfo[idx][mpType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon id.");
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPos(playerid, MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ]);
	format(string, sizeof(string), " You have teleported to mapicon ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:deletemapicon(playerid, params[])
{
	new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deletemapicon [mapiconid]");
	if(!MapIconInfo[idx][mpType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon id.");
    MapIconInfo[idx][mpType] = 0;
    MapIconInfo[idx][mpX] = 0;
	MapIconInfo[idx][mpY] = 0;
	MapIconInfo[idx][mpZ] = 0;
	DestroyDynamicMapIcon(MapIconInfo[idx][mpID]);
    format(string, sizeof(string), "AdmWarn: %s has deleted mapicon ID %d.", RPN(playerid), idx);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/mapicons.log", string);
	return 1;
}

CMD:createmapicon(playerid, params[])
{
	new string[128], type;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /createmapicon [icon]");
	if(type == 0 || type == 1) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon type.");
	for(new idx=0; idx<MAX_MAPICONS; idx++)
	{
	    if(!MapIconInfo[idx][mpType])
	    {
		    MapIconInfo[idx][mpType] = type;
		    GetPlayerPos(playerid, MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ]);
		    MapIconInfo[idx][mpID] = CreateDynamicMapIcon(MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ], MapIconInfo[idx][mpType], 0 ,0);
			format(string, sizeof(string), "AdmWarn: %s has created mapicon ID %d.", RPN(playerid), idx);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/mapicons.log", string);
			idx = MAX_DOORS;
		}
	}
	return 1;
}

CMD:dused(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Doors]:");
	for(new idx=0; idx<MAX_DOORS; idx++)
	{
	    if(DoorInfo[idx][dType])
	    {
			format(string, sizeof(string), "ID: %d | Pickup: %d | Int: %d | VW: %d | Custom Int: %d | Custom Ext: %d | %s", idx, DoorInfo[idx][dType], DoorInfo[idx][dOInt], DoorInfo[idx][dOVW], DoorInfo[idx][dCInt], DoorInfo[idx][dCExt], DoorInfo[idx][dText]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:dedit(playerid, params[])
{
	new idx, text[128], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dedit [option] [doorid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Pickup | Text | Interior | Exterior | CustomInterior | CustomExterior");
		return 1;
	}
	if(!strcmp(params, "pickup", true, 6))
	{
	    new pickup;
	    if(sscanf(params, "s[128]ii", params, idx, pickup)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dedit pickup [doorid] [pickupid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		DoorInfo[idx][dType] = pickup;
		if(IsValidDynamicPickup(DoorInfo[idx][dPickup]))
		{
		    DestroyDynamicPickup(DoorInfo[idx][dPickup]);
		}
		DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
	    format(string, sizeof(string), " You have set door ID %d's pickup to %d", idx, pickup);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "text", true, 4))
	{
	    if(sscanf(params, "s[128]is[128]", params, idx, text)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dedit text [doorid] [text]");
	    if(AntiAdv(playerid, params)) return 1;
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		format(DoorInfo[idx][dText], 128, "%s", text);
		format(string, sizeof(string), "ID: %d\n%s", idx, DoorInfo[idx][dText]);
		UpdateDynamic3DTextLabelText(DoorInfo[idx][dTextID], COLOR_WHITE, string);
	    format(string, sizeof(string), " You have set door ID %d's text to %s", idx, text);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "interior", true, 8))
	{
	    if(sscanf(params, "s[128]i", params, idx, text)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dedit interior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		DoorInfo[idx][dIInt] = GetPlayerInterior(playerid);
		DoorInfo[idx][dIVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerFacingAngle(playerid, DoorInfo[idx][dIA]);
		GetPlayerPos(playerid, DoorInfo[idx][dIX], DoorInfo[idx][dIY], DoorInfo[idx][dIZ]);
	    format(string, sizeof(string), " You have set door ID %d's interior to your coordinates. (Int: %d | VW: %d)", idx, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "exterior", true, 8))
	{
	    if(sscanf(params, "s[128]i", params, idx, text)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dedit interior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		DoorInfo[idx][dOInt] = GetPlayerInterior(playerid);
		DoorInfo[idx][dOVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerFacingAngle(playerid, DoorInfo[idx][dOA]);
		GetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
		DestroyDynamicPickup(DoorInfo[idx][dPickup]);
		DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
		DestroyDynamic3DTextLabel(DoorInfo[idx][dTextID]);
		format(string, sizeof(string), "ID: %d\n%s", idx, DoorInfo[idx][dText]);
		DoorInfo[idx][dTextID] = CreateDynamic3DTextLabel(string, COLOR_WHITE, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]+0.3, 15);
	    format(string, sizeof(string), " You have set door ID %d's exterior to your coordinates. (Int: %d | VW: %d)", idx, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "custominterior", true, 14))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dedit custominterior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		if(!DoorInfo[idx][dCInt])
		{
			DoorInfo[idx][dCInt] = 1;
		    format(string, sizeof(string), " You have set door ID %d to have a custom interior.", idx, text);
	    }
	    else
	    {
	        DoorInfo[idx][dCInt] = 0;
		    format(string, sizeof(string), " You have set door ID %d to have a normal interior.", idx, text);
	    }
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "customexterior", true, 14))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /dedit customexterior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		if(!DoorInfo[idx][dCExt])
		{
			DoorInfo[idx][dCExt] = 1;
		    format(string, sizeof(string), " You have set door ID %d to have a custom exterior.", idx, text);
	    }
	    else
	    {
	        DoorInfo[idx][dCExt] = 0;
		    format(string, sizeof(string), " You have set door ID %d to have a normal exterior.", idx, text);
	    }
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:gotodoor(playerid, params[])
{
    new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gotodoor [doorid]");
	if(!DoorInfo[idx][dType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
	SetPlayerInterior(playerid, DoorInfo[idx][dOInt]);
	SetPlayerVirtualWorld(playerid, DoorInfo[idx][dOVW]);
	SetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
	format(string, sizeof(string), " You have teleported to door ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:deletedoor(playerid, params[])
{
	new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deleteedoor [doorid]");
	if(!DoorInfo[idx][dType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
	DoorInfo[idx][dType] = 0;
	DoorInfo[idx][dOX] = 0;
	DoorInfo[idx][dOY] = 0;
	DoorInfo[idx][dOZ] = 0;
	DoorInfo[idx][dIX] = 0;
	DoorInfo[idx][dIY] = 0;
	DoorInfo[idx][dIZ] = 0;
	DoorInfo[idx][dOInt] = 0;
	DoorInfo[idx][dOVW] = 0;
	DoorInfo[idx][dIInt] = 0;
	DoorInfo[idx][dIVW] = 0;
	DoorInfo[idx][dCInt] = 0;
	DoorInfo[idx][dCExt] = 0;
	format(DoorInfo[idx][dText], 32, "");
	DestroyDynamicPickup(DoorInfo[idx][dPickup]);
    DestroyDynamic3DTextLabel(DoorInfo[idx][dTextID]);
    format(string, sizeof(string), "AdmWarn: %s has deleted door ID %d.", RPN(playerid), idx);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/doors.log", string);
	return 1;
}

CMD:createdoor(playerid, params[])
{
	new string[128], type;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /createdoor [pickupid]");
	if(type == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door type.");
	for(new idx=0; idx<MAX_DOORS; idx++)
	{
	    if(!DoorInfo[idx][dType])
	    {
		    GetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
   		    DoorInfo[idx][dType] = type;
			DoorInfo[idx][dOInt] = GetPlayerInterior(playerid);
			DoorInfo[idx][dOVW] = GetPlayerVirtualWorld(playerid);
			GetPlayerFacingAngle(playerid, DoorInfo[idx][dOA]);
			// Creating the door
            DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
			format(string, sizeof(string), "ID: %d\n/dedit to set the text", idx);
			DoorInfo[idx][dTextID] = CreateDynamic3DTextLabel(string, COLOR_WHITE, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]+0.3, 15);
			format(string, sizeof(string), "AdmWarn: %s has created door ID %d. (Int: %d | VW: %d)", RPN(playerid), idx, DoorInfo[idx][dOInt], DoorInfo[idx][dOVW]);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/doors.log", string);
			idx = MAX_DOORS;
		}
	}
	return 1;
}

CMD:bused(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Businesses]:");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(BizInfo[idx][bType])
	    {
			format(string, sizeof(string), "ID: %d | Type: %s | Level: %d | Price: $%d | Products: %d | Vault: $%d | Owner: %s", idx, RBT(idx), BizInfo[idx][bLevel], BizInfo[idx][bPrice],BizInfo[idx][bProducts], BizInfo[idx][bMoney], BizInfo[idx][bOwner]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:banreason(playerid, params[])
{
    new file[32], string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /banreason [playername]");
    format(file, sizeof(file), "users/%s.ini", params);
    if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player name.");
    if(!dini_Int(file, "pBanned")) return SendClientMessage(playerid, COLOR_GREY, "Player is not banned.");
    SendClientMessage(playerid, COLOR_ORANGE, "[Banned Player Information]:");
    format(string, sizeof(string), " Name: {FFFFFF}%s", params);
    SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), " Ban Reason: {FFFFFF}%s", dini_Get(file, "BanReason"));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), " Banned By: {FFFFFF}%s", dini_Get(file, "BannedBy"));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	return 1;
}

CMD:bowners(playerid, params[])
{
    new file[32], string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Banned Businesses & House Owners]: (Check /banreason before taking an action on businesses)");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(strcmp("The State", BizInfo[idx][bOwner]))
	    {
	    	format(file, sizeof(file), "users/%s.ini", BizInfo[idx][bOwner]);
	    	if(dini_Exists(file))
	    	{
	    	    if(dini_Int(file, "pBanned") == 1)
				{
				    format(string, sizeof(string), " Business ID: %d - Owner: %s", idx, BizInfo[idx][bOwner]);
				    SendClientMessage(playerid, COLOR_ORANGE, string);
	    	    }
	    	}
	    }
	}
	for(new idx=1; idx<MAX_HOUSES; idx++)
	{
	    if(strcmp("The State", HouseInfo[idx][hOwner]))
	    {
	    	format(file, sizeof(file), "users/%s.ini", HouseInfo[idx][hOwner]);
	    	if(dini_Exists(file))
	    	{
	    	    if(dini_Int(file, "pBanned") == 1)
				{
				    format(string, sizeof(string), " House ID: %d - Owner: %s", idx, HouseInfo[idx][hOwner]);
				    SendClientMessage(playerid, COLOR_ORANGE, string);
	    	    }
	    	}
	    }
	}
	return 1;
}

CMD:suggestions(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	new string[128], File: file = fopen("bugs.cfg", io_read), idx=1;
	SendClientMessage(playerid, COLOR_ORANGE, "[Intense Role-Play Suggestions]:");
	while(fread(file, string))
	{
	    format(string, sizeof(string), "%d) %s", idx, string);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    idx ++;
	}
	fclose(file);
	return 1;
}



CMD:bedit(playerid, params[])
{
	new bizid, string[128], input;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /bedit [option] [bizid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: location | price | level | products | vault");
		return 1;
	}
	if(!strcmp(params, "location", true, 8))
	{
	    if(sscanf(params, "s[32]i", params, bizid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /bedit location [bizid]");
		new idx=bizid;
		if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
		GetPlayerPos(playerid, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ]);
		DestroyDynamicPickup(BizInfo[bizid][bPickup]);
    	BizInfo[bizid][bPickup] = CreateDynamicPickup(1272, 1, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ], 0);
		DestroyDynamic3DTextLabel(BizInfo[bizid][bText]);
        if(!strcmp("The State", BizInfo[idx][bOwner])) format(string, sizeof(string), "Owner: %s\nBusiness Type: %s\nStatus: For Sale\nPrice: $%d", BizInfo[idx][bOwner], RBT(idx), BizInfo[idx][bPrice]);
		else format(string, sizeof(string), "Business of %s\nBusiness type: %s\n%s", BizInfo[idx][bOwner], RBT(idx), RBS(idx));
    	BizInfo[bizid][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ]+0.3, 15);
	    format(string, sizeof(string), "AdmWarn: %s has changed business ID %d's location.", RPN(playerid), bizid);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "price", true, 5))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /bedit price [bizid] [price]");
		if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
		if(strcmp("The State", BizInfo[bizid][bOwner])) return SendClientMessage(playerid, COLOR_GREY, "You can't edit the price of owned businesses.");
	    BizInfo[bizid][bPrice] = input;
	    format(string, sizeof(string), "Owner: %s\nBusiness Type: %s\nStatus: For Sale\nPrice: $%d", BizInfo[bizid][bOwner], RBT(bizid), input);
	    UpdateDynamic3DTextLabelText(BizInfo[bizid][bText], COLOR_WHITE, string);
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's price to $%d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "level", true, 5))
	{
	    // L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /bedit level [bizid] [level]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    	if(input < 0 || input > 5) return SendClientMessage(playerid, COLOR_GREY, "Levels are between 1 and 5.");
	    BizInfo[bizid][bLevel] = input;
	    if(input == 1) BizInfo[bizid][bSold] = 0;
	    if(input == 2) BizInfo[bizid][bSold] = 100;
	    if(input == 3) BizInfo[bizid][bSold] = 300;
	    if(input == 4) BizInfo[bizid][bSold] = 700;
	    if(input == 5) BizInfo[bizid][bSold] = 1200;
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's level to %d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "products", true, 8))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /bedit products [bizid] [amount]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    	if(input < 0) return SendClientMessage(playerid, COLOR_GREY, "Products can't be negative.");
	    BizInfo[bizid][bProducts] = input;
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's products to %d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "vault", true, 5))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /bedit vault [bizid] [amount]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    	if(input < 0) return SendClientMessage(playerid, COLOR_GREY, "Vault money can't be negative.");
	    BizInfo[bizid][bMoney] = input;
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's vault money to $%d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "truckers", true, 8))
	{
   	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /bedit truckers [bizid] [type] (1=Accepting | 2=NotAccepting");
        if(!BizInfo[bizid][bAP])
		{
		    BizInfo[bizid][bAP] = 1;
		    format(string, sizeof(string), "AdmWarn: %s has set business ID %d to accept truckers.", RPN(playerid), bizid);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/business.log", string);
		}
		else
		{
		    BizInfo[bizid][bAP] = 0;
		    format(string, sizeof(string), "AdmWarn: %s has set business ID %d to NOT accept truckers.", RPN(playerid), bizid);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/business.log", string);
		}
	}
	return 1;
}

CMD:gotobiz(playerid, params[])
{
    new idx, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gotobiz [bizid]");
	if(!BizInfo[idx][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]);
	format(string, sizeof(string), " You have teleported to business ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new bizid, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", bizid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /asellbiz [bizid]");
	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
	if(!strcmp("The State", BizInfo[bizid][bOwner], true)) return SendClientMessage(playerid, COLOR_GREY, "This business is not owned by anybody.");
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && PlayerInfo[i][pBiz] == bizid)
		{
			PlayerInfo[i][pBiz] = 0;
			format(string, sizeof(string), " Administrator %s has sold your business.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	format(string, sizeof(string), "AdmWarn: %s has sold %s's business. (ID %d)", RPN(playerid), BizInfo[bizid][bOwner], bizid);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/business.log", string);
    BizInfo[bizid][bStatus] = 0;
    format(BizInfo[bizid][bOwner], 32, "The State");
    format(string, sizeof(string), "Owner: %s\nBusiness Type: %s\nStatus: For Sale\nPrice: $%d", BizInfo[bizid][bOwner], RBT(bizid), BizInfo[bizid][bPrice]);
 	UpdateDynamic3DTextLabelText(BizInfo[bizid][bText], COLOR_WHITE, string);
	return 1;
}

CMD:creategarage(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	for(new idx=1; idx<MAX_GARAGES; idx++)
	{
	    if(!GarageInfo[idx][gLevel])
		{
		    // Getting Business Setup
		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
		    // Making Business
		    GarageInfo[idx][gLevel] = 1;
		    GarageInfo[idx][gPrice] = 25000;
		    GarageInfo[idx][gStatus] = 0;
		    format(GarageInfo[idx][gOwner], 32, "The State");
		    GarageInfo[idx][gX] = X;
		    GarageInfo[idx][gY] = Y;
		    GarageInfo[idx][gZ] = Z;
		    GarageInfo[idx][gPickup] = CreateDynamicPickup(1318, 1, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ], 0);
            format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(idx), GarageInfo[idx][gPrice]);
			GarageInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]+0.3, 15);
			format(string, sizeof(string), "AdmWarn: %s has created garage ID %d.", RPN(playerid), idx);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/garage.log", string);
			idx = MAX_GARAGES;
		}
	}
	return 1;
}

CMD:deletegarage(playerid, params[])
{
	new id, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deletegarage [garageid]");
	if(!GarageInfo[id][gLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid garage id.");
    foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && PlayerInfo[i][pGarage] == id)
		{
		    PlayerInfo[i][pGarage] = 0;
		    format(string, sizeof(string), " Administrator %s has deleted your garage.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	if(!strcmp("The State", GarageInfo[id][gOwner]))
	{
		format(string, sizeof(string), "AdmWarn: %s has deleted garage ID %d.", RPN(playerid), id);
	}
	else
	{
	    format(string, sizeof(string), "AdmWarn: %s has deleted %s's garage. (ID %d)", RPN(playerid), GarageInfo[id][gOwner], id);
	}
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/garage.log", string);
	GarageInfo[id][gLevel] = 0;
    GarageInfo[id][gPrice] = 0;
    GarageInfo[id][gStatus] = 0;
    format(GarageInfo[id][gOwner], 32, "");
    GarageInfo[id][gX] = 0;
    GarageInfo[id][gY] = 0;
    GarageInfo[id][gZ] = 0;
    DestroyDynamicPickup(GarageInfo[id][gPickup]);
    DestroyDynamic3DTextLabel(GarageInfo[id][gText]);
	return 1;
}

CMD:gotogarage(playerid, params[])
{
    new idx, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gotogarage [garageid]");
	if(!GarageInfo[idx][gLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid garage id.");
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
	format(string, sizeof(string), " You have teleported to garage ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:garageused(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Garages]:");
	for(new idx=1; idx<MAX_GARAGES; idx++)
	{
	    if(GarageInfo[idx][gLevel])
	    {
			format(string, sizeof(string), "ID: %d | Level: %d | Price: $%d | Owner: %s",
			idx, GarageInfo[idx][gLevel], GarageInfo[idx][gPrice], GarageInfo[idx][gOwner]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:asellgarage(playerid, params[])
{
	new bizid, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", bizid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /asellgarage [garageid]");
	if(!GarageInfo[bizid][gLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
	if(!strcmp("The State", GarageInfo[bizid][gOwner], true)) return SendClientMessage(playerid, COLOR_GREY, "This garage is not owned by anybody.");
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && PlayerInfo[i][pGarage] == bizid)
		{
			PlayerInfo[i][pGarage] = 0;
			format(string, sizeof(string), " Administrator %s has sold your garage.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	format(string, sizeof(string), "AdmWarn: %s has sold %s's garage. (ID %d)", RPN(playerid), GarageInfo[bizid][gOwner], bizid);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/garage.log", string);
    GarageInfo[bizid][gStatus] = 0;
    format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(bizid), GarageInfo[bizid][gPrice]);
 	UpdateDynamic3DTextLabelText(GarageInfo[bizid][gText], COLOR_WHITE, string);
	return 1;
}

CMD:garageedit(playerid, params[])
{
	new bizid, string[128], input;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gedit [option] [garageid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: location | price | level");
		return 1;
	}
	if(!strcmp(params, "location", true, 8))
	{
	    if(sscanf(params, "s[32]i", params, bizid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gedit location [garage]");
        new idx = bizid;
        if(!GarageInfo[bizid][gLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid garage id.");
		GetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
		DestroyDynamicPickup(GarageInfo[idx][gPickup]);
    	GarageInfo[idx][gPickup] = CreateDynamicPickup(1318, 1, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ], 0);
		DestroyDynamic3DTextLabel(GarageInfo[idx][gText]);
        if(!strcmp("The State", GarageInfo[idx][gOwner])) format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(idx), GarageInfo[idx][gPrice]);
		else format(string, sizeof(string), "{F81414}Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
		GarageInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]+0.3, 15);
	    format(string, sizeof(string), "AdmWarn: %s has changed garage ID %d's location.", RPN(playerid), bizid);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/garage.log", string);
	}
	else if(!strcmp(params, "price", true, 5))
	{
    	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gedit price [garage] [price]");
        new idx = bizid;
		if(!GarageInfo[idx][gLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid garage id.");
		if(strcmp("The State", GarageInfo[bizid][gOwner])) return SendClientMessage(playerid, COLOR_GREY, "You can't edit the price of owned garages.");
	    GarageInfo[bizid][gPrice] = input;
	    format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(bizid), input);
		UpdateDynamic3DTextLabelText(GarageInfo[bizid][gText], COLOR_WHITE, string);
	    format(string, sizeof(string), "AdmWarn: %s has set garage ID %d's price to $%d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/garage.log", string);
	}
	else if(!strcmp(params, "level", true, 5))
	{
		if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gedit level [garageid] [level]");
        new idx = bizid;
    	//if(!GarageInfo[bizid][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
    	if(input < 1 || input > 10) return SendClientMessage(playerid, COLOR_GREY, "Levels are between 1 and 10.");
	    GarageInfo[bizid][gLevel] = input;
        if(!strcmp("The State", GarageInfo[idx][gOwner])) format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(idx), GarageInfo[idx][gPrice]);
		else format(string, sizeof(string), "{F81414}Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
		UpdateDynamic3DTextLabelText(GarageInfo[bizid][gText], COLOR_WHITE, string);
	    format(string, sizeof(string), "AdmWarn: %s has set garage ID %d's level to %d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/garage.log", string);
	}
	return 1;
}

CMD:nearhouse(playerid, params[])
{
    new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    for(new idx=1; idx<MAX_HOUSES; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
		{
		    format(string, sizeof(string), "Nearest House ID: %d", idx);
		    SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "You are not near a house!");
	return 1;
}

CMD:showid(playerid, params[])
{
 new playerb, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
 if(sscanf(params,"u",playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /showid [playerid]");
 if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
 if(!IsPlayerNearPlayer(playerid, playerb, 5)) return SendClientMessage(playerid, COLOR_GREY, "You can't flash your ID to someone from that distance.");
 SendClientMessage(playerb, COLOR_WHITE, "[ -------- Identety Card -------- ]");
 format(string, sizeof(string), "   - Name: {FFFFFF}%s", RPN(playerid));
 SendClientMessage(playerb, COLOR_WHITE, string);
 format(string, sizeof(string), "   - Age: {FFFFFF}%d", PlayerInfo[playerid][pAge]);
 SendClientMessage(playerb, COLOR_WHITE, string);
 format(string, sizeof(string), "* %s flashes his/her identety card to %s.", RPN(playerid), RPN(playerb));
 SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 return 1;
}

CMD:nearbiz(playerid, params[])
{
    new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    for(new idx=1; idx<MAX_BIZ; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
		{
		    format(string, sizeof(string), "Nearest Business ID: %d", idx);
		    SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "You are not near a business!");
	return 1;
}

CMD:neargarage(playerid, params[])
{
    new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    for(new idx=1; idx<MAX_GARAGES; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
		{
		    format(string, sizeof(string), "Nearest Garage ID: %d", idx);
		    SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "You are not near a garage!");
	return 1;
}

CMD:createhouse(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	for(new idx=1; idx<MAX_HOUSES; idx++)
	{
	    if(!HouseInfo[idx][hLevel])
		{
		    // Getting Business Setup
		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
		    // Making Business
		    HouseInfo[idx][hLevel] = 1;
		    HouseInfo[idx][hPrice] = 50000;
		    HouseInfo[idx][hStatus] = 0;
		    format(HouseInfo[idx][hOwner], 32, "The State");
		    HouseInfo[idx][hX] = X;
		    HouseInfo[idx][hY] = Y;
		    HouseInfo[idx][hZ] = Z;
		    HouseInfo[idx][hMoney] = 0;
		    HouseInfo[idx][hMaterials] = 0;
		    HouseInfo[idx][hWeed] = 0;
		    HouseInfo[idx][hcocaine] = 0;
			HouseInfo[idx][hGun][0] = 0;
			HouseInfo[idx][hGunAmmo][0] = 0;
			HouseInfo[idx][hGun][1] = 0;
			HouseInfo[idx][hGunAmmo][1] = 0;
			HouseInfo[idx][hGun][2] = 0;
			HouseInfo[idx][hGunAmmo][2] = 0;
			HouseInfo[idx][hGun][3] = 0;
			HouseInfo[idx][hGunAmmo][3] = 0;
			HouseInfo[idx][hGun][4] = 0;
			HouseInfo[idx][hGunAmmo][4] = 0;
		    HouseInfo[idx][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ], 0);
            format(string, sizeof(string), "Owner: %s\nHouse Type: %s\nFor Sale\nPrice: $%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
			HouseInfo[idx][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]+0.3, 15);
			format(string, sizeof(string), "AdmWarn: %s has created house ID %d.", RPN(playerid), idx);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/house.log", string);
			idx = MAX_HOUSES;
		}
	}
	return 1;
}

CMD:deletehouse(playerid, params[])
{
	new id, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deletehouse [houseid]");
	if(!HouseInfo[id][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
    foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && PlayerInfo[i][pHouse] == id)
		{
		    PlayerInfo[i][pHouse] = 0;
		    format(string, sizeof(string), " Administrator %s has deleted your house.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	if(!strcmp("The State", HouseInfo[id][hOwner]))
	{
		format(string, sizeof(string), "AdmWarn: %s has deleted house ID %d.", RPN(playerid), id);
	}
	else
	{
	    format(string, sizeof(string), "AdmWarn: %s has deleted %s's house. (ID %d)", RPN(playerid), HouseInfo[id][hOwner], id);
	}
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/house.log", string);
	HouseInfo[id][hLevel] = 0;
    HouseInfo[id][hPrice] = 0;
    HouseInfo[id][hStatus] = 0;
    format(HouseInfo[id][hOwner], 32, "");
    HouseInfo[id][hX] = 0;
    HouseInfo[id][hY] = 0;
    HouseInfo[id][hZ] = 0;
    HouseInfo[id][hMoney] = 0;
    HouseInfo[id][hMaterials] = 0;
    HouseInfo[id][hWeed] = 0;
    HouseInfo[id][hcocaine] = 0;
	HouseInfo[id][hGun][0] = 0;
	HouseInfo[id][hGunAmmo][0] = 0;
	HouseInfo[id][hGun][1] = 0;
	HouseInfo[id][hGunAmmo][1] = 0;
	HouseInfo[id][hGun][2] = 0;
	HouseInfo[id][hGunAmmo][2] = 0;
	HouseInfo[id][hGun][3] = 0;
	HouseInfo[id][hGunAmmo][3] = 0;
	HouseInfo[id][hGun][4] = 0;
	HouseInfo[id][hGunAmmo][4] = 0;
    DestroyDynamicPickup(HouseInfo[id][hPickup]);
    DestroyDynamic3DTextLabel(HouseInfo[id][hText]);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
    new idx, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gotohouse [houseid]");
	if(!HouseInfo[idx][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]);
	format(string, sizeof(string), " You have teleported to house ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:hused(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Houses]:");
	for(new idx=1; idx<MAX_HOUSES; idx++)
	{
	    if(HouseInfo[idx][hLevel])
	    {
			format(string, sizeof(string), "ID: %d | Level: %d | Price: $%d | Money: $%d | Materials: %d | Weed: %d | cocaine: %d | Owner: %s",
			idx, HouseInfo[idx][hLevel], HouseInfo[idx][hPrice], HouseInfo[idx][hMoney], HouseInfo[idx][hMaterials], HouseInfo[idx][hWeed], HouseInfo[idx][hcocaine], HouseInfo[idx][hOwner]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:asellhouse(playerid, params[])
{
	new bizid, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", bizid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /asellhouse [houseid]");
	if(!HouseInfo[bizid][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
	if(!strcmp("The State", HouseInfo[bizid][hOwner], true)) return SendClientMessage(playerid, COLOR_GREY, "This house is not owned by anybody.");
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && PlayerInfo[i][pHouse] == bizid)
		{
			PlayerInfo[i][pHouse] = 0;
			format(string, sizeof(string), " Administrator %s has sold your house.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	format(string, sizeof(string), "AdmWarn: %s has sold %s's house. (ID %d)", RPN(playerid), HouseInfo[bizid][hOwner], bizid);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/house.log", string);
    HouseInfo[bizid][hStatus] = 0;
    format(HouseInfo[bizid][hOwner], 32, "The State");
    format(string, sizeof(string), "Owner: %s\nHouse Type: %s\nFor Sale\nPrice: $%d", HouseInfo[bizid][hOwner], HT(bizid), HouseInfo[bizid][hPrice]);
 	UpdateDynamic3DTextLabelText(HouseInfo[bizid][hText], COLOR_WHITE, string);
	return 1;
}

CMD:hedit(playerid, params[])
{
	new bizid, string[128], input;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hedit [option] [houseid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: location | price | level");
		return 1;
	}
	if(!strcmp(params, "location", true, 8))
	{
	    if(sscanf(params, "s[32]i", params, bizid)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hedit location [house]");
        new idx = bizid;
        if(!HouseInfo[bizid][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
		GetPlayerPos(playerid, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]);
		DestroyDynamicPickup(HouseInfo[idx][hPickup]);
    	HouseInfo[idx][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ], 0);
		DestroyDynamic3DTextLabel(HouseInfo[idx][hText]);
        if(!strcmp("The State", HouseInfo[idx][hOwner])) format(string, sizeof(string), "Owner: %s\nHouse Type: %s\nFor Sale\nPrice: $%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
		else format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
		HouseInfo[idx][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]+0.3, 15);
	    format(string, sizeof(string), "AdmWarn: %s has changed house ID %d's location.", RPN(playerid), bizid);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/house.log", string);
	}
	else if(!strcmp(params, "price", true, 5))
	{
    	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /house price [house] [price]");
        new idx = bizid;
		if(!HouseInfo[idx][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
		if(strcmp("The State", HouseInfo[bizid][hOwner])) return SendClientMessage(playerid, COLOR_GREY, "You can't edit the price of owned houses.");
	    HouseInfo[bizid][hPrice] = input;
	    format(string, sizeof(string), "Owner: %s\nHouse Type: %s\nFor Sale\nPrice: $%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
		UpdateDynamic3DTextLabelText(HouseInfo[bizid][hText], COLOR_WHITE, string);
	    format(string, sizeof(string), "AdmWarn: %s has set house ID %d's price to $%d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/house.log", string);
	}
	else if(!strcmp(params, "level", true, 5))
	{
		if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /house level [houseid] [level]");
        new idx = bizid;
    	//if(!HouseInfo[bizid][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
    	if(input < 1 || input > 11) return SendClientMessage(playerid, COLOR_GREY, "Levels are between 1 and 11.");
	    HouseInfo[bizid][hLevel] = input;
        if(!strcmp("The State", HouseInfo[idx][hOwner])) format(string, sizeof(string), "Owner: %s\nHouse Type: %s\nFor Sale\nPrice: $%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
		else format(string, sizeof(string), "{00C0FF}House of %s\nHouse Type: %s\nStatus: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
		UpdateDynamic3DTextLabelText(HouseInfo[bizid][hText], COLOR_WHITE, string);
	    format(string, sizeof(string), "AdmWarn: %s has set house ID %d's level to %d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/house.log", string);
	}
	return 1;
}

CMD:createbiz(playerid, params[])
{
	new type, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", type))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /createbiz [type]");
		SendClientMessage(playerid, COLOR_GREY, "TYPES: 1) 24/7 | 2) Clothes Shop | 3) Ammunation | 4) Club | 5) Advertisement Agency | 6) Fast Food");
		return 1;
	}
	if(type < 1 || type > 6) return SendClientMessage(playerid, COLOR_GREY, "Businesses are between 1 and 5.");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(!BizInfo[idx][bType])
		{
		    // Getting Business Setup
		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
		    // Making Business
		    BizInfo[idx][bType] = type;
		    BizInfo[idx][bStatus] = 0;
		    format(BizInfo[idx][bOwner], 32, "The State");
		    BizInfo[idx][bX] = X;
		    BizInfo[idx][bY] = Y;
		    BizInfo[idx][bZ] = Z;
		    BizInfo[idx][bMoney] = 0;
		    BizInfo[idx][bProducts] = 0;
		    BizInfo[idx][bSold] = 0;
		    BizInfo[idx][bLevel] = 1;
		    BizInfo[idx][bPrice] = 200000;
			BizInfo[idx][bPickup] = CreateDynamicPickup(1272, 1, X, Y, Z, 0);
			format(string, sizeof(string), "Owner: %s\nBusiness Type: %s\nStatus: For Sale\nPrice: $%d", BizInfo[idx][bOwner], RBT(idx), BizInfo[idx][bPrice]);
			BizInfo[idx][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, X, Y, Z, 15);
			format(string, sizeof(string), "AdmWarn: %s has created business ID %d.", RPN(playerid), idx);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/business.log", string);
			idx = MAX_BIZ;
		}
	}
	return 1;
}

CMD:deletebiz(playerid, params[])
{
	new id, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deletebiz [bizid]");
	if(!BizInfo[id][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && PlayerInfo[i][pBiz] == id)
		{
		    PlayerInfo[playerid][pBiz] = 0;
		    format(string, sizeof(string), " Administrator %s has deleted your business.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	if(!strcmp("The State", BizInfo[id][bOwner]))
	{
		format(string, sizeof(string), "AdmWarn: %s has deleted business ID %d.", RPN(playerid), id);
	}
	else
	{
	    format(string, sizeof(string), "AdmWarn: %s has deleted %s's business. (ID %d)", RPN(playerid), BizInfo[id][bOwner], id);
	}
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/business.log", string);
	BizInfo[id][bType] = 0;
    BizInfo[id][bStatus] = 0;
    format(BizInfo[id][bOwner], 32, "");
    BizInfo[id][bX] = 0;
    BizInfo[id][bY] = 0;
    BizInfo[id][bZ] = 0;
    BizInfo[id][bMoney] = 0;
    BizInfo[id][bProducts] = 0;
    DestroyDynamicPickup(BizInfo[id][bPickup]);
    DestroyDynamic3DTextLabel(BizInfo[id][bText]);
	return 1;
}

CMD:sobeit(playerid, params[])
{
	new playerb, string[128], weapons[13][2];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!strcmp(params, "all", true))
	{
	    format(string, sizeof(string), "AdmCmd: %s has checked everybody online for sobeit hacks.", RPN(playerid));
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
		foreach(Player, p)
		{
			for(new i=0; i<13; i++)
			{
		       	GetPlayerWeaponData(p, i, weapons[i][0], weapons[i][1]);
		        if(weapons[i][0] != PlayerInfo[p][pWeapon][i] && weapons[i][0] != PlayerInfo[playerb][pWeapon][i] && weapons[i][1] != 0)
		        {
			        format(string, sizeof(string), "AdmWarn: %s is hacking a %s. (Global sobeit check by %s)", RPN(p), RWN(weapons[i][0]), RPN(playerid));
			        SendAdminMessage(COLOR_DARKRED, 1, string);
		        }
			}
		}
		return 1;
	}
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sobeit [playerid/all]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	format(string, sizeof(string), "AdmWarn: %s has checked %s for sobeit hacks.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	for(new i=0; i<13; i++)
	{
		GetPlayerWeaponData(playerb, i, weapons[i][0], weapons[i][1]);
		if(weapons[i][0] != PlayerInfo[playerb][pWeapon][i])
	    {
 			format(string, sizeof(string), "AdmWarn: %s is hacking a %s. (Specific sobeit check by %s)", RPN(playerb), RWN(weapons[i][0]), RPN(playerid));
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	}
	return 1;
}

CMD:listguns(playerid, params[])
{
	new playerb, string[128], weaps, weapons[13][2];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params,"u",playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /listguns [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	SendClientMessage(playerid, COLOR_GREEN, "____________________________");
	format(string, sizeof(string), "*** %s's Weapons ***", RPN(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	for(new i=0; i<13; i++)
	{
       	GetPlayerWeaponData(playerb, i, weapons[i][0], weapons[i][1]);
        if(weapons[i][0] != PlayerInfo[playerb][pWeapon][i] && weapons[i][0] != PlayerInfo[playerb][pWeapon][i] && weapons[i][1] != 0)
        {
	        format(string, sizeof(string), " %s (Ammo: %d) (Hacked)", RWN(weapons[i][0]), weapons[i][1]);
	        SendClientMessage(playerid, COLOR_MEDIC, string);
	        weaps++;
        }
        else if(weapons[i][0] == PlayerInfo[playerb][pWeapon][i] && weapons[i][0] != 0)
        {
            format(string, sizeof(string), " %s (Ammo: %d)", RWN(PlayerInfo[playerb][pWeapon][i]), weapons[i][1]);
	        SendClientMessage(playerid, COLOR_MEDIC, string);
	        weaps++;
        }
	}
	if(weaps == 0) return SendClientMessage(playerid, COLOR_MEDIC, "None");
	return 1;
}

CMD:spec(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!strcmp(params, "off", true))
	{
	    if(!Spec[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You aren't spectating anybody.");
	    Spec[playerid] = 0;
    	TogglePlayerSpectating(playerid, 0);
    	GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
    	GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
		SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
		SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
		SetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
		SendClientMessage(playerid, COLOR_WHITE, " You have stopped spectating players.");
		if(PlayerInfo[Specid[playerid]][pAdmin] >= PlayerInfo[playerid][pAdmin])
   		{
			format(string, sizeof(string), "SpecWarn: %s has stopped spectating you.", RPN(playerid));
			SendClientMessage(Specid[playerid], COLOR_DARKRED, string);
	    }
	    Specid[playerid] = -1;
		return 1;
	}
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /spec [playerid]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't spectate yourself.");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(Spec[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player is spectating someone.");
    PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
	if(Specid[playerid] != -1 && PlayerInfo[Specid[playerid]][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
			format(string, sizeof(string), "SpecWarn: %s has stopped spectating you.", RPN(playerid));
			SendClientMessage(Specid[playerid], COLOR_DARKRED, string);
	}
    if(!Spec[playerid])
    {
	    PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	    PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
	    GetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
    }
    Specid[playerid] = playerb;
    TogglePlayerSpectating(playerid, 1);
    Spec[playerid] = 1;
    SetPlayerInterior(playerid, GetPlayerInterior(playerb));
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerb));
    format(string, sizeof(string), " Currently spectating %s", RPN(playerb));
    SendClientMessage(playerid, COLOR_WHITE, string);
    if(IsPlayerInAnyVehicle(playerb))
    {
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(playerb));
    }
    else
    {
        PlayerSpectatePlayer(playerid, playerb);
    }
    if(PlayerInfo[playerb][pAdmin] >= PlayerInfo[playerid][pAdmin])
    {
		format(string, sizeof(string), "SpecWarn: %s is currently spectating you.", RPN(playerid));
		SendClientMessage(playerb, COLOR_DARKRED, string);
    }
    if(!PlayerInfo[playerb][pTutorial]) SendClientMessage(playerid, COLOR_WHITE, " That player is viewing the tutorial, don't assume he's using hacks yet.");
	return 1;
}

CMD:tog(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[16]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /tog [option]");
	    SendClientMessage(playerid, COLOR_GREY, "OPTIONS: fuel | speedo | phone | vip | join | oldskool | loyal | newbiechat");
	    if(PlayerInfo[playerid][pAdmin]) SendClientMessage(playerid, COLOR_GREY, "OPTIONS: adminooc | adminnewbie | betachat");
	    return 1;
	}
	if(!strcmp(params, "speedo", true))
	{
		if(!PlayerInfo[playerid][pSpeedo]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a speedometer.");
		if(!Speedo[playerid])
		{
		    Speedo[playerid] = 1;
		    format(string, sizeof(string), "You have turned your speedometer {33AA33}on{33CCFF}.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else
		{
		    Speedo[playerid] = 0;
		    format(string, sizeof(string), "You have turned your speedometer {FF9900}off{33CCFF}.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		return 1;
	}
	else if(!strcmp(params, "oldskool", true))
	{
		if(PlayerInfo[playerid][pHours] < 248) return SendClientMessage(playerid, COLOR_GREY, "You need to have at least 248 respect points to use this feature.");
		if(!PlayerInfo[playerid][pOldskool])
		{
		    PlayerInfo[playerid][pOldskool] = 1;
		    format(string, sizeof(string), "You have toggled your Oldskool tag {33AA33}on{33CCFF}.");
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
		    PlayerInfo[playerid][pOldskool] = 0;
		    format(string, sizeof(string), "You have toggled your Oldskool tag {FF9900}off{33CCFF}.");
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	else if(!strcmp(params, "loyal", true))
	{
		if(PlayerInfo[playerid][pLoyal] && PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a Loyal player.");
		if(!PlayerInfo[playerid][pLoyalTag])
		{
		    PlayerInfo[playerid][pLoyalTag] = 1;
		    format(string, sizeof(string), "You have toggled your Loyal tag {33AA33}on{33CCFF}.");
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
		    PlayerInfo[playerid][pLoyalTag] = 0;
		    format(string, sizeof(string), "You have toggled your Loyal tag {FF9900}off{33CCFF}.");
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	else if(!strcmp(params, "fuel", true))
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
		if(!fMeter[playerid])
		{
		    fMeter[playerid] = 1;
		    format(string, sizeof(string), "You have turned your fuel information {33AA33}on{33CCFF}.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else
		{
		    fMeter[playerid] = 0;
		    format(string, sizeof(string), "You have turned your fuel information {FF9900}off{33CCFF}.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		return 1;
	}
	else if(!strcmp(params, "phone", true))
	{
	    if(!PhoneOnline[playerid])
	    {
	       PhoneOnline[playerid] = 1;
		   SendClientMessage(playerid, COLOR_GREY, "You have switched your Phone {FF9900}off{FFFFFF}.");
	    }
	    else
	    {
		    PhoneOnline[playerid] = 0;
		    SendClientMessage(playerid, COLOR_GREY, "You have switched your Phone {FF9900}off{FFFFFF}.");
    	}
	    return 1;
	}
	else if(!strcmp(params, "vip", true))
	{
	    if(!VIPOff[playerid])
	    {
	        VIPOff[playerid] = 1;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled VIP chat {FF9900}off{FFFFFF}.");
	    }
	    else
	    {
	        VIPOff[playerid] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled VIP chat {33AA33}on{FFFFFF}.");
	    }
	    return 1;
	}
	else if(!strcmp(params, "join", true))
	{
		if(!JoinMessages[playerid])
	    {
	        JoinMessages[playerid] = 1;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled Join Messages {33AA33}on{FFFFFF}.");
	    }
	    else
	    {
	        JoinMessages[playerid] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled Join Messages {FF9900}off{FFFFFF}.");
	    }
	    return 1;
	}
	else if(!strcmp(params, "betachat", true))
	{
		if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	    if(PlayerInfo[playerid][pTester])
	    {
	        PlayerInfo[playerid][pTester] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled Beta Testers chat {FF9900}off{FFFFFF}.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pTester] = 1;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled Beta Testers chat {33AA33}on{FFFFFF}.");
	    }
	    return 1;
	}
	else if(!strcmp(params, "adminooc", true))
	{
    	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	    if(!OOCStatus)
	    {
	        OOCStatus = 1;
	        format(string, sizeof(string), "AdmCmd: %s has {33AA33}enabled {FF6347}the global OOC chat for everybody.", RPN(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	    else
	    {
	        OOCStatus = 0;
	        format(string, sizeof(string), "AdmCmd: %s has {FF9900}disabled {FF6347}the global OOC chat for everybody.", RPN(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	}
	else if(!strcmp(params, "adminnewbie", true))
	{
		if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	    if(!NewbieStatus)
	    {
	        NewbieStatus = 1;
	        format(string, sizeof(string), "AdmCmd: %s has {33AA33}enabled {FF6347}the newbie chat for everybody.", RPN(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	    else
	    {
	        NewbieStatus = 0;
	        format(string, sizeof(string), "AdmCmd: %s has {FF9900}disabled {FF6347}the newbie chat for everybody.", RPN(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	}
	return 1;
}


CMD:veh(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	// If there was a previously created selection menu, destroy it
	DestroySelectionMenu(playerid);

    SetPVarInt(playerid, "vspawner_active", 1);
    SetPVarInt(playerid, "vspawner_page", 0);

    CreateSelectionMenu(playerid);
    SelectTextDraw(playerid, 0xACCBF1FF);
	return 1;
}
CMD:vehdestroy(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to destroy it.");
	for(new i=0; i<MAX_CUSTOM_VEHICLES; i++)
    {
       if(GetPlayerVehicleID(playerid) == cVeh[i])
	   {
			//format(string, sizeof(string), "AdmWarn: %s has destroyed a vehicle model %d.", RPN(playerid), GetVehicleModel(i));
			//SendAdminMessage(COLOR_DARKRED, 1, string);
			DestroyVehicle(cVeh[i]);
			i = MAX_CUSTOM_VEHICLES;
			return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "You can't destroy this vehicle.");
		return 1;
}

CMD:duel(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /duel [playerid]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(EventOn) return SendClientMessage(playerid, COLOR_GREY, "There's a event happening, you cant duel now.");
	if(DuelOn) return SendClientMessage(playerid, COLOR_GREY, "There is already an duel happening.");
	PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	format(string, sizeof(string), "AdmWarn: %s has started an duel with %s.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_LIGHTRED, 1, string);
	SendClientMessage(playerid, COLOR_BLUE, "You are duelling..");
	SendClientMessage(playerb, COLOR_BLUE, "You are duelling..");
	GetPlayerPos(playerid, eX, eY, eZ);
	GetPlayerHealth(playerid, eHP);
	GetPlayerArmour(playerid, eARMOR);
	for(new i=0; i<13; i++)
	{
		GetPlayerWeaponData(playerid, i, PlayerInfo[playerid][pWeapon][i], PlayerInfo[playerid][pWeaponAmmo][i]);
	}
	GunsBeingRemoved[playerid] = 1;
	DuelOn = 1;
	Duel[playerid] = 1;
	Duel[playerb] = 1;
	ResetPlayerWeapons(playerid);

	/* break */
	PlayerInfo[playerb][pInt] = GetPlayerInterior(playerb);
	PlayerInfo[playerb][pVW] = GetPlayerVirtualWorld(playerb);
	GetPlayerPos(playerb, eX, eY, eZ);
	GetPlayerHealth(playerb, eHP);
	GetPlayerArmour(playerb, eARMOR);
	for(new i=0; i<13; i++)
	{
		GetPlayerWeaponData(playerb, i, PlayerInfo[playerb][pWeapon][i], PlayerInfo[playerb][pWeaponAmmo][i]);
	}
	GunsBeingRemoved[playerb] = 1;
	ResetPlayerWeapons(playerb);
	SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
	GiveDodWeapon(playerid, 24, 200);
	GiveDodWeapon(playerb, 24, 200);
	TogglePlayerControllable(playerb, 0);
	TogglePlayerControllable(playerid, 0);
	SetPlayerHealth(playerid, 100);
	SetPlayerArmour(playerid, 100);
	SetPlayerHealth(playerb, 100);
	SetPlayerArmour(playerb, 100);
	SetTimerEx("EnterExitTimer", 5000, false, "i", playerb);
	SetPlayerPos(playerb, -257.6650,-862.7711,1188.3394);
	SetPlayerPos(playerid, -276.1044,-846.8372,1188.3394);
	SetPlayerVirtualWorld(playerid, 50);
	SetPlayerVirtualWorld(playerb, 50);
	SetPlayerInterior(playerb, 3);
	SetPlayerInterior(playerid, 3);
	return 1;
}


/* zombie cmds */

CMD:slap(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pMapper] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /slap [playerid]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	new Float:Pos[3];
	GetPlayerPos(playerb, Pos[0], Pos[1], Pos[2]);
	SetPlayerPos(playerb, Pos[0], Pos[1], Pos[2]+5);
	format(string, sizeof(string), "AdmWarn: %s has slapped %s.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_LIGHTRED, 1, string);
	return 1;
}

CMD:hpnear(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	if(IsPlayerInRangeOfPoint(playerid, 10, Pos[playerid], Pos[playerid], Pos[playerid]))
    {
        SetPlayerHealth(playerid, 100);
        SetPlayerArmour(playerid, 100);
	}
	return 1;
}
CMD:mark(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	GetPlayerPos(playerid, aMark[playerid][0], aMark[playerid][1], aMark[playerid][2]);
	aMarkInt[playerid] = GetPlayerInterior(playerid);
	aMarkVw[playerid] = GetPlayerVirtualWorld(playerid);
	SendClientMessage(playerid, COLOR_WHITE, " You have marked a teleportation point, (/gotoloc mark) to TP back to it.");
	return 1;
}
CMD:gotoloc(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params,"s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gotoloc [place]");
	    SendClientMessage(playerid, COLOR_GREY, "PLACES: mark | ls | gym | dealership | olddmv | trucker | productsdropoff | hitman | warehouse1 | warehouse2");
	    SendClientMessage(playerid, COLOR_GREY, "PLACES: sf | lv | ffc | tower | saints | tune1 | tune2 | tune3 | paintball | parkour | bank | area51");
	    return 1;
	}
	if(!strcmp(params, "mark", true))
	{
	    if(aMark[playerid][0] == 0 && aMark[playerid][1] == 0 && aMark[playerid][2] == 0) return SendClientMessage(playerid, COLOR_GREY, "You haven't marked a teleportation point.");
	    SetPlayerPos(playerid,aMark[playerid][0], aMark[playerid][1], aMark[playerid][2]);
	    SetPlayerInterior(playerid, aMarkInt[playerid]);
	    SetPlayerVirtualWorld(playerid, aMarkVw[playerid]);
	}
	else if(!strcmp(params, "ls", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,1515.2551,-1666.3148,14.0469);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to Los Santos.");
     	return 1;
	}
	/*else if(!strcmp(params, "island", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,-2050.0810547,-7609.0312500,2.2020721);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to Island.");
     	return 1;
	}*/
	else if (!strcmp(params,"area51",true))
	{
        SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPos(playerid,202.1886,1881.4122,17.2199);
	    SendClientMessage(playerid, COLOR_WHITE, " You have been teleported to the area51.");
	}
	else if(!strcmp(params, "olddmv", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,962.3975,-1433.5745,14.0537);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the DMV.");
     	return 1;
	}
	else if(!strcmp(params, "gym", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,2224.8137,-1723.4457,13.5625);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the Gym.");
     	return 1;
	}
	else if(!strcmp(params, "dealership", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,546.1611,-1273.8046,17.2482);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the Vehicles Dealership.");
     	return 1;
	}
	else if(!strcmp(params, "trucker", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,-520.4179,-505.3250,24.6084);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the Trucker Job.");
     	return 1;
	}
	else if(!strcmp(params, "parkour", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,1172.6533,-2063.4160,432.7214);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the Trucker Job.");
     	return 1;
	}
	else if(!strcmp(params, "productsdropoff", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,2222.5107,-2682.7368,13.5409);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the Products Dropoff.");
     	return 1;
	}
	else if(!strcmp(params, "hitman", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,2233.4729,-1333.2303,23.9815);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the Hitman Headquarters.");
     	return 1;
	}
	else if(!strcmp(params, "sf", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,-1417.0,-295.8,14.1);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to San Fierro.");
     	return 1;
	}
	else if(!strcmp(params, "lv", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,1699.2,1435.1, 10.7);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to Las Venturas.");
     	return 1;
	}
	else if(!strcmp(params, "ffc", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,2648.7205,-2109.0586,13.5469);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to Fossil Fuel Company.");
     	return 1;
	}
	else if(!strcmp(params, "tower", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,1543.9886,-1353.7587,329.4735);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to Star Tower.");
     	return 1;
	}
	else if(!strcmp(params, "saints", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,1188.8627,-1330.2386,13.5606);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to All Saints Hospital.");
     	return 1;
	}
	else if(!strcmp(params, "tune1", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,2644.9026,-2005.4315,13.3828);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the Lowrider Tuning Shop.");
     	return 1;
	}
	else if(!strcmp(params, "tune2", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,1025.1035,-1039.0695,31.5661);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to Los Santos Tuning Shop.");
     	return 1;
	}
	else if(!strcmp(params, "tune3", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,-2702.4583,217.1397,4.1797);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to San Fierro Tuning Shop.");
     	return 1;
	}
	else if(!strcmp(params, "paintball", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,1310.1110,-1368.5656,13.517786);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to The Paintball Arena.");
     	return 1;
	}
	else if(!strcmp(params, "drugisland", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid, 3298.0874,-2283.3340,2.9688);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to The Drug Island.");
	}
	else if(!strcmp(params, "warehouse1", true))
	{
	    SetPlayerInterior(playerid, 18);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid, 1295.4827,-3.2839,1001.0273);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to The Warehouse.");
	}
	else if(!strcmp(params, "warehouse2", true))
	{
	    SetPlayerInterior(playerid, 1);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid, 1403.9862,-4.2830,1000.9119);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to The Warehouse.");
	}
	else if(!strcmp(params, "bank", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,1462.4095,-1011.1602,26.8438);
	    SendClientMessage(playerid, COLOR_WHITE, " You have been teleported to the Bank.");
     	return 1;
	}
	return 1;
}

CMD:hoseject(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /hoseject [playerid]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(!PlayerInfo[playerb][pHospital])return SendClientMessage(playerid, COLOR_GREY, "Player is not in hospital.");
    HospitalTime[playerb] = 1;
    format(string, sizeof(string), " Administrator %s has ejected you from hospital", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s ejected %s from hospital.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/hoseject.log", string);
	return 1;
}

CMD:sethpall(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sethpall [amount]");
    foreach(Player, i)
    {
        if(IsPlayerLoggedIn(i))
        {
        	SetPlayerHealth(i, amount);
        }
    }
	format(string, sizeof(string), "AdmCmd: %s has set everybody's health to %d.", RPN(playerid),  amount);
	SendAdminMessage(COLOR_LIGHTRED, 1, string);
	Log("logs/sethparmor.log", string);
    return 1;
}
CMD:healall(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    foreach(Player, i)
    {
        if(IsPlayerLoggedIn(i))
        {
        	SetPlayerHealth(i, 100);
        	SetPlayerArmour(i, 100);
        }
    }
	format(string, sizeof(string), "AdmCmd: %s has healed the HP & Armor for everyone.", RPN(playerid),  amount);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Log("logs/heal.log", string);
    return 1;
}
CMD:kill(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	SetPlayerHealth(playerid, 0);
   	return 1;
}

CMD:setarmorall(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setarmorall [amount]");
    foreach(Player, i)
    {
        if(IsPlayerLoggedIn(i))
        {
        	SetPlayerArmour(i, amount);
        }
    }
	format(string, sizeof(string), "AdmCmd: %s has set everybody's armor to %d.", RPN(playerid),  amount);
	SendAdminMessage(COLOR_LIGHTRED, 1, string);
	Log("logs/sethparmor.log", string);
    return 1;
}

CMD:sethp(playerid, params[])
{
	new playerb, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sethp [playerid] [amount]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    SetPlayerHealth(playerb, amount);
    format(string, sizeof(string), " Administrator %s has set your health to %d", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s has set %s's health to %d.", RPN(playerid), RPN(playerb), amount);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/sethparmor.log", string);
    return 1;
}

CMD:setarmor(playerid, params[])
{
	new playerb, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setarmor [playerid] [amount]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    SetPlayerArmour(playerb, amount);
    format(string, sizeof(string), " Administrator %s has set your armor to %d", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s has set %s's armor to %d.", RPN(playerid), RPN(playerb), amount);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/sethparmor.log", string);
    return 1;
}

CMD:cnn(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(sscanf(params, "s[128]", string)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /cnn [text]");
    format(string, sizeof(string), "%s", string);
    GameTextForAll(string, 10000, 5);
    return 1;
}

CMD:blowguns(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(!blowgun[playerid])
    {
		blowgun[playerid] = 1;
		SendClientMessage(playerid, COLOR_YELLOW, "Blow gun mode on!((shoot someone with a weapon of your choise))");
	}
	else
	{
	    blowgun[playerid] = 0;
	    SendClientMessage(playerid, COLOR_YELLOW, "Blow gun mode off!");
	    return 1;
	}
	return 1;
}

CMD:givegun(playerid, params[])
{
	new playerb, gunid, ammo, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "uii", playerb, gunid, ammo))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /givegun [playerid] [gunid] [ammo]");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_GREY, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
		SendClientMessage(playerid, COLOR_GREY, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
		SendClientMessage(playerid, COLOR_GREY, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
		SendClientMessage(playerid, COLOR_GREY, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
		SendClientMessage(playerid, COLOR_GREY, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
		SendClientMessage(playerid, COLOR_GREY, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		return 1;
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(gunid < 0 || gunid > 46 || gunid == 19 || gunid == 20 || gunid == 21) return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon id.");
	GiveDodWeapon(playerb, gunid, ammo);
	format(string, sizeof(string), " You have given %s a %s with %d ammo.", RPN(playerb), RWN(gunid), ammo);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has given you a %s with %d ammo.", RPN(playerid), RWN(gunid), ammo);
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:disarm(playerid, params[])
{
    new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /disarm [playerid]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
    format(string, sizeof(string), " You have removed %s's weapons.", RPN(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has removed your weapons.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	ResetDodWeapons(playerb);
	return 1;
}

CMD:setint(playerid, params[])
{
	new playerb, int, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "ui", playerb, int)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setint [playerid] [VW]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	SetPlayerInterior(playerb, int);
	format(string, sizeof(string), " You have set %s's Int %d.", RPN(playerb), int);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has set your Int %d.", RPN(playerid), int);
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:setvw(playerid, params[])
{
	new playerb, vw, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "ui", playerb, vw)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setvw [playerid] [VW]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	SetPlayerVirtualWorld(playerb, vw);
	format(string, sizeof(string), " You have set %s's VW %d.", RPN(playerb), vw);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " %s has set your VW %d.", RPN(playerid), vw);
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}
CMD:fix(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /fix [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	SetPlayerVirtualWorld(playerb, 0);
	format(string, sizeof(string), " You have fixed %s's VW.", RPN(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " %s has fixed your VW.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:setskin(playerid, params[])
{
	new playerb, skin, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "ui", playerb, skin)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setskin [playerid] [skinid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	PlayerInfo[playerb][pModel] = skin;
	SetPlayerSkin(playerb, skin);
	format(string, sizeof(string), " You have set %s's skin to ID %d.", RPN(playerb), skin);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has set your skin to ID %d.", RPN(playerid), skin);
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:givemoneyall(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /givemoneyall [amount]");
	format(string, sizeof(string), "AdmCmd: %s has given $%d to all the players online.", RPN(playerid), amount);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        GiveDodMoney(i, amount);
	    }
	}
	return 1;
}

CMD:givemoney(playerid, params[])
{
    new playerb, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /givemoney [playerid] [amount]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	GiveDodMoney(playerb, amount);
	format(string, sizeof(string), " Administrator %s has given you $%d", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s has given %s $%d.", RPN(playerid), RPN(playerb), amount);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/givemoney.log", string);
	return 1;
}

CMD:setmoney(playerid, params[])
{
    new playerb, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setmoney [playerid] [amount]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	SetDodMoney(playerb, amount);
	format(string, sizeof(string), " Administrator %s has set your money to $%d", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s has set %s's money to $%d.", RPN(playerid), RPN(playerb), amount);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/setmoney.log", string);
	return 1;
}

CMD:check(playerid, params[])
{
    new playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /check [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	ShowStats(playerid, playerb);
	return 1;
}

CMD:makeleader(playerid, params[])
{
    new playerb, faction, string[128], idx = PlayerInfo[playerb][pFac];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 5 && !PlayerInfo[playerid][pFacMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "ui", playerb, faction))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /makeleader [playerid] [factionid]");
		SendClientMessage(playerid, COLOR_GREY, "FACTIONS: 0) Civilian | 1) NYPD | 2) Government | 3) Hitman Agency | 4) News Agency | 5) LSFMD | 6) FBI");
		return 1;
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(faction < 0 || faction > 7) return SendClientMessage(playerid, COLOR_GREY, "Factions are between 0 and 6");
	// Setting Player's Stats
	if(faction == 0)
	{
		FacInfo[idx][facMembers] --;
	    PlayerInfo[playerb][pFac] = 0;
		PlayerInfo[playerb][pFacRank] = 0;
		PlayerInfo[playerb][pFacLeader] = 0;
		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	}
	else
	{
	    if(PlayerInfo[playerb][pFacLeader])
		{
	 		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	 		FacInfo[idx][facMembers] --;
		}
 		format(FacInfo[faction][facLeader], MAX_PLAYER_NAME, "%s", RPN(playerb));
		PlayerInfo[playerb][pFac] = faction;
		FacInfo[faction][facMembers] ++;
		PlayerInfo[playerb][pFacRank] = 6;
		PlayerInfo[playerb][pFacLeader] = 1;
		PlayerInfo[playerb][pFacDiv] = 0;
		PlayerInfo[playerb][pFacDivLeader] = 0;
	}
	// Admin & Player messages
	format(string, sizeof(string), "AdmWarn: %s has given %s the {33AA33}%s {AA3333}faction leadership.", RPN(playerid), RPN(playerb), RPFNEx(playerb));
    SendAdminMessage(COLOR_DARKRED, 1, string);
	format(string, sizeof(string), " %s has given you the {33AA33}%s {33CCFF}faction leadership.", RPN(playerid), RPFNEx(playerb));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "AdmWarn: %s has given %s the %s faction leadership.", RPN(playerid), RPN(playerb), RPFNEx(playerb));
	Log("logs/factions.log", string);
	return 1;
}

CMD:a(playerid, params[])
{
    new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/a)dminChat [text]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "*%s %s: {FFFFFF}%s", RPALN(playerid), RPN(playerid), params);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	format(string, sizeof(string), "*%s %s: %s", RPALN(playerid), RPN(playerid), params);
	Log("logs/adminchat.log", string);
	return 1;
}

/*CMD:mc(playerid, params[])
{
    new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pMapper] && !PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: (/mc)MapperChat [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(PlayerInfo[playerid][pMapper] > PlayerInfo[playerid][pAdmin]) format(string, sizeof(string), "*%s %s: {FFFFFF}%s", RPMLN(playerid), RPN(playerid), params);
    else if(PlayerInfo[playerid][pAdmin] > PlayerInfo[playerid][pMapper])format(string, sizeof(string), "*%s %s: {FFFFFF}%s", RPALN(playerid), RPN(playerid), params);
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i))
		{
			if(PlayerInfo[i][pMapper] || PlayerInfo[i][pAdmin])
			{
		    	SendClientMessage(i, COLOR_LIGHTGREEN, string);
			}
		}
	}
	// Logs
	if(PlayerInfo[playerid][pMapper] && !PlayerInfo[playerid][pAdmin]) format(string, sizeof(string), "*%s %s: %s", RPMLN(playerid), RPN(playerid), params);
    else if(!PlayerInfo[playerid][pMapper] && PlayerInfo[playerid][pAdmin])format(string, sizeof(string), "*%s %s: %s", RPALN(playerid), RPN(playerid), params);
	Log("logs/mapperchat.log", string);
	return 1;
}*/

CMD:tuteject(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /tuteject [playerid]]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pTutorial]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in the tutorial.");
	SetPlayerVirtualWorld(playerid, 0);
	PlayerInfo[playerb][pTutorial] = 1;
	KillTimer(Tut[playerb]);
	Tut[playerb] = SetTimerEx("TutFinal", 100, false, "i", playerb);
	SpawnChar(playerb);
	format(string, sizeof(string), " Administrator %s has ejected you from the tutorial.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s has ejected %s from the tutorial.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/tutorial.log", string);
	return 1;
}

CMD:forcetut(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /forcetut [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pTutorial]) return SendClientMessage(playerid, COLOR_GREY, "Player is already in the tutorial.");
	PlayerInfo[playerb][pTutorial] = 0;
 SetTimerEx("Tut1", 2000, false, "i", playerb);
	format(string, sizeof(string), "AdmCmd: %s has forced %s to see the tutorial.", RPN(playerid), RPN(playerb));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Log("logs/tutorial.log", string);
	return 1;
}
CMD:startlesson(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsPlayerInRangeOfPoint(playerid, 2, 1388.3075,-1905.0753,1224.9235)) return SendClientMessage(playerid, COLOR_GREY, "You are not at the lesson place.");
	if(!PlayerInfo[playerid][pTutorial]) return SendClientMessage(playerid, COLOR_GREY, "You are already in the tutorial.");
	PlayerInfo[playerid][pTutorial] = 0;
	SetTimerEx("Tut1", 2000, false, "i", playerid);
	return 1;
}

CMD:skick(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /kick [playerid] [reason]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");	format(string, sizeof(string), "AdmCmd: %s has been kicked by %s, reason: %s", RPN(playerb), RPN(playerid), params);
    format(string, sizeof(string), "AdmWarn: %s has been skicked by %s, reason: %s", RPN(playerb), RPN(playerid), params);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	SendClientMessage(playerb, COLOR_RED, string);
	format(string, sizeof(string), "AdmCmd: %s has been skicked by %s (%s), reason: %s", RPN(playerb), RPN(playerid), RPIP(playerid), params);
	Log("logs/kick.log", string);
	SaveChar(playerb);
    Kick(playerb);
	return 1;
}

CMD:givecookie(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /givecookie [playerid] [reason]");
	if(!IsPlayerConnected(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    format(string, sizeof(string), "AdmCmd: %s has given %s a cookie, reason: %s", RPN(playerid), RPN(playerb), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Log("logs/cookies.log", string);
	PlayerInfo[playerb][pCookies] ++;
	return 1;
}

CMD:kick(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pMapper] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");

	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /kick [playerid] [reason]");
	if(!IsPlayerConnected(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(IsPlayerNPC(playerb)) return SendClientMessage(playerid, COLOR_GREY, "You can't kick NPCs out of the server.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");	format(string, sizeof(string), "AdmCmd: %s has been kicked by %s, reason: %s", RPN(playerb), RPN(playerid), params);
    format(string, sizeof(string), "AdmCmd: %s has been kicked by %s, reason: %s", RPN(playerb), RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	format(string, sizeof(string), "AdmCmd: %s has been kicked by %s (%s), reason: %s", RPN(playerb), RPN(playerid), RPIP(playerid), params);
	Log("logs/kick.log", string);
    Kick(playerb);
	return 1;
}

CMD:warns(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /warns [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWarns]) return SendClientMessage(playerid, COLOR_GREY, "Player has no warnings.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Player Warnings Information]:");
	if(PlayerInfo[playerb][pWarns] >= 1) {format(string, sizeof(string), "1) {FFFFFF}%s", PlayerInfo[playerb][pWarn1]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWarns] >= 2) {format(string, sizeof(string), "2) {FFFFFF}%s", PlayerInfo[playerb][pWarn2]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWarns] >= 3) {format(string, sizeof(string), "3) {FFFFFF}%s", PlayerInfo[playerb][pWarn3]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	return 1;
}

CMD:warn(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "us[64]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /warn [playerid] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	PlayerInfo[playerb][pWarns] ++;
	if(PlayerInfo[playerb][pWarns] == 1) format(PlayerInfo[playerb][pWarn1], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 2) format(PlayerInfo[playerb][pWarn2], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 3) format(PlayerInfo[playerb][pWarn3], 64, "%s", params);
	format(string, sizeof(string), " Administrator %s has given you a warning, reason: %s", RPN(playerid), params);
	SendClientMessage(playerb, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "AdmWarn: %s has given %s a warning, reason: %s", RPN(playerid), RPN(playerb), params);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/warn.log", string);
	if(PlayerInfo[playerb][pWarns] == 3)
	{
		format(string, sizeof(string), "AdmCmd: %s has been banned (3 Warnings) by %s, reason: %s", RPN(playerb), RPN(playerid), params);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		format(string, sizeof(string), "AdmCmd: %s has been banned (3 Warnings) by %s (%s), reason: %s", RPN(playerb), RPN(playerid) , RPIP(playerid), params);
		Log("logs/ban.log", string);
		// Banning
		PlayerInfo[playerb][pBanned] = 1;
		// Banreason
		new file[32];
		format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
		format(string, sizeof(string), "%s (3 Warnings)", params);
		dini_Set(file, "BanReason", string);
		dini_Set(file, "BannedBy", RPNU(playerid));
		// BanList
        AddBan(playerb);
        Kick(playerb);
	}
	return 1;
}

CMD:clearwarns(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /clearwarns [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWarns]) return SendClientMessage(playerid, COLOR_GREY, "Player has no warnings.");
	format(string, sizeof(string), "AdmWarn: %s had cleared %s's warnings. (Had %d)", RPN(playerid), RPN(playerb), PlayerInfo[playerb][pWarns]);
	PlayerInfo[playerb][pWarns] = 0;
	format(PlayerInfo[playerid][pWarn1], 64, "");
	format(PlayerInfo[playerid][pWarn2], 64, "");
	format(PlayerInfo[playerid][pWarn3], 64, "");
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/warn.log", string);
	return 1;
}

CMD:sban(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sban [playerid] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	format(string, sizeof(string), "AdmWarn: %s has been sbanned by %s, reason: %s", RPN(playerb), RPN(playerid), params);
	SendAdminMessage(COLOR_LIGHTRED, 1, string);
	SendClientMessage(playerb, COLOR_RED, string);
	format(string, sizeof(string), "AdmCmd: %s has been sbanned by %s (%s), reason: %s", RPN(playerb), RPN(playerid) , RPIP(playerid), params);
	Log("logs/ban.log", string);
	// Banning
	PlayerInfo[playerb][pBanned] = 1;
	// Banreason
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	dini_Set(file, "BanReason", params);
	dini_Set(file, "BannedBy", RPNU(playerid));
	// BanList
        AddBan(playerb);
        Kick(playerb);
	return 1;
}

CMD:whitelist(playerid, params[])
{
    new playerb[32], string[128], file[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /whitelist [playername]");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	format(string, sizeof(string), "AdmWarn: %s has whitelisted %s.", RPN(playerid), params);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/whitelist.log", string);
	// Whitelisting
	dini_IntSet(file, "Whitelisted", 1);
	return 1;
}

CMD:rangeban(playerid, params[])
{
    new playerb, string[128],range[4][4];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /rangeban [playerid] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	// Rangeban
	split(RPIP(playerb), range, '.');
	format(string, sizeof(string), "%s.%s.*.*", range[0], range[1]);
	AddRangeBan(string);
	// Normal ban
	format(string, sizeof(string), "AdmCmd: %s has been rangebanned by %s, reason: %s", RPN(playerb), RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);

	format(string, sizeof(string), "AdmCmd: %s has been rangebanned by %s (%s), reason: %s", RPN(playerb), RPN(playerid) , RPIP(playerid), params);
	Log("logs/ban.log", string);
	// Banning
	PlayerInfo[playerb][pBanned] = 1;
	// Banreason
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	dini_Set(file, "BanReason", params);
	dini_Set(file, "BannedBy", RPNU(playerid));
	// BanList
        AddBan(playerb);
        Kick(playerb);
	return 1;
}

CMD:ban(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pMapper] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");

	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /ban [playerid] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	format(string, sizeof(string), "AdmCmd: %s has been banned by %s, reason: %s", RPN(playerb), RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	format(string, sizeof(string), "AdmCmd: %s has been banned by %s (%s), reason: %s", RPN(playerb), RPN(playerid) , RPIP(playerid), params);
	Log("logs/ban.log", string);
	// Banning
	PlayerInfo[playerb][pBanned] = 1;
	// Banreason
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	dini_Set(file, "BanReason", params);
	dini_Set(file, "BannedBy", RPNU(playerid));
	// BanList
        AddBan(playerb);
        Kick(playerb);
	return 1;
}

CMD:banaccount(playerid, params[])
{
    new playerb[32], string[128], file[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[32]s[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /banaccount [playername] [reason]");
	if(RPIDFN(playerb) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player is connected to the server, use /ban instead.");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	if(PlayerInfo[playerid][pAdmin] < dini_Int(file, "Admin")) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	format(string, sizeof(string), "AdmCmd: %s has been offline-banned by %s, reason: %s", playerb, RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	format(string, sizeof(string), "AdmCmd: %s has been offline-banned by %s (%s), reason: %s", playerb, RPN(playerid) , RPIP(playerid), params);
	Log("logs/ban.log", string);
	// Banning
	dini_IntSet(file, "pBanned", 1);
	// Banreason
	dini_Set(file, "BanReason", params);
	dini_Set(file, "BannedBy", RPNU(playerid));
	// BanList
	new File:ban = fopen("ban.cfg", io_append);
	format(string, sizeof(string), "%s\r\n", dini_Get(file, "IP"));
	fwrite(ban, string);
	fclose(ban);
	return 1;
}

CMD:oprison(playerid, params[])
{
    new playerb[32], string[128], file[32], time;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[32]is[128]", playerb, time, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /oprison [playername] [time] [reason]");
	if(RPIDFN(playerb) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player is connected to the server, use /prison instead.");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	if(PlayerInfo[playerid][pAdmin] < dini_Int(file, "Admin")) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	format(string, sizeof(string), "AdmCmd: %s has been offline-prisoned by %s, reason: %s", playerb, RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	format(string, sizeof(string), "AdmCmd: %s has been offline-prisoned by %s, reason: %s", playerb, RPN(playerid) , params);
	// Prisoning
	dini_IntSet(file, "pPrison", 1);
	// Prisonreason
	dini_Set(file, "pPrisonReason", params);
	dini_Set(file, "pPrisonBy", RPNU(playerid));
	dini_IntSet(file, "pPrisonTime", time);
	return 1;
}

CMD:goback(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHelper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(hPos[playerid][0] == 0 && hPos[playerid][1] == 0 && hPos[playerid][2] == 0 && hPOS[playerid][0] == 0 && hPOS[playerid][0] == 0) return SendClientMessage(playerid, COLOR_GREY, "You haven't teleported to anybody.");
	SetPlayerPos(playerid, hPos[playerid][0], hPos[playerid][1], hPos[playerid][2]);
	SetPlayerInterior(playerid, hPOS[playerid][0]);
	SetPlayerVirtualWorld(playerid, hPOS[playerid][1]);
	hPos[playerid][0] = 0; hPos[playerid][1] = 0; hPos[playerid][2] = 0; hPOS[playerid][0] = 0; hPOS[playerid][1] = 0;
	format(string, sizeof(string), "HelpWarn: %s has teleported back to their location.", RPN(playerid));
	SendHelperMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:goto(playerid, params[])
{
	new playerb, string[128];
	new Float:Pos[3];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /goto [playerid]");
	if(!IsPlayerLoggedIn(playerb) && !IsPlayerNPC(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pHelper] && !PlayerInfo[playerid][pAdmin])
	{
	    if(!HelpTime[playerb]) return SendClientMessage(playerid, COLOR_GREY, "This player hasn't requested any help.");
	   	if(hPos[playerid][0] == 0 && hPos[playerid][1] == 0 && hPos[playerid][2] == 0 && hPOS[playerid][0] == 0 && hPOS[playerid][0] == 0)
	   	{
		    GetPlayerPos(playerid, hPos[playerid][0], hPos[playerid][1], hPos[playerid][2]);
		    hPOS[playerid][0] = GetPlayerInterior(playerid);
		    hPOS[playerid][1] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerb, Pos[0], Pos[1], Pos[2]);
			SetPlayerPos(playerid, Pos[0]+1, Pos[1], Pos[2]);
			SetPlayerInterior(playerid, GetPlayerInterior(playerb));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerb));
			format(string, sizeof(string), " You have teleported to %s.", RPN(playerb));
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), " %s %s has teleported to you.", RPHLN(playerid), RPN(playerid));
			SendClientMessage(playerb, COLOR_WHITE, string);
			format(string, sizeof(string), "HelpWarn: %s has teleported to %s.", RPN(playerid), RPN(playerb));
			SendHelperMessage(COLOR_DARKRED, 1, string);
		}
		else SendClientMessage(playerid, COLOR_GREY, "You must /goback before teleporting to another player.");
	}
	else
	{
		if(Spec[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player is spectating someone.");
		GetPlayerPos(playerb, Pos[0], Pos[1], Pos[2]);
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetVehiclePos(GetPlayerVehicleID(playerid), Pos[0]+2, Pos[1]+2, Pos[2]);
		}
		else
		{
		    SetPlayerPos(playerid, Pos[0]+1, Pos[1], Pos[2]);
		}
		SetPlayerInterior(playerid, GetPlayerInterior(playerb));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerb));
		format(string, sizeof(string), " You have teleported to %s.", RPN(playerb));
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), " Administrator %s has teleported to you.", RPN(playerid));
		SendClientMessage(playerb, COLOR_WHITE, string);
	}
	return 1;
}


CMD:gotopos(playerid, params[])
{
    new Float:Pos[3], int;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "fffi", Pos[0], Pos[1], Pos[2], int)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gotopos [x] [y] [z] [int]");
	SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	SetPlayerInterior(playerid, int);
	return 1;
}

CMD:gethere(playerid, params[])
{
	new playerb, string[128];
	new Float:Pos[3];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /goto [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
    if(Spec[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player is spectating someone.");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	if(IsPlayerInAnyVehicle(playerb) && GetPlayerState(playerb) == PLAYER_STATE_DRIVER && !GetPlayerInterior(playerid))
	{
    	SetVehiclePos(GetPlayerVehicleID(playerb), Pos[0]+2, Pos[1]+2, Pos[2]);
	}
	else
	{
	    SetPlayerPos(playerb, Pos[0]+1, Pos[1], Pos[2]);
	}
	SetPlayerInterior(playerb, GetPlayerInterior(playerid));
	SetPlayerVirtualWorld(playerb, GetPlayerVirtualWorld(playerid));
	format(string, sizeof(string), " You have teleported %s to you.", RPN(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " You have been teleported to admin %s.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:sendto(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	new playerb;
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pMapper] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params,"us[32]", playerb, params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sendto [playerid] [place]");
	    SendClientMessage(playerid, COLOR_GREY, "PLACES: ls | dmv | gym | dealership | trucker | productsdropoff | bank | mechanic");
	    return 1;
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(!strcmp(params, "ls", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,1515.2551,-1666.3148,14.0469);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to Los Santos.");
     	return 1;
	}
	else if(!strcmp(params, "sf", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,-1417.0,-295.8,14.1);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to San Fierro.");
     	return 1;
	}
	else if(!strcmp(params, "lv", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerid,1699.2,1435.1, 10.7);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to Las Venturas.");
     	return 1;
	}
	else if(!strcmp(params, "dmv", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,962.3975,-1433.5745,14.0537);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the DMV.");
     	return 1;
	}
	else if (!strcmp(params,"area51",true))
	{
            SetPlayerInterior(playerb, 0);
	        SetPlayerVirtualWorld(playerb, 0);
		    SetPlayerPos(playerb,202.1886,1881.4122,17.2199);
		    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the area51.");
	}
	else if(!strcmp(params, "gym", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,2224.8137,-1723.4457,13.5625);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Gym.");
     	return 1;
	}
	else if(!strcmp(params, "dealership", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,546.1611,-1273.8046,17.2482);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Vehicles Dealership.");
     	return 1;
	}
	else if(!strcmp(params, "trucker", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,1-520.4179,-505.3250,24.6084);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Trucker Job.");
     	return 1;
	}
	else if(!strcmp(params, "productsdropoff", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,2222.5107,-2682.7368,13.5409);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Products Dropoff.");
     	return 1;
	}
	else if(!strcmp(params, "mechanic", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,2330.0693,-2315.4709,13.5469);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Mechanic Job.");
     	return 1;
	}
	else if(!strcmp(params, "bank", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,1462.4095,-1011.1602,26.8438);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Bank.");
     	return 1;
	}
	return 1;
}
CMD:setfightstyle(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	new playerb;
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params,"us[32]", playerb, params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /setfightstyle [playerid] [1-6]");
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(!strcmp(params, "1", true))
	{
        SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
        SendClientMessage(playerb, COLOR_WHITE, " Your fightstyle have been changed by an administrator.");
     	return 1;
	}
	else if(!strcmp(params, "2", true))
	{
	    SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
	    SendClientMessage(playerb, COLOR_WHITE, " Your fightstyle have been changed by an administrator.");
     	return 1;
	}
	else if (!strcmp(params,"3",true))
	{
            SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
		    SendClientMessage(playerb, COLOR_WHITE, " Your fightstyle have been changed by an administrator.");
		    return 1;
	}
	else if(!strcmp(params, "4", true))
	{
        SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
        SendClientMessage(playerb, COLOR_WHITE, " Your fightstyle have been changed by an administrator.");
     	return 1;
	}
	else if(!strcmp(params, "5", true))
	{
	    SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
	    SendClientMessage(playerb, COLOR_WHITE, " Your fightstyle have been changed by an administrator.");
     	return 1;
	}
	else if(!strcmp(params, "6", true))
	{
	    SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
	    SendClientMessage(playerb, COLOR_WHITE, " Your fightstyle have been changed by an administrator.");
     	return 1;
	}
	return 1;
}
CMD:sendnewbieto(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	new playerb;
	if(PlayerInfo[playerid][pHelper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params,"us[32]", playerb, params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /sendto [playerid] [place]");
	    SendClientMessage(playerid, COLOR_GREY, "PLACES: ls | dmv | gym | dealership | trucker | productsdropoff | bank | mechanic");
	    return 1;
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!HelpTime[playerb]) return SendClientMessage(playerid, COLOR_GREY, "This player hasn't requested any help.");
    if(!strcmp(params, "ls", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,1515.2551,-1666.3148,14.0469);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to Los Santos.");
     	return 1;
	}
	else if(!strcmp(params, "sf", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,-1417.0,-295.8,14.1);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to San Fierro.");
     	return 1;
	}
	else if(!strcmp(params, "lv", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerid,1699.2,1435.1, 10.7);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to Las Venturas.");
     	return 1;
	}
	else if(!strcmp(params, "dmv", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,962.3975,-1433.5745,14.0537);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the DMV.");
     	return 1;
	}
	else if (!strcmp(params,"area51",true))
	{
            SetPlayerInterior(playerb, 0);
	        SetPlayerVirtualWorld(playerb, 0);
		    SetPlayerPos(playerb,202.1886,1881.4122,17.2199);
		    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the area51.");
	}
	else if(!strcmp(params, "gym", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,2224.8137,-1723.4457,13.5625);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Gym.");
     	return 1;
	}
	else if(!strcmp(params, "dealership", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,546.1611,-1273.8046,17.2482);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Vehicles Dealership.");
     	return 1;
	}
	else if(!strcmp(params, "trucker", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,1-520.4179,-505.3250,24.6084);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Trucker Job.");
     	return 1;
	}
	else if(!strcmp(params, "productsdropoff", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,2222.5107,-2682.7368,13.5409);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Products Dropoff.");
     	return 1;
	}
	else if(!strcmp(params, "mechanic", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,2330.0693,-2315.4709,13.5469);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Mechanic Job.");
     	return 1;
	}
	else if(!strcmp(params, "bank", true))
	{
	    SetPlayerInterior(playerb, 0);
	    SetPlayerVirtualWorld(playerb, 0);
	    SetPlayerPos(playerb,1462.4095,-1011.1602,26.8438);
	    SendClientMessage(playerb, COLOR_WHITE, " You have been teleported to the Bank.");
     	return 1;
	}
	return 1;
}

CMD:unban(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	new string[128];
	if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /unban [name]");
	new file[64], IP[16];
	format(file, sizeof(file), "users/%s.ini", params);
	if(dini_Exists(file))
	{
	    if(dini_Int(file, "pBanned") == 0) return SendClientMessage(playerid, COLOR_GREY, "Player is not banned.");
		format(IP, sizeof(IP), "%s", dini_Get(file, "IP"));
	    // Userfile
	    dini_IntSet(file, "pBanned", 0);
	    dini_IntSet(file, "Warns", 0);
	    dini_Set(file, "Warn1", "");
	    dini_Set(file, "Warn2", "");
	    dini_Set(file, "Warn3", "");
	    dini_Set(file, "BanReason", "");
	    dini_Set(file, "BannedBy", "");
	    format(string, sizeof(string), "AdmWarn: %s has unbanned %s.", RPN(playerid), params);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		format(string, sizeof(string), "AdmWarn: %s (%s) has unbanned %s (%s).", RPN(playerid), RPIP(playerid), params, IP);
		Log("logs/unban.log", string);
		return cmd_unbanip(playerid, IP);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	}

	return 1;
}

CMD:unbanip(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	new string[128];
	if(sscanf(params, "s[16]", params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /unbanip [ip]");
	if(IsValidIP(params)) return SendClientMessage(playerid, COLOR_GREY, "Invalid IP Address.");
	new File:ban = fopen("ban.cfg", io_read);
	new idx = 1, done;
	while(fread(ban, string))
	{
		if(!strcmp(params, string, true, strlen(params)))
		{
			fdeleteline("ban.cfg", idx);
			format(string, sizeof(string), "AdmWarn: %s has unbanned IP %s", RPN(playerid), params);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			format(string, sizeof(string), "AdmWarn: %s (%s) has unbanned IP %s", RPN(playerid), RPIP(playerid), params);
			Log("logs/unban.log", string);
			done = 1;
	    }
		idx++;
	}
	fclose(ban);
	if(!done) SendClientMessage(playerid, COLOR_GREY, "IP is not banned.");
	return 1;
}


CMD:removehelper(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	{
	    new playerb, string[128], string2[128], log[256];
	    if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /firehelper [playerid]");
		if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
		if(!PlayerInfo[playerb][pHelper]) return SendClientMessage(playerid, COLOR_GREY, "Player is not a helper.");
		format(string, sizeof(string), "AdmWarn: %s has {33AA33}fired {AA3333}%s from the Community Helpers team.", RPN(playerid), RPN(playerb));
    	format(string2, sizeof(string2), "Warning: %s has {33AA33}fired {AA3333}%s from the Community Helpers team.", RPN(playerid), RPN(playerb));
        format(log, sizeof(log), "AdmWarn: %s (%s) has fired %s (%s) from the Community Helpers team.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb));
		Log("logs/makehelper.log", log);
		PlayerInfo[playerb][pHelper] = 0;
		SendAdminMessage(COLOR_DARKRED, 1, string);
		SendHelperMessage(COLOR_DARKRED, 1, string2);
		if(!PlayerInfo[playerb][pHelper])
		{
		    SendClientMessage(playerb, COLOR_DARKRED, string2);
		}
	}
	return 1;
}

CMD:makehelper(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] > 6)
	{
	    new playerb, string[128];
	    if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /makehelper [playerid]");
		if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
		if(!PlayerInfo[playerb][pHelper])
     	{
	    PlayerInfo[playerb][pHelper] = 1;
	    format(string, sizeof(string), "%s has {33AA33}promoted {AA3333}%s to a Community Helper.", RPN(playerid), RPN(playerb));
	    SendHelperMessage(COLOR_DARKRED, 1, string);
	    SendAdminMessage(COLOR_DARKRED, 1, string);
	    SendClientMessage(playerb, COLOR_DARKRED, string);
    	}
    }
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}
CMD:oremoveadmin(playerid, params[])
{
    new playerb[32], string[128], file[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(sscanf(params, "s[32]s[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /removeadmin [playername] [confirm]");
	if(RPIDFN(playerb) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player is connected to the server, use /makeadmin instead.");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	if(PlayerInfo[playerid][pAdmin] < dini_Int(file, "Admin")) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	format(string, sizeof(string), "AdmWarn: %s has been removed from Administrators team by %s", playerb, RPN(playerid));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	// Banning
	dini_IntSet(file, "Admin", 0);
	dini_IntSet(file, "AdminAccount", 0);
	return 1;
}
CMD:oremovehelper(playerid, params[])
{
    new playerb[32], string[128], file[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[32]s[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /removehelper [playername] [confirm]");
	if(RPIDFN(playerb) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player is connected to the server, use /makehelper instead.");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	if(PlayerInfo[playerid][pHelper] < dini_Int(file, "Helper")) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher helper level than you.");
	format(string, sizeof(string), "Warning: %s has been removed from the position of Community Helper by %s", playerb, RPN(playerid));
	SendHelperMessage(COLOR_DARKRED, 1, string);
	format(string, sizeof(string), "AdmWarn: %s has been removed from the helpers team by %s", playerb, RPN(playerid));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	// Banning
	dini_IntSet(file, "Helper", 0);
	return 1;
}

CMD:oremoveleadership(playerid, params[])
{
    new playerb[32], string[128], file[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[32]s[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /purge [playername] [confirm]");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(RPIDFN(playerb) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player is connected to the server, use /makeleader instead.");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	format(string, sizeof(string), "AdmWarn: %s has been kicked out of his leadership by %s", playerb, RPN(playerid));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	// Banning
	dini_IntSet(file, "Fac", 0);
	dini_IntSet(file, "FacLeader", 0);
	dini_IntSet(file, "FacRank", 0);
	dini_IntSet(file, "FacDiv", 0);
	dini_IntSet(file, "FacDivLeader", 0);
	return 1;
}

CMD:makegangmod(playerid, params[])
{
	new string[128], playerb, log[256];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(sscanf(params, "ui", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /makegangmod [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player is not an administrator.");
	if(!PlayerInfo[playerb][pGangMod])
	{
	    PlayerInfo[playerb][pGangMod] = 1;
	    format(string, sizeof(string), "AdmWarn: %s has {33AA33}assigned {AA3333}%s as a {33AA33}Gang Moderator{AA3333}.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has assigned %s as a Gang Moderator.", RPN(playerid), RPN(playerb));
	}
	else
	{
	    PlayerInfo[playerb][pGangMod] = 0;
	    format(string, sizeof(string), "AdmWarn: %s has {FF9900}removed {AA3333}%s's {FF9900}Gang Moderator{AA3333} powers.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has removed %s's Gang Moderator powers.", RPN(playerid), RPN(playerb));
	}
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
	if(dini_Exists(file))
	{
		dini_IntSet(file, "GangMod", PlayerInfo[playerb][pGangMod]);
	}
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	if(dini_Int(file, "AdminAccount") == 1)
	{
	    format(file, sizeof(file), "users/%s.ini", dini_Get(file, "OldName"));
	    dini_IntSet(file, "GangMod", PlayerInfo[playerb][pGangMod]);
	}
	Log("logs/makeadmin.log", log);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:makefacmod(playerid, params[])
{
	new string[128], playerb, log[256];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(sscanf(params, "ui", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /makefacmod [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player is not an administrator.");
	if(!PlayerInfo[playerb][pFacMod])
	{
	    PlayerInfo[playerb][pFacMod] = 1;
	    format(string, sizeof(string), "AdmWarn: %s has {33AA33}assigned {AA3333}%s as a {33AA33}Faction Moderator{AA3333}.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has assigned %s as a Faction Moderator.", RPN(playerid), RPN(playerb));
	}
	else
	{
	    PlayerInfo[playerb][pFacMod] = 0;
	    format(string, sizeof(string), "AdmWarn: %s has {FF9900}removed {AA3333}%s's {FF9900}Faction Moderator{AA3333} powers.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has removed %s's Faction Moderator powers.", RPN(playerid), RPN(playerb));
	}
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
	if(dini_Exists(file))
	{
		dini_IntSet(file, "FacMod", PlayerInfo[playerb][pFacMod]);
	}
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	if(dini_Int(file, "AdminAccount") == 1)
	{
	    format(file, sizeof(file), "users/%s.ini", dini_Get(file, "OldName"));
	    dini_IntSet(file, "FacMod", PlayerInfo[playerb][pFacMod]);
	}
	Log("logs/makeadmin.log", log);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:makebanappealer(playerid, params[])
{
	new string[128], playerb, log[256];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    if(sscanf(params, "ui", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /makebanappealer [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player is not an administrator.");
	if(!PlayerInfo[playerb][pBanAppealer])
	{
	    PlayerInfo[playerb][pBanAppealer] = 1;
	    format(string, sizeof(string), "AdmWarn: %s has {33AA33}assigned {AA3333}%s as a {33AA33}Ban Appealer{AA3333}.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has assigned %s as a Ban Appealer.", RPN(playerid), RPN(playerb));
	}
	else
	{
	    PlayerInfo[playerb][pBanAppealer] = 0;
	    format(string, sizeof(string), "AdmWarn: %s has {FF9900}removed {AA3333}%s's {FF9900}Ban Appealer{AA3333} powers.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has removed %s's Ban Appealer powers.", RPN(playerid), RPN(playerb));
	}
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
	if(dini_Exists(file))
	{
		dini_IntSet(file, "BanAppealer", PlayerInfo[playerb][pBanAppealer]);
	}
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	if(dini_Int(file, "AdminAccount") == 1)
	{
	    format(file, sizeof(file), "users/%s.ini", dini_Get(file, "OldName"));
	    dini_IntSet(file, "BanAppealer", PlayerInfo[playerb][pBanAppealer]);
	}
	Log("logs/makeadmin.log", log);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:makeadmin(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	//if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	if(PlayerInfo[playerid][pAdmin] >= 0)
	{
	    new playerb, admin, string[128];
	    if(sscanf(params, "ui", playerb, admin)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /makeadmin [playerid] [level]");
		if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	//	if(admin < 0 || admin > 9) return SendClientMessage(playerid, COLOR_GREY, "Admin levels are between 1-9");
	    if(PlayerInfo[playerb][pAdmin] != admin)
	    {
	        new log[256];
		    if(PlayerInfo[playerb][pAdmin] < admin)
			{
		    	format(string, sizeof(string), "AdmWarn: %s has {33AA33}promoted {AA3333}%s to level {33AA33}%d {AA3333}admin.", RPN(playerid), RPN(playerb), admin);
            	format(log, sizeof(log), "AdmWarn: %s (%s) has promoted %s (%s) to level %d admin.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb), admin);
			}
			else if(PlayerInfo[playerb][pAdmin] > admin)
			{
	  	    	format(string, sizeof(string), "AdmWarn: %s has {FF9900}demoted {AA3333}%s to level {FF9900}%d {AA3333}admin.", RPN(playerid), RPN(playerb), admin);
	  	    	format(log, sizeof(log), "AdmWarn: %s (%s) has demoted %s (%s) to level %d admin.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb), admin);
			}
			Log("logs/makeadmin.log", log);
			PlayerInfo[playerb][pAdmin] = admin;
			PlayerInfo[playerb][pSafeAdmin] = 1;
			SendAdminMessage(COLOR_DARKRED, 1, string);
			if(!PlayerInfo[playerb][pAdmin])
			{
			    PlayerInfo[playerb][pSafeAdmin] = 0;
			    PlayerInfo[playerid][pGangMod] = 0;
			    PlayerInfo[playerid][pFacMod] = 0;
			    PlayerInfo[playerid][pBanAppealer] = 0;
			    SendClientMessage(playerb, COLOR_DARKRED, string);
			}
			new file[32];
			format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
			format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
			if(dini_Exists(file))
			{
				dini_IntSet(file, "Admin", PlayerInfo[playerb][pAdmin]);
			}
			format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
			if(dini_Int(file, "AdminAccount") == 1)
			{
			    format(file, sizeof(file), "users/%s.ini", dini_Get(file, "OldName"));
			    dini_IntSet(file, "Admin", PlayerInfo[playerb][pAdmin]);
			}
		}
		else SendClientMessage(playerid, COLOR_GREY, "Player already has this admin level.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}



CMD:saveserver(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
    foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i))
		{
		    SaveChar(i);
		}
	}
	SaveFactions();
	SaveFamilies();
	SavePoints();
	SaveBiz();
	SaveHouses();
	SaveDoors();
	SaveObjects();
	SaveObjects22();
	SaveGates();
	SaveMapIcons();
	SaveArrestPoint();
	SaveDrugs();
	SaveMOTDS();
    new string[128];
	format(string, sizeof(string), "AdmWarn: %s has saved all server files.", RPN(playerid));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:ggmx(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	new string[128];
	SendRconCommand("hostname Intense Role-Play [Server Restarting]");
	format(string, sizeof(string), "AdmCmd: %s has issued an instant server restart.", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	foreach(Player, i)
    {
       	SaveChar(i);
       	ClearChar(i);
       	GMX[i] = 1;
    }
	SendRconCommand("gmx");
	return 1;
}

CMD:gmx(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on Admin Duty.");
	new string[128];
	SendRconCommand("hostname Intense Role-Play [Server Restarting]");
	format(string, sizeof(string), "AdmCmd: %s has issued a server restart, it will occur in 10 seconds.", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	SetTimer("gmxtimer", 10000, false);
	return 1;
}

forward gmxtimer();
public gmxtimer()
{
    foreach(Player, i)
    {
       	SaveChar(i);
       	ClearChar(i);
       	GMX[i] = 1;
    }
	SendRconCommand("gmx");
}

// End of OnPlayerCommandText

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!ispassenger)
	{
		if(IsDMVCar(vehicleid))
		{
		    if(!LicenseTest[playerid])
		    {
			    new Float:pos[3];
			    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		        SendClientMessage(playerid, COLOR_ORANGE, "You are not taking a drivers license test.");
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* GPS: Finish the test by driving through all of the checkpoints on your GPS.");
		        SetPlayerCheckpoint(playerid,980.1932,-1407.9902,13.0956,5);
		        SendClientMessage(playerid, COLOR_RED, "If you exit the car your test will be failed and it will have to be re-done.");
		    }
		}
	    if(IsDLCar(vehicleid))
		{
			    new Float:pos[3];
			    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		}
		else if(IsFamVehicle(vehicleid) && Fam[vehicleid] != PlayerInfo[playerid][pFam] && !IsACop(playerid))
		{
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to a family.");
		}
	    else if(IsLeoVehicle(vehicleid) && PlayerInfo[playerid][pFac] != 1)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the NYPD.");
	    }
	    else if(IsLSFMDVehicle(vehicleid) && PlayerInfo[playerid][pFac] != 5)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the LSFMD.");
	    }
	    else if(IsNewsVehicle(vehicleid) && PlayerInfo[playerid][pFac] != 4)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the News Agency.");
	    }
	    else if(IsFBIVehicle(vehicleid) && PlayerInfo[playerid][pFac] != 6)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the FBI.");
	    }
	    else if(IsNGVehicle(vehicleid) && PlayerInfo[playerid][pFac] != 7)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the NG.");
	    }
	    else if(IsTruckerVehicle(vehicleid) && PlayerInfo[playerid][pJob] != JOB_TRUCKER)
	    {
	    	new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the Truckers.");
	    }
	    else if(IsGovVehicle(vehicleid) && PlayerInfo[playerid][pFac] != 2)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the GOV.");
	    }

	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(LicenseTest[playerid])
	{
		DisablePlayerCheckpoint(playerid);
		LicenseTest[playerid] = 0;
		CP[playerid] = 0;
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have left your car, therefore your test has been failed.");
	}
	if(PlayerInfo[playerid][pFac] == 1 && PlayerInfo[playerid][pFac] == 7 && PlayerInfo[playerid][pFac] == 6)
	{
	    LastCar[playerid] = vehicleid;
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    SetPlayerArmedWeapon(playerid,0);
	}
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    if(newstate == PLAYER_STATE_PASSENGER)
	    {
	        new gun,tmp;
	        GetPlayerWeaponData(playerid,4,gun,tmp);
	        #pragma unused tmp
	        if(gun)SetPlayerArmedWeapon(playerid,gun);
	        else SetPlayerArmedWeapon(playerid,0);
	    }
	}
	if(newstate == PLAYER_STATE_DRIVER && oldstate != PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	//	if(!engine) SendClientMessage(playerid, COLOR_WHITE, "You can start or stop the vehicle's engine using {FF6347}/engine{FFFFFF}.");
		if(!engine) GameTextForPlayer(playerid, "~w~/engine to turn on/off the vehicle engine.", 3500, 3);
		if(!PlayerInfo[playerid][pCarLic]) SendClientMessage(playerid, COLOR_LIGHTRED, " You don't have a drivers license, beware of cops.");
		if(IsATowTruck(vehicleid)) SendClientMessage(playerid, COLOR_WHITE, "You can tow a vehicle using {FF6347}/tow{FFFFFF}.");
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(DeliverMoney[playerid] == 1 && IsPlayerInRangeOfPoint(playerid, 10, -2227.4868,2327.0056,7.5469))
	{
	    new Rob = BankRobber[playerid]-1, string[128];
	    DisablePlayerCheckpoint(playerid);
		BankRobbersCount --;
		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
		DeliverMoney[playerid] = 0;
		//
		foreach(Player, i)
		{
		    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
		    {
				if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
				else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
				else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
				else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
				else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
			}
		}
		GiveDodMoney(playerid, 10000);
		format(string, sizeof(string), "** %s has delivered their stolen money and claimed $10,000. **", RPN(playerid));
		SendRobberyMessage(COLOR_LIME, string);
		SendCopMessage(COLOR_LIME, string);
		BankRobber[playerid] = 0;
		TotalStolen ++;
		//
		if(BankRobbersCount == 0)
		{
			TextDrawHideForAll(Textdraw0);
			TextDrawHideForAll(Textdraw1);
			TextDrawHideForAll(Textdraw2);
			TextDrawHideForAll(Textdraw3);
			TextDrawHideForAll(Textdraw4);
			TextDrawHideForAll(Textdraw5);
//			BankRobbery = 0;
			RobberyStarted = 0;
			format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
			SendClientMessageToAll(COLOR_YELLOW, string);
			TotalRobbers = 0;
			new copsonline;
			foreach(Player, i)
			{
			    if(IsACop(i)) copsonline++;
			}
			foreach(Player, i)
			{
			    if(IsACop(i))
			    {
					new Saved = (TotalRobbers*10000-(TotalStolen*10000));
					GiveDodMoney(i, Saved/copsonline);
					format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
					SendClientMessage(i, COLOR_LIME, string);
			    }
			}
		}
	}
    if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 1) // Checkpoint 1
		{
		    SetPlayerCheckpoint(playerid,1009.3680,-1407.4510,13.0299,5);
		    CP[playerid] = 2;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 2) // Checkpoint 2
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid,1058.3973,-1445.5070,13.2364,5);
		    CP[playerid] = 3;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 3) // Checkpoint 3
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1035.2603,-1706.2277,13.2655,5);
			CP[playerid] = 4;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 4) // Checkpoint 4
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1283.5852,-1714.5251,13.2577,5);
			CP[playerid] = 5;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 5) // Checkpoint 5
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1295.5685,-1838.8075,13.2578,5);
			CP[playerid] = 6;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 6) // Checkpoint 6
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1623.6084,-1874.1854,13.2578,5);
			CP[playerid] = 7;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 7) // Checkpoint 7
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1691.7144,-1681.2491,13.2578,5);
			CP[playerid] = 8;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 8) // Checkpoint 8
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1783.3315,-1611.9913,13.2377,5);
			CP[playerid] = 9;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 9) // Checkpoint 9
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1824.5302,-1591.1809,13.2333,5);
			CP[playerid] = 10;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 10) // Checkpoint 10
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1851.9956,-1303.2091,13.2624,5);
			CP[playerid] = 11;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 11) // Checkpoint 11
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1817.2354,-1176.9016,23.5036,5);
			CP[playerid] = 12;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 12) // Checkpoint 13
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1616.6484,-1158.9518,23.7728,5);
			CP[playerid] = 13;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 13) // Checkpoint 14
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1549.0206,-1053.6720,23.4879,5);
			CP[playerid] = 14;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 14) // Checkpoint 15
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1376.5190,-1032.3350,26.2899,5);
			CP[playerid] = 15;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 15) // Checkpoint 16
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1144.1606,-1037.1768,31.6793,5);
			CP[playerid] = 16;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 16) // Checkpoint 17
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1080.0674,-1116.3767,23.9516,5);
			CP[playerid] = 17;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 17) // Checkpoint 18
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1056.2576,-1224.8196,16.7947,5);
			CP[playerid] = 18;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 18) // Checkpoint 19
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,1055.7650,-1364.8551,13.2595,5);
			CP[playerid] = 19;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 19) // Checkpoint 20
		{
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,963.298950,-1392.982055,12.7691,5);
			CP[playerid] = 20;
		}
		else if(IsPlayerInCheckpoint(playerid) && CP[playerid] == 20) // Checkpoint 21
		{
		    DisablePlayerCheckpoint(playerid);
		    new Float:Health;
		    GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		    if(Health > 900)
			{
				DisablePlayerCheckpoint(playerid);
				PlayerInfo[playerid][pCarLic] = 1;
				LicenseTest[playerid] = 0;
				CP[playerid] = 0;
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have successfully passed the test and received your license.");
			}//Checkpoints need to be reset in order for drivers test to work. After entering first checkpoint, the server DisablePlayerCheckpoint and doesn't set a new checkpoint.
			else
			{
				DisablePlayerCheckpoint(playerid);
				LicenseTest[playerid] = 0;
				CP[playerid] = 0;
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have totaled your vehicle, therefore you failed the test and we've confiscated your costs to repair the vehicle.");
			}
		}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(pickupid == Parachute)
	{
	    new Parachute1, Parachute2;
		GetPlayerWeaponData(playerid, 11, Parachute1, Parachute2);
		if(Parachute1 != 46)
		{
		    GiveDodWeapon(playerid, 46, 1);
		}
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(vehicleid == PlayerInfo[playerid][pVeh])
	{
		for(new i=0; i<14; i++)
		{
		    PlayerInfo[playerid][pVehMod][i] = GetVehicleComponentInSlot(PlayerInfo[playerid][pVeh], i);
		}
	}
	else if(vehicleid == PlayerInfo[playerid][pVVeh])
	{
		for(new i=0; i<14; i++)
		{
		    PlayerInfo[playerid][pVVehMod][i] = GetVehicleComponentInSlot(PlayerInfo[playerid][pVVeh], i);
		}
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(vehicleid == PlayerInfo[playerid][pVeh])
	{
		PlayerInfo[playerid][vPJ] = paintjobid;
	}
	else if(vehicleid == PlayerInfo[playerid][pVVeh])
	{
		PlayerInfo[playerid][vVPJ] = paintjobid;
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(vehicleid == PlayerInfo[playerid][pVeh])
	{
		PlayerInfo[playerid][vC1] = color1;
		PlayerInfo[playerid][vC2] = color2;
	}
	else if(vehicleid == PlayerInfo[playerid][pVVeh])
	{
		PlayerInfo[playerid][vVC1] = color1;
		PlayerInfo[playerid][vVC2] = color2;
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	foreach(Player, i)
	{
		if(Specid[i] == playerid)
		{
		    SetPlayerInterior(i, newinteriorid);
		}
	}
	return 1;
}
forward GetClosestPlayerToPlayer(playerid);
public GetClosestPlayerToPlayer(playerid)
{
    new Float:dist = 2.0;
    new targetid = INVALID_PLAYER_ID;
    new Float:x1,Float:y1,Float:z1;
    new Float:x2,Float:y2,Float:z2;
    new Float:tmpdis;
    GetPlayerPos(playerid,x1,y1,z1);
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(i == playerid) continue;
        GetPlayerPos(i,x2,y2,z2);
        tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
        if(tmpdis < dist)
        {
            dist = tmpdis;
            targetid = i;
        }
    }
    return targetid;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(gPlayerUsingLoopingAnim[playerid])
	{
		if(IsKeyJustDown(KEY_SPRINT,newkeys,oldkeys))
		{
			StopLoopingAnim(playerid);
			TextDrawHideForPlayer(playerid,txtAnimHelper);
			animation[playerid] = 0;
			ClearAnimations(playerid);
			return 1;
		}
	}
	if(PollOn && PollVoted[playerid] == 0)
	{
	    if(newkeys == KEY_YES)
	    {
        PollY++;
        PollVoted[playerid] = 1;
        SendClientMessage(playerid, COLOR_GREY, "You Have Voted Yes.");
		}
	    if(newkeys == KEY_NO)
	    {
	    PollN++;
	    PollVoted[playerid] = 1;
	    SendClientMessage(playerid, COLOR_GREY, "You Have Voted No.");
	    }
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER)
	{
	    if(newkeys == KEY_FIRE)
	    {
			if(!NoSprunk[playerid])
			{
			    new Float:H;
			    GetPlayerHealth(playerid, H);
			    SetPlayerHealth(playerid, H+0);
				GetPlayerHealth(playerid, H);
				if(H > 100) SetPlayerHealth(playerid, 100);
				NoSprunk[playerid] = 1;
				SetTimerEx("SprunkTimer", 1800, false, "d", playerid);
			}

		}
	}
	if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
	}
	/*if((newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) || (oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
        switch(GetPlayerWeapon(playerid)) {
		    case 23..25, 27, 29..34, 41: {
		        if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
					OnPlayerCBug(playerid);
				}
				return 1;
			}
		}
	}

	if(CheckCrouch[playerid] == 1) {
		switch(WeaponID[playerid]) {
		    case 23..25, 27, 29..34, 41: {
		    	if((newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) {
		    		if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
						OnPlayerCBug(playerid);
					}
		    	}
		    }
		}
	}
*/
	//if(newkeys & KEY_CROUCH || (oldkeys & KEY_CROUCH)) return 1;

	else if(((newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP))) ||
	(newkeys & KEY_FIRE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP)) ||
	(NotMoving[playerid] && (newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE)) ||
	(NotMoving[playerid] && (newkeys & KEY_FIRE)) ||
	(newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ||
	(oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
		SetTimerEx("CrouchCheck", 3000, 0, "d", playerid);
		CheckCrouch[playerid] = 1;
		WeaponID[playerid] = GetPlayerWeapon(playerid);
		Ammo[playerid][GetPlayerWeapon(playerid)] = GetPlayerAmmo(playerid);
		return 1;
	}
	if(newkeys & KEY_FIRE)
    {
        if(Planted[playerid] == 1)
        {
            GiveDodWeapon(playerid, 40, 1);
            ClearAnimations(playerid);
            ApplyAnimation(playerid,"PED","bomber",4.0,0,0,0,0,1000);
            SetTimerEx("Explode", 1200, 0, "i", playerid);
            return 1;
		}
	}
	if(newkeys & KEY_HANDBRAKE)
    {
        if(CarHop[playerid] == 1)
		{
			SetVehicleForwardVelocity(GetPlayerVehicleID(playerid), 0.4, 0.3);
		    return 1;
		}
	}
	if(newkeys & KEY_FIRE)
	{
	    if(SpeedHack[playerid] == 1)
	    {
	        SetVehicleForwardVelocity(GetPlayerVehicleID(playerid), 20, 0.0);
	        return 1;
		}
	}
/*	if(newkeys & KEY_FIRE)
    {
		new string[128], Float:Pos[3];
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
          	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	        SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]+5);
	        format(string, sizeof(string), "** Don't try to Driver Drive By. [DDB]");
	        SendClientMessage(playerid, COLOR_ORANGE, string);
            return 1;
		}
     	return 1;
    	}
  	}*/
  	if(newkeys == KEY_FIRE)
    {
        new string[128], Float:Pos[3];
    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    	{
      		SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	        SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]+5);
	        format(string, sizeof(string), "** Don't try to Driver Drive By. [DDB]");
	        SendClientMessage(playerid, COLOR_ORANGE, string);
      		return 1;
    	}
  	}
	if(newkeys == KEY_SECONDARY_ATTACK)
    {
        new done, string[128];
        for(new idx=1; idx<MAX_GARAGES; idx++) // Dynamic Garages
		{
			if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
	    	{
			    if(!GarageInfo[idx][gStatus] && PlayerInfo[playerid][pGarage] != idx) return SendClientMessage(playerid, COLOR_GREY, "This garage is locked.");
		        format(string, sizeof(string), "* %s lifts the door and enters the garage.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerVirtualWorld(playerid, idx+500);
				if(GarageInfo[idx][gLevel] == 1)
				{
    				SetPlayerPos(playerid, -1749.8448,677.3413,105.1406);
				    SetPlayerInterior(playerid, 0);
				    SetCameraBehindPlayer(playerid);
				}
				GarageTime[playerid] = 15;
				SetTimerEx("GarageTimer", 1000, false, "i", playerid);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 20, -1749.8448,677.3413,105.1406)) // Garages
		    {
		        if(GarageTime[playerid] > 0)
				{
				    format(string, sizeof(string), "You need to wait %d more seconds before exiting.", GarageTime[playerid]);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
		        idx = GetPlayerVirtualWorld(playerid)-500;
		        if(!done && idx < MAX_GARAGES && GarageInfo[idx][gLevel])
				{
					format(string, sizeof(string), "* %s lifts the door up and exits the garage.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    			SetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
				    SetPlayerInterior(playerid, 0);
				    SetCameraBehindPlayer(playerid);
				    SetPlayerVirtualWorld(playerid, 0);
				}
    			done = 1;
    			return 1;
			}
		}
		for(new idx=0; idx<MAX_DOORS; idx++) // Dynamic Doors
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]))
		    {
		        if(DoorInfo[idx][dIInt] == 83 && DoorInfo[idx][dIVW] == 8473 && BankBlock)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "You can't enter the bank as it is being robbed at the moment.");
		            return 1;
		        }
		        if(DoorInfo[idx][dCInt])
		        {
		            GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
					TogglePlayerControllable(playerid, 0);
		            SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
		            PlayerInfo[playerid][pSpawnFreeze] = 1;
		        }
		        PlayerInfo[playerid][pSpawnFreeze] = 0;
		        SetPlayerInterior(playerid, DoorInfo[idx][dIInt]);
		        SetPlayerVirtualWorld(playerid, DoorInfo[idx][dIVW]);
		        SetPlayerFacingAngle(playerid, DoorInfo[idx][dIA]);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerPos(playerid, DoorInfo[idx][dIX], DoorInfo[idx][dIY], DoorInfo[idx][dIZ]);
		    }
		    else if(!done && IsPlayerInRangeOfPoint(playerid, 2, DoorInfo[idx][dIX], DoorInfo[idx][dIY], DoorInfo[idx][dIZ]) && GetPlayerVirtualWorld(playerid) == DoorInfo[idx][dIVW] && GetPlayerInterior(playerid) == DoorInfo[idx][dIInt])
		    {
      			if(BankRobber[playerid] && BankBlock && GetPlayerInterior(playerid) == 83 && GetPlayerVirtualWorld(playerid) == 8473)
	        	{
     	    		new Rob = BankRobber[playerid]-1;
		    		DisablePlayerCheckpoint(playerid);
					BankRobbersCount --;
					format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
					DeliverMoney[playerid] = 0;
					//
					foreach(Player, i)
					{
	    				if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
					    {
							if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
							else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
							else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
							else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
							else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
						}
					}
					format(string, sizeof(string), "** %s has went out of the bank before loading money and has failed the robbery. **", RPN(playerid));
					SendRobberyMessage(COLOR_LIGHTRED, string);
					SendCopMessage(COLOR_LIGHTRED, string);
					BankRobber[playerid] = 0;
					if(BankRobbersCount == 0)
					{
						TextDrawHideForAll(Textdraw0);
						TextDrawHideForAll(Textdraw1);
						TextDrawHideForAll(Textdraw2);
						TextDrawHideForAll(Textdraw3);
						TextDrawHideForAll(Textdraw4);
						TextDrawHideForAll(Textdraw5);
//						BankRobbery = 0;
						RobberyStarted = 0;
						format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
						SendClientMessageToAll(COLOR_YELLOW, string);
						TotalRobbers = 0;
						new copsonline;
						foreach(Player, i)
						{
		    				if(IsACop(i)) copsonline++;
						}
						foreach(Player, i)
						{
		    				if(IsACop(i))
						    {
								new Saved = (TotalRobbers*10000-(TotalStolen*10000));
								GiveDodMoney(i, Saved/copsonline);
								format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
								SendClientMessage(i, COLOR_LIME, string);
				    		}
						}
					}
     				return 1;
	        	}
		        if(DoorInfo[idx][dCExt])
	        	{
          			GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
					TogglePlayerControllable(playerid, 0);
     				SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
     				PlayerInfo[playerid][pSpawnFreeze] = 1;
	        	}
		        PlayerInfo[playerid][pSpawnFreeze] = 0;
		        SetPlayerInterior(playerid, DoorInfo[idx][dOInt]);
		        SetPlayerVirtualWorld(playerid, DoorInfo[idx][dOVW]);
		        SetPlayerFacingAngle(playerid, DoorInfo[idx][dOA]);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
		        done = 1;
		        return 1;
			}
		}
		for(new idx=1; idx<MAX_BIZ; idx++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
			{
			    if(DayNoShops == 1) return SendClientMessage(playerid, COLOR_FADE3, "It's Sunday,all shops are closed! ((/day))");
			    if(!BizInfo[idx][bStatus] && PlayerInfo[playerid][pBiz] != idx && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "This business is closed.");
			    if(BizInfo[idx][bType] == 1) // 24/7 Business
			    {
			        SetPlayerPos(playerid, -27.3025,-57.6649,1003.5469);
			        SetPlayerFacingAngle(playerid, 357.5915);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 6);
			        SetPlayerVirtualWorld(playerid, idx+100);
			        format(string, sizeof(string), "** Welcome to %s's 24/7 Market (( /prices & /buy )) **", BizInfo[idx][bOwner]);
			        SendClientMessage(playerid, COLOR_ORANGE, string);
			    }
			    else if(BizInfo[idx][bType] == 2) // Clothes Shop Business
			    {
			        SetPlayerPos(playerid, 207.0638,-139.9965,1003.5078);
			        SetPlayerFacingAngle(playerid, 356.3849);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 3);
			        SetPlayerVirtualWorld(playerid, idx+100);
			        format(string, sizeof(string), "** Welcome to %s's Clothes Shop (( /buyclothes & /buytoys )) **", BizInfo[idx][bOwner]);
			        SendClientMessage(playerid, COLOR_ORANGE, string);
			    }
			    else if(BizInfo[idx][bType] == 3) // Ammunation Business
			    {
			        SetPlayerPos(playerid, 285.8044,-85.9956,1001.5229);
			        SetPlayerFacingAngle(playerid, 358.9898);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 4);
			        SetPlayerVirtualWorld(playerid, idx+100);
			        format(string, sizeof(string), "** Welcome to %s's Ammunation (( /prices & /buy )) **", BizInfo[idx][bOwner]);
			        SendClientMessage(playerid, COLOR_ORANGE, string);
			    }
			    else if(BizInfo[idx][bType] == 4) // Club Business
			    {
			        SetPlayerPos(playerid, 493.4252,-24.3061,1000.6797);
			        SetPlayerFacingAngle(playerid, 0.2432);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 17);
			        SetPlayerVirtualWorld(playerid, idx+100);
			        format(string, sizeof(string), "** Welcome to %s's Club (( /prices & /buy )) **", BizInfo[idx][bOwner]);
			        SendClientMessage(playerid, COLOR_ORANGE, string);
			    }
			    else if(BizInfo[idx][bType] == 5) // Advertisement Agency
			    {
			        SetPlayerPos(playerid, 834.1631,7.4883,1004.1797);
			        SetPlayerFacingAngle(playerid, 86.7239);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 3);
			        SetPlayerVirtualWorld(playerid, idx+100);
			        format(string, sizeof(string), "** Welcome to %s's Advertisement Agency (( /ad )) **", BizInfo[idx][bOwner]);
			        SendClientMessage(playerid, COLOR_ORANGE, string);
			    }
			    else if(BizInfo[idx][bType] == 6) // Fast Food
			    {
			        SetPlayerPos(playerid, 372.3830,-133.2579,1001.4922);
			        SetPlayerFacingAngle(playerid, 0.4216);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 5);
			        SetPlayerVirtualWorld(playerid, idx+100);
			        format(string, sizeof(string), "** Welcome to %s's Fast Food (( /prices /buy )) **", BizInfo[idx][bOwner]);
			        SendClientMessage(playerid, COLOR_ORANGE, string);
			    }
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2, -27.3025,-57.6649,1003.5469) || IsPlayerInRangeOfPoint(playerid, 2, 207.0638,-139.9965,1003.5078) || IsPlayerInRangeOfPoint(playerid, 2, 285.8044,-85.9956,1001.5229) || IsPlayerInRangeOfPoint(playerid, 2, 493.4252,-24.3061,1000.6797) || IsPlayerInRangeOfPoint(playerid, 2, 834.1631,7.4883,1004.1797) || IsPlayerInRangeOfPoint(playerid, 2, 372.3830,-133.2579,1001.4922)) // 24/7 || Clothes Shop || Ammunation || Club || Advertisement Agency || FastFood
			{
				idx = GetPlayerVirtualWorld(playerid)-100;
				if(!done && idx < MAX_BIZ && BizInfo[idx][bType])
				{
			        SetPlayerPos(playerid, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerVirtualWorld(playerid, 0);
		        }
		        done = 1;
		        return 1;
			}
		}
		for(new idx=1; idx<MAX_HOUSES; idx++) // Dynamic Houses
		{
			if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
		    {
			    if(!HouseInfo[idx][hStatus] && PlayerInfo[playerid][pHouse] != idx && PlayerInfo[playerid][pVHouse] != idx) return SendClientMessage(playerid, COLOR_GREY, "This house is locked.");
		        SetPlayerVirtualWorld(playerid, idx+500);
				if(HouseInfo[idx][hLevel] == 1)
				{
					SetPlayerPos(playerid, 243.9951,304.9418,999.1484);
			        SetPlayerFacingAngle(playerid, 267.0980);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 1);
				}
				else if(HouseInfo[idx][hLevel] == 2)
				{
					SetPlayerPos(playerid, 2259.6702,-1135.8542,1050.6328);
			        SetPlayerFacingAngle(playerid, 267.3974);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 10);
				}
				else if(HouseInfo[idx][hLevel] == 3)
				{
					SetPlayerPos(playerid, 2308.8254,-1212.8070,1049.0234);
			        SetPlayerFacingAngle(playerid, 359.8550);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 6);
				}
				else if(HouseInfo[idx][hLevel] == 4)
				{
					SetPlayerPos(playerid, 260.7436,1237.5563,1084.2578);
			        SetPlayerFacingAngle(playerid, 1.6415);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 9);
				}
				else if(HouseInfo[idx][hLevel] == 5)
				{
					SetPlayerPos(playerid, -42.5742,1405.6521,1084.4297);
			        SetPlayerFacingAngle(playerid, 359.1347);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 8);
				}
				else if(HouseInfo[idx][hLevel] == 6)
				{
					SetPlayerPos(playerid, 2468.6787,-1698.2617,1013.5078);
			        SetPlayerFacingAngle(playerid, 89.1791);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 2);
				}
				else if(HouseInfo[idx][hLevel] == 7)
				{
					SetPlayerPos(playerid, 2365.2183,-1135.4014,1050.8750);
			        SetPlayerFacingAngle(playerid, 359.8550);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 8);
				}
				else if(HouseInfo[idx][hLevel] == 8)
				{
					SetPlayerPos(playerid, 2270.1270,-1210.4855,1047.5625);
			        SetPlayerFacingAngle(playerid, 89.4224);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 10);
				}
				else if(HouseInfo[idx][hLevel] == 9)
				{
					SetPlayerPos(playerid, 2324.4424,-1149.2057,1050.7101);
			        SetPlayerFacingAngle(playerid, 0.7248);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 12);
				}
				else if(HouseInfo[idx][hLevel] == 10)
				{
					SetPlayerPos(playerid, 83.0863,1322.3020,1083.8662);
			        SetPlayerFacingAngle(playerid, 359.5183);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 9);
				}
				else if(HouseInfo[idx][hLevel] == 11)
				{
					SetPlayerPos(playerid, 1260.6544,-785.6682,1091.9063);
			        SetPlayerFacingAngle(playerid, 266.7867);
			        SetCameraBehindPlayer(playerid);
			        SetPlayerInterior(playerid, 5);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2, 243.9951,304.9418,999.1484) || IsPlayerInRangeOfPoint(playerid, 2, 2259.6702,-1135.8542,1050.6328) || IsPlayerInRangeOfPoint(playerid, 2, 2308.8254,-1212.8070,1049.0234) || IsPlayerInRangeOfPoint(playerid, 2, 260.7436,1237.5563,1084.2578)
			|| IsPlayerInRangeOfPoint(playerid, 2, -42.5742,1405.6521,1084.4297) || IsPlayerInRangeOfPoint(playerid, 2, 2468.6787,-1698.2617,1013.5078) || IsPlayerInRangeOfPoint(playerid, 2, 2365.2183,-1135.4014,1050.8750) || IsPlayerInRangeOfPoint(playerid, 2, 2270.1270,-1210.4855,1047.5625)
			|| IsPlayerInRangeOfPoint(playerid, 2, 2324.4424,-1149.2057,1050.7101) || IsPlayerInRangeOfPoint(playerid, 2, 83.0863,1322.3020,1083.8662) || IsPlayerInRangeOfPoint(playerid, 3, 1260.6544,-785.6682,1091.9063)) // Houses
			{
				idx = GetPlayerVirtualWorld(playerid)-500;
				if(!done && idx < MAX_HOUSES && HouseInfo[idx][hLevel])
				{
			        SetPlayerPos(playerid, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerVirtualWorld(playerid, 0);
			        done = 1;
		        }
		        return 1;
			}
		}
	}
	if(newkeys == 2)
    {
        for(new idx=1; idx<MAX_GARAGES; idx++) // Dynamic Garages
		{
		    new string[128], done;
	        if(IsPlayerInRangeOfPoint(playerid, 4, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
		    {
		        GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
				TogglePlayerControllable(playerid, 0);
	   			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
	      		PlayerInfo[playerid][pSpawnFreeze] = 1;
			    if(!GarageInfo[idx][gStatus] && PlayerInfo[playerid][pGarage] != idx) return SendClientMessage(playerid, COLOR_GREY, "This garage is locked.");
			    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        format(string, sizeof(string), "* %s lifts the door and enters the garage.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerVirtualWorld(playerid, idx+500);
				if(GarageInfo[idx][gLevel] == 1)
				{
					if(IsPlayerInVehicle(playerid, PlayerInfo[playerid][pVeh]))
					{
					    SetVehiclePos(PlayerInfo[playerid][pVeh], -1749.8448,677.3413,105.1406);
				        SetCameraBehindPlayer(playerid);
				        SetVehicleVirtualWorld(PlayerInfo[playerid][pVeh], idx+500);
					}
					if(IsPlayerInVehicle(playerid, PlayerInfo[playerid][pVVeh]))
					{
					    SetVehiclePos(PlayerInfo[playerid][pVVeh], -1749.8448,677.3413,105.1406);
				        SetCameraBehindPlayer(playerid);
				        SetVehicleVirtualWorld(PlayerInfo[playerid][pVVeh], idx+500);
					}
					else
					{
				 		SendClientMessage(playerid, COLOR_GREY, "You are not in an owned vehicle.");
				 		return 1;
					}
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 20, -1749.8448,677.3413,105.1406)) // Garages
		    {
		        idx = GetPlayerVirtualWorld(playerid)-500;
		        if(!done && idx < MAX_GARAGES && GarageInfo[idx][gLevel])
				{
					format(string, sizeof(string), "* %s lifts the door up and exits the garage.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
					    SetVehiclePos(PlayerInfo[playerid][pVeh], GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
				        SetCameraBehindPlayer(playerid);
				        SetVehicleVirtualWorld(PlayerInfo[playerid][pVeh], 0);
				        SetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
					    SetPlayerInterior(playerid, 0);
					    SetCameraBehindPlayer(playerid);
					    SetPlayerVirtualWorld(playerid, 0);
					    PutPlayerInVehicle(playerid, PlayerInfo[playerid][pVeh], 0);
					}
     				done = 1;
	        	}
	        	return 1;
			}
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerConnected(playerid) && IsPlayerLoggedIn(playerid))
	{
        if(GetPVarInt(playerid, "laser") == 1)
		{
			RemovePlayerAttachedObject(playerid, 0);
     		if ((IsPlayerInAnyVehicle(playerid)) || (IsPlayerInWater(playerid))) return 1;
       		switch (GetPlayerWeapon(playerid))
			{
   				case 23:
		    	{
       				if (IsPlayerAiming(playerid))
			    	{
        				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
		 				{
       						SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SP standing aiming
             				0.108249, 0.030232, 0.118051, 1.468254, 350.512573, 364.284240);
              			}
					  	else
					   	{
         					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SP crouched aiming
              				0.108249, 0.030232, 0.118051, 1.468254, 349.862579, 364.784240);
                  		}
                    }
					else
				 	{
      					if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
			   			{
         					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SP standing not aiming
              				0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
                  		}
	  					else
					   	{
         					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SP crouched not aiming
         					0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
                        }
      				}
			  	}
				case 27:
			 	{
     				if (IsPlayerAiming(playerid))
  					{
       					if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
			    		{
         					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SPAS standing aiming
              				0.588246, -0.022766, 0.138052, -11.531745, 347.712585, 352.784271);
                  		}
					  	else
					   	{
         					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SPAS crouched aiming
              				0.588246, -0.022766, 0.138052, 1.468254, 350.712585, 352.784271);
                  		}
           			}
				   	else
				    {
        				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
				 		{
       						SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SPAS standing not aiming
             				0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
                 		}
				 		else
					  	{
        					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // SPAS crouched not aiming
        					0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
                        }
					}
				}
				case 30:
			 	{
     				if (IsPlayerAiming(playerid))
				 	{
      					if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
				  		{
        					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // AK standing aiming
             				0.628249, -0.027766, 0.078052, -6.621746, 352.552642, 355.084289);
                 		}
					 	else
					  	{
        					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // AK crouched aiming
             				0.628249, -0.027766, 0.078052, -1.621746, 356.202667, 355.084289);
                 		}
                   	}
				   	else
			    	{
        				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
					 	{
       						SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // AK standing not aiming
             				0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
                 		}
					 	else
					  	{
        					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // AK crouched not aiming
             				0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
                        }
					}
				}
				case 31:
			 	{
     				if (IsPlayerAiming(playerid))
			  		{
       					if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
				   		{
         					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // M4 standing aiming
              				0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
          				}
					  	else
					   	{
         					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // M4 crouched aiming
              				0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
               			}
                  	}
			  		else
				   	{
        				if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
				 		{
       						SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // M4 standing not aiming
             				0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
                 		}
				 		else
					  	{
        					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // M4 crouched not aiming
             				0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
                        }
					}
				}
    			case 29:
			 	{
     				if (IsPlayerAiming(playerid))
			  		{
       					if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
			    		{
         					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // MP5 standing aiming
   							0.298249, -0.02776, 0.158052, -11.631746, 359.302673, 357.584259);
          				}
					  	else
					   	{
         					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // MP5 crouched aiming
              				0.298249, -0.02776, 0.158052, 8.368253, 358.302673, 352.584259);
                  		}
                    }
					else
					{
    					if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
				 		{
       						SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // MP5 standing not aiming
             				0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
                 		}
				 		else
					  	{
        					SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // MP5 crouched not aiming
             				0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
                        }
					}
				}
			}
		}
	    // Boxing
	    if(Boxing[playerid] && !BoxTime)
	    {
	        new string[128];
	        new Float:bH; GetPlayerHealth(playerid, bH);
	        if(bH <= 20)
	        {
	            // Getting other boxer's ID
				new playerb = -1;
	            foreach(Player, i)
	            {
	                if(Boxing[i] && i != playerid) playerb = i;
	            }
	            if(playerb != -1)
	            {
	                format(string, sizeof(string), "Boxing Ring: The boxing match has ended, %s has won the match.", RPN(playerb));
	        		SendGymMessage(COLOR_WHITE, string);
		            // Putting them out of the ring
		            SetPlayerPos(playerb, 760.9759,4.7187,1000.7084);
		            SetPlayerFacingAngle(playerb, 268.9407);
		            SetPlayerPos(playerid, 760.9759,6.1794,1000.7093);
		            SetPlayerFacingAngle(playerid, 268.9407);
		            // Giving the winner extra skill point
		            new oldj = strval(RPJL(playerb, JOB_BOXER));
		            PlayerInfo[playerb][pJobSkill][JOB_BOXER] ++;
					new newj = strval(RPJL(playerb, JOB_BOXER));
				    if(oldj < newj)
					{
					    format(string, sizeof(string), "** Your Boxer level is now %d, you can now cause %d more damage. **", newj, (newj*2)-2);
						SendClientMessage(playerb, COLOR_YELLOW, string);
					}
					//
					SendClientMessage(playerb, COLOR_LIME, " You have won the boxing match.");
					SendClientMessage(playerid, COLOR_LIGHTRED, " You have lost the boxing match.");
					// Giving Bids
					new winner = pBoxer[playerb];
					foreach(Player, i)
					{
					    if(BidBoxer[i] == winner)
					    {
					        new percent, profit;
					        percent = (BidAmount[i]/BoxerBid[winner]) * 100;
					        profit = (percent * BoxerBid[pBoxer[playerid]]) / 100;
					        GiveDodMoney(i, BidAmount[i] + profit);
					        format(string, sizeof(string), " You have won $%d from bidding in the match, the money you bid has been returned as well.", profit);
					        SendClientMessage(i, COLOR_LIME, string);
					    }
						BidAmount[i] = 0;
						BidBoxer[i] = 0;
					}
					for(new w = 0; w < 13; w++)
					{
					    GiveDodWeapon(playerb, PlayerInfo[playerb][pWeapon][w], PlayerInfo[playerb][pWeaponAmmo][w]);
					}
	            }
	            for(new w = 0; w < 13; w++)
				{
				    GiveDodWeapon(playerid, PlayerInfo[playerid][pWeapon][w], PlayerInfo[playerid][pWeaponAmmo][w]);
				}
	            // Resetting Values
				BoxingMatch = 0;
				Boxer[1] = -1;
				pBoxer[playerb] = 0;
				Boxer[2] = -1;
				pBoxer[playerid] = 0;
				Boxing[playerb] = 0;
				Boxing[playerid] = 0;
				BoxerBid[1] = 0;
				BoxerBid[2] = 0;
	        }
	    }
	    // Spikes
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(!IsACop(playerid))
	  	    {
		        for(new i = 0; i < sizeof(SpikeInfo); i++)
		  	    {
		  	        if(IsPlayerInRangeOfPoint(playerid, 3.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
		            {
		  	            if(SpikeInfo[i][sCreated] == 1)
		  	            {
		  	                new panels, doors, lights, tires;
		  	                new carid = GetPlayerVehicleID(playerid);
				            GetVehicleDamageStatus(carid, panels, doors, lights, tires);
				            tires = encode_tires(1, 1, 1, 1);
				            UpdateVehicleDamageStatus(carid, panels, doors, lights, tires);
		  	            }
		  	        }
		  	    }
			}
	  	}
	    // Fuel
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Fuel[vehicleid] <= 0)
	    {
	    	new engine, lights, alarm, doors, bonnet, boot, objective, string[128];
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine)
			{
				SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
			    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
			    {SetVehicleParamsEx(vehicleid, 0, 0, 0, PlayerInfo[playerid][vLocked], 0, 0, 0);}
			    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
			    {SetVehicleParamsEx(vehicleid, 0, 0, 0, PlayerInfo[playerid][vVLocked], 0, 0, 0);}
			    format(string, sizeof(string), "* %s's vehicle stops as it has no fuel in its tank.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
	    }
	    // Drag
	    if(Dragged[playerid] != -1)
	    {
			new playerb = Dragged[playerid];
			new Float:pos[3];
			GetPlayerPos(playerb, pos[0], pos[1], pos[2]);
			SetPlayerPos(playerid, pos[0]+0.5, pos[1]+0.5, pos[2]);
			SetPlayerInterior(playerid, GetPlayerInterior(playerb));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerb));
	    }
	  // AntiCS
	    new Keys, ud, lr;
		GetPlayerKeys(playerid, Keys, ud, lr);
		if(CheckCrouch[playerid] == 1) {
			switch(WeaponID[playerid]) {
			    case 23..25, 27, 29..34, 41: {
			    	if((Keys & KEY_CROUCH) && !((Keys & KEY_FIRE) || (Keys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) {
			    		if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
						//	OnPlayerCBug(playerid);
						}
			    	}
			    	//else SendClientMessage(playerid, COLOR_RED, "Failed in onplayer update");
			    }
			}
		}

		if(!ud && !lr) { NotMoving[playerid] = 1; /*OnPlayerKeyStateChange(playerid, Keys, 0);*/ }
		else { NotMoving[playerid] = 0; /*OnPlayerKeyStateChange(playerid, Keys, 0);*/ }
	    // Alt-Tab detection
		AltTabbed[playerid] = 0;
		// Speedlimit
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Speedlimit[playerid])
		{
		    new a, b, c;
			GetPlayerKeys(playerid, a, b ,c);
		    if(a == 8 && GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) > Speedlimit[playerid])
		    {
		        new newspeed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) - Speedlimit[playerid];
		    	ModifyVehicleSpeed(GetPlayerVehicleID(playerid), -newspeed);
		    }
		}
	    // Ping Update
	    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	    {
            /*format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~%s's Ping: ~w~%d", RPN(Specid[playerid]), GetPlayerPing(Specid[playerid]));
			GameTextForPlayer(playerid, string,1000, 3);*/
	    }
	    // Money Anticheat
		if(GetPlayerMoney(playerid) != PlayerInfo[playerid][pMoney])
		{
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, PlayerInfo[playerid][pMoney]);
		}
		// Speedometer
		if(Speedo[playerid] && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    new string[64], speed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0);
		    format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Speedometer: ~w~%d MPH", speed);
			GameTextForPlayer(playerid, string,1000, 3);
		}
		// SpeedCheck
		if(IsPlayerInAnyVehicle(playerid) && IsAAdmin(playerid) && IsAFlight(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new speed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0);
			if(speed > 205 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 519 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 553  && GetVehicleModel(GetPlayerVehicleID(playerid)) != 592 && IsAAdmin(playerid) || speed > 240)
			{
			    new string[128];
				format(string, sizeof(string), "AdmWarn: %s might be using speed hacks (%d MPH)", RPN(playerid), speed);
				SendAdminMessage(COLOR_DARKRED, 1, string);
			}
		}
		// Fuel
		if(fMeter[playerid] && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    new string[64];
		    format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Fuel: ~w~%d%", Fuel[GetPlayerVehicleID(playerid)]);
			GameTextForPlayer(playerid, string,1000, 3);
		}
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	SetPlayerAttachedObject(playerid, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
	PlayerInfo[playerid][pToyX][index] = fOffsetX;
	PlayerInfo[playerid][pToyY][index] = fOffsetY;
	PlayerInfo[playerid][pToyZ][index] = fOffsetZ;
	PlayerInfo[playerid][pToyRX][index] = fRotX;
	PlayerInfo[playerid][pToyRY][index] = fRotY;
	PlayerInfo[playerid][pToyRZ][index] = fRotZ;
    PlayerInfo[playerid][pToySX][index] = fScaleX;
    PlayerInfo[playerid][pToySY][index] = fScaleY;
    PlayerInfo[playerid][pToySZ][index] = fScaleZ;
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
   	if(GetPVarInt(playerid, "vspawner_active") == 0) return 0;

	// Handle: They cancelled (with ESC)
	if(clickedid == Text:INVALID_TEXT_DRAW) {
        DestroySelectionMenu(playerid);
        SetPVarInt(playerid, "vspawner_active", 0);
        PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
        return 1;
	}

	return 0;
}

//------------------------------------------------

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(GetPVarInt(playerid, "vspawner_active") == 0) return 0;

	new curpage = GetPVarInt(playerid, "vspawner_page");

	// Handle: next button
	if(playertextid == gNextButtonTextDrawId[playerid]) {
	    if(curpage < (GetNumberOfPages() - 1)) {
	        SetPVarInt(playerid, "vspawner_page", curpage + 1);
	        ShowPlayerModelPreviews(playerid);
         	UpdatePageTextDraw(playerid);
         	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		} else {
		    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}

	// Handle: previous button
	if(playertextid == gPrevButtonTextDrawId[playerid]) {
	    if(curpage > 0) {
	    	SetPVarInt(playerid, "vspawner_page", curpage - 1);
	    	ShowPlayerModelPreviews(playerid);
	    	UpdatePageTextDraw(playerid);
	    	PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
		} else {
		    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}

	// Search in the array of textdraws used for the items
	new x=0;
	while(x != SELECTION_ITEMS) {
	    if(playertextid == gSelectionItems[playerid][x]) {
	        HandlePlayerItemSelection(playerid, x);
	        PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	        DestroySelectionMenu(playerid);
	        CancelSelectTextDraw(playerid);
        	SetPVarInt(playerid, "vspawner_active", 0);
        	return 1;
		}
		x++;
	}

	return 0;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    new vehid = GetPlayerVehicleID(playerid);
	new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(dialogid == 0) // Tutorial
	{
	    if(response)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You have chosen to complete registeration, Please wait until the tutorial to load.");
        	 SetTimerEx("Tut1", 2000, false, "i", playerid);
	    }
	    else
	    {
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You have chosen to not to complete registeration.");
 	        Kick(playerid);
	    }
	}
    else if(dialogid == 1) // Register
	{
	    if(response)
	    {
	        if(strlen(inputtext) < 4)
            {
             SendClientMessage(playerid, COLOR_GREY, "Password can't be shorter than 4 characters.");
             SSSShowDialog(playerid, 1);
			 SpawnPlayer(playerid);
             return 1;
            }
	        if(strlen(inputtext) > 256)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Password can't be longer than 256 characters.");
	            SSSShowDialog(playerid, 1);
	            return 1;
	        }
			new file[64], IP[16], string[128], password[256];
			format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
			if(!dini_Exists(file))
			{
				GetPlayerIp(playerid, IP, sizeof(IP));
				dini_Create(file);
				WP_Hash(password, sizeof(password), inputtext);
				dini_Set(file, "Password", password);
				dini_Set(file, "IP", IP);
				PlayerInfo[playerid][pLevel] = 1;
				dini_IntSet(file, "Level", PlayerInfo[playerid][pLevel]);
				format(string, sizeof(string), "SERVER: {FFFFFF}You have successfully registered on {FF6347}Intense Role-Play{FFFFFF}. (Password: %s)", inputtext);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				SSSShowDialog(playerid, 2);
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You have chosen to quit the server.");
	        Kick(playerid);
	    }
	}
	else if(dialogid == 2) // Login
	{
	    if(response)
	    {
   			new file[64], password[256], IP[16], password2[256];
			format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
			WP_Hash(password2, sizeof(password2), inputtext);
			format(password, sizeof(password), "%s", dini_Get(file, "Password"));
			if(strcmp(password, inputtext,true) && strcmp(password, password2, true))
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Invalid password.");
			    SSSShowDialog(playerid, 2);
			    return 1;
			}
			if(dini_Int(file, "AdminAccount") == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You can't login directly from an admin account.");
			    Kick(playerid);
			    return 1;
			}
			else if(sscanf(inputtext, "s[128]", inputtext))
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You must enter a password to procceed.");
			    SSSShowDialog(playerid, 2);
			    return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIME, "");
			    SendClientMessage(playerid, COLOR_LIME, "");
			    SendClientMessage(playerid, COLOR_LIME, "");
			    format(PlayerInfo[playerid][pIP], 16, "%s", dini_Get(file, "IP"));
				GetPlayerIp(playerid, IP, sizeof(IP));
				dini_Set(file, "IP", IP);
				PlayerInfo[playerid][pGender] = dini_Int(file, "Gender");
				PlayerInfo[playerid][pAge] = dini_Int(file, "Age");
				if(!PlayerInfo[playerid][pGender] || !PlayerInfo[playerid][pAge])
				{
				    SSSShowDialog(playerid, 3);
				}
				else
				{
        			LoadChar(playerid);
				    SpawnPlayer(playerid);
				}
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You have chosen to quit the server.");
	        Kick(playerid);
	    }
	}
	else if(dialogid == 3) // Male or Female
	{
	    if(response)
	    {
	    	if(VIP[playerid])
	        {
		        switch(listitem)
		        {
					case 0:
					{
						PlayerInfo[playerid][pGender] = 1;
						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You've set your character's gender to male.");
					}
					case 1:
					{
					    PlayerInfo[playerid][pGender] = 2;
					    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You've set your character's gender to female.");
					}
		        }
		        VIP[playerid] = 0;
            }
            else
            {
		        switch(listitem)
		        {
					case 0:
					{
						PlayerInfo[playerid][pGender] = 1;
						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You've set your character's gender to male, pick their age from the next dialog.");
					}
					case 1:
					{
					    PlayerInfo[playerid][pGender] = 2;
					    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You've set your character's gender to female, pick her age from the next dialog.");
					}
		        }
		        SSSShowDialog(playerid, 4);
	        }
	    }
	    else
	    {
	        if(!VIP[playerid])
	        {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You MUST choose a gender for your character.");
		        SSSShowDialog(playerid, 3);
	        }
	        VIP[playerid] = 0;
	    }
	}
	else if(dialogid == 4)
	{
	    if(response)
	    {
			new age = strval(inputtext);
			if(VIP[playerid])
			{
				if(age < 25 || age > 80)
		        {
		            SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Age must be beteen 25 and 80.");
		            SSSShowDialog(playerid, 4);
		        }
		        else
		        {
					new string[128];
					PlayerInfo[playerid][pAge] = strval(inputtext);
					format(string, sizeof(string), "SERVER: {FFFFFF}You've set your character's age to %d", PlayerInfo[playerid][pAge]);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
		        }
		        VIP[playerid] = 0;
			}
			else
			{
		        if(age < 25 || age > 80)
		        {
		            SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Age must be beteen 25 and 80.");
		            SSSShowDialog(playerid, 4);
		        }
		        else
		        {
					new string[128];
					PlayerInfo[playerid][pAge] = strval(inputtext);
					format(string, sizeof(string), "SERVER: {FFFFFF}You've set your character's age to %d", PlayerInfo[playerid][pAge]);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
	                PlayerInfo[playerid][pLoggedIn] = 1;
					PlayerInfo[playerid][pSpawn] = 1;
					SSSShowDialog(playerid,0);
		        }
	        }
	    }
	    else
	    {
	        if(!VIP[playerid])
	        {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You MUST pick an age for your character.");
		        SSSShowDialog(playerid, 4);
	        }
	        VIP[playerid] = 0;
	    }
	}
	else if(dialogid == 5)
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(!PlayerInfo[playerid][pFacDuty])
	                {
	                    PlayerInfo[playerid][pFacDuty] = 1;
	                    SetPlayerColor(playerid, TRANSPARENT_BLUE);
	                    format(string, sizeof(string), "* %s grabs their badge, gun and mp5 from the locker.", RPN(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						GiveDodWeapon(playerid, 29, 500);
						GiveDodWeapon(playerid, 24, 200);
						SetPlayerArmour(playerid, 100);
						return 1;
	                }
	                else
	                {
      					PlayerInfo[playerid][pFacDuty] = 0;
	                    SetPlayerColor(playerid, TRANSPARENT_WHITE);
	                    SetPlayerArmour(playerid, 0);
	                    format(string, sizeof(string), "* %s places their badge in the locker.", RPN(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						return 1;
	                }
	            }
	            case 1:
	            {
	                SSSShowDialog(playerid, 6);
	            }
	            case 2:
	            {
	                SSSShowDialog(playerid, 7);
	            }
	            case 3:
	            {
	                SSSShowDialog(playerid, 8);
	            }
	        }
	    }
	}
	else if(dialogid == 6)
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Nightstick
				{
				    if(PlayerInfo[playerid][pMoney] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveDodWeapon(playerid, 3, 1);
				    TaxMoney += 50;
				    GiveDodMoney(playerid, -50);
                    format(string, sizeof(string), "* %s grabs a Nightstick from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 1: // Mace
				{
				    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveDodWeapon(playerid, 41, 500);
				    TaxMoney += 100;
				    GiveDodMoney(playerid, -100);
                    format(string, sizeof(string), "* %s grabs a Mace from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 2: // Desert EAgle
				{
				    if(PlayerInfo[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveDodWeapon(playerid, 24, 500);
				    TaxMoney += 200;
				    GiveDodMoney(playerid, -200);
                    format(string, sizeof(string), "* %s grabs a Desert Eagle from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 3: // Shotgun
				{
				    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveDodWeapon(playerid, 25, 200);
				    TaxMoney += 100;
				    GiveDodMoney(playerid, -100);
                    format(string, sizeof(string), "* %s grabs a Shotgun from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 4: // MP5
				{
				    if(PlayerInfo[playerid][pMoney] < 600) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveDodWeapon(playerid, 29, 500);
				    TaxMoney += 600;
				    GiveDodMoney(playerid, -600);
                    format(string, sizeof(string), "* %s grabs an MP5 from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 5: // M4
				{
				    if(PlayerInfo[playerid][pMoney] < 1000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveDodWeapon(playerid, 31, 500);
				    TaxMoney += 1000;
				    GiveDodMoney(playerid, -1000);
                    format(string, sizeof(string), "* %s grabs an M4 from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 6: // Combat Shotgun
				{
				    if(PlayerInfo[playerid][pMoney] < 1500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveDodWeapon(playerid, 27, 200);
				    TaxMoney += 1500;
				    GiveDodMoney(playerid, -1500);
                    format(string, sizeof(string), "* %s grabs a Combat Shotgun from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 7: // Sniper Rifle
				{
				    if(PlayerInfo[playerid][pMoney] < 2500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveDodWeapon(playerid, 34, 100);
				    TaxMoney += 2500;
				    GiveDodMoney(playerid, -2500);
                    format(string, sizeof(string), "* %s grabs a Sniper Rifle from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 8: // PainKiller
				{
				    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    SetPlayerHealth(playerid, 100);
                    TaxMoney += 100;
				    GiveDodMoney(playerid, -100);
                    format(string, sizeof(string), "* %s grabs a painkiller from the locker and swallows it.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 9: // Vest
				{
				    if(PlayerInfo[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    SetPlayerArmour(playerid, 100);
				    TaxMoney += 300;
				    GiveDodMoney(playerid, -200);
                    format(string, sizeof(string), "* %s grabs a vest from the locker and puts it on.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
	        }
	    }
	}
	else if(dialogid == 7)
	{
	    new string[128];
	    if(response)
	    {
			new skin = strval(inputtext);
			if(skin < 0 || skin > 299)
			{
				SendClientMessage(playerid, COLOR_GREY, "Skin must be between 0 and 299.");
				SSSShowDialog(playerid, 7);
			}
			else
			{
				PlayerInfo[playerid][pModel] = skin;
				SetPlayerSkin(playerid, skin);
				format(string, sizeof(string), "* %s puts on some clothes from the locker.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				return 1;
			}
	    }
	}
	else if(dialogid == 9) // Mechanic
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Repair Vehicle
	            {
	                new string[128];
	                new Float:vH; GetVehicleHealth(GetPlayerVehicleID(playerid), vH);
					new Float:vel[3]; GetVehicleVelocity(GetPlayerVehicleID(playerid), vel[0], vel[1], vel[2]);
	                if(vH < 250) return SendClientMessage(playerid, COLOR_GREY, "The vehicle's engine is too hot to be repaired.");
	                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be in the driver seat to repair a vehicle.");
					if(vel[0] != 0 || vel[1] != 0 || vel[2] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can't repair a vehicle while it's moving.");
					RepairVehicle(GetPlayerVehicleID(playerid));
					PlayerInfo[playerid][pJobSkill][JOB_MECHANIC] ++;
					PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
					format(string, sizeof(string), "* %s has completely repaired the vehicle they're inside.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	            case 1: // Add/Remove Nitros
	            {
	                new string[128];
					new Float:vel[3]; GetVehicleVelocity(GetPlayerVehicleID(playerid), vel[0], vel[1], vel[2]);
	                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be in the driver seat to repair a vehicle.");
					if(vel[0] != 0 || vel[1] != 0 || vel[2] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can't add/remove nitros to a vehicle while it's moving.");
					if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid),GetVehicleComponentType(1009)) != 1009) // Check if the vehicle has no nitro
			        {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1009);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has installed a 2x nitros cylinder into the vehicle.", RPN(playerid));
			        }
			        else
			        {
			            RemoveVehicleComponent(GetPlayerVehicleID(playerid),1009);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has removed the nitros cylinders from the vehicle.", RPN(playerid));
			        }
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	            case 2: // Add/Remove Hydraulics
	            {
	                new string[128];
					new Float:vel[3]; GetVehicleVelocity(GetPlayerVehicleID(playerid), vel[0], vel[1], vel[2]);
	                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be in the driver seat to repair a vehicle.");
					if(vel[0] != 0 || vel[1] != 0 || vel[2] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can't add/remove nitros to a vehicle while it's moving.");
					if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid),GetVehicleComponentType(1087)) != 1087) // Check if the vehicle has no hydraulics
			        {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1087);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has installed hydraulics system into the vehicle.", RPN(playerid));
			        }
			        else
			        {
			            RemoveVehicleComponent(GetPlayerVehicleID(playerid),1087);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has removed the hydraulics from the vehicle.", RPN(playerid));
			        }
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	        }
	    }
	}
	else if(dialogid == 10) // Dealership main
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: SSSShowDialog(playerid, 11); // Bikes
	            case 1: SSSShowDialog(playerid, 12); // Normal Vehicles
	            case 2: SSSShowDialog(playerid, 21); // Lowriders
	            case 3: SSSShowDialog(playerid, 13); // Off-Road Vehicles
	            case 4: SSSShowDialog(playerid, 14); // Sport Vehicles
	        }
	    }
	}
	else if(dialogid == 11) // Bikes
	{
	    new string[128], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 481; price = 600;}
	            case 1: {carid = 462; price = 4000;}
	            case 2: {carid = 463; price = 6000;}
	            case 3: {carid = 468; price = 4000;}
	            case 4: {carid = 471; price = 6000;}
	            case 5: {carid = 461; price = 20000;}
	            case 6: {carid = 521; price = 25000;}
	        }
	        if(price > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
			GiveDodMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s. (Unlock it using /lock)", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        //if(PlayerInfo[playerid][pVIP] >= 2 && PlayerInfo[playerid][vModel])
	        if(PlayerInfo[playerid][vModel])
	        {
	            PlayerInfo[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVLocked] = 1;
		        PlayerInfo[playerid][vVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVA]);
				PlayerInfo[playerid][vVC1] = 0;
				PlayerInfo[playerid][vVC2] = 0;
				return 1;
	        }
	        if(PlayerInfo[playerid][vVModel])
	        {
	            PlayerInfo[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVVLocked] = 1;
		        PlayerInfo[playerid][vVVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVX], PlayerInfo[playerid][vVVY], PlayerInfo[playerid][vVVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVA]);
				PlayerInfo[playerid][vVVC1] = 0;
				PlayerInfo[playerid][vVVC2] = 0;
				return 1;
	        }
	        PlayerInfo[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
	        SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
	        PlayerInfo[playerid][vLocked] = 1;
	        PlayerInfo[playerid][vModel] = carid;
			GetVehiclePos(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
			GetVehicleZAngle(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vA]);
			PlayerInfo[playerid][vC1] = 0;
			PlayerInfo[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 12) // Normal Vehicles
	{
	    new string[128], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 480; price = 30000;}
	            case 1: {carid = 533; price = 26000;}
	            case 2: {carid = 439; price = 26000;}
	            case 3: {carid = 555; price = 28000;}
	            case 4: {carid = 405; price = 24000;} // Sentinel
	            case 5: {carid = 410; price = 22000;} // Manana
	        }
	        if(price > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
            GiveDodMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s. (Unlock it using /lock)", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        //if(PlayerInfo[playerid][pVIP] >= 2 && PlayerInfo[playerid][vModel])
	        if(PlayerInfo[playerid][vModel])
	        {
	            PlayerInfo[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVLocked] = 1;
		        PlayerInfo[playerid][vVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVA]);
				PlayerInfo[playerid][vVC1] = 0;
				PlayerInfo[playerid][vVC2] = 0;
				return 1;
	        }
	        if(PlayerInfo[playerid][vVModel])
	        {
	            PlayerInfo[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVVLocked] = 1;
		        PlayerInfo[playerid][vVVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVX], PlayerInfo[playerid][vVVY], PlayerInfo[playerid][vVVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVA]);
				PlayerInfo[playerid][vVVC1] = 0;
				PlayerInfo[playerid][vVVC2] = 0;
				return 1;
	        }
	        PlayerInfo[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
	        SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
	        PlayerInfo[playerid][vLocked] = 1;
	        PlayerInfo[playerid][vModel] = carid;
			GetVehiclePos(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
			GetVehicleZAngle(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vA]);
			PlayerInfo[playerid][vC1] = 0;
			PlayerInfo[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 13) // Off-Road Vehicles
	{
	    new string[128], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 579; price = 22000;}
	            case 1: {carid = 400; price = 24000;}
	            case 2: {carid = 495; price = 30000;}
	        }
	        if(price > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
            GiveDodMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s. (Unlock it using /lock)", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
			//if(PlayerInfo[playerid][pVIP] >= 2 && PlayerInfo[playerid][vModel])
			if(PlayerInfo[playerid][vModel])
	        {
	            PlayerInfo[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVLocked] = 1;
		        PlayerInfo[playerid][vVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVA]);
				PlayerInfo[playerid][vVC1] = 0;
				PlayerInfo[playerid][vVC2] = 0;
				return 1;
	        }
			if(PlayerInfo[playerid][vVModel])
	        {
	            PlayerInfo[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVVLocked] = 1;
		        PlayerInfo[playerid][vVVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVX], PlayerInfo[playerid][vVVY], PlayerInfo[playerid][vVVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVA]);
				PlayerInfo[playerid][vVVC1] = 0;
				PlayerInfo[playerid][vVVC2] = 0;
				return 1;
	        }
	        PlayerInfo[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
	        SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
	        PlayerInfo[playerid][vLocked] = 1;
	        PlayerInfo[playerid][vModel] = carid;
			GetVehiclePos(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
			GetVehicleZAngle(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vA]);
			PlayerInfo[playerid][vC1] = 0;
			PlayerInfo[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 14) // Sport Vehicles
	{
	    new string[128], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 560; price = 60000;}
	            case 1: {carid = 429; price = 65000;}
	            case 2: {carid = 402; price = 70000;}
	            case 3: {carid = 541; price = 90000;}
	            case 4: {carid = 415; price = 80000;}
	            case 5: {carid = 559; price = 70000;}
	            case 6: {carid = 451; price = 110000;}
	            case 7: {carid = 506; price = 200000;}
	            case 8: {carid = 411; price = 300000;}
	        }
	        if(price > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
            GiveDodMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s. (Unlock it using /lock)", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        //if(PlayerInfo[playerid][pVIP] >= 2 && PlayerInfo[playerid][vModel])
	        if(PlayerInfo[playerid][vModel])
	        {
	            PlayerInfo[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVLocked] = 1;
		        PlayerInfo[playerid][vVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVA]);
				PlayerInfo[playerid][vVC1] = 0;
				PlayerInfo[playerid][vVC2] = 0;
				return 1;
	        }
	        if(PlayerInfo[playerid][vVModel])
	        {
	            PlayerInfo[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVVLocked] = 1;
		        PlayerInfo[playerid][vVVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVX], PlayerInfo[playerid][vVVY], PlayerInfo[playerid][vVVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVA]);
				PlayerInfo[playerid][vVVC1] = 0;
				PlayerInfo[playerid][vVVC2] = 0;
				return 1;
	        }
	        PlayerInfo[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
	        SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
	        PlayerInfo[playerid][vLocked] = 1;
	        PlayerInfo[playerid][vModel] = carid;
			GetVehiclePos(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
			GetVehicleZAngle(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vA]);
			PlayerInfo[playerid][vC1] = 0;
			PlayerInfo[playerid][vC2] = 0;
	    }
	}


	else if(dialogid == 21) // Lowriders
	{
	    new string[128], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 536; price = 25000;} // Blade
	            case 1: {carid = 575; price = 35000;} // Broadway
	            case 2: {carid = 534; price = 30000;} // Remington
	            case 3: {carid = 567; price = 25000;} // Savanna
	            case 4: {carid = 535; price = 27000;} // Slamvan
	            case 5: {carid = 576; price = 24000;} // Tornado
	            case 6: {carid = 412; price = 30000;} // Voodo
	        }
	        if(price > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
            GiveDodMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s. (Unlock it using /lock)", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        //if(PlayerInfo[playerid][pVIP] >= 2 && PlayerInfo[playerid][vModel])
	        if(PlayerInfo[playerid][vModel])
	        {
	            PlayerInfo[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVLocked] = 1;
		        PlayerInfo[playerid][vVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVA]);
				PlayerInfo[playerid][vVC1] = 0;
				PlayerInfo[playerid][vVC2] = 0;
				return 1;
	        }
	        if(PlayerInfo[playerid][vVModel])
	        {
	            PlayerInfo[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVVLocked] = 1;
		        PlayerInfo[playerid][vVVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVX], PlayerInfo[playerid][vVVY], PlayerInfo[playerid][vVVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVVA]);
				PlayerInfo[playerid][vVVC1] = 0;
				PlayerInfo[playerid][vVVC2] = 0;
				return 1;
	        }
	        PlayerInfo[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
	        SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
	        PlayerInfo[playerid][vLocked] = 1;
	        PlayerInfo[playerid][vModel] = carid;
			GetVehiclePos(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
			GetVehicleZAngle(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vA]);
			PlayerInfo[playerid][vC1] = 0;
			PlayerInfo[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 15) // Smartphone /ad
	{
	    new string[128];
	    new price = strlen(inputtext) * 12;
	    if(strlen(inputtext) == 0) return 1;
		if(strlen(inputtext) > 64) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters allowed per advertisement are 64.");
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		if(HasAD[playerid]) return SendClientMessage(playerid, COLOR_GREY, " You must wait for your advertisement to be published before making a new one.");
		if(AdQueue == MAX_ADS-1) return SendClientMessage(playerid, COLOR_GREY, " There are no queue slots for your advertisement.");
		// Advertisement
		HasAD[playerid] = 1;
		if(LastAd) SendClientMessage(playerid, COLOR_LIGHTBLUE, " Your advertisement has been placed in the queue, wait for about 60 seconds maximum.");
	    format(AD[AdQueue], 128, "Advertisement: %s, Contact: %s - Ph: %d", inputtext, RPN(playerid), PlayerInfo[playerid][pCellphone]);
		iAD[AdQueue] = 1;
		AdQueue++;
	    GiveDodMoney(playerid, -price);
	    NewsMoney = price;
	    format(string, sizeof(string), "* %s has placed an advertisement in the queue for $%d.", RPN(playerid), price);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		SendClientMessage(playerid, COLOR_WHITE, " You have been charged $10 per character as you are using an internet service.");
	}
	else if(dialogid == 16) // VIP
	{
	    if(response)
	    {
	        new string[128];
		    switch(listitem)
		    {
	        	case 0: // VIP Color (Bronze+)
		        {
		            if(GetPlayerColor(playerid) != TRANSPARENT_VIP) {SetPlayerColor(playerid, TRANSPARENT_VIP); SendClientMessage(playerid, COLOR_VIP, "You have toggled your VIP name color on.");}
		            else {SetPlayerColor(playerid, TRANSPARENT_WHITE); SendClientMessage(playerid, COLOR_VIP, "You have toggled your VIP name color off.");}
		        }
		        case 1: // VIP Tag (Silver+)
		        {
		            if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
		            if(!VIPTag[playerid])
		            {

		                VIPTag[playerid] = 1;
		                format(string, sizeof(string), "%s VIP", RPVIPN(playerid));
		                /*Delete3DTextLabel(VIPText[playerid]);
		                VIPText[playerid] = Create3DTextLabel(string, COLOR_VIP, 0, 0, -20, 25, -1, 1);
		                Attach3DTextLabelToPlayer(VIPText[playerid], playerid, 0, 0, 0.25);*/
		                if(IsValidDynamic3DTextLabel(VIPText[playerid])) DestroyDynamic3DTextLabel(VIPText[playerid]);
		                VIPText[playerid] = CreateDynamic3DTextLabel(string, COLOR_VIP, 0, 0, -20, 25, playerid);
		                Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, VIPText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
		                SendClientMessage(playerid, COLOR_VIP, "You have toggled your VIP Head Tag on.");
		            }
		            else
		            {
		                VIPTag[playerid] = 0;
		            	//Delete3DTextLabel(VIPText[playerid]);
		            	if(IsValidDynamic3DTextLabel(VIPText[playerid])) DestroyDynamic3DTextLabel(VIPText[playerid]);
		                SendClientMessage(playerid, COLOR_VIP, "You have toggled your VIP Head Tag off.");
		            }
		        }
		        case 2: // Tuning (Silver+)
		        {
		            if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
		            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
					CarmodDialog(playerid);
		        }
		        case 3: // VIP advertisement
		        {
		            if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 37);
		        }
		        case 4: // Skin (Gold+)
		        {
		        	if(PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not Gold VIP.");
					SSSShowDialog(playerid, 17);
		        }
		        case 5: // Age (Gold+)
		        {
		            if(PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not Gold VIP.");
		            VIP[playerid] = 1;
		            SSSShowDialog(playerid, 4);
		        }
		        case 6: // Gender (Gold+)
		        {
		            if(PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not Gold VIP.");
		            VIP[playerid] = 1;
		            SSSShowDialog(playerid, 3);
		        }
		        case 7: // Name (Platinum)
		        {
		            if(PlayerInfo[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not Platinum VIP.");
		            SSSShowDialog(playerid, 18);
		        }
		        case 8: //veh model (Platinum)
		        {
		            SSSShowDialog(playerid, 42);
				}
		    }
		}
	}
	else if(dialogid == 17)
	{
	    if(response)
	    {
	        new skinid = strval(inputtext);
	        if(skinid < 0 || skinid > 299) return SendClientMessage(playerid, COLOR_GREY, "Skins are between 0 and 299.");
	        SetPlayerSkin(playerid, skinid);
	        PlayerInfo[playerid][pModel] = skinid;
	    }
	}
	else if(dialogid == 18)
	{
	    if(response)
	    {
	        new string[128];
	        format(VIPName[playerid], MAX_PLAYER_NAME, "%s", inputtext);
	        format(string, sizeof(string), "AdmWarn: Platinum VIP %s has requested a free namechange to %s. (/approve) (/deny)", RPN(playerid), VIPName[playerid]);
	        SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	}
	else if(dialogid == 19)
	{
	    if(response)
	    {
	        new string[128];
	        switch(listitem)
	        {
				case 0: // Knife
				{
				    if(PlayerInfo[playerid][pMoney] < 10000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money.");
					GiveDodMoney(playerid, -10000);
					GiveDodWeapon(playerid, 4, 1);
					format(string, sizeof(string), "* %s has bought a knife.", RPN(playerid));
 					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 1: // Grenade
				{
				    if(PlayerInfo[playerid][pMoney] < 20000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money.");
					GiveDodMoney(playerid, -20000);
					GiveDodWeapon(playerid, 16, 5);
					format(string, sizeof(string), "* %s has bought grenades.", RPN(playerid));
 					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 2: // Molotov
				{
					if(PlayerInfo[playerid][pMoney] < 20000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money.");
					GiveDodMoney(playerid, -20000);
					GiveDodWeapon(playerid, 18, 5);
					format(string, sizeof(string), "* %s has bought molotov cocktails.", RPN(playerid));
 					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
	        }
	    }
	}
	else if(dialogid == 20) // VIP /ad
	{
	    new string[128];
	    new price = strlen(inputtext) * 3;
	    if(strlen(inputtext) == 0) return 1;
		if(strlen(inputtext) > 64) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters allowed per advertisement are 64.");
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		// Advertisement
		format(string, sizeof(string), "Advertisement: %s, Contact: %s - Ph: %d", inputtext, RPN(playerid), PlayerInfo[playerid][pNumber]);
		SendClientMessageToAll(COLOR_RED, string);
	}
	else if(dialogid == 22)
	{
	    if(response)
	    {
	       	if(PlayerInfo[playerid][pMoney] < 3000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
	        switch(listitem)
	        {
				case 0:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_NORMAL) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the normal fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
				}
				case 1:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_BOXING) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the boxing fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
				}
				case 2:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_KUNGFU) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the kung-fu fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
				}
				case 3:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_KNEEHEAD) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the knee-head fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
				}
				case 4:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_GRABKICK) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the grab-kick fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
				}
				case 5:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_ELBOW) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the elbow fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
				}
	        }
	        GiveDodMoney(playerid, -3000);
	    }
	}
	else if(dialogid == 23)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: toyslot[playerid] = 0; case 1: toyslot[playerid] = 1; case 2: toyslot[playerid] = 2; case 3: toyslot[playerid] = 3; case 4: toyslot[playerid] = 4;
	            case 5: toyslot[playerid] = 5; case 6: toyslot[playerid] = 6; case 7: toyslot[playerid] = 7; case 8: toyslot[playerid] = 8; case 9: toyslot[playerid] = 9;
	        }
	        new index = toyslot[playerid];
		    if(PlayerInfo[playerid][pToyModel][index] == 0)
		    {
		        SSSShowDialog(playerid, 23);
		    }
		    else
		    {
	        	SSSShowDialog(playerid, 24);
	        }
	    }
	}
	else if(dialogid == 24)
	{
	    if(response)
	    {
			switch(listitem)
			{
				case 0:
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, toyslot[playerid]))
					{
					    SSSShowDialog(playerid, 25);
					}
			    	else
			    	{
			    	    RemovePlayerAttachedObject(playerid, toyslot[playerid]);
			    	}
				}
				case 1:
				{
				    EditAttachedObject(playerid, toyslot[playerid]);
				}
			}
	    }
	    else SSSShowDialog(playerid, 23);
	}
	else if(dialogid == 25)
	{
	    if(response)
	    {
			new bone, index = toyslot[playerid];
	        switch(listitem)
	        {
	            case 0: bone = 1; case 1: bone = 2; case 2: bone = 3; case 3: bone = 4; case 4: bone = 5; case 5: bone = 6;
	            case 6: bone = 7; case 7: bone = 8; case 8: bone = 9; case 9: bone = 10; case 10: bone = 11; case 11: bone = 12;
	            case 12: bone = 13; case 13: bone = 14; case 14: bone = 15; case 15: bone = 16; case 16: bone = 17; case 17: bone = 18;
	        }
			//SetPlayerAttachedObject(playerid, index, PlayerInfo[playerid][pToyModel][index], bone, Float:PlayerInfo[playerid][pToyX][index], Float:PlayerInfo[playerid][pToyY][index], Float:PlayerInfo[playerid][pToyZ][index], Float:PlayerInfo[playerid][pToyRX][index], Float:PlayerInfo[playerid][pToyRY][index], Float:PlayerInfo[playerid][pToyRZ][index], Float:PlayerInfo[playerid][pToySX][index], Float:PlayerInfo[playerid][pToySY][index], Float:PlayerInfo[playerid][pToySZ][index]);
			//
			SetPlayerAttachedObject(playerid, index, PlayerInfo[playerid][pToyModel][index], bone, Float:PlayerInfo[playerid][pToyX][index], Float:PlayerInfo[playerid][pToyY][index], Float:PlayerInfo[playerid][pToyZ][index], Float:PlayerInfo[playerid][pToyRX][index], Float:PlayerInfo[playerid][pToyRY][index], Float:PlayerInfo[playerid][pToyRZ][index], Float:PlayerInfo[playerid][pToySX][index], Float:PlayerInfo[playerid][pToySY][index], Float:PlayerInfo[playerid][pToySZ][index]);
	    }
	    else SSSShowDialog(playerid, 24);
	}
	else if(dialogid == 26)
	{
		if(response)
		{
		    new string[128];
		    switch(listitem)
		    {
				case 0:
				{
				    if(LHealth)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) before refilling everybody's health.", LHealth/60, LHealth);
						SendClientMessage(playerid, COLOR_GREY, string);
				        return 1;
				    }
				    if(PlayerInfo[playerid][pLPoints] < 2) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough loyalty points for this.");
				    foreach(Player, i)
				    {
				        SetPlayerHealth(i, 100);
				    }
				    format(string, sizeof(string), "LoyalWarn: Loyal Player %s has refilled everybody's health.", RPN(playerid));
				    PlayerInfo[playerid][pLPoints] -= 2;
				    LHealth = 120;
				}
				case 1:
				{
				    if(LFix)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) before repairing all vehicles.", LFix/60, LFix);
				        SendClientMessage(playerid, COLOR_GREY, string);
				        return 1;
				    }
				    if(PlayerInfo[playerid][pLPoints] < 4) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough loyalty points for this.");
					for(new i=0; i<MAX_VEHICLES; i++)
					{
					    RepairVehicle(i);
					}
					format(string, sizeof(string), "LoyalWarn: Loyal Player %s has repaired all vehicles.", RPN(playerid));
					PlayerInfo[playerid][pLPoints] -= 4;
					LFix = 120;
				}
				case 2:
				{
				    if(LRefill)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) to refill everybody's health.", LRefill/60, LRefill);
				        SendClientMessage(playerid, COLOR_GREY, string);
				        return 1;
				    }
				    if(PlayerInfo[playerid][pLPoints] < 6) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough loyalty points for this.");
					for(new i=0; i<MAX_VEHICLES; i++)
					{
					    Fuel[i] = 100;
					}
					format(string, sizeof(string), "LoyalWarn: Loyal Player %s has refilled all vehicles.", RPN(playerid));
					PlayerInfo[playerid][pLPoints] -= 6;
					LRefill = 120;
				}
		    }
		    SendClientMessageToAll(COLOR_LIGHTRED, string);
		}
	}
	else if(dialogid == 27)
	{
	    if(response)
	    {
	        new string[128];
	        switch(listitem)
	        {
		        case 0:
		        {
		        	GiveDodWeapon(playerid, 43, 999999);
	                format(string, sizeof(string), "* %s grabs a Camera from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    		}
		        case 1:
		        {
		            SSSShowDialog(playerid, 7);
		        }
	        }
	    }
	}
	else if(dialogid == 28) //Paintball Gun Menu
	{
	    if(response)
	    {
		    switch(listitem)
		    {
	        	case 0: // Deagle
		        {
		            GiveDodWeapon(playerid, 24, 99999);
		            SSSShowDialog(playerid, 29);
		        }
				case 1: //Micro SMG/Uzi
		        {
		            GiveDodWeapon(playerid, 28, 99999);
		            SSSShowDialog(playerid, 29);
				}
				case 2: //Tec-9
		        {
		            GiveDodWeapon(playerid, 32, 99999);
		            SSSShowDialog(playerid, 29);
				}
			}
		}
		else
		{
		        SetPlayerPos(playerid,1310.1110,-1368.5656,13.517786);
			    SetPlayerHealth(playerid, 100);
			    SetPlayerArmour(playerid, 0);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
				SendClientMessage(playerid, COLOR_LIGHTRED, "You've quited the paintball*");
				GunsBeingRemoved[playerid] = 1;
				ResetPlayerWeapons(playerid);
			    PlayerPaintballing[playerid] = 0;
		}
	}
	else if(dialogid == 29) //Paintball Gun Menu 2
	{
	    if(response)
	    {
		    switch(listitem)
		    {
	        	case 0: // SPAS12
		        {
		            GiveDodWeapon(playerid, 27, 99999);
		        }
		        case 1: // M4
		        {
		            GiveDodWeapon(playerid, 31, 99999);
		        }
		        case 2: // Shotgun
		        {
		            GiveDodWeapon(playerid, 25, 99999);
		        }
			}
		}
	}
	else if(dialogid == 30) //tune shop menu
	{
	    if(response)
	    {
		    switch(listitem)
		    {
	        	case 0: // Red neon
		        {
		            if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
    				{
		            	PlayerInfo[playerid][pNeon] = 1;
		            	neon[playerid] = 1;
					}
                    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
    				{
    				    PlayerInfo[playerid][pVNeon] = 1;
						vneon[playerid] = 1;
					}
                    GiveDodMoney(playerid, -500);
                    SendClientMessage(playerid, 0xFFFFFFAA, "Red neon tubes installed((/neon to activate/deactivate)).");
		        }
		        case 1: // Blue neon
		        {
		            if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
    				{
		            	PlayerInfo[playerid][pNeon] = 2;
		            	neon[playerid] = 1;
					}
                    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
    				{
    				    PlayerInfo[playerid][pVNeon] = 2;
						vneon[playerid] = 1;
					}
		            GiveDodMoney(playerid, -500);
		            SendClientMessage(playerid, 0xFFFFFFAA, "Blue neon tubes installed((/neon to activate/deactivate)).");
		        }
		        case 2: // Green neon
		        {
		            if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
    				{
		            	PlayerInfo[playerid][pNeon] = 3;
		            	neon[playerid] = 1;
					}
                    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
    				{
    				    PlayerInfo[playerid][pVNeon] = 3;
						vneon[playerid] = 1;
					}
                    GiveDodMoney(playerid, -500);
                    SendClientMessage(playerid, 0xFFFFFFAA, "Green neon tubes installed((/neon to activate/deactivate)).");
		        }
		        case 3: // White neon
		        {
		            if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
    				{
		            	PlayerInfo[playerid][pNeon] = 4;
		            	neon[playerid] = 1;
					}
                    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
    				{
    				    PlayerInfo[playerid][pVNeon] = 4;
						vneon[playerid] = 1;
					}
                    GiveDodMoney(playerid, -500);
                    SendClientMessage(playerid, 0xFFFFFFAA, "White neon tubes installed((/neon to activate/deactivate)).");
		        }
		        case 4: // Pink neon
		        {
		            if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
    				{
		            	PlayerInfo[playerid][pNeon] = 5;
		            	neon[playerid] = 1;
					}
                    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
    				{
    				    PlayerInfo[playerid][pVNeon] = 5;
						vneon[playerid] = 1;
					}
                    GiveDodMoney(playerid, -500);
                    SendClientMessage(playerid, 0xFFFFFFAA, "Pink neon tubes installed((/neon to activate/deactivate)).");
		        }
		        case 5: // Yellow neon
		        {
		            if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
    				{
		            	PlayerInfo[playerid][pNeon] = 6;
		            	neon[playerid] = 1;
					}
                    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
    				{
    				    PlayerInfo[playerid][pVNeon] = 6;
						vneon[playerid] = 1;
					}
                    GiveDodMoney(playerid, -500);
                    SendClientMessage(playerid, 0xFFFFFFAA, "Yellow neon tubes installed((/neon to activate/deactivate)).");
		        }
		        case 6: //remove neon
		        {
		            if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
    				{
			            PlayerInfo[playerid][pNeon] = 0;
			            DestroyObject(GetPVarInt(playerid, "neon"));
			            DestroyObject(GetPVarInt(playerid, "neon1"));
			            DestroyObject(GetPVarInt(playerid, "neon2"));
			            DestroyObject(GetPVarInt(playerid, "neon3"));
			            DestroyObject(GetPVarInt(playerid, "neon4"));
			            DestroyObject(GetPVarInt(playerid, "neon5"));
			            DestroyObject(GetPVarInt(playerid, "neon6"));
			            DestroyObject(GetPVarInt(playerid, "neon7"));
			            DestroyObject(GetPVarInt(playerid, "neon8"));
			            DestroyObject(GetPVarInt(playerid, "neon9"));
			            DestroyObject(GetPVarInt(playerid, "neon10"));
			            DestroyObject(GetPVarInt(playerid, "neon11"));
			            DestroyObject(GetPVarInt(playerid, "nb1"));
				    	DestroyObject(GetPVarInt(playerid, "nb2"));
				    	DestroyObject(GetPVarInt(playerid, "nb3"));
				    	DestroyObject(GetPVarInt(playerid, "nb4"));
				    	DestroyObject(GetPVarInt(playerid, "nb5"));
				    	DestroyObject(GetPVarInt(playerid, "nb6"));
					}
					if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
    				{
    				    PlayerInfo[playerid][pVNeon] = 0;
			            DestroyObject(GetPVarInt(playerid, "vneon"));
			            DestroyObject(GetPVarInt(playerid, "vneon1"));
			            DestroyObject(GetPVarInt(playerid, "vneon2"));
			            DestroyObject(GetPVarInt(playerid, "vneon3"));
			            DestroyObject(GetPVarInt(playerid, "vneon4"));
			            DestroyObject(GetPVarInt(playerid, "vneon5"));
			            DestroyObject(GetPVarInt(playerid, "vneon6"));
			            DestroyObject(GetPVarInt(playerid, "vneon7"));
			            DestroyObject(GetPVarInt(playerid, "vneon8"));
			            DestroyObject(GetPVarInt(playerid, "vneon9"));
			            DestroyObject(GetPVarInt(playerid, "vneon10"));
			            DestroyObject(GetPVarInt(playerid, "vneon11"));
			            DestroyObject(GetPVarInt(playerid, "vnb1"));
				    	DestroyObject(GetPVarInt(playerid, "vnb2"));
				    	DestroyObject(GetPVarInt(playerid, "vnb3"));
				    	DestroyObject(GetPVarInt(playerid, "vnb4"));
				    	DestroyObject(GetPVarInt(playerid, "vnb5"));
				    	DestroyObject(GetPVarInt(playerid, "vnb6"));
					}
            		SendClientMessage(playerid, 0xFFFFFFAA, "Your vehicle neon tubes have been removed.");
            		GiveDodMoney(playerid, -1000);
		        }
			}
		}
	}
	else if(dialogid == 31) //vip vehicle model
	{
        if(response)
	    {
	        if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
			{
			    new model = strval(inputtext);
			    if(model < 400 || model > 611) return SendClientMessage(playerid, COLOR_GREY, "Vehicle IDs are between 400 and 611.");
			    if(model == 520) return SendClientMessage(playerid, COLOR_GREY, "Forbidden vehicle.");
			    new Float:x ,Float:y, Float:z, Float:Angle;
			    DestroyVehicle(PlayerInfo[playerid][pVeh]);
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, Angle);
				PlayerInfo[playerid][pVeh] = CreateVehicle(model, x ,y , z, Angle ,0 ,0 ,1200);
				GetVehiclePos(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vA]);
			   	PlayerInfo[playerid][vModel] = model;
				PlayerInfo[playerid][vC1] = 0;
				PlayerInfo[playerid][vC2] = 0;
				PutPlayerInVehicle(playerid, PlayerInfo[playerid][pVeh], 0);
			}
			if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
			{
			    new model = strval(inputtext);
			    if(model < 400 || model > 611) return SendClientMessage(playerid, COLOR_GREY, "Vehicle IDs are between 400 and 611.");
			    if(model == 520) return SendClientMessage(playerid, COLOR_GREY, "Forbidden vehicle.");
			    new Float:x ,Float:y, Float:z, Float:Angle;
			    DestroyVehicle(PlayerInfo[playerid][pVVeh]);
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, Angle);
				PlayerInfo[playerid][pVVeh] = CreateVehicle(model, x ,y , z, Angle ,0 ,0 ,1200);
				GetVehiclePos(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vA]);
			   	PlayerInfo[playerid][vVModel] = model;
				PlayerInfo[playerid][vVC1] = 0;
				PlayerInfo[playerid][vVC2] = 0;
				PutPlayerInVehicle(playerid, PlayerInfo[playerid][pVVeh], 0);
			}
			if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVVeh])
			{
			    new model = strval(inputtext);
			    if(model < 400 || model > 611) return SendClientMessage(playerid, COLOR_GREY, "Vehicle IDs are between 400 and 611.");
			    if(model == 520) return SendClientMessage(playerid, COLOR_GREY, "Forbidden vehicle.");
			    new Float:x ,Float:y, Float:z, Float:Angle;
			    DestroyVehicle(PlayerInfo[playerid][pVVVeh]);
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, Angle);
				PlayerInfo[playerid][pVVVeh] = CreateVehicle(model, x ,y , z, Angle ,0 ,0 ,1200);
				GetVehiclePos(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVVeh], PlayerInfo[playerid][vVA]);
			   	PlayerInfo[playerid][vVVModel] = model;
				PlayerInfo[playerid][vVVC1] = 0;
				PlayerInfo[playerid][vVVC2] = 0;
				PutPlayerInVehicle(playerid, PlayerInfo[playerid][pVVVeh], 0);
			}
	    }
	}
	else if(dialogid == 32)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(PlayerInfo[playerid][pFacDuty] == 0)
	                {
	                    new string[65];
	                    format(string, sizeof(string), "* Paramedic %s clocked in and is now on duty.", RPN(playerid));
                        SendNearbyMessage(playerid, 5, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
                        SetPlayerColor(playerid, COLOR_RED);
                        SetPlayerArmour(playerid, 100);
                        PlayerInfo[playerid][pFacDuty] = 1;
					}
					else
					{
					    new string[65];
					    format(string, sizeof(string), "* Paramedic %s clocked out and is now off duty.", RPN(playerid));
					    SendNearbyMessage(playerid, 5, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					    PlayerInfo[playerid][pFacDuty] = 0;
					    SetPlayerColor(playerid, COLOR_WHITE);
					}
				}
				case 1:
				{
					SSSShowDialog(playerid, 33);
				}
			}
		}
	}
	else if(dialogid == 33)
	{
	    if(response)
		{
			switch(listitem)
			{
			    case 0:
			    {
			        SetPlayerSkin(playerid, 274);
			        PlayerInfo[playerid][pModel] = 274;
				}
				case 1:
				{
				    SetPlayerSkin(playerid, 275);
				    PlayerInfo[playerid][pModel] = 275;
				}
				case 2:
				{
				    SetPlayerSkin(playerid, 276);
				    PlayerInfo[playerid][pModel] = 276;
				}
				case 3:
				{
				    SetPlayerSkin(playerid, 211);
				    PlayerInfo[playerid][pModel] = 211;
				}
			}
		}
		else
		{
		    SSSShowDialog(playerid, 32);
		}
	}
	else if(dialogid == 34)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
				{
				    new string[70];
					if(PlayerInfo[playerid][pMoney] < 300) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
				    PlayerInfo[playerid][pCigar] = 5;
				    TaxMoney += 150;
					GiveDodMoney(playerid, -300);
					format(string, sizeof(string), "* %s grabs 5 cuban cigars and leaves $300 next to the register.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					SendClientMessage(playerid, COLOR_WHITE, " You can use /use to smoke a cigar.");
				}
				case 1:
				{
				    new string[70];
			        if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
				    PlayerInfo[playerid][pSprunk] = 5;
				    TaxMoney += 50;
					GiveDodMoney(playerid, -100);
					format(string, sizeof(string), "* %s grabs 5 redbull cans and leaves $100 next to the register.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					SendClientMessage(playerid, COLOR_WHITE, " You can use /sprunk to drink a sprunk can.");
				}
				case 2:
				{
				    new string[55];
				    if(PlayerInfo[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money for this.");
					TaxMoney += 100;
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		        	format(string, sizeof(string), "* %s grabs a beer from the cooler.", RPN(playerid));
		        	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			    }
			    case 3:
			    {
			        new string[55];
					if(PlayerInfo[playerid][pMoney] < 350) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
					TaxMoney += 176;
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
			        format(string, sizeof(string), "* %s grabs a liqour bottle from the stand.", RPN(playerid));
			        SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
			}
		}
	}
	else if(dialogid == 35)
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(!PlayerInfo[playerid][pFacDuty])
	                {
	                    PlayerInfo[playerid][pFacDuty] = 1;
	                    SetPlayerColor(playerid, TCOLOR_NAVYBLUE);
	                    format(string, sizeof(string), "* %s grabs their badge, gun and m4 from the locker.", RPN(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						GiveDodWeapon(playerid, 31, 500);
						GiveDodWeapon(playerid, 24, 200);
						SetPlayerArmour(playerid, 100);
						return 1;
	                }
	                else
	                {
      					PlayerInfo[playerid][pFacDuty] = 0;
	                    SetPlayerColor(playerid, TRANSPARENT_WHITE);
	                    SetPlayerArmour(playerid, 0);
	                    format(string, sizeof(string), "* %s places their badge in the locker.", RPN(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						return 1;
	                }
	            }
	            case 1:
	            {
	                SSSShowDialog(playerid, 6);
	            }
	            case 2:
	            {
	                SSSShowDialog(playerid, 7);
	            }
	            case 3:
	            {
	                SSSShowDialog(playerid, 8);
	            }
	        }
	    }
	}
	else if(dialogid == 36) // VIP /ad
	{
	    new string[128];
	    new price = strlen(inputtext) * 3;
	    if(strlen(inputtext) == 0) return 1;
		if(strlen(inputtext) > 64) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters allowed per advertisement are 64.");
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		// Advertisement
		format(string, sizeof(string), "Advertisement: %s, Contact: %s - Ph: %d", inputtext, RPN(playerid), PlayerInfo[playerid][pNumber]);
		SendClientMessageToAll(COLOR_ORANGE, string);
	}
	else if(dialogid == 37)
	{
		if(response)
		{
		    switch(listitem)
		    {
				case 0:
				{
				    if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 20);
				}
				case 1:
				{
				    if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 36);
				}
				case 2:
				{
				    if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 38);
				}
		    }
		}
	}
	else if(dialogid == 38) // VIP /ad
	{
	    new string[128];
	    new price = strlen(inputtext) * 3;
	    if(strlen(inputtext) == 0) return 1;
		if(strlen(inputtext) > 64) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters allowed per advertisement are 64.");
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		// Advertisement
		format(string, sizeof(string), "Advertisement: %s, Contact: %s - Ph: %d", inputtext, RPN(playerid), PlayerInfo[playerid][pNumber]);
		SendClientMessageToAll(COLOR_PINK, string);
	}
	else if(dialogid == 39)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Driving
				{
				    if(PlayerInfo[playerid][pCarLic]) return SendClientMessage(playerid, COLOR_GREY, "You already have a drivers license.");
                    if(PlayerInfo[playerid][pMoney] < 1000) return SendClientMessage(playerid, COLOR_GREY, "You've got insufficient funds. ($1,000)");
	                GiveDodMoney(playerid, -1000);
					LicenseTest[playerid] = 1;
                 	SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Drivers Center: You've paid $1000 for your driving test.");
                    GameTextForPlayer(playerid, "~r~Get to a DMV car to being your test!", 3500, 3);
                    CP[playerid] = 1;
				}

				case 1: // Flying
				{
				    if(PlayerInfo[playerid][pFlyLic]) return SendClientMessage(playerid, COLOR_GREY, "You already have a flying license.");
				    if(PlayerInfo[playerid][pMoney] < 10000) return SendClientMessage(playerid, COLOR_GREY,"You've insufficient funds. ($10,000)");
	                GiveDodMoney(playerid, -10000);
	                PlayerInfo[playerid][pFlyLic] = 1;
	                SendClientMessage(playerid,COLOR_LIGHTBLUE,"* License Center: You've successfully bought a new flying license.");
				}

	        }
	    }
	}
	else if(dialogid == 40)
	{
	    if(response)
	    {
	       	if(PlayerInfo[playerid][pMoney] < 1) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
	        switch(listitem)
	        {
				case 0:
				{
				    SetPlayerInterior(playerid, 0);
             	    SetPlayerVirtualWorld(playerid, 0);
             	    SetPlayerPos(playerid,2224.8137,-1723.4457,13.5625);
             	    SendClientMessage(playerid, COLOR_WHITE, " You have choosed to spawn to the Gym.");
				}
				case 1:
                {
				    SetPlayerInterior(playerid, 0);
	                SetPlayerVirtualWorld(playerid, 0);
	                SetPlayerPos(playerid,1515.2551,-1666.3148,14.0469);
	                SendClientMessage(playerid, COLOR_WHITE, " You have choosed to spawn at the PD.");
				}
				case 2:
                {
				    SetPlayerInterior(playerid, 0);
	                SetPlayerVirtualWorld(playerid, 0);
	                SetPlayerPos(playerid,1177.5485,-1323.5773,14.0761);
	                SendClientMessage(playerid, COLOR_WHITE, " You have choosed to spawn at the All Saints Hospital.");
				}
				case 3:
                {
				    SetPlayerInterior(playerid, 0);
	                SetPlayerVirtualWorld(playerid, 0);
	                SetPlayerPos(playerid,2034.0833,-1404.6536,17.2539);
	                SendClientMessage(playerid, COLOR_WHITE, " You have have choosed to spawn the General County Hospital.");
				}
	        }
	    }
	}
	else if(dialogid == 41)
	{
	    if(response)
	    {
	        new string[128];
	        format(PlayerName[playerid], MAX_PLAYER_NAME, "%s", inputtext);
	        format(string, sizeof(string), "AdmWarn: Player %s has requested a namechange to %s. (/approve) (/deny)", RPN(playerid), PlayerName[playerid]);
	        SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	}
	else if(dialogid == 42)
	{
		if(response)
		{
		    new string[128];
		    switch(listitem)
		    {
				case 0:
				{
				    if(LHealth)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) before refilling everybody's health.", LHealth/60, LHealth);
						SendClientMessage(playerid, COLOR_GREY, string);
				        return 1;
				    }
				    if(PlayerInfo[playerid][pLPoints] < 2) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough vip points for this.");
				    foreach(Player, i)
				    {
				        SetPlayerHealth(i, 100);
				    }
				    format(string, sizeof(string), "%s has used his VIP-Points to refill everybody health.", RPN(playerid));
				    PlayerInfo[playerid][pLPoints] -= 2;
				    LHealth = 120;
				}
				case 1:
				{
				    if(LFix)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) before repairing all vehicles.", LFix/60, LFix);
				        SendClientMessage(playerid, COLOR_GREY, string);
				        return 1;
				    }
				    if(PlayerInfo[playerid][pLPoints] < 4) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough vip points for this.");
					for(new i=0; i<MAX_VEHICLES; i++)
					{
					    RepairVehicle(i);
					}
					format(string, sizeof(string), "%s has used his VIP-Points to repair all vehicles.", RPN(playerid));
					PlayerInfo[playerid][pLPoints] -= 4;
					LFix = 120;
				}
				case 2:
				{
				    if(LRefill)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) to refill everybody's health.", LRefill/60, LRefill);
				        SendClientMessage(playerid, COLOR_GREY, string);
				        return 1;
				    }
				    if(PlayerInfo[playerid][pLPoints] < 6) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough vip points for this.");
					for(new i=0; i<MAX_VEHICLES; i++)
					{
					    Fuel[i] = 100;
					}
					format(string, sizeof(string), "%s has used his VIP-Points to refill all vehicles.", RPN(playerid));
					PlayerInfo[playerid][pLPoints] -= 6;
					LRefill = 120;
				}
		    }
		    SendClientMessageToAll(COLOR_LIGHTRED, string);
		}
	}
	else if(dialogid == 43)
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(!PlayerInfo[playerid][pFacDuty])
	                {
	                    PlayerInfo[playerid][pFacDuty] = 1;
	                    SetPlayerColor(playerid, COLOR_NG);
	                    format(string, sizeof(string), "* %s grabs their badge, gun and m4 from the locker.", RPN(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						GiveDodWeapon(playerid, 31, 500);
						GiveDodWeapon(playerid, 24, 200);
						SetPlayerArmour(playerid, 100);
						return 1;
	                }
	                else
	                {
      					PlayerInfo[playerid][pFacDuty] = 0;
	                    SetPlayerColor(playerid, TRANSPARENT_WHITE);
	                    SetPlayerArmour(playerid, 0);
	                    format(string, sizeof(string), "* %s places their badge in the locker.", RPN(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						return 1;
	                }
	            }
	            case 1:
	            {
	                SSSShowDialog(playerid, 6);
	            }
	            case 2:
	            {
	                SSSShowDialog(playerid, 7);
	            }
	            case 3:
	            {
	                SSSShowDialog(playerid, 8);
	            }
	        }
	    }
	}
	else if(dialogid == 44)
	{
		if(response)
		{
		    switch(listitem)
		    {
				case 0:
				{
					SSSShowDialog(playerid, 45);
				}
				case 1:
				{
				    //if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 46);
				}
				case 2:
				{
				    //if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 47);
				}
				case 3:
				{
				    //if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 48);
				}
				case 4:
				{
				    //if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 49);
				}
				case 5:
				{
				    //if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 50);
				}
				case 6:
				{
				    //if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 51);
				}
				case 7:
				{
				    //if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 52);
				}
				case 8:
				{
				    //if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 53);
				}
				case 9:
				{
				    //if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					SSSShowDialog(playerid, 54);
				}
		    }
		}
	}
	/*else if(dialogid == 40)
	{
	    if(response)
	    {
		    if(listitem == 0) ShowPlayerDialog(playerid, 41); //Detective
			if(listitem == 1) ShowPlayerDialog(playerid, 42); //Lawyer
			if(listitem == 2) ShowPlayerDialog(playerid, 43); //Whore
			if(listitem == 3) ShowPlayerDialog(playerid, 44); //Drug Dealer
			if(listitem == 4) ShowPlayerDialogf(playerid, 45); //Mechanic
			if(listitem == 5) ShowPlayerDialog(playerid, 46); //Bodyguard
			if(listitem == 6) ShowPlayerDialog(playerid, 47); //Arms Dealer
			if(listitem == 7) ShowPlayerDialog(playerid, 48); //Boxer
			if(listitem == 8) ShowPlayerDialog(playerid, 49); //Taxi Driver
			if(listitem == 9) ShowPlayerDialog(playerid, 50); //Drug Smuggler
		}
	}*/
	else if(dialogid == 45) //Detective
	{
	    if(response) return 1;
	}
	else if(dialogid == 46) // Lawyer
	{
	    if(response) return 1;
	}
	else if(dialogid == 47) // Whore
	{
	    if(response) return 1;
	}
	else if(dialogid == 48) // Drug Dealer
	{
	    if(response) return 1;
	}
	else if(dialogid == 49) // Mechanic
	{
	    if(response) return 1;
	}
	else if(dialogid == 50) // Bodyguard
	{
	    if(response) return 1;
	}
	else if(dialogid == 51) // Arms Dealer
	{
	    if(response) return 1;
	}
	else if(dialogid == 52) // Boxer
	{
	    if(response) return 1;
	}
	else if(dialogid == 53) // Taxi Driver
	{
	    if(response) return 1;
	}
	else if(dialogid == 54) // Drug Smuggler
	{
	    if(response) return 1;
	}
    else if(dialogid == 1111 && response)
	{
		switch(listitem)
		{
			case 0: AddVehicleComponent(vehid,1010),CarmodDialog(playerid), PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			case 1: ShowPlayerDialog(playerid,1112,DIALOG_STYLE_LIST,"Choose primary color:","White\nBlack\nOrange\nLight Blue\nDark Blue\nPurple\nRed\nDark Red\nGrey","Select","Cancle");
			case 2: ShowPlayerDialog(playerid,1113,DIALOG_STYLE_LIST,"Choose a wheel:","Shadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAcces\n{FF0000}Back","Select","Cancle");
			case 3: AddVehicleComponent(vehid, 1086), PlayerPlaySound(playerid,1133,0.0,0.0,0.0), CarmodDialog(playerid);
			case 4: AddVehicleComponent(vehid, 1087), PlayerPlaySound(playerid,1133,0.0,0.0,0.0), CarmodDialog(playerid);
			case 5:
			{
				if(vehmd == 562 || vehmd == 565 || vehmd == 559 || vehmd == 561 || vehmd == 560 || vehmd == 558)
				{
					ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 576 || vehmd == 575 || vehmd == 535)
				{
					Lowrider(playerid);
    			}
				else if(vehmd == 567 || vehmd == 536)
				{
                    ShowPlayerDialog(playerid,1002,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nHardtop Roof\nSofttop Roof\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 534)
				{
                    ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 496 || vehmd == 505 || vehmd == 516 || vehmd == 517 || vehmd == 518 || vehmd == 527 || vehmd == 529 || vehmd == 540 || vehmd == 546 || vehmd == 547 || vehmd == 549 || vehmd == 550 || vehmd == 551 || vehmd == 580 || vehmd == 585 || vehmd == 587 || vehmd == 589 || vehmd == 600 || vehmd == 603 || vehmd == 401 || vehmd == 410 || vehmd == 415 || vehmd == 418 || vehmd == 420 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 491 || vehmd == 492)
				{
					RegularCarDialog(playerid);
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"This vehicle can't be tuned.");
				}
			}
		}
	}
	if(dialogid == 1112 && response)
	{
		new color1, color2;
		GetVehicleColor(vehid,color1,color2);
	    new Carray[] = {1,0,6,2,79,149,151,3,34};
	    ChangeVehicleColor(vehid,Carray[listitem],color2);
	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
		{
		    PlayerInfo[playerid][vC1] = Carray[listitem];
		}
		else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
		{
		    PlayerInfo[playerid][vVC1] = Carray[listitem];
		}
	    return ShowPlayerDialog(playerid,1116,DIALOG_STYLE_LIST,"Choose second color:","White\nBlack\nOrange\nLight Blue\nDark Blue\nPurple\nRed\nDark Red\nGrey","Select","Cancle");
	}

	if(dialogid == 1116 && response)
	{
	    new color1, color2;
		GetVehicleColor(vehid,color1,color2);
	    new Carray[] = {1,0,6,2,79,149,151,3,34};
        ChangeVehicleColor(vehid,color1,Carray[listitem]);
        if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
		{
		    PlayerInfo[playerid][vC2] = Carray[listitem];
		}
		else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
		{
		    PlayerInfo[playerid][vVC2] = Carray[listitem];
		}
        return CarmodDialog(playerid);
	}
	if(dialogid == 1113 && response)
	{
	    if(listitem == 16) return CarmodDialog(playerid);
		new Warray[] = {1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
		AddVehicleComponent(vehid,Warray[listitem]);
		return CarmodDialog(playerid);
	}
	if(dialogid == 1114 && response)
	{
	    switch(listitem)
	    {
			case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: Mod(playerid);
			case 2: Mod1(playerid);
			case 3: CarmodDialog(playerid);
		}
	}
	if(dialogid == 1001 && response)
	{
		switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: Mod2(playerid);
			case 2: Mod3(playerid);
			case 3: CarmodDialog(playerid);
		}
	}
	if(dialogid  == 1002)
	{
		switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: Mod2(playerid);
			case 2: Mod3(playerid);
			case 3:
			{
				if(vehmd == 567)//Savanna
				{
					AddVehicleComponent(vehid, 1130);
				}
				if(vehmd == 536)//Blade
                {
                    AddVehicleComponent(vehid, 1128);
				}
			}
			case 4:
			{
				if(vehmd == 567)//Savanna
				{
    				 AddVehicleComponent(vehid, 1131);
				}
				if(vehmd == 536)//Blade
                {
                    AddVehicleComponent(vehid, 1103);
				}
			}
			case 5: CarmodDialog(playerid);
		}
	}
	if(dialogid  == 1003)//Remington
	{
		switch(listitem)
		{
		    case 0:ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
		    case 1: Mod2(playerid);
			case 2: Mod3(playerid);
			case 3: AddVehicleComponent(vehid, 1122),AddVehicleComponent(vehid, 1101),ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
			case 4: AddVehicleComponent(vehid, 1106),AddVehicleComponent(vehid, 1124),ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
			case 5: CarmodDialog(playerid);
		}
	}
	if(dialogid == 1004 && response)//regular cars
	{
	    switch(listitem)
	    {
			case 0:
			{
				ShowPlayerDialog(playerid,1010,DIALOG_STYLE_LIST,"Spoiler","Pro\nWin\nDrag\nAlpha\nChamp\nRace\nWorx\nFury\n{FF0000}Back","Select","Cancel");
			}
			case 1:
			{
			    if(vehmd == 585 || vehmd == 603 || vehmd == 439 || vehmd == 458 || vehmd == 418 || vehmd == 527 || vehmd == 580)
			    {
					AddVehicleComponent(vehid, 1006);
					return RegularCarDialog(playerid);
				}
				else if(vehmd == 439 || vehmd == 458 || vehmd == 491 || vehmd == 517 ||vehmd == 547)
			    {ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
                else if(vehmd == 415)
                {
					AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
                else ShowPlayerDialog(playerid,1020,DIALOG_STYLE_LIST,"Hood","Champ\nFury\nRace\nWorx\n{FF0000}Back","Select","Cancel");
			}
			case 2:
			{
			    if(vehmd == 549 || vehmd == 585 || vehmd == 603)
				{ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
				else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 516 || vehmd == 491 || vehmd == 517 || vehmd == 418 || vehmd == 527 || vehmd == 580)
				{
                    AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
				else if(vehmd == 415 || vehmd == 547 || vehmd == 420 || vehmd == 587)
				{CarmodDialog(playerid);}
				else
				{
					AddVehicleComponent(vehid, 1006);
					return RegularCarDialog(playerid);
				}

			}
			case 3:
			{
			    if(vehmd == 549 || vehmd == 585 || vehmd == 603 || vehmd == 551 || vehmd == 492 || vehmd == 529)
			    {
					AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
				else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 505)
				{ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
				else if(vehmd == 418 || vehmd == 527 || vehmd == 580 || vehmd == 491 || vehmd == 517 || vehmd == 516)
				{CarmodDialog(playerid);}
				else{ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
			}
			case 4:
			{
			    if(vehmd == 549 || vehmd == 550 || vehmd == 585 || vehmd == 603)
			    {ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
			    else if(vehmd == 489 || vehmd == 505 || vehmd == 551 || vehmd == 492 || vehmd == 529 || vehmd == 439 || vehmd == 458 || vehmd == 410 || vehmd == 436)
			    {CarmodDialog(playerid);}
			    else
			    {
					AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
			}
			case 5:
			{
				if(vehmd == 585 || vehmd == 603 || vehmd == 550 || vehmd == 549)
				{CarmodDialog(playerid);}
				else{ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
			}
			case 6: CarmodDialog(playerid);
		}
	}
	if(dialogid == 1010 && response)
	{
		if(listitem == 8) return RegularCarDialog(playerid);
		new Xarray[] = {1000,1001,1002,1003,1014,1015,1016,1023};
		AddVehicleComponent(vehid, Xarray[listitem]);
		return RegularCarDialog(playerid);
	}
	if(dialogid == 1020 && response)
	{
		if(listitem == 4) return RegularCarDialog(playerid);
		new Xarray[] = {1004,1005,1011,1012};
		AddVehicleComponent(vehid, Xarray[listitem]);
		return RegularCarDialog(playerid);
	}
	if(dialogid == 1040 && response)
	{
	    switch(listitem)
	    {
			case 0:
			{
				AddVehicleComponent(vehid, 1142);
				AddVehicleComponent(vehid, 1143);
				return RegularCarDialog(playerid);
			}
			case 1:
			{
				AddVehicleComponent(vehid, 1144);
				AddVehicleComponent(vehid, 1145);
				return RegularCarDialog(playerid);
			}
			case 2: RegularCarDialog(playerid);
		}
	}
	if(dialogid == 1060 && response)
	{
		if(listitem == 2) return RegularCarDialog(playerid);
		new Xarray[] = {1013,1024};
		AddVehicleComponent(vehid, Xarray[listitem]);
		return RegularCarDialog(playerid);
	}
	if(dialogid == 1115 && response)
	{
	    if(listitem == 3) return CarmodDialog(playerid);
		new Parray[] = {0,1,2};
		ChangeVehiclePaintjob(vehid, Parray[listitem]);
		return CarmodDialog(playerid);
	}
	if(dialogid == 1511 && response)
	{
	    if(listitem == 7) return ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
		if(vehmd == 558)//Uranus
		{
			new Varray[] = {1090,1094,1092,1088,1164,1166,1168};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 559)//Jester
		{
            new Varray[] = {1069,1071,1065,1067,1162,1160,1159};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 560)//Sultan
		{
            new Varray[] = {1026,1027,1028,1032,1138,1169,1141};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 561)//Stratum
		{
            new Varray[] = {1056,1062,1064,1055,1058,1155,1154};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 562)//Elegy
		{
            new Varray[] = {1036,1040,1034,1038,1147,1171,1149};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 565)//flashlights
		{
            new Varray[] = {1047,1051,1046,1054,1049,1153,1150};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
	}
	if(dialogid == 1512 && response)
	{
	    if(listitem == 7) return ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
	    if(vehmd == 558)//Uranus
	    {
            new Varray[] = {1093,1095,1089,1091,1163,1165,1167};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 559)//Jester
	    {
            new Varray[] = {1070,1072,1066,1068,1158,1173,1161};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 560)//Sultan
	    {
            new Varray[] = {1031,1030,1029,1033,1139,1170,1140};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 561)//Stratum
	    {
            new Varray[] = {1057,1063,1059,1061,1060,1157,1156};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 562)//Elegy
	    {
            new Varray[] = {1039,1041,1037,1035,1146,1172,1148};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 565)//flashlights
	    {
            new Varray[] = {1048,1052,1045,1053,1050,1152,1151};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	}
	if(dialogid == 1513 && response)
	{
		if(vehmd == 576)
        {
			if(listitem == 5) return Lowrider(playerid);
      		new Varray[] = {1134,1137,1136,1191,1192};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 575)
		{
			if(listitem == 5) return Lowrider(playerid);
  			new Varray[] = {1042,1099,1044,1174,1176};
			AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod2(playerid);
		}
		if(vehmd == 535)
		{
  			if(listitem == 6) return Lowrider(playerid);
  			new Varray[] = {1115,1109,1113,1117,1118,1120};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 567)
		{
		    if(listitem == 5) return Lowrider(playerid);
			new Varray[] = {1129,1133,1102,1187,1189};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 536)
		{
		    if(listitem == 5) return Lowrider(playerid);
			new Varray[] = {1104,1108,1107,1184,1182};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 534)
		{
		    if(listitem == 6) return Lowrider(playerid);
			new Varray[] = {1100,1123,1125,1126,1179,1180};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
	}
	if(dialogid == 1514 && response)
	{
		if(vehmd == 576)
		{
		    if(listitem == 3) return Lowrider(playerid);
  			new Varray[] = {1135,1190,1193};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 575)
		{
		    if(listitem == 3) return Lowrider(playerid);
  			new Varray[] = {1177,1175,1043};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 535)
		{
		    if(listitem == 5) return Lowrider(playerid);
  			new Varray[] = {1110,1116,1114,1119,1121};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
  		if(vehmd == 567)
		{
		    if(listitem == 3) return Lowrider(playerid);
			new Varray[] = {1188,1186,1132};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 536)
		{
		    if(listitem == 3) return Lowrider(playerid);
			new Varray[] = {1181,1183,1105};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 534)
		{
		    if(listitem == 3) return Lowrider(playerid);
			new Varray[] = {1185,1178,1127};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new string[128], idx = gEditID[playerid];
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    SetDynamicObjectPos(objectid, gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		SetDynamicObjectRot(objectid, gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		gPos[playerid][0] = 0; gPos[playerid][1] = 0; gPos[playerid][2] = 0;
		gRot[playerid][0] = 0; gRot[playerid][1] = 0; gRot[playerid][2] = 0;
		format(string, sizeof(string), " You have canceled editing gate ID %d.", idx);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(gEdit[playerid] == 1)
		{
		    GateInfo[idx][gCX] = x;
			GateInfo[idx][gCY] = y;
			GateInfo[idx][gCZ] = z;
			GateInfo[idx][gCRX] = rx;
			GateInfo[idx][gCRY] = ry;
			GateInfo[idx][gCRZ] = rz;
			if(IsValidDynamic3DTextLabel(GateInfo[idx][gText])) DestroyDynamic3DTextLabel(GateInfo[idx][gText]);
			format(string, sizeof(string), "Gate ID: %d", idx);
			GateInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], 10);
		    gEdit[playerid] = 0;
		    gEditID[playerid] = 0;
		    format(string, sizeof(string), " You have finished editing gate ID %d's closing position.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		    GateInfo[idx][gStatus] = 0;
		}
		else if(gEdit[playerid] == 2)
		{
		    GateInfo[idx][gOX] = x;
			GateInfo[idx][gOY] = y;
			GateInfo[idx][gOZ] = z;
			GateInfo[idx][gORX] = rx;
			GateInfo[idx][gORY] = ry;
			GateInfo[idx][gORZ] = rz;
			gEdit[playerid] = 0;
			gEditID[playerid] = 0;
			format(string, sizeof(string), " You have finished editing gate ID %d's opening position.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		    GateInfo[idx][gStatus] = 1;
		}
	}
	idx = oEditID[playerid];
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    SetDynamicObjectPos(objectid, oPos[playerid][0], oPos[playerid][1], oPos[playerid][2]);
		SetDynamicObjectRot(objectid, oRot[playerid][0], oRot[playerid][1], oRot[playerid][2]);
		oPos[playerid][0] = 0; oPos[playerid][1] = 0; oPos[playerid][2] = 0;
		oRot[playerid][0] = 0; oRot[playerid][1] = 0; oRot[playerid][2] = 0;
		format(string, sizeof(string), " You have canceled editing object ID %d.", idx);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(oEdit[playerid] == 1)
		{
            oldoID = ObjInfo[idx][oModel];
		    ObjInfo[idx][oX] = x;
			ObjInfo[idx][oY] = y;
			ObjInfo[idx][oZ] = z;
			ObjInfo[idx][oRX] = rx;
			ObjInfo[idx][oRY] = ry;
			ObjInfo[idx][oRZ] = rz;
  			oldodX = ObjInfo[idx][oX];
  			oldodY = ObjInfo[idx][oY];
  			oldodZ = ObjInfo[idx][oZ];
  			oldodRX = ObjInfo[idx][oRX];
  			oldodRY = ObjInfo[idx][oRY];
  			oldodRZ = ObjInfo[idx][oRZ];
			if(IsValidDynamic3DTextLabel(ObjInfo[idx][oText])) DestroyDynamic3DTextLabel(ObjInfo[idx][oText]);
			format(string, sizeof(string), "Object ID: %d (Model ID: %d)", idx, ObjInfo[idx][oModel]);
			ObjInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ], 10);
		    oEdit[playerid] = 0;
		    oEditID[playerid] = 0;
		    format(string, sizeof(string), " You have finished editing object ID %d's position.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

////////////////////////////////// STOCKS //////////////////////////////////
stock AntiAdv(playerid, text[])
{
    // Anti Adv
    new strR[255], is1=0, r=0;
 	while(strlen(text[is1]))
 	{
  		if('0'<=text[is1]<='9')
  		{
	 		new is2=is1+1, p=0;
	   		while(p==0)
		  	{
		   		if('0'<=text[is2]<='9'&&strlen(text[is2]))
			   	{
				   is2++;
				}
			 	else
			  	{
				   	strmid(strR[r],text,is1,is2,255);
				   	if(strval(strR[r])<255) r++;
				    is1=is2;
				    p=1;
		    	}
		    }
	    }
    	is1++;
 	}
 	if(r>=4)
 	{
	  	new strMy[255];
	  	format(strMy, sizeof(strMy), "AdmWarn: %s is attempting to Server Advertise: %s", RPN(playerid), text);
	  	SendAdminMessage(COLOR_DARKRED, 1, strMy);
	   	new pr2;
	  	for(new z=0;z<r;z++)
	  	{

		   	while((pr2=strfind(text,strR[z],true))!=-1)
			{
				for(new i=pr2,j=pr2+strlen(strR[z]);i<j;i++)
				{
					text[i]='*';
				}
			}
	  	}
	  	return 1;
 	}
 	return 0;
}

stock IsAtFishingSpot(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2, 403.8016,-2088.7976,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 398.7358,-2088.7939,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 396.1771,-2088.7976,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 391.0683,-2088.7974,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 383.4282,-2088.7969,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 374.9623,-2088.7974,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 369.8990,-2088.7976,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 367.3003,-2088.7981,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 362.1855,-2088.7974,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 354.5370,-2088.7983,7.8359)) return 1;
	return 0;
}

stock SendRobberyMessage(color, string[])
{
	foreach(Player, playerid)
	{
	    if(BankRobber[playerid])
	    {
	        SendClientMessage(playerid, color, string);
	    }
	}
	return 1;
}

stock IsHoldingBullets(playerid)
{
	if(GetPlayerWeapon(playerid) < 22) return 0;
	if(GetPlayerWeapon(playerid) > 38) return 0;
	return 1;
}

stock SendGymMessage(color, string[])
{
	foreach(Player, playerid)
	{
		if(GetPlayerInterior(playerid) == 5 && GetPlayerVirtualWorld(playerid) == 1)
		{
		    SendClientMessage(playerid, color, string);
		}
	}
	return 1;
}

stock CreateStrip(Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 0)
  	    {
            SpikeInfo[i][sCreated]=1;
            SpikeInfo[i][sX]=x;
            SpikeInfo[i][sY]=y;
            SpikeInfo[i][sZ]=z-0.7;
            SpikeInfo[i][sObject] = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, Angle-90);
	        return 1;
  	    }
  	}
  	return 0;
}

stock DeleteAllStrip()
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 1)
  	    {
  	        SpikeInfo[i][sCreated]=0;
            SpikeInfo[i][sX]=0.0;
            SpikeInfo[i][sY]=0.0;
            SpikeInfo[i][sZ]=0.0;
            DestroyDynamicObject(SpikeInfo[i][sObject]);
  	    }
	}
    return 1;
}

stock DeleteClosestStrip(playerid)
{
	new done, string[128];
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 2.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
        {
  	        if(SpikeInfo[i][sCreated] == 1)
            {
                SpikeInfo[i][sCreated]=0;
                SpikeInfo[i][sX]=0.0;
                SpikeInfo[i][sY]=0.0;
                SpikeInfo[i][sZ]=0.0;
                DestroyDynamicObject(SpikeInfo[i][sObject]);
                format(string, sizeof(string), "NYPD: %s has removed a spike strip.", RPN(playerid));
 				SendCopMessage(COLOR_BLUE, string);
 				done = 1;
  	        }
  	    }
  	}
  	if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a spike strip.");
    return 1;
}

stock DeleteAllCBK()
{
    for(new i = 0; i < sizeof(BlockadeInfo); i++)
  	{
  	    if(BlockadeInfo[i][bbCreated] == 1)
  	    {
  	        BlockadeInfo[i][bbCreated]=0;
            BlockadeInfo[i][bbX]=0.0;
            BlockadeInfo[i][bbY]=0.0;
            BlockadeInfo[i][bbZ]=0.0;
            DestroyDynamicObject(BlockadeInfo[i][bbObject]);
  	    }
	}
    return 1;
}


stock DeleteClosestCBK(playerid)
{
	new done, string[128];
    for(new i = 0; i < sizeof(BlockadeInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 5.0, BlockadeInfo[i][bbX], BlockadeInfo[i][bbY], BlockadeInfo[i][bbZ]))
        {
  	        if(BlockadeInfo[i][bbCreated] == 1)
            {
                BlockadeInfo[i][bbCreated]=0;
                BlockadeInfo[i][bbX]=0.0;
                BlockadeInfo[i][bbY]=0.0;
                BlockadeInfo[i][bbZ]=0.0;
                DestroyDynamicObject(BlockadeInfo[i][bbObject]);
                format(string, sizeof(string), "NYPD: %s has removed a barricade.", RPN(playerid));
 				SendCopMessage(COLOR_BLUE, string);
 				done = 1;
  	        }
  	    }
  	}
  	if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a barricade.");
    return 1;
}

stock CreateCBK(Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(BlockadeInfo); i++)
  	{
  	    if(BlockadeInfo[i][bbCreated] == 0)
  	    {
            BlockadeInfo[i][bbCreated]=1;
            BlockadeInfo[i][bbX]=x;
            BlockadeInfo[i][bbY]=y;
            BlockadeInfo[i][bbZ]=z;
            BlockadeInfo[i][bbObject] = CreateDynamicObject(981, x, y, z, 0, 0, Angle+180);
	        return 1;
  	    }
  	}
  	return 0;
}

encode_tires(tires1, tires2, tires3, tires4) {

	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);

}

stock Bikes(carid)
{
    if(GetVehicleModel(carid) == 448 || GetVehicleModel(carid) == 461 || GetVehicleModel(carid) == 462 || GetVehicleModel(carid) == 463 || GetVehicleModel(carid) == 468 || GetVehicleModel(carid) == 481 || GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 510 || GetVehicleModel(carid) == 521 || GetVehicleModel(carid) == 522 || GetVehicleModel(carid) == 581 || GetVehicleModel(carid) == 586)
	{
	    return 1;
	}
	return 0;
}
stock IsATowTruck(carid)
{
	if(GetVehicleModel(carid) == 485 || GetVehicleModel(carid) == 525 || GetVehicleModel(carid) == 583 || GetVehicleModel(carid) == 574)
	{
		return 1;
	}
	return 0;
}
stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new x = 0;
	new ip_count = 0;
	for(x=0; x<MAX_PLAYERS; x++) {
		if(IsPlayerConnected(x)) {
		    GetPlayerIp(x,against_ip,32);
		    if(!strcmp(against_ip,test_ip)) ip_count++;
		}
	}
	return ip_count;
}

stock AntiTPCheck(playerid)
{
	if(AntiTP[playerid])
	{
	    new string[128];
		format(string, sizeof(string), "AdmCmd: %s has been auto-banned by MOLE, reason: TP Hacks", RPN(playerid));
        SendClientMessageToAll(COLOR_LIGHTRED, string);
        Log("logs/ban.log", string);
		// Banreason
		new file[32];
		format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		dini_Set(file, "BanReason", "TP Hacks");
		dini_Set(file, "BannedBy", "AutoBan");
		PlayerInfo[playerid][pBanned] = 1;
        AddBan(playerid);
        Kick(playerid);
	}
	return 1;
}
stock SaveMOTDS()
{
	new file[16];
	format(file, sizeof(file), "motds.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "Server", ServerMOTD);
	dini_Set(file, "NYPD", NYPDMOTD);
	dini_Set(file, "GOV", GOVMOTD);
	dini_Set(file, "HA", HAMOTD);
	dini_Set(file, "Admin", AdminMOTD);
	dini_Set(file, "Login", LoginMOTD);
	print("MOTDs saved successfully.");
}
stock LoadMOTDS()
{
	new file[16];
	format(file, sizeof(file), "motds.cfg");
	format(ServerMOTD, 128, "%s", dini_Get(file, "Server"));
	format(NYPDMOTD, 128, "%s", dini_Get(file, "NYPD"));
	format(GOVMOTD, 128, "%s", dini_Get(file, "GOV"));
	format(HAMOTD, 128, "%s", dini_Get(file, "HA"));
	format(AdminMOTD, 128, "%s", dini_Get(file, "Admin"));
	format(LoginMOTD, 128, "%s", dini_Get(file, "Login"));
	print("MOTDs loaded successfully.");
}
stock LoadDrugs()
{
	new file[32];
	format(file, sizeof(file), "drugs.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	Weed = dini_Int(file, "Weed");
	cocaine = dini_Int(file, "cocaine");
	print("Drugs loaded successfully.");
	return 1;
}
stock SaveDrugs()
{
	new file[32];
	format(file, sizeof(file), "drugs.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_IntSet(file, "Weed", Weed);
	dini_IntSet(file, "cocaine", cocaine);
	print("Drugs saved successfully.");
	return 1;
}

stock LoadProducts()
{
	new file[32];
	format(file, sizeof(file), "products.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	Products = dini_Int(file, "Products");
	print("Products loaded successfully.");
	return 1;
}
stock SaveProducts()
{
	new file[32];
	format(file, sizeof(file), "products.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_IntSet(file, "Products", Products);
	print("Products saved successfully.");
	return 1;
}


stock LoadStaticVehicles()
{

    // DMV Vehicles

    DMVCar[0] = CreateVehicle(445,961.0397,-1424.1102,13.4219,40.3043,50,92,300); //
    DMVCar[1] = CreateVehicle(445,961.9089,-1420.3315,13.4219,39.0286,50,92,300); //
    DMVCar[2] = CreateVehicle(445,962.1738,-1416.4852,13.3276,38.6078,50,92,300); //
	/*CreateVehicle(404,2052.8206,-1903.9745,13.3249,359.6511-180,182,1,300); // Car1
	CreateVehicle(404,2056.1641,-1903.9946,13.3470,359.6512-180,182,1,300); // Car2
	CreateVehicle(404,2059.3220,-1904.0138,13.3470,359.6512-180,182,1,300); // Car3
	CreateVehicle(404,2062.5098,-1904.0331,13.3470,359.6512-180,182,1,300); // Car4
	CreateVehicle(404,2065.6597,-1904.0526,13.3470,359.6512-180,182,1,300); // Car5*/
	DLCar[0] = CreateVehicle(463,269.3575,2943.3687,2.3432,200.6193,0,0,2000); //
    DLCar[1] = CreateVehicle(462,268.0153,2944.0510,2.4257,209.1020,0,0,2000); //
    DLCar[2] = CreateVehicle(468,266.6923,2943.8564,2.5005,206.3087,0,0,2000); //
    DLCar[3] = CreateVehicle(461,265.4766,2943.6438,2.4122,211.9967,0,0,2000); //
    DLCar[4] = CreateVehicle(415,259.2484,2945.7798,2.8151,325.1754,0,0,2000); //
    DLCar[5] = CreateVehicle(411,252.9453,2945.3513,2.5888,328.1379,0,0,2000); //
    DLCar[6] = CreateVehicle(451,247.7776,2945.7351,3.0382,331.7130,0,0,2000); //
    DLCar[7] = CreateVehicle(477,247.4946,2956.5476,2.6425,204.7372,0,0,2000); //
    DLCar[8] = CreateVehicle(541,252.6839,2957.2759,2.5021,208.7796,0,0,2000); //
    DLCar[9] = CreateVehicle(429,256.9201,2957.3479,2.5422,214.6277,0,0,2000); //
    DLCar[10] = CreateVehicle(603,261.6611,2957.3247,2.6840,218.8644,0,0,2000); //
    DLCar[11] = CreateVehicle(411,347.5634,2935.0889,46.5648,90.6536,0,0, 2000); //
	// Police Vehicles
	FacInfo[1][fCars][0] = CreateVehicle(596,1601.9502,-1683.9442,5.5580,90.0662,0,1,1200); // Crusier1
	FacInfo[1][fCars][1] = CreateVehicle(596,1601.9349,-1688.1353,5.5585,89.8182,0,1,1200); // Crusier2
	FacInfo[1][fCars][2] = CreateVehicle(596,1602.0319,-1691.9169,5.5580,90.1704,0,1,1200); // Crusier3
	FacInfo[1][fCars][3] = CreateVehicle(596,1602.1292,-1695.9916,5.5580,88.9515,0,1,1200); // Crusier4
	FacInfo[1][fCars][4] = CreateVehicle(596,1602.1547,-1700.2701,5.5580,89.4748,0,1,1200); // Crusier5
	FacInfo[1][fCars][5] = CreateVehicle(596,1602.0511,-1704.3525,5.5580,88.4754,0,1,1200); // Crusier6
	FacInfo[1][fCars][6] = CreateVehicle(599,1585.2120,-1667.6892,6.1291,270.2057,0,1,1200); // Ranger1
	FacInfo[1][fCars][7] = CreateVehicle(599,1585.1547,-1671.9965,6.1323,271.1247,0,1,1200); // Ranger2
	FacInfo[1][fCars][8] = CreateVehicle(523,1530.0715,-1688.0465,5.4559,267.5331,1,0,1200); // Bike1
	FacInfo[1][fCars][9] = CreateVehicle(523,1526.7520,-1688.0627,5.4582,268.2188,1,0,1200); // Bike2
	FacInfo[1][fCars][10] = CreateVehicle(523,1529.9504,-1683.8184,5.4578,271.5452,1,0,1200); // Bike3
	FacInfo[1][fCars][11] = CreateVehicle(523,1526.6595,-1683.8164,5.4625,271.1716,1,0,1200); // Bike4
	FacInfo[1][fCars][12] = CreateVehicle(411,1545.3519,-1680.2714,5.6263,88.9375,0,1,1200); // Speed1Infernus
	FacInfo[1][fCars][13] = CreateVehicle(411,1545.3575,-1676.2065,5.6263,90.4601,0,1,1200); // Speed2Infernus
	FacInfo[1][fCars][14] = CreateVehicle(541,1545.1260,-1672.0992,5.5249,90.8087,0,1,1200); // Speed3Bullet
	FacInfo[1][fCars][15] = CreateVehicle(541,1545.1002,-1667.9021,5.5249,90.8901,0,1,1200); // Speed4Bullet
	FacInfo[1][fCars][16] = CreateVehicle(601,1545.0055,-1662.9552,5.6769,88.8576,0,0,1200); // Splashy1
	FacInfo[1][fCars][17] = CreateVehicle(601,1544.9072,-1658.9329,5.6780,88.7145,0,0,1200); // Splashy2
	FacInfo[1][fCars][18] = CreateVehicle(601,1545.0282,-1655.0873,5.6767,89.4033,0,0,1200); // Splashy3
	FacInfo[1][fCars][19] = CreateVehicle(601,1545.0804,-1651.2063,5.6920,90.5362,0,0,1200); // Splashy4
	FacInfo[1][fCars][20] = CreateVehicle(427,1538.9954,-1644.9917,6.0463,180.4178,0,1,1200); // Enforcer1
	FacInfo[1][fCars][21] = CreateVehicle(427,1534.8733,-1644.9760,6.0481,179.3436,0,1,1200); // Enforcer2
	FacInfo[1][fCars][22] = CreateVehicle(427,1531.0992,-1645.0317,6.0463,179.9259,0,1,1200); // Enforcer3
	FacInfo[1][fCars][23] = CreateVehicle(427,1526.8904,-1645.1100,6.0463,180.7001,0,1,1200); // Enforcer4
	FacInfo[1][fCars][24] = CreateVehicle(497,1550.4070,-1707.7499,28.6315,90.2970,0,1,1200); // MAV 1
	FacInfo[1][fCars][25] = CreateVehicle(497,1550.4070,-1644.1296,28.6315,90.2970,0,1,1200); // MAV 2
	for(new i=16; i < 24; i++) // Splashy & Enforcer can't be blown up
	{
	    SetVehicleHealth(FacInfo[1][fCars][i], 9999999);
	}
	// Trucker Vehicles
	JobInfo[JOB_TRUCKER][jCars][0] = CreateVehicle(498,-499.70001221,-472.20001221,25.60000038,179.99993896,1,3,1800); // Truck 1
	JobInfo[JOB_TRUCKER][jCars][1] = CreateVehicle(498,-494.70001221,-472.29998779,25.60000038,179.99450684,1,3,1800); // Truck 2
	JobInfo[JOB_TRUCKER][jCars][2] = CreateVehicle(498,-489.70001221,-472.39999390,25.60000038,179.99450684,1,3,1800); // Truck 3
	JobInfo[JOB_TRUCKER][jCars][3] = CreateVehicle(498,-484.79998779,-472.29998779,25.60000038,179.99450684,1,3,1800); // Truck 4
	JobInfo[JOB_TRUCKER][jCars][4] = CreateVehicle(498,-479.29998779,-472.70001221,25.60000038,179.99450684,1,3,1800); // Truck 5
	JobInfo[JOB_TRUCKER][jCars][5] = CreateVehicle(498,-474.50000000,-472.70001221,25.60000038,179.99450684,1,3,1800); // Truck 6
	JobInfo[JOB_TRUCKER][jCars][6] = CreateVehicle(498,-469.50000000,-472.29998779,25.60000038,179.99450684,1,3,1800); // Truck 7
	JobInfo[JOB_TRUCKER][jCars][7] = CreateVehicle(498,-504.20001221,-472.10000610,25.60000038,179.99450684,1,3,1800); // Truck 8
	JobInfo[JOB_TRUCKER][jCars][8] = CreateVehicle(498,-509.00000000,-472.10000610,25.60000038,179.99450684,1,3,1800); // Truck 9

	JobInfo[JOB_TRUCKER][jTrailers][0] = CreateVehicle(591,1681.1849,2317.3940,11.4272,270.1179,1,1,1800); // Trailer1
	JobInfo[JOB_TRUCKER][jTrailers][1] = CreateVehicle(591,1681.1752,2322.2817,11.4272,270.1179,1,1,1800); // Trailer2
	JobInfo[JOB_TRUCKER][jTrailers][2] = CreateVehicle(591,1681.1609,2329.4038,11.4273,270.1179,1,1,1800); // Trailer3
	JobInfo[JOB_TRUCKER][jTrailers][3] = CreateVehicle(591,1681.1484,2335.4326,11.4273,270.1179,1,1,1800); // Trailer4
	JobInfo[JOB_TRUCKER][jTrailers][4] = CreateVehicle(591,1681.1273,2345.6333,11.4274,270.1179,1,1,1800); // Trailer5
	JobInfo[JOB_TRUCKER][jTrailers][5] = CreateVehicle(591,1681.1165,2350.6311,11.4275,270.1179,1,1,1800); // Trailer6
	JobInfo[JOB_TRUCKER][jTrailers][6] = CreateVehicle(591,1681.1041,2356.6460,11.4275,270.1179,1,1,1800); // Trailer7
	JobInfo[JOB_TRUCKER][jTrailers][7] = CreateVehicle(591,1681.0917,2362.5952,11.4276,270.1179,1,1,1800); // Trailer8
	JobInfo[JOB_TRUCKER][jTrailers][8] = CreateVehicle(591,1681.0798,2368.3921,11.4276,270.1179,1,1,1800); // Trailer9
	// SA News Vehicles
	FacInfo[4][fCars][0] = CreateVehicle(582,770.3323,-1334.0879,13.5999,178.7927,1,3,1800); // News1
	FacInfo[4][fCars][1] = CreateVehicle(582,765.2671,-1333.9707,13.6022,178.8279,1,3,1800); // News2
	FacInfo[4][fCars][2] = CreateVehicle(582,760.0087,-1333.8882,13.5979,178.7898,1,3,1800); // News3
	FacInfo[4][fCars][3] = CreateVehicle(582,754.6099,-1333.7980,13.5991,180.2735,1,3,1800); // News4
	FacInfo[4][fCars][4] = CreateVehicle(582,749.0009,-1333.7161,13.5978,180.0546,1,3,1800); // News5
	FacInfo[4][fCars][5] = CreateVehicle(582,743.3420,-1333.6884,13.5983,180.0397,1,3,1800); // News6
	FacInfo[4][fCars][6] = CreateVehicle(488,743.7799,-1365.5004,25.8675,270.3967,1,3,1800); // News7
	FacInfo[4][fCars][7] = CreateVehicle(488,736.9495,-1376.4574,25.8464,182.8519,1,3,1800); // News8
	//LSFMD
	FacInfo[5][fCars][0] = CreateVehicle(416,1544.3696,-2167.7627,13.8116,271.1999,1,3,1800); //
    FacInfo[5][fCars][1] = CreateVehicle(416,1536.0746,-2167.7065,13.8099,269.7206,1,3,1800); //
    FacInfo[5][fCars][2] = CreateVehicle(416,1565.4895,-2156.2505,13.8175,90.6293,1,3,1800); //
    FacInfo[5][fCars][3] = CreateVehicle(416,1566.3517,-2170.3555,13.8172,94.6679,1,3,1800); //
    FacInfo[5][fCars][4] = CreateVehicle(407,1502.6494,-2173.6982,13.9037,271.0314,3,1,1800); //
    FacInfo[5][fCars][5] = CreateVehicle(407,1502.4053,-2164.8721,13.8977,269.5830,3,1,1800); //
    FacInfo[5][fCars][6] = CreateVehicle(407,1502.2559,-2157.0952,13.8976,272.1750,3,1,1800); //
    FacInfo[5][fCars][7] = CreateVehicle(554,1543.8492,-2155.1265,13.7590,270.0978,3,1,1800); //
    //FBI
	FacInfo[6][fCars][0] = CreateVehicle(490,277.9093,-1534.6960,24.7224,235.6933,0,0,1800); // Crusier1
	FacInfo[6][fCars][1] = CreateVehicle(490,280.4446,-1530.6389,24.7215,235.2771,0,0,1800); // Crusier2
	FacInfo[6][fCars][2] = CreateVehicle(490,283.8042,-1525.8804,24.7209,239.8061,0,0,1800); // Crusier3
	FacInfo[6][fCars][3] = CreateVehicle(490,286.8596,-1520.9247,24.7211,237.2097,0,0,1800); // Crusier4
	FacInfo[6][fCars][4] = CreateVehicle(490,289.7007,-1517.2433,24.7208,237.6186,0,0,1800); // Crusier5
	FacInfo[6][fCars][5] = CreateVehicle(490,293.4392,-1511.9681,24.7203,236.0621,0,0,1800); // Crusier6
	FacInfo[6][fCars][6] = CreateVehicle(490,296.6220,-1507.5754,24.7218,235.9558,0,0,1800); // Ranger1
	FacInfo[6][fCars][7] = CreateVehicle(490,299.1577,-1503.3811,24.7246,233.7731,0,0,1800); // Ranger2
	FacInfo[6][fCars][8] = CreateVehicle(482,306.7863,-1482.0126,24.7157,233.0690,0,0,1800); // Bike1
	FacInfo[6][fCars][9] = CreateVehicle(482,303.4234,-1486.2443,24.7189,230.0274,0,0,1800); // Crusier1
	FacInfo[6][fCars][10] = CreateVehicle(482,299.8791,-1490.9097,24.7127,235.3550,0,0,1800); // Crusier2
	FacInfo[6][fCars][11] = CreateVehicle(415,290.6374,-1544.9396,24.3657,51.7797,0,0,1800); // Crusier3
	FacInfo[6][fCars][12] = CreateVehicle(415,294.3134,-1540.0664,24.3660,53.3037,0,0,1800); // Crusier4
	FacInfo[6][fCars][13] = CreateVehicle(415,297.0275,-1535.8566,24.3646,55.5060,0,0,1800); // Crusier5
    // NG
    FacInfo[7][fCars][0] = CreateVehicle(470,1099.2081,-1775.6332,13.3372,89.1093,1,1,1800); //
    FacInfo[7][fCars][1] = CreateVehicle(470,1099.3386,-1772.4625,13.3381,89.3140,1,1,1800); //
    FacInfo[7][fCars][2] = CreateVehicle(470,1099.3058,-1769.6118,13.3400,90.3356,1,1,1800); //
    FacInfo[7][fCars][3] = CreateVehicle(470,1099.3306,-1766.7532,13.3403,91.3772,1,1,1800); //
    FacInfo[7][fCars][4] = CreateVehicle(470,1099.0802,-1764.0021,13.3423,90.8484,1,1,1800); //
    FacInfo[7][fCars][5] = CreateVehicle(433,1079.8441,-1760.8406,13.8160,271.0744,1,1,1800); //
    FacInfo[7][fCars][6] = CreateVehicle(433,1079.7682,-1772.5907,13.7876,269.9431,1,1,1800); //
/*	// Government Vehicles
	FacInfo[2][fCars][0] = CreateVehicle(507,1454.8049,-1749.6432,13.4354,359.8442,0,0,1800); // Gov 1
	FacInfo[2][fCars][1] = CreateVehicle(507,1507.4797,-1749.7860,13.4354,359.8442,0,0,1800); // Gov 2
	FacInfo[2][fCars][2] = CreateVehicle(579,1253.69995117,-2042.50000000,59.70000076,0.00000000,0,0,1800); //Huntley
    FacInfo[2][fCars][3] = CreateVehicle(409,1248.59997559,-2034.19995117,59.59999847,0.00000000,0,0,1800); //Stretch
    FacInfo[2][fCars][4] = CreateVehicle(579,1244.19995117,-2042.40002441,59.70000076,0.00000000,0,0,1800); //Huntley
    FacInfo[2][fCars][5] = CreateVehicle(579,1253.69995117,-2026.09997559,59.70000076,0.00000000,0,0,1800); //Huntley
    FacInfo[2][fCars][6] = CreateVehicle(579,1243.80004883,-2025.09997559,59.70000076,0.00000000,0,0,1800); //Huntley
    FacInfo[2][fCars][7] = CreateVehicle(579,1248.50000000,-2022.30004883,59.70000076,0.00000000,0,0,1800); //Huntley
    FacInfo[2][fCars][8] = CreateVehicle(426,1253.50000000,-2035.19995117,59.40000153,0.00000000,0,0,1800); //Premier
    FacInfo[2][fCars][9] = CreateVehicle(426,1244.00000000,-2034.69995117,59.59999847,0.00000000,0,0,1800); //Premier
    FacInfo[2][fCars][10] = CreateVehicle(487,1116.80004883,-2052.39990234,74.50000000,0.00000000,0,0,1800); //Maverick
    FacInfo[2][fCars][11] = CreateVehicle(487,1116.50000000,-2021.00000000,74.50000000,181.75000000,0,0,1800); //Maverick
    FacInfo[2][fCars][12] = CreateVehicle(461,1250.80004883,-2042.50000000,59.40000153,0.00000000,0,0,1800); //PCJ-600
    FacInfo[2][fCars][13] = CreateVehicle(461,1246.80004883,-2042.09997559,59.40000153,0.00000000,0,0,1800); //PCJ-600*/
	//Vehicles
	CreateVehicle(466,1607.19995117,-1651.50000000,13.50000000,90.00000000,0,0,1800); //Glendale
	CreateVehicle(526,1361.00000000,-1643.40002441,13.19999981,270.00000000,0,0,1800); //Fortune
	CreateVehicle(400,1012.79998779,-1368.50000000,13.50000000,0.00000000,0,0,1800); //Landstalker
	CreateVehicle(421,200.19999695,-1440.40002441,13.10000038,318.00000000,0,0,1800); //Washington
	CreateVehicle(421,214.29980469,-1425.39941406,13.30000019,313.99475098,0,0,1800); //Washington
	CreateVehicle(400,1281.80004883,-1295.90002441,13.50000000,0.00000000,0,0,1800); //Landstalker
    CreateVehicle(400,1277.90002441,-1295.69995117,13.50000000,0.00000000,0,0,1800); //Landstalker
    CreateVehicle(475,1282.69995117,-1369.69995117,13.30000019,0.00000000,0,0,1800); //Sabre
    CreateVehicle(496,1283.80004883,-1317.69995117,13.19999981,0.00000000,0,0,1800); //Blista Compact
    CreateVehicle(496,1275.19995117,-1317.59997559,13.30000019,0.00000000,0,0,1800); //Blista Compact
    CreateVehicle(428,1385.00000000,-1016.00000000,27.00000000,355.50000000,1,0,1800); //Securicar
    CreateVehicle(496,1748.19995117,-1045.40002441,23.70000076,0.00000000,-1,-1,1800); //Blista Compact
    CreateVehicle(496,1775.69995117,-1021.50000000,23.70000076,330.00000000,-1,-1,1800); //Blista Compact
    CreateVehicle(463,2295.80004883,-1647.19995117,14.39999962,0.00000000,3,0,1800); //Freeway
    CreateVehicle(463,2297.50000000,-1647.19995117,14.39999962,0.00000000,3,0,1800); //Freeway
    CreateVehicle(463,2299.50000000,-1647.19995117,14.39999962,0.00000000,3,0,1800); //Freeway
    CreateVehicle(463,2295.39990234,-1629.90002441,14.30000019,178.00000000,3,0,1800); //Freeway
    CreateVehicle(463,2297.89990234,-1630.69995117,14.30000019,177.99499512,3,0,1800); //Freeway
    CreateVehicle(463,2300.89990234,-1630.69995117,14.30000019,177.99499512,3,0,1800); //Freeway
    CreateVehicle(517,1255.09997559,-803.90002441,84.09999847,0.00000000,11,1,1800); //Majestic
    CreateVehicle(517,1248.30004883,-803.79998779,84.09999847,0.00000000,11,1,1800); //Majestic
    CreateVehicle(542,2767.60009766,-1874.40002441,9.60000038,0.00000000,-1,-1,1800); //f
    CreateVehicle(542,2748.10009766,-1874.30004883,9.60000038,0.00000000,-1,-1,1800); //f
    CreateVehicle(495,452.39999390,-1810.00000000,6.09999990,0.00000000,-1,-1,1800); //Sandking
    CreateVehicle(495,444.29998779,-1809.80004883,6.09999990,0.00000000,-1,-1,1800); //Sandking
    CreateVehicle(466,2025.50000000,-1295.90002441,20.79999924,0.00000000,-1,-1,1800); //Glendale
    CreateVehicle(466,2025.40002441,-1287.30004883,20.79999924,0.00000000,-1,-1,1800); //Glendale
    CreateVehicle(475,2105.60009766,-1364.69995117,23.89999962,0.00000000,-1,-1,1800); //Sabre
    CreateVehicle(579,2095.89990234,-1363.59997559,23.89999962,0.00000000,0,-1,1800); //Huntley
    CreateVehicle(560,285.89999390,-1594.09997559,32.59999847,0.00000000,1,-1,1800); //Sultan
    CreateVehicle(525, 2282.9084, -2351.3218, 13.4, 225.36, 1, 79, 900); // TowTruck Pos
	CreateVehicle(525, 2289.9924, -2344.1809, 13.4, 225.36, 1, 79, 900); // TowTruck Pos
	CreateVehicle(525, 2297.6077, -2336.4568, 13.4, 225.36, 1, 79, 900); // TowTruck Pos
	print("Static vehicles loaded.");
	return 1;
}
stock LoadObjects() // Objects
{
    // Mapper load 2
	CreateDynamicObject(19273,1330.114379,-634.619018,109.601280,0.199983,-0.400000,-162.900054);
	CreateDynamicObject(19273,1330.114379,-634.619018,109.601280,0.199983,-0.400000,-162.900054);
	CreateDynamicObject(2773,263.180603,2954.596923,2.349677,0.100000,0.399998,-74.999893);
	CreateDynamicObject(2773,262.153930,2960.080078,2.361520,0.100000,0.399998,35.399990);
	CreateDynamicObject(2773,263.515319,2958.164306,2.357419,0.100000,0.399998,35.399990);
	CreateDynamicObject(19273,-686.574035,943.727539,13.979619,0.000000,0.000000,-179.700012);
	CreateDynamicObject(2773,264.315460,2956.063964,2.354963,0.100000,0.399998,9.599987);
	CreateDynamicObject(2773,260.897491,2954.838378,2.363675,-0.199999,-0.100000,-101.999893);
	CreateDynamicObject(2773,258.591400,2954.863525,2.371912,-0.199999,-0.100000,-77.399963);
	CreateDynamicObject(2773,256.278381,2954.892578,2.379384,-0.199999,-0.100000,-102.499816);
	CreateDynamicObject(2773,253.977493,2954.855468,2.387341,-0.199999,-0.100000,-76.599845);
	CreateDynamicObject(2773,251.710800,2954.318115,2.395473,-0.199999,-0.100000,-67.699897);
	CreateDynamicObject(2773,249.477462,2953.671386,2.403243,-0.199999,-0.100000,-75.799873);
	CreateDynamicObject(2773,247.215026,2953.737060,2.411463,-0.199999,-0.100000,-118.299865);
	CreateDynamicObject(2773,245.378952,2955.155273,2.419301,-0.199999,-0.100000,-133.099868);
	CreateDynamicObject(2773,269.525177,2945.559570,2.361021,0.000000,0.000000,-89.899932);
	CreateDynamicObject(2773,267.155303,2945.553222,2.361021,0.000000,0.000000,-89.899932);
	CreateDynamicObject(2773,264.964904,2944.834960,2.361021,0.000000,0.000000,-52.500038);
	CreateDynamicObject(2773,265.272857,2943.069824,2.361021,0.000000,0.000000,40.799995);
	CreateDynamicObject(19377,258.096160,2956.277343,5.353744,0.000000,-89.999893,1.200000);
	CreateDynamicObject(19377,270.439025,2946.846923,5.353734,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19377,259.969879,2946.846923,5.353740,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19377,249.520339,2946.846923,5.353744,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19377,249.520339,2956.395507,5.353744,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19377,268.358978,2953.129150,5.353734,0.000000,-89.999893,0.000000);
	CreateDynamicObject(2773,260.176940,2943.336425,2.361021,0.000000,0.000000,-32.099987);
	CreateDynamicObject(2773,261.447692,2945.416503,2.361021,0.000000,0.000000,-32.099987);
	CreateDynamicObject(2773,261.745758,2947.550781,2.361021,0.000000,0.000000,22.500051);
	CreateDynamicObject(2773,260.008422,2948.643798,2.361021,0.000000,0.000000,82.099952);
	CreateDynamicObject(2773,257.668945,2948.613281,2.361021,0.000000,0.000000,92.899841);
	CreateDynamicObject(2773,255.281875,2948.493652,2.371021,0.099999,0.000000,92.899841);
	CreateDynamicObject(2773,252.894714,2948.375000,2.375190,0.099999,0.000000,92.899841);
	CreateDynamicObject(2773,250.525802,2948.519531,2.389413,0.199999,0.000000,80.199913);
	CreateDynamicObject(2773,248.201522,2948.644287,2.397686,0.199999,0.000000,92.299774);
	CreateDynamicObject(2773,245.803436,2948.546875,2.406063,0.199999,0.000000,92.299774);
	CreateDynamicObject(19435,265.533264,2961.210205,4.701930,91.700065,0.000000,-90.100067);
	CreateDynamicObject(19377,276.049011,2956.456054,5.353724,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19451,270.914123,2956.458007,7.179666,0.000000,0.000000,0.000000);
	CreateDynamicObject(19451,270.914123,2946.861083,7.169669,0.000000,0.000000,0.000000);
	CreateDynamicObject(19451,266.269470,2942.096679,7.179666,0.000000,0.000000,-89.900070);
	CreateDynamicObject(19451,256.639587,2942.079833,7.169669,0.000000,0.000000,-89.900070);
	CreateDynamicObject(19451,249.078552,2942.057617,7.159667,0.000000,0.000000,-89.900070);
	CreateDynamicObject(19451,244.325881,2946.947265,7.159667,0.000000,0.000000,-179.900161);
	CreateDynamicObject(19451,244.309066,2956.570068,7.159667,0.000000,0.000000,-179.900161);
	CreateDynamicObject(19451,249.045822,2961.120361,7.159667,0.000000,0.000000,-90.100067);
	CreateDynamicObject(19451,258.665649,2961.109863,7.159667,0.000000,0.000000,-90.100067);
	CreateDynamicObject(19451,266.895446,2961.114501,7.159667,0.000000,0.000000,-90.100067);
	CreateDynamicObject(19435,269.034576,2961.210205,4.735805,91.700065,0.000000,-90.100067);
	CreateDynamicObject(19273,1113.072265,-743.033447,100.372917,0.000000,0.000000,-90.200057);
	CreateDynamicObject(19377,1533.531860,-1470.830200,8.470005,0.000000,89.999984,0.000000);
	CreateDynamicObject(19377,1523.052246,-1461.211669,8.470005,0.000000,89.999984,0.000000);
	CreateDynamicObject(19377,1512.582763,-1461.211669,8.470005,0.000000,89.999984,0.000000);
	CreateDynamicObject(19377,1523.013305,-1480.429565,8.470005,0.000000,89.999984,0.000000);
	CreateDynamicObject(19377,1512.582763,-1470.820678,8.470005,0.000000,89.999984,0.000000);
	CreateDynamicObject(19377,1512.582763,-1480.429565,8.470005,0.000000,89.999984,0.000000);
	CreateDynamicObject(19443,1529.025024,-1467.575805,9.555952,0.000000,0.000000,89.900024);
	CreateDynamicObject(19377,1523.052246,-1470.830200,8.470005,0.000000,89.999984,0.000000);
	CreateDynamicObject(19377,1533.531860,-1462.806396,9.895029,18.100002,89.999984,0.000000);
	CreateDynamicObject(19377,1533.531860,-1480.448364,8.470005,0.000000,89.999984,0.000000);
	CreateDynamicObject(19377,1544.032226,-1480.448364,8.470005,0.000000,89.999984,0.000000);
	CreateDynamicObject(19377,1544.032226,-1470.838745,8.470005,0.000000,89.999984,0.000000);
	CreateDynamicObject(19443,1529.025024,-1467.575805,13.035943,0.000000,0.000000,89.900024);
	CreateDynamicObject(19435,1531.490844,-1456.033691,12.026677,12.500000,90.099998,0.000000);
	CreateDynamicObject(19377,1544.002075,-1462.806396,9.895029,18.100002,89.999984,0.000000);
	CreateDynamicObject(19435,1531.472412,-1457.563598,11.608057,18.200006,90.099998,0.000000);
	CreateDynamicObject(19435,1534.951660,-1457.561401,11.602293,18.200006,90.099998,0.000000);
	CreateDynamicObject(19435,1538.411254,-1457.559326,11.596549,18.200006,90.099998,0.000000);
	CreateDynamicObject(19435,1538.411254,-1456.031982,12.014883,12.500000,90.099998,0.000000);
	CreateDynamicObject(19435,1534.940917,-1456.033203,12.020792,12.500000,90.099998,0.000000);
	CreateDynamicObject(19435,1538.491943,-1454.462524,12.301401,7.599997,90.099998,0.000000);
	CreateDynamicObject(19435,1531.490844,-1454.463134,12.313508,7.599997,90.099998,0.000000);
	CreateDynamicObject(19435,1528.051757,-1452.908935,12.426156,-0.599994,90.199996,0.000000);
	CreateDynamicObject(19435,1534.991577,-1454.462768,12.307456,7.599997,90.099998,0.000000);
	CreateDynamicObject(3499,1534.343627,-1452.485473,17.674591,0.000000,90.400009,0.000000);
	CreateDynamicObject(19435,1538.512084,-1452.908935,12.389651,-0.599994,90.199996,0.000000);
	CreateDynamicObject(19435,1535.011962,-1452.908935,12.401865,-0.599994,90.199996,0.000000);
	CreateDynamicObject(19435,1531.572265,-1452.908935,12.413866,-0.599994,90.199996,0.000000);
	CreateDynamicObject(19435,1531.552001,-1452.038696,12.404829,-0.599994,90.199996,0.000000);
	CreateDynamicObject(1432,1109.862182,-746.477539,99.262939,0.000000,0.000000,0.000000);
	CreateDynamicObject(19435,1538.512084,-1452.038696,12.380537,-0.599994,90.199996,0.000000);
	CreateDynamicObject(19435,1535.022094,-1452.038696,12.392719,-0.599994,90.199996,0.000000);
	CreateDynamicObject(19462,1528.294311,-1453.227172,10.275950,0.000000,0.000000,0.000000);
	CreateDynamicObject(1481,1109.931274,-749.641113,99.616371,0.699998,0.400000,-179.900009);
	CreateDynamicObject(19462,1528.294311,-1462.827392,10.275950,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1528.294311,-1455.738525,13.765954,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1529.695678,-1462.828979,10.295959,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1528.294311,-1462.828979,13.765954,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1529.695678,-1462.828979,13.765954,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1539.826416,-1456.348022,17.255950,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1529.695678,-1453.207763,10.295959,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1529.695678,-1456.348022,13.775958,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1529.695678,-1456.348022,17.255950,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1514.647216,-1456.384765,10.255949,0.000000,0.000000,-89.999931);
	CreateDynamicObject(19462,1539.836181,-1456.348022,13.785943,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1539.836181,-1465.948120,13.785943,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1539.836181,-1465.948120,10.285943,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1539.836181,-1456.347778,10.325942,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1523.596191,-1472.336914,13.815937,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1539.836181,-1475.568481,13.745944,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1524.267700,-1456.409790,10.275950,0.000000,0.000000,-90.299926);
	CreateDynamicObject(19462,1524.267700,-1456.409790,13.685935,0.000000,0.000000,-90.299926);
	CreateDynamicObject(19462,1514.637207,-1456.384765,13.685935,0.000000,0.000000,-89.999931);
	CreateDynamicObject(19462,1505.006958,-1456.384765,13.685935,0.000000,0.000000,-89.999931);
	CreateDynamicObject(19462,1505.006958,-1456.384765,10.255949,0.000000,0.000000,-89.999931);
	CreateDynamicObject(19462,1514.227050,-1481.754760,13.745944,0.000000,0.000000,-89.999931);
	CreateDynamicObject(19462,1514.216796,-1481.754760,10.255949,0.000000,0.000000,-89.999931);
	CreateDynamicObject(19462,1523.816650,-1481.754760,10.255949,0.000000,0.000000,-89.999931);
	CreateDynamicObject(19443,1539.825073,-1481.145141,9.555953,0.000000,0.000000,0.599999);
	CreateDynamicObject(19462,1533.446655,-1481.754760,10.255949,0.000000,0.000000,-89.999931);
	CreateDynamicObject(19462,1533.436645,-1481.754760,13.745944,0.000000,0.000000,-89.999931);
	CreateDynamicObject(19462,1523.836914,-1481.754760,13.745944,0.000000,0.000000,-89.999931);
	CreateDynamicObject(19462,1509.383666,-1461.225585,13.735954,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1509.383666,-1461.246215,10.275950,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1509.383666,-1470.854492,10.275950,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1509.383666,-1480.475585,10.275950,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1509.383666,-1480.475585,13.735954,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1509.383666,-1470.855712,13.735954,0.000000,0.000000,0.000000);
	CreateDynamicObject(19443,1538.943359,-1481.762573,9.585947,0.000000,0.000000,-90.000000);
	CreateDynamicObject(1504,1113.380981,-741.272033,99.052932,0.000000,0.000000,-90.600006);
	CreateDynamicObject(19443,1539.825073,-1481.145141,13.045948,0.000000,0.000000,0.599999);
	CreateDynamicObject(19443,1538.943359,-1481.762573,13.045948,0.000000,0.000000,-90.000000);
	CreateDynamicObject(19378,1543.921997,-1467.983520,13.485383,0.000000,90.099975,0.000000);
	CreateDynamicObject(19378,1522.993896,-1461.292236,13.521903,0.000000,90.099975,0.000000);
	CreateDynamicObject(19378,1512.503906,-1461.292236,13.540205,0.000000,90.099975,0.000000);
	CreateDynamicObject(19378,1512.503906,-1470.862304,13.540205,0.000000,90.099975,0.000000);
	CreateDynamicObject(19378,1512.503906,-1480.442138,13.540205,0.000000,90.099975,0.000000);
	CreateDynamicObject(19378,1522.982910,-1480.442138,13.521919,0.000000,90.099975,0.000000);
	CreateDynamicObject(19378,1522.982910,-1470.852539,13.521919,0.000000,90.099975,0.000000);
	CreateDynamicObject(19378,1533.453002,-1467.981933,13.503643,0.000000,90.099975,0.000000);
	CreateDynamicObject(19378,1533.453002,-1477.613037,13.503643,0.000000,90.099975,0.000000);
	CreateDynamicObject(19378,1543.921997,-1477.613037,13.485383,0.000000,90.099975,0.000000);
	CreateDynamicObject(3722,1549.317749,-1480.530151,12.893692,0.000000,0.000000,0.000000);
	CreateDynamicObject(3722,1518.382324,-1486.676513,16.502462,0.000000,0.000000,-89.700012);
	CreateDynamicObject(1685,1506.925415,-1484.252929,13.293478,0.000000,0.000000,0.000000);
	CreateDynamicObject(1685,1506.925415,-1486.012451,13.293478,0.000000,0.000000,0.000000);
	CreateDynamicObject(3499,1534.331176,-1456.648681,16.084592,0.000000,90.400009,0.000000);
	CreateDynamicObject(19443,1525.396362,-1477.670410,8.852840,-90.000061,-89.799995,0.000000);
	CreateDynamicObject(3499,1534.343627,-1451.875122,17.674591,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.343627,-1452.906005,17.674591,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.343627,-1453.615844,17.674591,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.343627,-1454.246459,17.674591,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.341552,-1454.827026,17.474586,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.339233,-1455.317504,17.214584,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.336914,-1455.667846,16.944578,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.334838,-1456.008056,16.604581,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.313232,-1463.142944,13.804614,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.326660,-1457.319335,15.534596,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.323486,-1457.879638,15.114602,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.320800,-1458.399780,14.754606,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.319702,-1458.660034,14.594609,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.319091,-1459.050292,14.534605,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.318237,-1459.470581,14.424607,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.317749,-1459.940917,14.364603,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.316894,-1460.271118,14.264608,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.316894,-1460.761474,14.264608,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.315917,-1461.151855,14.124608,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.315917,-1461.742065,14.124608,0.000000,90.400009,0.000000);
	CreateDynamicObject(3499,1534.313232,-1462.262573,13.804614,0.000000,90.400009,0.000000);
	CreateDynamicObject(19443,1535.364990,-1467.587402,9.555952,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1530.635253,-1467.578979,9.555952,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1532.224853,-1467.582031,9.555952,0.000000,0.000000,89.900024);
	CreateDynamicObject(1499,1533.039916,-1467.576293,8.485939,0.000000,0.000000,0.000000);
	CreateDynamicObject(19443,1540.145019,-1467.596923,9.555952,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1536.965332,-1467.590454,9.555952,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1538.575195,-1467.593505,9.555952,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1533.774169,-1467.585815,13.035943,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1530.594482,-1467.579467,13.035943,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1532.184326,-1467.582763,13.035943,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1535.363769,-1467.588745,13.035943,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1533.803466,-1467.586547,12.765933,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1536.973999,-1467.591674,13.035943,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1538.523803,-1467.594482,13.035943,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1540.084106,-1467.597045,13.035943,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1527.506958,-1467.572753,13.025953,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1525.915771,-1467.569824,9.555952,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1524.345947,-1467.567016,9.555952,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1524.345947,-1467.567016,13.025953,0.000000,0.000000,89.900024);
	CreateDynamicObject(19443,1525.945922,-1467.570190,13.025953,0.000000,0.000000,89.900024);
	CreateDynamicObject(19462,1539.836181,-1475.568481,10.325942,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1523.596191,-1472.427978,10.325942,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1523.596191,-1477.318359,10.325942,0.000000,0.000000,0.000000);
	CreateDynamicObject(19462,1523.596191,-1477.318359,13.815937,0.000000,0.000000,0.000000);
	CreateDynamicObject(14414,265.560424,2960.049316,2.204406,0.000000,0.000000,-87.499984);
	CreateDynamicObject(19454,267.276794,2959.843750,2.583441,-34.400024,-90.000144,-87.499603);
	CreateDynamicObject(19377,249.550323,2946.846923,8.973770,0.000000,-89.999893,0.000000);
	CreateDynamicObject(1726,245.080581,2957.267578,5.439671,0.000000,0.000000,90.400024);
	CreateDynamicObject(19377,260.030029,2946.846923,8.953763,0.000000,-89.999893,0.000000);
	CreateDynamicObject(1726,246.153686,2960.353515,5.429677,0.000000,0.000000,0.000000);
	CreateDynamicObject(19377,270.529602,2946.846923,9.033761,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19377,270.529602,2956.415039,9.033761,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19377,260.039459,2956.381103,8.983775,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19377,249.560317,2956.367919,8.993762,0.000000,-89.999893,0.000000);
	CreateDynamicObject(1361,244.978698,2960.233642,6.229681,0.000000,0.000000,0.000000);
	CreateDynamicObject(1361,263.472045,2959.721435,2.511779,0.000000,0.000000,0.000000);
	CreateDynamicObject(1361,244.965377,2949.362060,2.649724,0.000000,0.000000,0.000000);
	CreateDynamicObject(1361,264.156890,2942.867187,2.596698,0.000000,0.000000,0.000000);
	CreateDynamicObject(1481,311.718322,-1128.077392,81.263450,0.000000,0.000000,-44.600013);
	CreateDynamicObject(1432,312.069702,-1130.390502,80.813476,0.000000,0.000000,0.000000);
	CreateDynamicObject(19129,1533.559570,-1477.509887,8.515947,0.000000,0.000000,0.000000);
	CreateDynamicObject(18090,1537.850830,-1477.079467,11.026241,0.000000,0.000000,0.000000);
	CreateDynamicObject(19128,1525.631347,-1479.703247,9.586256,0.000000,0.000000,0.000000);
	CreateDynamicObject(19443,1527.602661,-1479.417846,8.852849,-90.000061,0.000000,0.000000);
	CreateDynamicObject(19443,1527.602661,-1482.877319,8.852849,-90.000061,0.000000,0.000000);
	CreateDynamicObject(17068,2766.721679,-2328.457519,0.101428,0.000000,0.000000,-87.900123);
	CreateDynamicObject(19443,1525.946655,-1477.672119,8.852840,-90.000061,-89.799995,0.000000);
	CreateDynamicObject(2229,1523.243164,-1481.576538,12.386240,0.000000,0.000000,126.699989);
	CreateDynamicObject(2229,1523.243164,-1481.576538,8.246244,0.000000,0.000000,126.699989);
	CreateDynamicObject(2229,1523.243164,-1481.576538,11.006252,0.000000,0.000000,126.699989);
	CreateDynamicObject(2232,1523.983276,-1477.969116,12.599246,0.000000,0.000000,89.499954);
	CreateDynamicObject(2232,1527.344482,-1481.398437,10.216259,0.000000,0.000000,-179.999984);
	CreateDynamicObject(2232,1527.344482,-1481.398437,11.396265,0.000000,0.000000,-179.999984);
	CreateDynamicObject(2232,1527.344482,-1481.398437,12.589262,0.000000,0.000000,-179.999984);
	CreateDynamicObject(2232,1523.983276,-1477.969116,10.219259,0.000000,0.000000,89.499954);
	CreateDynamicObject(2232,1523.983276,-1477.969116,11.409255,0.000000,0.000000,89.499954);
	CreateDynamicObject(2232,1524.100341,-1468.086425,12.696249,0.000000,0.000000,56.200000);
	CreateDynamicObject(2232,1524.100341,-1468.086425,9.136253,0.000000,0.000000,56.200000);
	CreateDynamicObject(2232,1524.100341,-1468.086425,10.326251,0.000000,0.000000,56.200000);
	CreateDynamicObject(2232,1524.100341,-1468.086425,11.516254,0.000000,0.000000,56.200000);
	CreateDynamicObject(2232,1539.595458,-1467.838256,12.616271,0.000000,0.000000,-42.799999);
	CreateDynamicObject(2232,1539.595458,-1467.838256,9.166254,0.000000,0.000000,-42.799999);
	CreateDynamicObject(2232,1539.595458,-1467.838256,10.326262,0.000000,0.000000,-42.799999);
	CreateDynamicObject(2232,1539.595458,-1467.838256,11.466259,0.000000,0.000000,-42.799999);
	CreateDynamicObject(1716,1536.022094,-1480.440185,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1539.534057,-1471.726928,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1538.903686,-1471.726928,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1538.223388,-1471.726928,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1537.513061,-1471.726928,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1536.842773,-1471.967163,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1536.382446,-1472.487670,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1536.022094,-1473.157958,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1536.022094,-1473.928344,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1536.022094,-1474.768920,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1536.022094,-1475.599121,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1536.022094,-1476.519531,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1536.022094,-1477.399414,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1536.022094,-1478.339721,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(1716,1536.022094,-1479.300048,8.556241,0.000000,0.000000,0.000000);
	CreateDynamicObject(19172,1533.755371,-1467.693115,12.006258,0.000000,0.000000,0.000000);
	CreateDynamicObject(19454,2735.568603,-2323.843750,0.273708,0.199999,89.999984,0.499999);
	CreateDynamicObject(3525,1529.274414,-1451.032958,15.042815,0.000000,0.000000,-177.500000);
	CreateDynamicObject(3525,1540.366210,-1451.038452,15.042815,0.000000,0.000000,-177.500000);
	CreateDynamicObject(1362,1529.117675,-1450.773071,13.072809,0.000000,0.000000,0.000000);
	CreateDynamicObject(1362,1540.327636,-1450.773071,13.072809,0.000000,0.000000,0.000000);
	CreateDynamicObject(3525,1540.318847,-1450.671752,12.742811,0.000000,0.000000,-177.500000);
	CreateDynamicObject(3525,1529.118286,-1450.689086,12.742811,0.000000,0.000000,-177.500000);
	CreateDynamicObject(14387,2730.629882,-2327.053466,1.064264,0.000000,0.000000,0.000000);
	CreateDynamicObject(17068,2732.940429,-2335.669189,0.141425,0.000000,0.000000,0.000000);
	CreateDynamicObject(17068,2744.729980,-2329.200927,0.101428,0.000000,0.000000,-88.300117);
	CreateDynamicObject(2229,1523.243164,-1481.576538,9.606245,0.000000,0.000000,126.699989);
	CreateDynamicObject(19454,2739.062011,-2323.815429,0.273709,0.199999,89.999984,0.499999);
	CreateDynamicObject(19458,2740.801269,-2323.810791,1.915517,0.000000,0.000000,0.000000);
	CreateDynamicObject(19366,2739.106201,-2319.091552,1.906882,0.000000,0.000000,-89.400024);
	CreateDynamicObject(19366,2735.893066,-2319.125976,1.906882,0.000000,0.000000,-89.400024);
	CreateDynamicObject(19412,2733.919433,-2327.085205,1.896785,0.000000,0.000000,0.399999);
	CreateDynamicObject(19366,2733.889160,-2320.683349,1.900901,0.000000,0.000000,0.599999);
	CreateDynamicObject(19366,2733.921142,-2323.896484,1.900901,0.000000,0.000000,0.599999);
	CreateDynamicObject(19439,2734.768310,-2319.132080,1.904297,0.000000,0.000000,-89.600120);
	CreateDynamicObject(19366,2739.100097,-2328.552001,1.906882,0.000000,0.000000,-89.500022);
	CreateDynamicObject(19439,2734.824951,-2328.596435,1.900141,0.000000,0.000000,-88.799919);
	CreateDynamicObject(19454,2739.062011,-2323.821533,3.543690,0.199999,89.999984,0.499999);
	CreateDynamicObject(19454,2735.588623,-2323.853515,3.543690,0.199999,89.999984,0.499999);
	CreateDynamicObject(948,2734.420898,-2328.177734,0.362474,0.000000,0.000000,0.000000);
	CreateDynamicObject(2165,2735.461914,-2320.992675,0.343157,0.000000,0.000000,-178.799819);
	CreateDynamicObject(2356,2734.761230,-2320.213623,0.367766,0.000000,0.000000,-155.099868);
	CreateDynamicObject(1726,2740.139892,-2325.093750,0.288526,0.299999,0.000000,-92.099868);
	CreateDynamicObject(2725,2740.149658,-2327.879394,0.740329,0.000000,0.000000,0.000000);
	CreateDynamicObject(1727,2739.538330,-2327.867675,0.246766,0.000000,0.000000,-177.499954);
	CreateDynamicObject(2776,2734.808349,-2322.575683,0.848180,0.000000,0.000000,172.400070);
	CreateDynamicObject(2200,2736.712402,-2319.320068,0.355680,0.000000,0.000000,0.000000);
	CreateDynamicObject(19377,335.030517,2939.822265,45.753669,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19377,335.010437,2930.267333,45.753662,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19377,345.500457,2930.267333,45.753662,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19451,350.524932,2930.196044,50.959636,0.000000,0.000000,0.000000);
	CreateDynamicObject(19451,350.524932,2939.758300,50.959636,0.000000,0.000000,0.000000);
	CreateDynamicObject(19377,345.500457,2939.822265,45.753662,0.000000,-89.999893,0.000000);
	CreateDynamicObject(19451,350.524932,2939.826416,47.569625,0.000000,0.000000,0.000000);
	CreateDynamicObject(2164,2738.943603,-2319.302734,0.358637,0.000000,0.000000,0.000000);
	CreateDynamicObject(19451,350.524932,2930.196044,47.569625,0.000000,0.000000,0.000000);
	CreateDynamicObject(2161,2740.691162,-2320.221679,0.357209,0.000000,0.000000,-89.600044);
	CreateDynamicObject(2162,2740.705322,-2321.566894,0.375653,0.000000,0.000000,-89.600067);
	CreateDynamicObject(2608,2734.233642,-2324.377685,2.045511,0.000000,0.000000,90.600013);
	CreateDynamicObject(931,349.175323,2937.871826,46.819614,0.000000,0.000000,0.000000);
	CreateDynamicObject(1003,349.219787,2938.485595,46.929603,0.000000,0.000000,0.000000);
	CreateDynamicObject(17068,2778.400146,-2322.732666,0.086790,0.000000,0.000000,2.000000);
	CreateDynamicObject(1003,349.219787,2937.334472,46.929603,0.000000,0.000000,0.000000);
	CreateDynamicObject(1003,349.219787,2937.694824,46.929603,0.000000,0.000000,0.000000);
	CreateDynamicObject(1003,349.219787,2938.115234,46.929603,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,349.928131,2937.166992,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,348.438079,2938.517822,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,348.438079,2938.207519,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,348.438079,2937.867187,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,348.438079,2937.516845,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,348.438079,2937.206542,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,349.178100,2937.206542,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,349.178100,2937.527343,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,349.178100,2937.847656,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,349.178100,2938.197998,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,349.178100,2938.508300,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,349.928131,2938.508300,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,349.928131,2938.197998,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,349.928131,2937.867675,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1010,349.928131,2937.517333,47.869609,0.000000,0.000000,0.000000);
	CreateDynamicObject(1020,349.702026,2938.546386,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.231811,2938.548095,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.230377,2938.347900,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.228912,2938.137695,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.227539,2937.937500,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.226196,2937.737304,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(17068,2766.496093,-2323.883544,0.096790,0.000000,0.000000,-178.500122);
	CreateDynamicObject(1020,349.224761,2937.536865,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.223510,2937.346679,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.693542,2937.343505,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.694885,2937.533691,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.696380,2937.743896,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.697753,2937.934082,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.699401,2938.164306,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(1020,349.700775,2938.354492,45.939609,0.000000,0.000000,-90.400024);
	CreateDynamicObject(931,349.175323,2932.650634,46.819614,0.000000,0.000000,0.000000);
	CreateDynamicObject(930,348.582885,2932.190917,46.329612,0.000000,0.000000,0.000000);
	CreateDynamicObject(930,348.582763,2932.241210,47.389579,0.000000,0.000000,0.000000);
	CreateDynamicObject(930,349.702728,2933.092041,47.389579,0.000000,0.000000,0.000000);
	CreateDynamicObject(930,349.702728,2932.241210,47.389579,0.000000,0.000000,0.000000);
	CreateDynamicObject(930,348.582763,2933.141845,47.389579,0.000000,0.000000,0.000000);
	CreateDynamicObject(930,349.652954,2933.141845,46.329612,0.000000,0.000000,0.000000);
	CreateDynamicObject(930,348.582763,2933.141845,46.329612,0.000000,0.000000,0.000000);
	CreateDynamicObject(17068,2758.340087,-2324.088378,0.096790,0.000000,0.000000,-178.500122);
	CreateDynamicObject(930,349.652954,2932.190917,46.329612,0.000000,0.000000,0.000000);
	CreateDynamicObject(17068,2748.239501,-2324.347656,0.096790,0.000000,0.000000,-178.500122);
	CreateDynamicObject(17068,2741.993408,-2324.498779,0.096790,0.000000,0.000000,179.799835);
	CreateDynamicObject(16502,2723.167480,-2313.026855,-2.441592,0.000000,5.899998,89.499984);
	CreateDynamicObject(16502,2710.794189,-2312.921875,-2.441592,0.000000,5.899998,89.499984);
	CreateDynamicObject(1676,2723.186523,-2307.024902,1.911279,0.000000,0.000000,-92.600021);
	CreateDynamicObject(1676,2710.786621,-2306.462890,1.911279,0.000000,0.000000,-92.600021);
	CreateDynamicObject(3287,350.777740,2934.884765,50.916328,-89.400001,-102.799987,0.000000);
	CreateDynamicObject(1676,346.846282,2938.071777,47.339633,0.000000,0.000000,-29.699996);
    // Mapper load 2
	//Mapper Load 1
	CreateDynamicObject(522,1174.512939,-2055.023681,433.351165,0.000000,0.000000,0.000000);
	CreateDynamicObject(19377,-262.056274,-849.782287,1187.100463,-0.100000,88.299995,0.000000);
	CreateDynamicObject(19377,-272.122131,-849.973388,1186.801635,-0.100000,88.299995,0.000000);
	CreateDynamicObject(19377,-272.122131,-859.573303,1186.818969,-0.100000,88.299995,0.000000);
	CreateDynamicObject(3499,-260.655731,-864.242309,1187.687744,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-277.010223,-845.312011,1187.807373,0.000000,0.000000,0.000000);
	CreateDynamicObject(3499,-256.720550,-845.312011,1187.807373,0.000000,0.000000,0.000000);
	CreateDynamicObject(3499,-256.720550,-864.112731,1187.807373,0.000000,0.000000,0.000000);
	CreateDynamicObject(3499,-277.310363,-864.112731,1187.807373,0.000000,0.000000,0.000000);
	CreateDynamicObject(3499,-271.553436,-864.242309,1187.459594,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-277.382080,-850.889892,1187.124877,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-271.537139,-864.242309,1189.079956,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-260.690124,-864.242309,1189.327758,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-260.726318,-864.242309,1191.057128,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-260.758056,-864.242309,1192.567749,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-271.605712,-864.242309,1192.340942,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-271.573730,-864.242309,1190.820068,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-271.216064,-845.142150,1192.378662,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-271.537139,-845.142150,1189.079956,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-260.659606,-845.142150,1189.307861,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-260.625335,-845.142150,1187.677612,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-271.512969,-845.142150,1187.449462,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-271.586273,-845.142150,1190.958984,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-261.838500,-845.142150,1191.163208,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-261.838500,-845.142150,1191.163208,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-261.868225,-845.142150,1192.574218,0.000000,88.800018,0.000000);
	CreateDynamicObject(3499,-256.096801,-860.980407,1187.637329,0.000000,89.800010,91.899986);
	CreateDynamicObject(19377,-17.939722,-48.619342,1003.737060,0.000000,0.000000,0.000000);
	CreateDynamicObject(3499,-277.022125,-861.732849,1187.086669,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-277.021911,-861.739318,1189.006591,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-277.021850,-861.745422,1190.657104,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-277.021759,-861.750976,1192.257690,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-277.378234,-851.007019,1192.294921,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-277.378234,-851.001281,1190.684570,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-277.378417,-850.995605,1189.054931,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-256.451324,-850.296813,1187.665039,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-256.451232,-850.302673,1189.315307,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-256.451080,-850.309326,1191.235961,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-256.451019,-850.314147,1192.556518,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-256.096649,-860.997924,1192.519165,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-256.096679,-860.993041,1191.228515,0.000000,89.800010,91.899986);
	CreateDynamicObject(3499,-256.096710,-860.986328,1189.257812,0.000000,89.800010,91.899986);
	CreateDynamicObject(19377,-262.056274,-859.362487,1187.117065,-0.100000,88.299995,0.000000);
	CreateDynamicObject(19377,1795.383422,-1303.685546,13.530241,0.000000,0.000000,-79.100044);
	CreateDynamicObject(643,1798.261108,-1297.927124,12.970390,0.000000,0.000000,0.000000);
	CreateDynamicObject(638,1791.064819,-1302.333374,13.227372,-2.000000,0.000000,0.000000);
	CreateDynamicObject(638,1790.078979,-1300.730834,13.161787,0.000000,-2.399996,-88.800018);
	CreateDynamicObject(1508,1288.324707,-1006.115417,26.061428,0.000000,0.000000,0.000000);
	CreateDynamicObject(19454,214.127960,1874.841674,13.870635,0.000000,0.000000,-90.099861);
	CreateDynamicObject(355,2308.781250,-1208.474731,1048.550537,-82.300010,0.000000,45.099998);
	CreateDynamicObject(352,2315.942626,-1210.271362,1048.909545,-81.599998,0.000000,17.199996);
	CreateDynamicObject(352,2315.942626,-1210.271362,1048.909545,-81.599998,0.000000,17.199996);
	CreateDynamicObject(19466,-691.745056,931.747558,13.632456,-90.299888,90.199958,0.000000);
	CreateDynamicObject(19466,-689.812805,931.738403,13.632472,-90.299888,90.199958,0.000000);
	CreateDynamicObject(5779,243.497375,-1223.211669,75.802490,0.000000,0.000000,-55.299972);
	CreateDynamicObject(19377,243.845458,-1222.886718,72.722496,0.000000,0.000000,-55.399986);
	CreateDynamicObject(19377,259.899291,2946.885253,1.766129,0.000000,-89.800010,0.000000);
	CreateDynamicObject(1497,-689.648437,943.646850,12.301239,0.000000,0.000000,0.000000);
	CreateDynamicObject(1670,-690.520751,917.006469,11.937039,0.000000,0.000000,0.000000);
	CreateDynamicObject(19377,259.899291,2956.453857,1.766129,0.000000,-89.800010,0.000000);
	CreateDynamicObject(19377,270.379241,2956.453857,1.729550,0.000000,-89.800010,0.000000);
	CreateDynamicObject(19377,270.379241,2946.896972,1.729550,0.000000,-89.800010,0.000000);
	CreateDynamicObject(19377,249.479217,2946.885253,1.802500,0.000000,-89.800010,0.000000);
	CreateDynamicObject(19377,249.479217,2956.450439,1.802500,0.000000,-89.800010,0.000000);
	CreateDynamicObject(19451,275.596191,2956.552246,3.561501,0.000000,0.000000,0.000000);
	CreateDynamicObject(19451,275.596191,2946.923583,3.561501,-0.299997,0.000000,0.000000);
	CreateDynamicObject(19451,270.693939,2961.197998,3.561501,0.000000,0.000000,-89.999969);
	CreateDynamicObject(19451,261.103820,2961.197998,3.561501,0.000000,0.000000,-89.999969);
	CreateDynamicObject(19451,251.483642,2961.171386,3.561501,0.000000,0.000000,-89.999969);
	CreateDynamicObject(19451,249.093933,2961.137939,3.561501,0.000000,0.000000,-89.999969);
	CreateDynamicObject(19451,244.364807,2956.247314,3.595309,0.000000,0.000000,0.000000);
	CreateDynamicObject(19451,244.354766,2946.624023,3.595309,0.000000,0.000000,0.000000);
	CreateDynamicObject(19451,251.591674,2942.020751,3.623605,0.000000,0.000000,90.299896);
	CreateDynamicObject(19451,270.781005,2942.126464,3.593604,0.000000,0.000000,90.299896);
	CreateDynamicObject(19451,261.211517,2942.073486,3.613604,0.000000,0.000000,90.299896);
	CreateDynamicObject(19451,249.161651,2942.009765,3.613604,0.000000,0.000000,90.299896);
	CreateDynamicObject(1569,271.625762,2942.196044,1.825255,0.000000,0.000000,0.000000);
	CreateDynamicObject(19405,270.875854,2943.739746,3.583702,0.000000,0.000000,0.000000);
	CreateDynamicObject(19405,270.882965,2946.859375,3.587599,0.000000,0.000000,0.000000);
	CreateDynamicObject(19389,270.908050,2950.010498,3.579293,0.000000,0.000000,0.000000);
	CreateDynamicObject(19359,272.548492,2951.449951,3.587701,0.000000,0.000000,-91.500030);
	CreateDynamicObject(19359,274.097808,2951.413085,3.576673,0.000000,0.000000,-91.200004);
	CreateDynamicObject(1649,270.938110,2946.513916,3.108150,0.000000,90.899978,-90.599975);
	CreateDynamicObject(1649,270.861724,2943.997802,3.098726,0.000000,90.899978,-90.599975);
	CreateDynamicObject(1649,270.932830,2947.047363,3.085057,0.000000,-88.799957,90.800010);
	CreateDynamicObject(1649,270.898864,2944.019042,2.652328,0.000000,86.599983,89.800071);
	CreateDynamicObject(2008,273.757019,2951.995849,1.824867,0.000000,0.000000,89.799995);
	CreateDynamicObject(1671,274.605224,2952.442626,2.280761,0.000000,0.000000,-96.300003);
	CreateDynamicObject(2777,272.215759,2952.055664,2.296627,-1.000000,0.000000,89.599983);
	CreateDynamicObject(2776,272.204925,2952.880371,2.348484,0.000000,0.000000,88.900047);
	CreateDynamicObject(2356,274.816925,2950.322998,1.842486,0.000000,0.000000,91.899955);
	CreateDynamicObject(2516,273.800170,2948.829345,1.848222,0.000000,0.000000,-90.199989);
	CreateDynamicObject(2516,273.807312,2950.881347,1.848222,0.000000,0.000000,-90.199989);
	CreateDynamicObject(2516,273.807312,2950.881347,2.278223,0.000000,0.000000,-90.199989);
	CreateDynamicObject(2516,273.800170,2948.829345,2.278223,0.000000,0.000000,-90.199989);
	CreateDynamicObject(2608,275.419281,2950.427734,2.676532,0.000000,0.000000,-91.000030);
	CreateDynamicObject(2608,275.383911,2948.385742,2.676532,0.000000,0.000000,-91.000030);
	CreateDynamicObject(1738,275.347930,2943.057373,2.453402,0.000000,0.000000,-88.300125);
	CreateDynamicObject(2356,274.855987,2948.241210,1.842486,0.000000,0.000000,91.899955);
	CreateDynamicObject(19389,272.430694,2954.733154,3.579293,0.000000,0.000000,-90.599998);
	CreateDynamicObject(19405,270.882965,2953.174072,3.577600,0.000000,0.000000,0.000000);
	CreateDynamicObject(19432,274.825317,2954.676757,3.586462,0.000000,0.000000,-91.899993);
	CreateDynamicObject(1649,270.855316,2952.952148,3.039165,0.000000,90.899978,-90.599975);
	CreateDynamicObject(19405,270.892974,2959.586425,3.577600,0.000000,0.000000,0.000000);
	CreateDynamicObject(19389,272.465087,2958.056396,3.579293,0.000000,0.000000,-90.599998);
	CreateDynamicObject(19432,274.875946,2958.010253,3.586462,0.000000,0.000000,-91.899993);
	CreateDynamicObject(1649,270.855316,2952.952148,3.039165,0.000000,90.899978,89.600151);
	CreateDynamicObject(1649,270.903076,2959.796875,2.931725,0.000000,90.899978,89.600151);
	CreateDynamicObject(1649,270.903076,2959.796875,2.931725,0.000000,90.899978,-90.299850);
	CreateDynamicObject(2008,274.041961,2959.502197,1.778746,0.000000,0.000000,88.400062);
	CreateDynamicObject(1671,274.832397,2960.713134,2.237884,0.000000,0.000000,-55.099964);
	CreateDynamicObject(2776,272.310150,2960.442871,2.308504,0.000000,0.000000,72.699966);
	CreateDynamicObject(2776,272.210571,2959.641845,2.288711,0.000000,0.000000,93.800170);
	CreateDynamicObject(19466,-684.500610,931.718139,13.632551,-90.299888,90.199958,0.000000);
	CreateDynamicObject(19466,-686.432189,931.725219,13.632526,-90.299888,90.199958,0.000000);
	CreateDynamicObject(1280,-690.700012,931.330505,13.039303,0.000000,0.000000,91.700050);
	CreateDynamicObject(1280,-685.550598,931.362365,13.039303,0.000000,0.000000,90.300071);
	CreateDynamicObject(948,-692.453735,931.324951,12.619297,0.000000,0.000000,0.000000);
	CreateDynamicObject(948,-683.870971,931.324951,12.619297,0.000000,0.000000,0.000000);
	CreateDynamicObject(19121,-677.520507,920.271423,11.664243,0.000000,0.000000,0.000000);
	CreateDynamicObject(6400,-670.178039,967.154296,13.356464,-1.099997,0.000000,-0.799997);
	CreateDynamicObject(19121,-659.541564,919.444946,11.683795,0.000000,0.000000,0.000000);
	CreateDynamicObject(19121,-676.750793,924.821289,11.762104,0.000000,0.000000,0.000000);
	CreateDynamicObject(19121,-668.959350,920.439697,11.682106,0.000000,0.000000,0.000000);
	CreateDynamicObject(19121,-657.259521,923.170227,11.772104,0.000000,0.000000,0.000000);
	CreateDynamicObject(19121,-663.910339,920.071228,11.637103,0.000000,0.000000,0.000000);
	CreateDynamicObject(19121,-669.013061,924.397460,11.767683,0.000000,0.000000,0.000000);
	CreateDynamicObject(19121,-663.549926,924.591857,11.637103,0.000000,0.000000,0.000000);
	CreateDynamicObject(1481,-693.645507,914.546997,11.940053,0.000000,0.000000,145.900039);
	CreateDynamicObject(1432,-693.588745,917.922119,11.303323,0.000000,0.000000,-51.400001);
	CreateDynamicObject(1481,-692.900207,914.042297,11.940053,0.000000,0.000000,145.900039);
	CreateDynamicObject(1486,-693.407775,917.464782,12.045580,0.000000,0.000000,0.000000);
	CreateDynamicObject(1432,-690.506896,916.997192,11.303323,0.000000,0.000000,0.000000);
	CreateDynamicObject(1486,-694.047790,917.994262,12.049880,0.000000,0.000000,0.000000);
	CreateDynamicObject(1455,-693.191406,918.274536,12.009810,0.000000,0.000000,0.000000);
	CreateDynamicObject(1665,-693.617431,917.914489,11.944911,0.000000,0.000000,0.000000);
	CreateDynamicObject(18688,-688.257019,931.533996,10.712759,0.000000,0.000000,0.000000);
	CreateDynamicObject(19376,-2164.733642,644.772888,1051.333984,0.000000,0.000000,0.000000);
	CreateDynamicObject(2165,-2165.567138,642.868713,1051.454101,0.000000,0.000000,-90.400009);
	CreateDynamicObject(1663,-2166.228759,642.462524,1051.824462,0.000000,0.000000,87.599990);
	CreateDynamicObject(19376,-2169.256591,643.904846,1051.223876,0.000000,0.000000,91.100006);
	CreateDynamicObject(1829,-2165.632568,640.556091,1051.844482,0.000000,0.000000,-98.899925);
	CreateDynamicObject(2161,-2171.117431,643.755554,1051.364013,0.000000,0.000000,0.000000);
	CreateDynamicObject(2162,-2169.804687,643.762451,1051.360717,0.000000,0.000000,0.000000);
	CreateDynamicObject(1829,-2162.652099,646.572937,1057.095581,0.000000,0.000000,0.000000);
	CreateDynamicObject(1666,-2166.330566,644.213378,1057.173339,0.000000,0.000000,0.000000);
	CreateDynamicObject(1666,-2166.841064,644.613769,1057.173339,0.000000,0.000000,0.000000);
	CreateDynamicObject(1665,-2166.722167,644.290588,1057.103271,0.000000,0.000000,51.399982);
	CreateDynamicObject(1512,-2157.796630,639.613220,1057.696166,0.000000,0.000000,0.000000);
	CreateDynamicObject(1517,-2157.748535,639.413757,1057.716186,0.000000,0.000000,0.000000);
	CreateDynamicObject(1520,-2157.864013,639.460388,1057.536010,0.000000,0.000000,0.000000);
	//Mapper Load 1
	// Rest
	NYPDLobby[0] = CreateDynamicObject(14819, 246.4050, 72.3000, 1003.6700, 0.0000, 0.0000, 180.0000); // NYPD Lobby Door Left
	NYPDLobby[1] = CreateDynamicObject(14819, 246.4050, 72.5750, 1003.6650, 0.0000, 0.0000, 0.0000); // NYPD Lobby Door Right
	NYPDLobby[2] = CreateDynamicObject(13360, 246.9850, 72.4500, 1003.7000, 0.0000, 0.0000, 180.0000); // NYPD Lobby Door Left Block
	NYPDLobby[3] = CreateDynamicObject(13360, 245.8330, 72.4500, 1003.7000, 0.0000, 0.0000, 180.0000); // NYPD Lobby Door Right Block
	//Zombie beta//
	zombielift = CreateDynamicObject(18755,1786.689941,-1303.389038,14.604994,0.000000,0.000000,-89.999992); // Lift
    zombieliftdoorattached1 = CreateDynamicObject(18756,1786.893188,-1303.157958,14.553212,0.000000,0.000000,-90.399955); //Attached door 1 (2)
    zombieliftdoorattached2 = CreateDynamicObject(18757,1786.539428,-1303.136230,14.552817,0.000000,0.000000,-90.299972); //Attached door 2 (6)
    zombieliftdoornotattached1 = CreateDynamicObject(18757,1786.539428,-1303.136230,126.632812,0.000000,0.000000,-90.299972); //Not attached door (down) (6)
    zombieliftdoornotattached2 = CreateDynamicObject(18756,1786.893188,-1303.157958,126.623245,0.000000,0.000000,-90.399955); //Not attached door (down) (2)
    zombieliftdoornotattached3 = CreateDynamicObject(18756,1786.893188,-1303.157958,126.623245,0.000000,0.000000,-90.399955); //Not Attached door (up) (2)
    zombieliftdoornotattached4 = CreateDynamicObject(18757,1786.539428,-1303.136230,126.632812,0.000000,0.000000,-90.299972); //Not Attached door (up) (6)
	//Zombie Beta//
	NYPDCells[0] = CreateDynamicObject(14819,259.105194,90.812126,1002.584350,0.000000,0.000000,-90.000000); // NYPD Cells Door Left
	NYPDCells[1] = CreateDynamicObject(14819,258.843353,90.840599,1002.584350,0.000000,0.000000,91.000000); // NYPD Cells Door Right
	NYPDCells[2] = CreateDynamicObject(13360,258.949157,91.412040,1002.528625,0.000000,0.000000,-90.000000); // NYPD Cells Door Left Block
	NYPDCells[3] = CreateDynamicObject(13360,258.949157,90.292076,1002.528625,0.000000,0.000000,90.000000); // NYPD Cells Door Right Block

	NYPDBarrier = CreateDynamicObject(968, 1544.6943359375, -1630.73046875, 13.27956199646, 0.000000, 90, 90); // NYPD Barrier
	NYPDGate =  CreateDynamicObject(971, 1588.6428222656, -1638.02734375, 15.240161895752, 0, 0, 181.03271484375); // NYPD Gate

	NYPDOffice[0] = CreateDynamicObject(13360,255.494674,85.290985,1002.445312,0.000000,0.000000,0.000000); // NYPD Office Door Left
	NYPDOffice[1] = CreateDynamicObject(13360,254.380661,85.286033,1002.445312,0.000000,0.000000,180.000000); // NYPD Office Door Right

	NYPDChief[0] = CreateDynamicObject(14819,222.281802,69.786598,1005.079895,0.000000,0.000000,-90.000000);// Chief's Door Right
	NYPDChief[1] = CreateDynamicObject(14819,222.002853,69.801109,1005.079895,0.000000,0.000000,-270.000000);// Chief's Door Left
	NYPDChief[2] = CreateDynamicObject(13360,222.120773,70.343833,1005.128601,0.000000,0.000000,-90.000000); // Chief's Block Right
	NYPDChief[3] = CreateDynamicObject(13360,222.120773,69.220504,1005.128601,0.000000,0.000000,-270.000000); // Chief's Block Left
	//new dmv
	CreateDynamicObject(3095, 961, -1433.8000488281, 15.369999885559, 0, 0, 0);
    CreateDynamicObject(9131, 960.59997558594, -1429.6999511719, 14.300000190735, 0, 0, 0);
    CreateDynamicObject(9131, 960.599609375, -1429.69921875, 12.10000038147, 0, 0, 0);
    CreateDynamicObject(9131, 954.79998779297, -1429.69921875, 14.300000190735, 0, 0, 0);
    CreateDynamicObject(9131, 954.79998779297, -1429.69921875, 12.10000038147, 0, 0, 0);
    CreateDynamicObject(9131, 960.599609375, -1429.69921875, 14.300000190735, 0, 0, 0);
    CreateDynamicObject(1569, 960.90002441406, -1429.5999755859, 13, 0, 0, 0);
    CreateDynamicObject(1569, 964, -1429.5999755859, 13, 0, 0, 120);
    CreateDynamicObject(9131, 964.40002441406, -1429.69921875, 14.300000190735, 0, 0, 0);
    CreateDynamicObject(9131, 964.40002441406, -1429.69921875, 12.10000038147, 0, 0, 0);
    CreateDynamicObject(3858, 953.40002441406, -1429.8000488281, 12.60000038147, 0, 0, 46);
    CreateDynamicObject(9131, 956.29998779297, -1427.3000488281, 12.5, 0, 90, 0);
    CreateDynamicObject(9131, 956.2998046875, -1427, 12.300000190735, 0, 90, 0);
    CreateDynamicObject(984, 963.79998779297, -1427.4000244141, 13.10000038147, 0, 0, 270);
    CreateDynamicObject(984, 948.70001220703, -1427.3994140625, 13.10000038147, 0, 0, 270);
    CreateDynamicObject(8647, 946, -1429.6999511719, 13, 0, 0, 90);
    CreateDynamicObject(9131, 957, -1437.9000244141, 14.300000190735, 0, 0, 0);
    CreateDynamicObject(9131, 964.33001708984, -1446.9300537109, 12.10000038147, 0, 0, 0);
    CreateDynamicObject(9131, 964.3994140625, -1437.8994140625, 14.300000190735, 0, 0, 0);
    CreateDynamicObject(9131, 957, -1437.8994140625, 12.10000038147, 0, 0, 0);
    CreateDynamicObject(3095, 952, -1433.8000488281, 15.369999885559, 0, 0, 0);
    CreateDynamicObject(3095, 960.20001220703, -1442.8000488281, 15.369999885559, 0, 0, 0);
    CreateDynamicObject(3095, 951.20001220703, -1442.8000488281, 15.369999885559, 0, 0, 0);
    CreateDynamicObject(5020, 963, -1437.9499511719, 13.89999961853, 0, 0, 270);
    CreateDynamicObject(3858, 955.09997558594, -1447.1999511719, 12.60000038147, 0, 0, 45.999755859375);
    CreateDynamicObject(9131, 954.7998046875, -1437.9000244141, 14.300000190735, 0, 0, 0);
    CreateDynamicObject(9131, 954.7998046875, -1437.9000244141, 12.10000038147, 0, 0, 0);
    CreateDynamicObject(3095, 960.19921875, -1442.7998046875, 15.369999885559, 0, 0, 0);
    CreateDynamicObject(9131, 964.33001708984, -1446.9300537109, 14.300000190735, 0, 0, 0);
    CreateDynamicObject(9131, 964.3994140625, -1437.8994140625, 12.10000038147, 0, 0, 0);
    CreateDynamicObject(5020, 954.40002441406, -1447.1999511719, 13.89999961853, 0, 0, 270);
    CreateDynamicObject(3858, 964.70001220703, -1439.5999755859, 12.60000038147, 0, 0, 133.99975585938);
    CreateDynamicObject(8947, 957.34002685547, -1439.5999755859, 10, 0, 0, 0);
    CreateDynamicObject(1502, 962.40002441406, -1447.1999511719, 13, 0, 0, 0);
    CreateDynamicObject(9131, 962.03002929688, -1446.9296875, 14.300000190735, 0, 0, 0);
    CreateDynamicObject(9131, 962.03002929688, -1446.9296875, 12.10000038147, 0, 0, 0);
    CreateDynamicObject(3858, 964, -1437.9000244141, 12.60000038147, 0, 0, 45.999755859375);
    CreateDynamicObject(2609, 964.5, -1437.3000488281, 13.699999809265, 0, 0, 270);
    CreateDynamicObject(2606, 964.70001220703, -1435.6999511719, 15.10000038147, 0, 0, 270);
    CreateDynamicObject(2200, 963.5, -1437.8900146484, 13, 0, 0, 180);
    CreateDynamicObject(2161, 964.70001220703, -1436.1999511719, 13, 0, 0, 270);
    CreateDynamicObject(16780, 960.09997558594, -1433.9000244141, 15.880000114441, 0, 0, 0);
    CreateDynamicObject(1892, 962.59997558594, -1446.3000488281, 13, 0, 0, 0);
    CreateDynamicObject(2009, 961.79998779297, -1435.6999511719, 13.10000038147, 0, 0, 0);
    CreateDynamicObject(2356, 962.79998779297, -1436, 13.10000038147, 0, 0, 0);
    CreateDynamicObject(1705, 955.40002441406, -1431.4000244141, 13, 0, 0, 40);
    CreateDynamicObject(1705, 955.2998046875, -1434, 13, 0, 0, 90);
    CreateDynamicObject(1705, 956.79998779297, -1430.5999755859, 13, 0, 0, 359.99572753906);
    CreateDynamicObject(2635, 955.20001220703, -1432.3000488281, 13.5, 0, 0, 0);
    CreateDynamicObject(2162, 954.5, -1436.8000488281, 13, 0, 0, 90);
    CreateDynamicObject(2631, 962.09997558594, -1433.8000488281, 13, 0, 0, 0);
    CreateDynamicObject(2813, 955.29998779297, -1432.3000488281, 13.89999961853, 0, 0, 0);
    CreateDynamicObject(2828, 961.5, -1435.6999511719, 13.89999961853, 0, 0, 230);
    CreateDynamicObject(16377, 955.20001220703, -1444.8000488281, 14, 0, 0, 300);
    CreateDynamicObject(1671, 961.59997558594, -1433.4000244141, 13.5, 0, 0, 0);
    CreateDynamicObject(1671, 963.19921875, -1433.5, 13.5, 0, 0, 339.99938964844);
    CreateDynamicObject(2621, 961.09997558594, -1434.5999755859, 13.800000190735, 0, 0, 0);
    CreateDynamicObject(2185, 958.40002441406, -1443.4000244141, 13.10000038147, 0, 0, 270);
    CreateDynamicObject(2185, 958.40002441406, -1439.6999511719, 13.10000038147, 0, 0, 270);
    CreateDynamicObject(2185, 960.79998779297, -1439.6999511719, 13.10000038147, 0, 0, 270);
    CreateDynamicObject(2185, 960.90002441406, -1443.4000244141, 13.10000038147, 0, 0, 270);
    CreateDynamicObject(2185, 963.29998779297, -1439.9000244141, 13.10000038147, 0, 0, 270);
    CreateDynamicObject(2356, 962.09997558594, -1444.5999755859, 13.10000038147, 0, 0, 90);
    CreateDynamicObject(2356, 962.09997558594, -1443.6999511719, 13.10000038147, 0, 0, 90);
    CreateDynamicObject(2356, 961.79998779297, -1440.1999511719, 13.10000038147, 0, 0, 90);
    CreateDynamicObject(2356, 962.20001220703, -1441.1999511719, 13.10000038147, 0, 0, 90);
    CreateDynamicObject(2356, 964.29998779297, -1441.4000244141, 13.10000038147, 0, 0, 90);
    CreateDynamicObject(2356, 964.40002441406, -1440.0999755859, 13.10000038147, 0, 0, 90);
    CreateDynamicObject(2356, 959.40002441406, -1444.8000488281, 13.10000038147, 0, 0, 90);
    CreateDynamicObject(2356, 959.59997558594, -1443.8000488281, 13.10000038147, 0, 0, 90);
    CreateDynamicObject(2356, 959.40002441406, -1440, 13.10000038147, 0, 0, 90);
    CreateDynamicObject(2356, 959.59997558594, -1440.9000244141, 13.10000038147, 0, 0, 90);
    CreateDynamicObject(638, 958.79998779297, -1427, 13.199999809265, 0, 0, 270);
    CreateDynamicObject(638, 953.90002441406, -1427.0999755859, 13.199999809265, 0, 0, 270);
    CreateDynamicObject(948, 964.29998779297, -1429, 13.10000038147, 0, 0, 0);
    CreateDynamicObject(2010, 960, -1437.5, 13, 0, 0, 0);
    CreateDynamicObject(2251, 954.70001220703, -1435.3000488281, 13.89999961853, 0, 0, 0);
    CreateDynamicObject(2811, 954.90002441406, -1446.6999511719, 13.10000038147, 0, 0, 0);
    CreateDynamicObject(2241, 964.20001220703, -1438.5999755859, 13.60000038147, 0, 0, 0);
    CreateDynamicObject(2737, 954.70001220703, -1442.4000244141, 14.199999809265, 0, 0, 90);
    CreateDynamicObject(1251, 961.40002441406, -1426.5, 12.5, 0, 0, 40);
    CreateDynamicObject(1251, 962.29998779297, -1422.8000488281, 12.5, 0, 0, 39.995727539063);
    CreateDynamicObject(1251, 962.59997558594, -1418.6999511719, 12.5, 0, 0, 39.995727539063);
    CreateDynamicObject(640, 956.70001220703, -1451.5, 13.39999961853, 0, 0, 270);
    CreateDynamicObject(640, 962, -1451.5, 13.39999961853, 0, 0, 270);
    CreateDynamicObject(3810, 954.5, -1448.6999511719, 15.199999809265, 0, 0, 0);
    CreateDynamicObject(15038, 955, -1447.6999511719, 13.699999809265, 0, 0, 0);
    CreateDynamicObject(1280, 955.29998779297, -1449.5, 13.5, 0, 0, 180);
    CreateDynamicObject(1280, 958, -1450.8000488281, 13.5, 0, 0, 269.99450683594);
    CreateDynamicObject(9131, 965, -1449.5999755859, 12.300000190735, 0, 90, 270);
    CreateDynamicObject(9131, 964.66998291016, -1449.5999755859, 12.60000038147, 0, 90, 270);
    CreateDynamicObject(949, 965.09997558594, -1451, 12.39999961853, 0, 0, 0);
    CreateDynamicObject(949, 964.90002441406, -1448.0999755859, 12.39999961853, 0, 0, 0);
    CreateDynamicObject(1690, 953.79998779297, -1439.3000488281, 16.799999237061, 0, 0, 0);
    CreateDynamicObject(1697, 951.5, -1429.8000488281, 17.5, 0, 0, 270);
    CreateDynamicObject(982, 1019.5, -1455.1999511719, 13.199999809265, 0, 0, 270);
    CreateDynamicObject(984, 1001.799987793, -1451.0999755859, 13.199999809265, 0, 0, 50);
    CreateDynamicObject(983, 999.90002441406, -1433.8000488281, 13.199999809265, 0, 0, 0);
    CreateDynamicObject(1425, 1009.799987793, -1441.4000244141, 13, 0, 0, 120);
    CreateDynamicObject(1238, 1014.0999755859, -1434.1999511719, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(983, 1003.0999755859, -1437, 13.199999809265, 0, 0, 269.99633789063);
    CreateDynamicObject(1238, 1022.700012207, -1434.1999511719, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1238, 1024.9000244141, -1435.5, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1238, 1012.0999755859, -1432.5999755859, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1238, 1026, -1445.3000488281, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1238, 1025.9000244141, -1437.5, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1238, 1025.8000488281, -1439.5, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1238, 1010.4000244141, -1430.8000488281, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1318, 1017.299987793, -1435.5, 12.5, 0, 90, 230);
    CreateDynamicObject(3379, 1025.8000488281, -1441.4000244141, 12.60000038147, 0, 0, 180);
    CreateDynamicObject(1238, 1024.4000244141, -1449.1999511719, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1238, 1020.700012207, -1446.3000488281, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1238, 1018, -1443, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(983, 1018.9000244141, -1452.6999511719, 13.199999809265, 0, 0, 221.99450683594);
    CreateDynamicObject(983, 1014.799987793, -1447.8000488281, 13.199999809265, 0, 0, 217.98974609375);
    CreateDynamicObject(1238, 1004.700012207, -1449.5999755859, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1238, 1009, -1451.9000244141, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1238, 1013.5999755859, -1452.0999755859, 12.89999961853, 0, 0, 0);
    CreateDynamicObject(1318, 1002.200012207, -1449.3000488281, 12.5, 0, 90, 139.99877929688);
    CreateDynamicObject(1318, 1014.799987793, -1450.8000488281, 12.5, 0, 90, 329.99877929688);
    CreateDynamicObject(1251, 1021.4000244141, -1443.5999755859, 12.5, 0, 0, 69.995727539063);
    CreateDynamicObject(1251, 1021.5999755859, -1439.4000244141, 12.5, 0, 0, 69.993896484375);
    CreateDynamicObject(1318, 1017.799987793, -1440.4000244141, 12.5, 0, 90, 159.99877929688);
    CreateDynamicObject(18075, 959.5, -1440.5, 15.39999961853, 0, 0, 0);
    CreateDynamicObject(1232, 953.70001220703, -1424.5, 15.199999809265, 0, 0, 0);
    CreateDynamicObject(1232, 953.70001220703, -1420, 15.199999809265, 0, 0, 0);
    CreateDynamicObject(1232, 953.79998779297, -1416, 15.199999809265, 0, 0, 0);
    CreateDynamicObject(1232, 954.5, -1452.0999755859, 15.199999809265, 0, 0, 0);
    CreateDynamicObject(1232, 1000.299987793, -1436.6999511719, 15.199999809265, 0, 0, 0);
    CreateDynamicObject(1232, 1043, -1464.5, 15.300000190735, 0, 0, 0);
    CreateDynamicObject(1232, 1046.6999511719, -1464.5, 15.300000190735, 0, 0, 0);
    CreateDynamicObject(640, 1044.9000244141, -1464.0999755859, 13.39999961853, 0, 0, 270);
	/*//New Island
	CreateObject(10410, -2077.97, -7664.46, 16.15,   0.00, 0.00, 249.99);
    CreateObject(6295, -2167.59, -7731.46, 75.98,   0.00, 0.00, 313.99);
    CreateObject(8493, -2069.85, -7560.68, 17.75,   0.00, 0.00, 286.00);
    CreateObject(9159, -2069.90, -7560.67, 17.66,   0.00, 0.00, 286.00);
    CreateObject(3886, -2045.37, -7603.08, 1.17,   0.00, 0.00, 112.00);
    CreateObject(3886, -2054.76, -7607.02, 1.17,   0.00, 0.00, 112.00);
    CreateObject(3886, -2063.81, -7611.25, 1.17,   0.00, 0.00, 113.99);
    CreateObject(3886, -2073.07, -7615.65, 1.17,   0.00, 0.00, 115.99);
    CreateObject(3886, -2082.34, -7619.91, 1.17,   0.00, 0.00, 115.99);
    CreateObject(3886, -2037.72, -7605.93, -24.58,   180.00, 0.00, 19.99);
    CreateObject(3886, -2034.00, -7614.66, -24.58,   179.99, 0.00, 23.98);
    CreateObject(3886, -2029.41, -7622.55, -24.58,   179.99, 0.00, 35.98);
    CreateObject(3886, -2026.52, -7627.24, -24.58,   179.99, 0.00, 37.98);
    CreateObject(3886, -2041.69, -7607.25, -25.08,   179.99, 0.00, 21.98);
    CreateObject(3886, -2046.06, -7608.58, -25.08,   179.99, 0.00, 21.98);
    CreateObject(3886, -2048.62, -7609.62, -25.08,   179.99, 0.00, 35.98);
    CreateObject(3886, -2053.34, -7612.22, -24.83,   179.99, 0.00, 23.97);
    CreateObject(3886, -2057.36, -7613.09, -24.83,   179.99, 0.00, 15.97);
    CreateObject(3886, -2058.91, -7614.17, -24.83,   179.99, 0.00, 43.97);
    CreateObject(3886, -2063.58, -7616.35, -24.83,   179.99, 0.00, 19.97);
    CreateObject(3886, -2067.72, -7617.73, -24.83,   179.99, 0.00, 19.96);
    CreateObject(3886, -2071.55, -7619.26, -24.83,   179.99, 0.00, 23.96);
    CreateObject(3886, -2074.91, -7620.97, -24.83,   179.99, 0.00, 27.96);
    CreateObject(3886, -2079.52, -7622.90, -24.83,   179.99, 0.00, 21.96);
    CreateObject(3886, -2084.46, -7623.97, -24.83,   179.99, 0.00, 11.96);
    CreateObject(3886, -2082.42, -7622.48, -37.58,   179.99, 0.00, 33.95);
    CreateObject(3886, -2079.69, -7621.20, -37.58,   179.99, 0.00, 17.95);
    CreateObject(3886, -2075.49, -7619.32, -37.58,   179.99, 0.00, 25.95);
    CreateObject(3886, -2072.36, -7617.98, -37.58,   179.99, 0.00, 21.95);
    CreateObject(3886, -2084.94, -7623.42, -37.58,   179.99, 0.00, 31.95);
    CreateObject(11245, -2168.12, -7732.64, 102.32,   0.00, 289.99, 0.00);
    CreateObject(16410, -2104.77, -7654.68, 16.91,   0.00, 0.00, 8.00);
    CreateObject(3249, -2067.42, -7629.32, 1.82,   0.00, 0.00, 205.99);
    CreateObject(16690, -2041.82, -7650.43, 5.23,   0.00, 0.00, 25.99);
    CreateObject(16051, -2063.61, -7621.02, 5.32,   0.00, 0.00, 296.00);
    CreateObject(16105, -2054.06, -7619.60, 3.71,   0.00, 0.00, 294.00);
    CreateObject(711, -2051.69, -7614.59, 7.42,   0.00, 0.00, 0.00);
    CreateObject(711, -2074.21, -7630.26, 8.17,   0.00, 0.00, 0.00);
    CreateObject(711, -2039.92, -7614.29, 7.92,   0.00, 0.00, 0.00);
    CreateObject(837, -2048.89, -7618.19, 2.70,   0.00, 0.00, 291.99);
    CreateObject(711, -2058.12, -7637.76, 8.67,   0.00, 0.00, 0.00);
    CreateObject(711, -2085.12, -7656.40, 22.17,   0.00, 0.00, 0.00);
    CreateObject(711, -2079.04, -7670.51, 17.77,   0.00, 0.00, 0.00);
    CreateObject(746, -2042.10, -7608.63, 2.04,   0.00, 0.00, 18.00);
    CreateObject(750, -2094.10, -7639.22, 16.50,   0.00, 0.00, 0.00);
    CreateObject(855, -2122.52, -7604.04, 0.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2118.81, -7604.04, -0.82,   0.00, 0.00, 0.00);
    CreateObject(855, -2114.67, -7606.59, 1.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2110.87, -7606.36, 1.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2113.22, -7605.51, 1.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2116.52, -7604.33, 1.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2121.70, -7606.19, 1.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2121.00, -7610.16, 1.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2107.17, -7609.73, 1.43,   0.00, 0.00, 0.00);
    CreateObject(855, -2108.31, -7608.01, 0.18,   0.00, 0.00, 0.00);
    CreateObject(855, -2104.99, -7611.04, 0.18,   0.00, 0.00, 0.00);
    CreateObject(855, -2106.84, -7613.07, 0.18,   0.00, 0.00, 0.00);
    CreateObject(855, -2111.08, -7613.27, 0.18,   0.00, 0.00, 0.00);
    CreateObject(855, -2116.23, -7612.97, 0.18,   0.00, 0.00, 0.00);
    CreateObject(855, -2115.89, -7612.60, 2.93,   0.00, 0.00, 0.00);
    CreateObject(855, -2113.02, -7609.46, 2.93,   0.00, 0.00, 0.00);
    CreateObject(855, -2110.45, -7611.47, 2.93,   0.00, 0.00, 0.00);
    CreateObject(855, -2104.06, -7615.44, 2.93,   0.00, 0.00, 0.00);
    CreateObject(855, -2105.83, -7618.55, 0.93,   0.00, 0.00, 0.00);
    CreateObject(855, -2109.57, -7618.22, 5.18,   0.00, 0.00, 0.00);
    CreateObject(855, -2107.70, -7614.50, 5.18,   0.00, 0.00, 0.00);
    CreateObject(855, -2107.70, -7614.50, 5.18,   0.00, 0.00, 0.00);
    CreateObject(1610, -2050.08, -7609.03, 1.70,   0.00, 0.00, 0.00);
    CreateObject(2782, -2094.12, -7639.89, 21.43,   0.00, 0.00, 338.00);
    CreateObject(711, -2100.20, -7637.92, 22.17,   0.00, 0.00, 0.00);
    CreateObject(711, -2111.62, -7697.52, 24.59,   0.00, 0.00, 0.00);
    CreateObject(711, -2092.01, -7699.61, 24.59,   0.00, 0.00, 0.00);
    CreateObject(711, -2118.54, -7644.17, 18.59,   0.00, 0.00, 0.00);
    CreateObject(3461, -2100.02, -7726.35, 32.75,   0.00, 0.00, 0.00);
    CreateObject(3461, -2093.30, -7728.35, 33.09,   0.00, 0.00, 0.00);
    CreateObject(3461, -2093.85, -7712.72, 26.67,   0.00, 0.00, 0.00);
    CreateObject(3461, -2088.64, -7714.66, 26.82,   0.00, 0.00, 0.00);
    CreateObject(3461, -2090.41, -7703.03, 22.48,   0.00, 0.00, 0.00);
    CreateObject(3461, -2077.82, -7686.26, 16.67,   0.00, 0.00, 0.00);
    CreateObject(3461, -2085.73, -7704.87, 22.38,   0.00, 0.00, 0.00);
    CreateObject(3461, -2082.08, -7684.87, 16.52,   0.00, 0.00, 0.00);
    CreateObject(3461, -2075.26, -7670.10, 12.92,   0.00, 0.00, 0.00);
    CreateObject(3461, -2069.68, -7671.35, 13.20,   0.00, 0.00, 0.00);
    CreateObject(3524, -2072.08, -7662.64, 11.63,   0.00, 0.00, 150.00);
    CreateObject(3524, -2066.39, -7665.21, 11.63,   0.00, 0.00, 155.99);
    CreateObject(711, -2111.62, -7697.52, 24.59,   0.00, 0.00, 0.00);
    CreateObject(711, -2128.17, -7723.98, 37.83,   0.00, 0.00, 0.00);
    CreateObject(2906, -2026.52, -7636.03, 0.23,   70.00, 0.00, 106.00);
    CreateObject(855, -2100.13, -7616.80, 1.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2101.38, -7621.28, 1.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2099.84, -7623.25, 1.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2095.71, -7624.46, 1.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2096.33, -7623.67, 1.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2098.64, -7621.34, 2.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2101.32, -7624.95, 2.68,   0.00, 0.00, 0.00);
    CreateObject(855, -2105.17, -7621.70, 3.68,   0.00, 0.00, 0.00);
    CreateObject(10409, -2105.54, -7727.36, 27.33,   0.00, 0.00, 252.00);
    CreateObject(10409, -2104.59, -7725.89, 19.67,   0.00, 0.00, 252.00);
    CreateObject(10409, -2103.37, -7732.86, 18.17,   0.00, 0.00, 252.00);
    CreateObject(18228, -2042.41, -7764.88, 0.00,   0.00, 0.00, 36.00);
    CreateObject(18228, -2058.57, -7795.75, 0.00,   0.00, 0.00, 358.00);
    CreateObject(18228, -2127.44, -7627.25, -4.25,   0.00, 0.00, 233.99);
    CreateObject(18228, -2023.91, -7709.11, -12.25,   0.00, 0.00, 39.99);
    CreateObject(18228, -2022.96, -7686.87, -3.89,   0.00, 0.00, 31.99);
    CreateObject(18228, -2128.08, -7653.04, -4.25,   0.00, 0.00, 237.99);
    CreateObject(18228, -2127.66, -7667.83, -1.50,   0.00, 0.00, 237.99);
    CreateObject(18228, -2130.26, -7694.27, -6.00,   0.00, 0.00, 237.99);
    CreateObject(18228, -2130.26, -7694.27, 0.75,   0.00, 0.00, 237.99);
    CreateObject(18228, -2132.85, -7702.26, 0.75,   0.00, 0.00, 229.99);
    CreateObject(18228, -2153.67, -7713.76, 14.25,   0.00, 0.00, 179.99);
    CreateObject(18228, -2159.62, -7702.87, 1.25,   0.00, 0.00, 179.98);
    CreateObject(18228, -2159.62, -7702.87, 1.25,   0.00, 0.00, 179.98);
    CreateObject(18228, -2163.27, -7714.20, 12.00,   0.00, 0.00, 199.98);
    CreateObject(18228, -2166.04, -7706.16, 1.50,   0.00, 0.00, 199.97);
    CreateObject(18228, -2171.84, -7719.27, 11.50,   0.00, 0.00, 199.98);
    CreateObject(18228, -2178.36, -7719.03, 29.75,   0.00, 0.00, 199.98);
    CreateObject(18228, -2180.43, -7710.43, 17.25,   0.00, 0.00, 199.98);
    CreateObject(18228, -2183.39, -7704.64, 10.25,   0.00, 0.00, 199.98);
    CreateObject(18228, -2186.91, -7697.74, 2.25,   0.00, 0.00, 199.98);
    CreateObject(18228, -2193.09, -7727.74, 18.50,   0.00, 0.00, 199.98);
    CreateObject(18228, -2201.84, -7727.96, 2.50,   0.00, 0.00, 199.98);
    CreateObject(18228, -2180.67, -7725.22, 37.50,   0.00, 0.00, 199.97);
    CreateObject(18228, -2173.78, -7748.95, 37.50,   0.00, 0.00, 259.98);
    CreateObject(18228, -2190.52, -7757.55, 19.25,   0.00, 0.00, 259.97);
    CreateObject(18228, -2202.40, -7762.47, 1.00,   0.00, 0.00, 259.97);
    CreateObject(18228, -2179.99, -7759.43, 1.00,   0.00, 0.00, 289.97);
    CreateObject(18228, -2177.27, -7707.10, 11.50,   0.00, 0.00, 199.97);
    CreateObject(18228, -2199.97, -7712.99, 14.75,   0.00, 0.00, 199.98);
    CreateObject(18228, -2208.20, -7701.68, 7.50,   0.00, 0.00, 199.97);
    CreateObject(18228, -2209.39, -7742.42, 5.50,   0.00, 0.00, 259.97);
    CreateObject(18228, -2160.81, -7714.95, 14.25,   0.00, 0.00, 177.98);
    CreateObject(18228, -2062.86, -7794.79, 10.25,   0.00, 0.00, 330.00);
    CreateObject(18228, -2089.48, -7797.66, 4.75,   0.00, 0.00, 330.00);
    CreateObject(18228, -2088.34, -7787.84, 18.75,   0.00, 0.00, 309.99);
    CreateObject(18228, -2108.85, -7757.39, 30.50,   0.00, 0.00, 39.99);
    CreateObject(18228, -2130.23, -7777.92, 24.50,   0.00, 0.00, 289.99);
    CreateObject(18228, -2137.99, -7795.25, 5.25,   0.00, 0.00, 289.98);
    CreateObject(18228, -2153.73, -7772.89, 5.25,   0.00, 0.00, 293.98);
    CreateObject(18228, -2168.76, -7785.05, 5.25,   0.00, 0.00, 307.98);
    CreateObject(18228, -2058.45, -7805.57, -1.75,   0.00, 0.00, 330.00);
    CreateObject(18228, -2162.16, -7766.62, 20.00,   0.00, 0.00, 305.97);
    CreateObject(18228, -2165.20, -7760.41, 28.75,   0.00, 0.00, 319.97);
    CreateObject(18228, -2170.50, -7753.71, 36.25,   0.00, 0.00, 319.97);
    CreateObject(18228, -2164.37, -7750.52, 36.25,   0.00, 0.00, 329.97);
    CreateObject(18228, -2175.98, -7763.43, 28.00,   0.00, 0.00, 305.97);
    CreateObject(18228, -2194.35, -7773.49, 13.00,   0.00, 0.00, 305.96);
    CreateObject(18228, -2204.53, -7782.02, 3.75,   0.00, 0.00, 293.96);
    CreateObject(18228, -2023.91, -7709.11, -12.25,   0.00, 0.00, 39.99);
    CreateObject(18228, -2032.90, -7729.96, 0.00,   0.00, 0.00, 39.99);
    CreateObject(18228, -2014.35, -7657.48, -9.64,   0.00, 0.00, 83.98);
    CreateObject(8483, -2141.61, -7748.52, 38.98,   0.00, 0.00, 73.98);
    CreateObject(18228, -2117.08, -7765.72, 30.50,   0.00, 0.00, 279.99);
    CreateObject(18228, -2131.99, -7768.18, 35.25,   0.00, 0.00, 279.99);
    CreateObject(18228, -2128.20, -7782.67, 19.75,   0.00, 0.00, 279.99);
    CreateObject(18228, -2112.23, -7612.62, -9.50,   0.00, 0.00, 117.99);
    CreateObject(18228, -2121.45, -7608.68, -9.50,   0.00, 0.00, 127.99);
    CreateObject(3434, -2140.03, -7741.95, 44.88,   0.00, 0.00, 161.99);
    CreateObject(1431, -2049.57, -7615.00, 2.74,   0.00, 0.00, 0.00);
    CreateObject(935, -2066.36, -7620.18, 2.52,   0.00, 0.00, 0.00);
    CreateObject(3243, -2105.42, -7647.03, 17.86,   0.00, 0.00, 221.99);
    CreateObject(3243, -2086.43, -7651.65, 17.36,   0.00, 0.00, 107.99);
    CreateObject(11427, -2066.43, -7724.34, 23.33,   0.00, 0.00, 273.99);
    CreateObject(5777, -2099.60, -7639.82, 17.93,   0.00, 0.00, 256.00);
    CreateObject(2895, -2099.82, -7640.59, 17.63,   0.00, 0.00, 0.00);
    CreateObject(16689, -2071.94, -7762.65, 36.08,   0.00, 0.00, 11.99);
    CreateObject(3461, -2094.71, -7740.53, 34.86,   0.00, 0.00, 0.00);
    CreateObject(3461, -2104.88, -7735.29, 34.32,   0.00, 0.00, 0.00);
    CreateObject(18228, -2109.48, -7765.70, 30.50,   0.00, 0.00, 271.98);
    CreateObject(16285, -2063.80, -7777.70, 33.10,   0.00, 0.00, 0.00);
    CreateObject(2780, -2144.34, -7742.71, 34.25,   0.00, 0.00, 0.00);
    CreateObject(2780, -2130.42, -7744.83, 34.25,   0.00, 0.00, 0.00);
    CreateObject(2780, -2138.88, -7743.75, 33.50,   0.00, 0.00, 0.00);
    CreateObject(2780, -2140.33, -7746.93, 47.75,   0.00, 0.00, 0.00);
    CreateObject(3524, -2139.05, -7742.75, 32.93,   0.00, 0.00, 170.00);
    CreateObject(3528, -2137.83, -7744.98, 41.92,   0.00, 344.99, 54.00);
    CreateObject(3528, -2140.74, -7744.37, 41.67,   0.00, 344.99, 76.00);
    CreateObject(14608, -2121.40, -7718.55, 23.33,   0.00, 0.00, 289.99);
    CreateObject(1313, -2077.86, -7753.56, 35.89,   0.00, 0.00, 0.00);
    CreateObject(2045, -2137.14, -7734.17, 33.10,   0.00, 0.00, 0.00);
    CreateObject(3364, -2038.80, -7662.40, 13.50,   4.00, 0.00, 216.00);
    CreateObject(16502, -2015.94, -7661.86, 11.33,   0.00, 0.00, 24.00);
    CreateObject(749, -2007.61, -7667.93, -3.09,   0.00, 0.00, 0.00);
    CreateObject(749, -2010.85, -7667.85, -3.34,   0.00, 0.00, 0.00);
    CreateObject(758, -2118.47, -7731.05, 31.74,   0.00, 0.00, 0.00);
    CreateObject(711, -2121.72, -7736.25, 39.18,   0.00, 0.00, 0.00);
    CreateObject(711, -2157.23, -7710.05, 57.16,   0.00, 0.00, 0.00);
    CreateObject(711, -2154.92, -7721.26, 57.20,   0.00, 0.00, 0.00);
    CreateObject(711, -2159.97, -7743.56, 58.33,   0.00, 0.00, 0.00);
    CreateObject(711, -2169.95, -7723.77, 58.16,   0.00, 0.00, 0.00);
    CreateObject(711, -2151.00, -7736.64, 57.77,   0.00, 0.00, 0.00);
    CreateObject(711, -2146.40, -7740.42, 49.35,   0.00, 0.00, 0.00);
    CreateObject(711, -2091.79, -7738.08, 39.39,   0.00, 0.00, 0.00);
    CreateObject(711, -2070.86, -7772.67, 38.86,   0.00, 0.00, 0.00);
    CreateObject(711, -2068.60, -7746.27, 38.73,   0.00, 0.00, 0.00);
    CreateObject(711, -2122.67, -7681.60, 23.98,   0.00, 0.00, 0.00);
    CreateObject(711, -2026.03, -7655.13, 17.96,   0.00, 0.00, 0.00);
    CreateObject(711, -2052.13, -7662.27, 19.23,   0.00, 0.00, 0.00);
    CreateObject(711, -2047.26, -7722.52, 21.59,   0.00, 0.00, 0.00);
    CreateObject(711, -2031.19, -7686.14, 19.00,   0.00, 0.00, 0.00);
    CreateObject(711, -2044.94, -7680.76, 19.88,   0.00, 0.00, 0.00);
    CreateObject(803, -2086.78, -7660.24, 18.90,   0.00, 0.00, 0.00);
    CreateObject(808, -2076.26, -7643.58, 4.46,   0.00, 0.00, 0.00);
    CreateObject(808, -2047.86, -7722.44, 16.94,   0.00, 0.00, 0.00);
    CreateObject(808, -2038.78, -7626.19, 3.55,   0.00, 0.00, 0.00);
    CreateObject(808, -2027.21, -7654.23, 14.04,   0.00, 0.00, 0.00);
    CreateObject(808, -2135.18, -7721.78, 35.17,   0.00, 0.00, 0.00);
    CreateObject(808, -2089.78, -7762.76, 34.86,   0.00, 0.00, 0.00);
    CreateObject(648, -2207.27, -7694.20, 14.49,   0.00, 41.00, 128.00);
    CreateObject(710, -2031.87, -7644.26, 16.71,   0.00, 0.00, 0.00);
    CreateObject(18228, -2180.62, -7742.37, 37.50,   0.00, 0.00, 243.97);
    CreateObject(3461, -2124.33, -7716.42, 23.18,   0.00, 0.00, 0.00);
    CreateObject(3461, -2117.53, -7719.12, 22.96,   0.00, 0.00, 0.00);
    CreateObject(2631, -2120.31, -7716.64, 21.68,   0.00, 0.00, 335.99);
    CreateObject(2869, -2120.27, -7717.03, 21.74,   0.00, 0.00, 302.00);
    CreateObject(14705, -2121.70, -7716.80, 21.90,   0.00, 0.00, 0.00);
    CreateObject(2096, -2080.10, -7753.02, 33.30,   0.00, 0.00, 130.00);
    CreateObject(838, -2048.98, -7743.14, 18.54,   0.00, 0.00, 0.00);
    CreateObject(18228, -2213.20, -7693.69, 1.25,   0.00, 0.00, 181.98);
    CreateObject(710, -2090.98, -7777.92, 47.72,   0.00, 0.00, 0.00);
    CreateObject(710, -2170.99, -7719.15, 64.05,   0.00, 0.00, 0.00);
    CreateObject(9831, -2122.89, -7721.57, 23.33,   0.00, 0.00, 332.00);
    CreateObject(9831, -2120.66, -7721.39, 23.33,   0.00, 0.00, 331.99);
    CreateObject(9831, -2123.51, -7719.75, 22.83,   0.00, 0.00, 31.99);
    CreateObject(1517, -2079.76, -7753.23, 32.75,   0.00, 0.00, 0.00);
    CreateObject(1520, -2066.32, -7620.07, 3.08,   0.00, 0.00, 0.00);
    CreateObject(1667, -2066.47, -7620.16, 3.15,   0.00, 0.00, 0.00);
    CreateObject(1736, -2079.12, -7753.83, 34.89,   0.00, 0.00, 208.00);
    CreateObject(1828, -2054.87, -7617.05, 1.61,   0.00, 0.00, 0.00);
    CreateObject(18228, -2046.07, -7789.42, -5.00,   0.00, 0.00, 330.00);
    CreateObject(18228, -2025.41, -7771.08, -15.25,   0.00, 0.00, 27.99);
    CreateObject(18228, -2217.64, -7732.85, -7.50,   0.00, 0.00, 271.97);
    CreateObject(18228, -2218.62, -7766.58, -7.50,   0.00, 0.00, 285.97);
    CreateObject(18228, -2216.17, -7776.45, -7.50,   0.00, 0.00, 319.97);
    CreateObject(18228, -2208.53, -7779.44, -7.50,   0.00, 0.00, 7.97);
    CreateObject(18228, -2188.69, -7787.85, -7.50,   0.00, 0.00, 27.97);
    CreateObject(18228, -2111.20, -7761.45, 30.50,   0.00, 0.00, 25.99);
    CreateObject(18228, -2110.34, -7770.38, 30.50,   0.00, 0.00, 269.98);
    CreateObject(18228, -2081.45, -7789.58, 18.75,   0.00, 0.00, 297.99);
    CreateObject(18228, -2187.14, -7745.08, 28.50,   0.00, 0.00, 243.97);
    CreateObject(18228, -2197.64, -7744.93, 14.75,   0.00, 0.00, 243.97);
    CreateObject(18228, -2211.18, -7693.79, -2.25,   0.00, 0.00, 199.97);
    CreateObject(18228, -2187.55, -7718.17, 25.25,   0.00, 0.00, 199.98);
    CreateObject(18228, -2215.04, -7750.00, 1.75,   0.00, 0.00, 259.97);
    CreateObject(18228, -2231.04, -7754.53, -12.00,   0.00, 0.00, 259.97);
    CreateObject(3872, -2171.26, -7726.15, 94.34,   0.00, 0.00, 300.00);
    CreateObject(18228, -2166.89, -7702.44, 1.75,   0.00, 0.00, 221.97);
    CreateObject(18228, -2158.60, -7707.25, 1.75,   0.00, 0.00, 207.97);
    CreateObject(900, -2157.60, -7665.80, -6.00,   0.00, 0.00, 0.00);
    CreateObject(900, -2151.10, -7648.97, -6.00,   0.00, 0.00, 0.00);
    CreateObject(900, -2135.69, -7661.19, -6.00,   0.00, 0.00, 344.00);
    CreateObject(900, -2140.20, -7671.99, -5.25,   0.00, 0.00, 352.00);
    CreateObject(900, -2139.60, -7659.26, -5.00,   0.00, 0.00, 0.00);
    CreateObject(18228, -2138.77, -7648.42, -9.50,   0.00, 0.00, 231.96);
    CreateObject(18228, -2125.25, -7794.01, 6.25,   0.00, 0.00, 279.99);
    CreateObject(18228, -2181.06, -7732.59, 36.00,   0.00, 0.00, 213.97);
    CreateObject(18228, -2164.67, -7753.12, 41.50,   0.00, 0.00, 335.97);
    CreateObject(18228, -2170.48, -7762.63, 29.50,   0.00, 0.00, 335.97);
    CreateObject(18228, -2182.95, -7750.86, 23.50,   0.00, 0.00, 327.96);
    CreateObject(18228, -2173.01, -7769.80, 18.75,   0.00, 0.00, 335.96);
    CreateObject(18228, -2011.50, -7662.16, -9.64,   0.00, 0.00, 83.99);
    CreateObject(622, -2156.67, -7797.49, 13.59,   0.00, 0.00, 248.00);
    CreateObject(18228, -2081.46, -7807.16, 0.25,   0.00, 0.00, 309.99);
    CreateObject(18228, -2133.17, -7812.24, -13.25,   0.00, 0.00, 279.99);
    CreateObject(18228, -2091.62, -7817.55, -13.25,   0.00, 0.00, 331.99);
    CreateObject(18228, -2047.77, -7805.03, -13.25,   0.00, 0.00, 5.98);
    CreateObject(18228, -2012.70, -7728.90, -16.25,   0.00, 0.00, 61.98);
    CreateObject(1458, -2048.98, -7626.10, 2.47,   0.00, 0.00, 342.00);
    CreateObject(16406, -2200.05, -7794.86, 16.23,   0.00, 0.00, 40.00);
    CreateObject(18228, -2192.60, -7757.65, 8.25,   0.00, 0.00, 327.96);
    CreateObject(18228, -2173.41, -7771.43, 16.50,   0.00, 0.00, 335.96);
    CreateObject(16404, -2112.30, -7677.04, 20.02,   0.00, 0.00, 0.00);
    CreateObject(1451, -2060.26, -7766.20, 33.68,   0.00, 0.00, 0.00);
    CreateObject(1454, -2086.55, -7770.07, 33.50,   0.00, 0.00, 0.00);
    CreateObject(6865, -2145.10, -7725.32, 42.47,   0.00, 0.00, 128.00);
    CreateObject(1486, -2098.75, -7571.04, 10.21,   0.00, 0.00, 0.00);
    CreateObject(1433, -2100.48, -7568.82, 9.12,   0.00, 0.00, 0.00);
    CreateObject(1609, -2013.29, -7648.17, 0.00,   0.00, 0.00, 0.00);
    CreateObject(18228, -2024.53, -7634.94, -15.64,   0.00, 0.00, 77.98);
    CreateObject(18228, -2032.51, -7611.65, -18.14,   0.00, 0.00, 77.98);
    CreateObject(18228, -2029.38, -7622.06, -15.64,   0.00, 0.00, 77.98);
    CreateObject(18228, -2037.00, -7603.05, -18.64,   0.00, 0.00, 85.98);
    CreateObject(18228, -2039.14, -7602.02, -18.64,   0.00, 0.00, 93.98);
    CreateObject(18228, -2126.34, -7657.73, -4.25,   0.00, 0.00, 237.99);
    CreateObject(18228, -2132.95, -7706.51, 4.25,   0.00, 0.00, 229.99);
    CreateObject(18228, -2132.95, -7716.77, 6.25,   0.00, 0.00, 229.99);
    CreateObject(18228, -2061.39, -7791.88, 14.75,   0.00, 0.00, 330.00);
    CreateObject(18228, -2070.94, -7791.34, 17.50,   0.00, 0.00, 314.00);
    CreateObject(18228, -2129.08, -7767.17, 35.25,   0.00, 0.00, 279.99);*/
	//FBI New HQ
	CreateDynamicObject(14847, 1560.6787109375, -1684.51171875, 1725.4956054688, 0, 0, 90);
	CreateDynamicObject(14848, 1563.0815429688, -1682.9155273438, 1723.4973144531, 0, 0, 90);
	CreateDynamicObject(14852, 1549.5620117188, -1684.634765625, 1727.5771484375, 0, 0, 90);
	CreateDynamicObject(14892, 1571.1171875, -1688.1083984375, 1728.3790283203, 0, 0, 90);
	CreateDynamicObject(14851, 1561.0231933594, -1684.5346679688, 1726.2297363281, 0, 0, 90);
	CreateDynamicObject(1569, 1549.7109375, -1686.181640625, 1722.0989990234, 0, 0, 88.494873046875);
	CreateDynamicObject(1569, 1549.7155761719, -1683.173828125, 1722.0989990234, 0, 0, 271.24487304688);
	door1 = CreateDynamicObject(1495, 1558.970703125, -1677.9114990234, 1722.1081542969, 0, 0, 0); // CLOSED DOORS 1
	door2 = CreateDynamicObject(1495, 1561.9755859375, -1677.8798828125, 1722.1081542969, 0, 0, 179.99450683594); // CLOSED DOORS 2
	CreateDynamicObject(1495, 1559.6491699219, -1677.8977050781, 1722.1081542969, 0, 0, 180); // DOORS NOT FOR USE
	CreateDynamicObject(1495, 1561.2772216797, -1677.9395751953, 1722.1081542969, 0, 0, 0); // DOORS NOT FOR USE
	CreateDynamicObject(1495, 1552.7789306641, -1691.4653320313, 1722.1081542969, 0, 0, 0); //LEFT DOOR NOT USED
	CreateDynamicObject(1495, 1551.1292724609, -1691.4696044922, 1722.1081542969, 0, 0, 179.99450683594); // RIGHT DOOR NOT USED
	door3 = CreateDynamicObject(1495, 1550.4266357422, -1691.5009765625, 1722.1081542969, 0, 0, 0); // RIGHT DOOR CLOSED
	door4 = CreateDynamicObject(1495, 1553.4294433594, -1691.4515380859, 1722.1081542969, 0, 0, 180); //LEFT DOOR CLOSED
	CreateDynamicObject(3859, 1555.9072265625, -1678.0869140625, 1722.7607421875, 0, 0, 287.24853515625);
	CreateDynamicObject(3859, 1559.609375, -1691.3029785156, 1722.7607421875, 0, 0, 287.24853515625);
	CreateDynamicObject(1811, 1554.6014404297, -1690.6214599609, 1722.7313232422, 0, 0, 272);
	CreateDynamicObject(1811, 1555.3798828125, -1690.6083984375, 1722.7313232422, 0, 0, 271.99951171875);
	CreateDynamicObject(1811, 1558.58203125, -1690.5570068359, 1722.7313232422, 0, 0, 271.99951171875);
	CreateDynamicObject(1811, 1557.8283691406, -1690.5720214844, 1722.7313232422, 0, 0, 271.99951171875);
	CreateDynamicObject(2635, 1556.5208740234, -1690.4576416016, 1722.509765625, 0, 0, 0);
	CreateDynamicObject(1811, 1553.9925537109, -1678.7869873047, 1722.7313232422, 0, 359.75, 88.99951171875);
	CreateDynamicObject(1811, 1553.1871337891, -1678.8201904297, 1722.7313232422, 0, 359.74731445313, 88.994750976563);
	CreateDynamicObject(1811, 1550.6711425781, -1678.9018554688, 1722.7313232422, 0, 359.74731445313, 90.994750976563);
	CreateDynamicObject(2635, 1551.8782958984, -1678.8499755859, 1722.509765625, 0, 0, 0);
	CreateDynamicObject(3858, 1562.2353515625, -1684.427734375, 1725.9052734375, 0, 0, 135);
	CreateDynamicObject(2208, 1565.3688964844, -1688.9642333984, 1722.1049804688, 0, 0, 89.25);
	CreateDynamicObject(2208, 1565.4560546875, -1683.5958251953, 1722.1049804688, 0, 0, 89.247436523438);
	CreateDynamicObject(2204, 1563.8812255859, -1678.1228027344, 1722.1049804688, 0, 0, 0.25);
	CreateDynamicObject(2894, 1565.4929199219, -1683.2951660156, 1722.9702148438, 0, 0, 120);
	CreateDynamicObject(1892, 1550.4637451172, -1683.3897705078, 1722.1049804688, 0, 0, 270);
	CreateDynamicObject(1892, 1550.4547119141, -1684.9942626953, 1722.1049804688, 0, 0, 270);
	CreateDynamicObject(2163, 1565.6490478516, -1691.2481689453, 1723.4522705078, 0, 359.25, 179.75);
	CreateDynamicObject(2164, 1551.2637939453, -1677.6009521484, 1722.0950927734, 0, 0, 180);
	CreateDynamicObject(2163, 1553.0098876953, -1677.6041259766, 1722.0930175781, 0, 0, 180);
	CreateDynamicObject(2197, 1563.9239501953, -1671.6114501953, 1722.1049804688, 0, 0, 0);
	CreateDynamicObject(2197, 1563.2835693359, -1671.6102294922, 1722.1049804688, 0, 0, 0);
	CreateDynamicObject(2197, 1564.5617675781, -1671.609375, 1722.1049804688, 0, 0, 0);
	CreateDynamicObject(2197, 1565.2025146484, -1671.6070556641, 1722.1049804688, 0, 0, 0);
	CreateDynamicObject(2197, 1565.2021484375, -1671.6064453125, 1722.634765625, 0, 0, 0);
	CreateDynamicObject(2197, 1564.5610351563, -1671.6043701172, 1722.634765625, 0, 0, 0);
	CreateDynamicObject(2197, 1563.9217529297, -1671.6044921875, 1722.634765625, 0, 0, 0);
	CreateDynamicObject(2197, 1563.2833251953, -1671.6064453125, 1722.634765625, 0, 0, 0);
	CreateDynamicObject(2200, 1550.1123046875, -1672.3017578125, 1722.1119384766, 0, 0, 89.49462890625);
	CreateDynamicObject(2165, 1558.0212402344, -1674.03515625, 1722.1049804688, 0, 0, 180);
	CreateDynamicObject(2166, 1555.0703125, -1675.107421875, 1722.1049804688, 0, 0, 0);
	CreateDynamicObject(2165, 1555.1351318359, -1672.0085449219, 1722.1059570313, 0, 0, 90);
	CreateDynamicObject(2165, 1552.8685302734, -1674.3509521484, 1722.1059570313, 0, 0, 180);
	CreateDynamicObject(1671, 1552.4464111328, -1673.1085205078, 1722.5721435547, 0, 0, 0);
	CreateDynamicObject(1671, 1557.5301513672, -1672.9681396484, 1722.5721435547, 0, 0, 0);
	CreateDynamicObject(1671, 1556.1381835938, -1671.4710693359, 1722.5721435547, 0, 0, 268.5);
	CreateDynamicObject(2616, 1558.6160888672, -1672.3182373047, 1724.0888671875, 0, 0, 270);
	CreateDynamicObject(2165, 1555.0947265625, -1668.4851074219, 1722.1059570313, 0, 0, 268.75);
	CreateDynamicObject(2165, 1558.154296875, -1668.4970703125, 1722.1059570313, 0, 0, 268.49487304688);
	CreateDynamicObject(2166, 1557.2095947266, -1667.0318603516, 1722.1049804688, 0, 0, 269.5);
	CreateDynamicObject(2165, 1552.2785644531, -1668.4486083984, 1722.1059570313, 0, 0, 268.74755859375);
	CreateDynamicObject(2165, 1555.1401367188, -1665.0535888672, 1722.1059570313, 0, 0, 268.74755859375);
	CreateDynamicObject(2165, 1552.283203125, -1665.0849609375, 1722.1059570313, 0, 0, 268.74755859375);
	CreateDynamicObject(2164, 1550.5020751953, -1662.5579833984, 1722.0950927734, 0, 0, 359.49450683594);
	CreateDynamicObject(2164, 1552.2470703125, -1662.5673828125, 1722.0950927734, 0, 0, 359.48913574219);
	CreateDynamicObject(2202, 1555.8001708984, -1662.9997558594, 1722.1119384766, 0, 0, 0);
	CreateDynamicObject(1671, 1550.9736328125, -1668.9665527344, 1722.5721435547, 0, 0, 88);
	CreateDynamicObject(1671, 1554.0920410156, -1668.9753417969, 1722.5721435547, 0, 0, 87.994995117188);
	CreateDynamicObject(1671, 1557.091796875, -1668.9833984375, 1722.5721435547, 0, 0, 87.994995117188);
	CreateDynamicObject(1671, 1554.0986328125, -1665.5952148438, 1722.5721435547, 0, 0, 87.994995117188);
	CreateDynamicObject(1671, 1551.09765625, -1665.6396484375, 1722.5721435547, 0, 0, 87.994995117188);
	CreateDynamicObject(2616, 1554.2237548828, -1670.0511474609, 1724.0888671875, 0, 0, 180);
	CreateDynamicObject(2165, 1556.9682617188, -1661.6063232422, 1722.1059570313, 0, 0, 179.24755859375);
	CreateDynamicObject(2165, 1553.5913085938, -1661.626953125, 1722.1059570313, 0, 0, 178.99743652344);
	CreateDynamicObject(2165, 1554.6396484375, -1657.5390625, 1722.1059570313, 0, 0, 178.74206542969);
	CreateDynamicObject(2166, 1555.0888671875, -1660.6533203125, 1722.1049804688, 0, 0, 179.48913574219);
	CreateDynamicObject(2165, 1558.0698242188, -1657.4354248047, 1722.1059570313, 0, 0, 179.74450683594);
	CreateDynamicObject(2165, 1551.4645996094, -1657.6751708984, 1722.1059570313, 0, 0, 178.74206542969);
	CreateDynamicObject(2165, 1554.6165771484, -1654.0340576172, 1722.1059570313, 0, 0, 178.74206542969);
	CreateDynamicObject(2165, 1557.9499511719, -1654.0950927734, 1722.1059570313, 0, 0, 179.74182128906);
	CreateDynamicObject(2202, 1550.4482421875, -1652.5078125, 1722.1049804688, 0, 0, 0);
	CreateDynamicObject(1671, 1552.931640625, -1660.576171875, 1722.5721435547, 0, 0, 359.99450683594);
	CreateDynamicObject(1671, 1556.2386474609, -1660.6827392578, 1722.5721435547, 0, 0, 9.7445068359375);
	CreateDynamicObject(1671, 1557.4249267578, -1656.2249755859, 1722.5721435547, 0, 0, 3.9893798828125);
	CreateDynamicObject(1671, 1557.2801513672, -1652.8701171875, 1722.5721435547, 0, 0, 1.738037109375);
	CreateDynamicObject(1671, 1554.0567626953, -1652.8929443359, 1722.5721435547, 0, 0, 1.73583984375);
	CreateDynamicObject(1671, 1554.0797119141, -1656.4822998047, 1722.5721435547, 0, 0, 1.73583984375);
	CreateDynamicObject(1671, 1550.8920898438, -1656.5832519531, 1722.5721435547, 0, 0, 1.73583984375);
	CreateDynamicObject(2612, 1558.6097412109, -1657.3355712891, 1724.083984375, 0, 0, 270);
	CreateDynamicObject(2616, 1558.6217041016, -1654.3928222656, 1723.9018554688, 0, 0, 270);
	door5 = CreateDynamicObject(10252, 1560.1090087891, -1653.4477539063, 1719.5637207031, 0, 0, 270.25); // CELL DOOR CLOSED
	CreateDynamicObject(2165, 1566.8505859375, -1662.0568847656, 1717.9025878906, 0, 0, 180.74743652344);
	CreateDynamicObject(2165, 1563.5756835938, -1662.0688476563, 1717.9025878906, 0, 0, 180.7470703125);
	CreateDynamicObject(2166, 1565.037109375, -1661.0903320313, 1717.900390625, 0, 0, 179.48913574219);
	CreateDynamicObject(1671, 1562.9711914063, -1661.1099853516, 1718.3341064453, 0, 0, 359.99450683594);
	CreateDynamicObject(1671, 1566.3414306641, -1661.0170898438, 1718.3341064453, 0, 0, 359.99450683594);
	CreateDynamicObject(1671, 1565.2408447266, -1663.1514892578, 1718.3341064453, 0, 0, 152.99450683594);
	CreateDynamicObject(2400, 1568.1694335938, -1673.7720947266, 1722.1014404297, 0, 0, 180);
	CreateDynamicObject(2164, 1560.8505859375, -1665.8892822266, 1717.8881835938, 0, 0, 179.98913574219);
	CreateDynamicObject(2164, 1562.5926513672, -1665.8927001953, 1717.8881835938, 0, 0, 179.98901367188);
	CreateDynamicObject(2200, 1567.1829833984, -1665.7159423828, 1717.8619384766, 0, 0, 178.74462890625);
	CreateDynamicObject(2612, 1558.609375, -1657.3349609375, 1724.083984375, 0, 0, 270);
	CreateDynamicObject(2612, 1567.6097412109, -1661.83984375, 1720.2657470703, 0, 0, 270);
	CreateDynamicObject(1502, 1562.3896484375, -1661.9794921875, 1729.1049804688, 0, 0, 90);
	CreateDynamicObject(2637, 1568.8544921875, -1661.0280761719, 1729.509765625, 0, 0, 0);
	CreateDynamicObject(2637, 1566.826171875, -1661.029296875, 1729.509765625, 0, 0, 0);
	CreateDynamicObject(2637, 1564.796875, -1661.03125, 1729.509765625, 0, 0, 0);
	CreateDynamicObject(1811, 1564.59765625, -1660.1904296875, 1729.7243652344, 0, 0, 91.99951171875);
	CreateDynamicObject(1811, 1565.822265625, -1660.2436523438, 1729.7243652344, 0, 0, 91.99951171875);
	CreateDynamicObject(1811, 1566.9383544922, -1660.2598876953, 1729.7243652344, 0, 0, 91.99951171875);
	CreateDynamicObject(1811, 1568.0690917969, -1660.2336425781, 1729.7243652344, 0, 0, 87.99951171875);
	CreateDynamicObject(1811, 1569.3212890625, -1660.1873779297, 1729.7243652344, 0, 0, 89.244995117188);
	CreateDynamicObject(1811, 1569.3409423828, -1661.8400878906, 1729.7243652344, 0, 0, 270.49194335938);
	CreateDynamicObject(1811, 1568.0673828125, -1661.8515625, 1729.7243652344, 0, 0, 270.48889160156);
	CreateDynamicObject(1811, 1566.9477539063, -1661.8598632813, 1729.7243652344, 0, 0, 270.48889160156);
	CreateDynamicObject(1811, 1565.763671875, -1661.853515625, 1729.7243652344, 0, 0, 270.48889160156);
	CreateDynamicObject(1811, 1564.5675048828, -1661.8399658203, 1729.7243652344, 0, 0, 270.48889160156);
	CreateDynamicObject(1714, 1570.697265625, -1661.1162109375, 1729.1049804688, 0, 0, 270);
	CreateDynamicObject(2165, 1555.1872558594, -1657.5249023438, 1729.0892333984, 0, 0, 269.49206542969);
	CreateDynamicObject(1671, 1550.9450683594, -1657.0825195313, 1729.5350341797, 0, 0, 359.99450683594);
	CreateDynamicObject(2165, 1555.1787109375, -1660.2744140625, 1729.0892333984, 0, 0, 269.48364257813);
	CreateDynamicObject(2165, 1551.5428466797, -1664.7469482422, 1729.0892333984, 0, 0, 178.73913574219);
	CreateDynamicObject(2165, 1551.5100097656, -1661.4954833984, 1729.0892333984, 0, 0, 178.73657226563);
	CreateDynamicObject(2165, 1551.556640625, -1658.2442626953, 1729.0892333984, 0, 0, 178.73657226563);
	CreateDynamicObject(1671, 1550.9600830078, -1660.3966064453, 1729.5350341797, 0, 0, 359.99450683594);
	CreateDynamicObject(1671, 1550.9423828125, -1663.421875, 1729.5350341797, 0, 0, 359.98901367188);
	CreateDynamicObject(1671, 1553.9912109375, -1660.98046875, 1729.5350341797, 0, 0, 89.994506835938);
	CreateDynamicObject(1671, 1554.0485839844, -1658.0402832031, 1729.5350341797, 0, 0, 89.994506835938);
	CreateDynamicObject(2164, 1555.0341796875, -1666.2138671875, 1729.0975341797, 0, 0, 230.48767089844);
	CreateDynamicObject(2202, 1555.1953125, -1663.5390625, 1729.1049804688, 0, 0, 269.24743652344);
	CreateDynamicObject(2166, 1564.0991210938, -1667.9174804688, 1729.1029052734, 0, 0, 89.999969482422);
	CreateDynamicObject(2165, 1563.0932617188, -1665.9896240234, 1729.1027832031, 0, 0, 90.741577148438);
	CreateDynamicObject(2166, 1570.8127441406, -1667.0698242188, 1729.1029052734, 0, 0, 179.99450683594);
	CreateDynamicObject(2165, 1568.8333740234, -1668.0599365234, 1729.1027832031, 0, 0, 179.73608398438);
	CreateDynamicObject(2202, 1564.5129394531, -1670.4855957031, 1729.1049804688, 0, 0, 179.99737548828);
	CreateDynamicObject(1714, 1564.1982421875, -1665.5805664063, 1729.1049804688, 0, 0, 270);
	CreateDynamicObject(1714, 1568.4188232422, -1666.9476318359, 1729.1049804688, 0, 0, 352.75);
	CreateDynamicObject(2197, 1570.2697753906, -1665.2131347656, 1729.1049804688, 0, 0, 270);
	CreateDynamicObject(2204, 1555.8548583984, -1671.8468017578, 1729.1049804688, 0, 0, 270);
	CreateDynamicObject(1713, 1568.6257324219, -1663.8311767578, 1729.1049804688, 0, 0, 359);
	CreateDynamicObject(3858, 1569.6866455078, -1671.1461181641, 1730.5749511719, 0, 0, 224.99993896484);
	CreateDynamicObject(1811, 1570.9351806641, -1670.2180175781, 1729.7243652344, 0, 0, 0.48886108398438);
	CreateDynamicObject(1811, 1567.5667724609, -1669.0914306641, 1729.7243652344, 0, 0, 254.4833984375);
	CreateDynamicObject(2010, 1563.3186035156, -1663.9576416016, 1729.0783691406, 0, 0, 0);
	CreateDynamicObject(2010, 1567.7115478516, -1663.9509277344, 1729.0783691406, 0, 0, 0);
	CreateDynamicObject(2010, 1570.7874755859, -1666.1130371094, 1729.0783691406, 0, 0, 0);
	CreateDynamicObject(2166, 1550.4735107422, -1674.7574462891, 1729.1029052734, 0, 0, 359.24450683594);
	CreateDynamicObject(2165, 1552.4696044922, -1673.7794189453, 1729.1027832031, 0, 0, 359.48083496094);
	CreateDynamicObject(1671, 1553.1348876953, -1675.0592041016, 1729.5350341797, 0, 0, 181.23902893066);
	CreateDynamicObject(2010, 1550.3454589844, -1671.8184814453, 1729.0783691406, 0, 0, 0);
	CreateDynamicObject(2010, 1555.3608398438, -1677.0268554688, 1729.0783691406, 0, 0, 0);
	CreateDynamicObject(2164, 1552.9368896484, -1677.5269775391, 1729.0975341797, 0, 0, 179.98767089844);
	CreateDynamicObject(1811, 1553.6968994141, -1672.6910400391, 1729.7243652344, 0, 0, 70.481811523438);
	CreateDynamicObject(2197, 1550.9265136719, -1676.4006347656, 1729.1049804688, 0, 0, 89.25);
	CreateDynamicObject(2165, 1563.9758300781, -1677.9991455078, 1729.1027832031, 0, 0, 268.73608398438);
	CreateDynamicObject(2166, 1564.8358154297, -1676.1884765625, 1729.1029052734, 0, 0, 268.99194335938);
	CreateDynamicObject(2165, 1563.9899902344, -1680.2158203125, 1729.1027832031, 0, 0, 268.73107910156);
	CreateDynamicObject(2165, 1564.0935058594, -1686.0129394531, 1729.1027832031, 0, 0, 268.73107910156);
	CreateDynamicObject(2165, 1564.1141357422, -1688.2531738281, 1729.1027832031, 0, 0, 268.73107910156);
	CreateDynamicObject(2166, 1565.7049560547, -1682.07421875, 1729.1029052734, 0, 0, 178.9892578125);
	CreateDynamicObject(2166, 1566.0612792969, -1690.0357666016, 1729.1029052734, 0, 0, 178.9892578125);
	CreateDynamicObject(2166, 1564.6635742188, -1684.2177734375, 1729.1029052734, 0, 0, 268.9892578125);
	CreateDynamicObject(1671, 1562.9649658203, -1678.5107421875, 1729.5350341797, 0, 0, 89.994506835938);
	CreateDynamicObject(1671, 1562.9923095703, -1680.6713867188, 1729.5350341797, 0, 0, 89.994506835938);
	CreateDynamicObject(1671, 1563.0739746094, -1686.5653076172, 1729.5350341797, 0, 0, 89.994506835938);
	CreateDynamicObject(1671, 1563.0981445313, -1688.8854980469, 1729.5350341797, 0, 0, 89.994506835938);
	CreateDynamicObject(2202, 1570.8410644531, -1680.0516357422, 1729.1049804688, 0, 0, 269.24450683594);
	CreateDynamicObject(2637, 1570.2834472656, -1686.4146728516, 1729.509765625, 0, 0, 0);
	CreateDynamicObject(1811, 1570.8620605469, -1685.1634521484, 1729.7243652344, 0, 0, 91.99951171875);
	CreateDynamicObject(1811, 1569.861328125, -1685.1728515625, 1729.7243652344, 0, 0, 91.99951171875);
	CreateDynamicObject(1811, 1569.8857421875, -1687.7446289063, 1729.7243652344, 0, 0, 268.24954223633);
	CreateDynamicObject(1811, 1570.8331298828, -1687.7547607422, 1729.7243652344, 0, 0, 268.24768066406);
	CreateDynamicObject(1502, 1555.5554199219, -1703.46484375, 1727.6875, 0, 0, 180);
	CreateDynamicObject(1502, 1560.5125732422, -1699.001953125, 1727.6875, 0, 0, 270.24450683594);
	CreateDynamicObject(1502, 1560.5512695313, -1696.8273925781, 1727.6875, 0, 0, 269.49169921875);
	CreateDynamicObject(2165, 1559.9223632813, -1701.7701416016, 1727.7056884766, 0, 0, 268.73107910156);
	CreateDynamicObject(2165, 1557.2222900391, -1699.4235839844, 1727.7056884766, 0, 0, 359.73107910156);
	CreateDynamicObject(2010, 1556.4606933594, -1699.552734375, 1727.6955566406, 0, 0, 0);
	CreateDynamicObject(1671, 1558.9417724609, -1702.3826904297, 1728.1032714844, 0, 0, 88.494506835938);
	CreateDynamicObject(1671, 1557.7303466797, -1700.5159912109, 1728.1032714844, 0, 0, 178.48937988281);
	CreateDynamicObject(2165, 1556.5736083984, -1696.3637695313, 1727.7056884766, 0, 0, 359.73083496094);
	CreateDynamicObject(2165, 1556.5556640625, -1693.1066894531, 1727.7056884766, 0, 0, 359.73083496094);
	CreateDynamicObject(1671, 1556.9515380859, -1697.5183105469, 1728.1032714844, 0, 0, 177.98937988281);
	CreateDynamicObject(1671, 1557.0155029297, -1694.2286376953, 1728.1032714844, 0, 0, 177.98400878906);
	CreateDynamicObject(2164, 1560.3641357422, -1693.9622802734, 1727.69921875, 0, 0, 269.98773193359);
	CreateDynamicObject(2010, 1560.1291503906, -1692.2045898438, 1727.6955566406, 0, 0, 28);
	CreateDynamicObject(1811, 1550.4191894531, -1697.6453857422, 1728.2985839844, 0, 0, 89.488891601563);
	CreateDynamicObject(1811, 1551.3605957031, -1697.6298828125, 1728.2985839844, 0, 0, 89.483642578125);
	CreateDynamicObject(1811, 1552.3485107422, -1697.6209716797, 1728.2985839844, 0, 0, 89.483642578125);
	CreateDynamicObject(1811, 1553.2763671875, -1697.5944824219, 1728.2985839844, 0, 0, 89.483642578125);
	CreateDynamicObject(1811, 1553.3436279297, -1699.3397216797, 1728.2985839844, 0, 0, 89.483642578125);
	CreateDynamicObject(1811, 1552.4538574219, -1699.3140869141, 1728.2985839844, 0, 0, 89.483642578125);
	CreateDynamicObject(1811, 1551.4167480469, -1699.3479003906, 1728.2985839844, 0, 0, 89.483642578125);
	CreateDynamicObject(1811, 1550.4156494141, -1699.3068847656, 1728.2985839844, 0, 0, 89.483642578125);
	CreateDynamicObject(1811, 1555.2335205078, -1697.9666748047, 1728.2985839844, 0, 0, 358.98364257813);
	CreateDynamicObject(1811, 1555.224609375, -1699.0031738281, 1728.2985839844, 0, 0, 358.97827148438);
	CreateDynamicObject(1811, 1555.2377929688, -1699.9914550781, 1728.2985839844, 0, 0, 358.97827148438);
	CreateDynamicObject(2165, 1556.3403320313, -1708.9675292969, 1727.7056884766, 0, 0, 359.73083496094);
	CreateDynamicObject(2165, 1556.369140625, -1712.1574707031, 1727.7056884766, 0, 0, 359.73083496094);
	CreateDynamicObject(2165, 1556.3212890625, -1715.2407226563, 1727.7056884766, 0, 0, 359.73083496094);
	CreateDynamicObject(2165, 1553.9617919922, -1715.1932373047, 1727.7056884766, 0, 0, 359.73083496094);
	CreateDynamicObject(2165, 1553.9102783203, -1712.1763916016, 1727.7056884766, 0, 0, 359.73083496094);
	CreateDynamicObject(2165, 1553.9462890625, -1709.0625, 1727.7056884766, 0, 0, 359.73083496094);
	CreateDynamicObject(2165, 1550.5040283203, -1709.0592041016, 1727.7056884766, 0, 0, 359.73083496094);
	CreateDynamicObject(2165, 1550.5354003906, -1712.2188720703, 1727.7056884766, 0, 0, 359.73083496094);
	CreateDynamicObject(2165, 1550.5209960938, -1715.1944580078, 1727.7056884766, 0, 0, 359.73083496094);
	CreateDynamicObject(1671, 1554.5499267578, -1710.1170654297, 1728.1032714844, 0, 0, 180.73937988281);
	CreateDynamicObject(1671, 1554.4759521484, -1713.1951904297, 1728.1032714844, 0, 0, 180.73608398438);
	CreateDynamicObject(1671, 1554.5845947266, -1716.1575927734, 1728.1032714844, 0, 0, 180.73608398438);
	CreateDynamicObject(1671, 1550.9645996094, -1716.2276611328, 1728.1032714844, 0, 0, 180.73608398438);
	CreateDynamicObject(1671, 1551.0290527344, -1713.2036132813, 1728.1032714844, 0, 0, 180.73608398438);
	CreateDynamicObject(1671, 1551.0323486328, -1710.0871582031, 1728.1032714844, 0, 0, 180.73608398438);
	CreateDynamicObject(1671, 1556.9754638672, -1709.9176025391, 1728.1032714844, 0, 0, 180.73608398438);
	CreateDynamicObject(1671, 1556.9692382813, -1713.2188720703, 1728.1032714844, 0, 0, 180.73608398438);
	CreateDynamicObject(1671, 1556.9124755859, -1716.2072753906, 1728.1032714844, 0, 0, 180.73608398438);
	CreateDynamicObject(2164, 1560.3686523438, -1709.06640625, 1727.69921875, 0, 0, 269.98352050781);
	CreateDynamicObject(2200, 1560.2320556641, -1713.5151367188, 1727.69921875, 0, 0, 269.49462890625);
	CreateDynamicObject(2010, 1560.0037841797, -1711.3508300781, 1727.6955566406, 0, 0, 27.998657226563);
	CreateDynamicObject(2010, 1555.2453613281, -1707.1857910156, 1727.6955566406, 0, 0, 27.998657226563);
	CreateDynamicObject(2010, 1550.4656982422, -1707.0255126953, 1727.6955566406, 0, 0, 27.998657226563);
	CreateDynamicObject(2202, 1550.3616943359, -1705.7396240234, 1727.7054443359, 0, 0, 90.494506835938);
	CreateDynamicObject(2165, 1554.7550048828, -1715.5963134766, 1723.5070800781, 0, 0, 180.7308807373);
	CreateDynamicObject(2165, 1554.7612304688, -1713.0939941406, 1723.5070800781, 0, 0, 180.73059082031);
	CreateDynamicObject(2165, 1551.5487060547, -1710.1943359375, 1723.5070800781, 0, 0, 180.73083496094);
	CreateDynamicObject(2165, 1551.7028808594, -1713.0958251953, 1723.5070800781, 0, 0, 180.73059082031);
	CreateDynamicObject(2165, 1551.7336425781, -1715.5969238281, 1723.5070800781, 0, 0, 180.73059082031);
	CreateDynamicObject(1671, 1550.9909667969, -1709.0815429688, 1723.9549560547, 0, 0, 0.736083984375);
	CreateDynamicObject(1671, 1551.1468505859, -1712.1588134766, 1723.9549560547, 0, 0, 0.7305908203125);
	CreateDynamicObject(1671, 1551.2099609375, -1714.5087890625, 1723.9549560547, 0, 0, 0.7305908203125);
	CreateDynamicObject(1671, 1554.1484375, -1714.8011474609, 1723.9549560547, 0, 0, 0.7305908203125);
	CreateDynamicObject(1671, 1554.2429199219, -1712.0563964844, 1723.9549560547, 0, 0, 0.7305908203125);
	CreateDynamicObject(2165, 1551.5954589844, -1705.8657226563, 1723.5070800781, 0, 0, 180.73059082031);
	CreateDynamicObject(2165, 1551.5607910156, -1703.2443847656, 1723.5070800781, 0, 0, 180.73059082031);
	CreateDynamicObject(2165, 1551.5288085938, -1700.7309570313, 1723.5070800781, 0, 0, 180.73059082031);
	CreateDynamicObject(1671, 1550.8858642578, -1704.7960205078, 1723.9549560547, 0, 0, 0.7305908203125);
	CreateDynamicObject(1671, 1550.8951416016, -1702.1226806641, 1723.9549560547, 0, 0, 0.7305908203125);
	CreateDynamicObject(1671, 1550.8908691406, -1699.6276855469, 1723.9549560547, 0, 0, 0.7305908203125);
	CreateDynamicObject(2164, 1555.2377929688, -1700.3732910156, 1723.4754638672, 0, 0, 269.98352050781);
	CreateDynamicObject(2010, 1554.791015625, -1705.7084960938, 1723.4622802734, 0, 0, 27.998657226563);
	CreateDynamicObject(2165, 1559.5126953125, -1695.1513671875, 1722.1027832031, 0, 0, 0.72509765625);
	CreateDynamicObject(2165, 1564.220703125, -1695.0986328125, 1722.0823974609, 0, 0, 0.7196044921875);
	CreateDynamicObject(1671, 1559.8891601563, -1696.42578125, 1722.5925292969, 0, 0, 182.7306060791);
	CreateDynamicObject(1671, 1564.9569091797, -1696.3143310547, 1722.5925292969, 0, 0, 182.73010253906);
	CreateDynamicObject(2010, 1559.3121337891, -1698.0067138672, 1722.1081542969, 0, 0, 27.998657226563);
	CreateDynamicObject(2010, 1565.5454101563, -1697.9234619141, 1722.1081542969, 0, 0, 27.998657226563);
	CreateDynamicObject(2164, 1562.6605224609, -1698.42578125, 1722.0843505859, 0, 0, 179.73352050781);
	CreateDynamicObject(1811, 1555.1475830078, -1698.0731201172, 1722.7313232422, 0, 0, 357.99951171875);
	CreateDynamicObject(1811, 1555.1492919922, -1697.2067871094, 1722.7313232422, 0, 0, 357.99499511719);
	CreateDynamicObject(1811, 1555.1143798828, -1696.4207763672, 1722.7313232422, 0, 0, 357.99499511719);
	/*// Universty
	CreateDynamicObject(18981,1416.85546875,-1923.65429688,1226.33496094,0.00000000,89.79675293,0.00000000); //object(concrete1mx25mx25m) (1)
    CreateDynamicObject(19450,1429.29699707,-1919.96704102,1228.50598145,0.00000000,0.00000000,0.00000000); //object(wall090) (1)
    CreateDynamicObject(19450,1429.31701660,-1914.79101562,1228.50598145,0.00000000,0.00000000,0.00000000); //object(wall090) (2)
    CreateDynamicObject(18981,1416.73901367,-1911.17895508,1226.33496094,0.00000000,89.79632568,0.00000000); //object(concrete1mx25mx25m) (2)
    CreateDynamicObject(18981,1392.05603027,-1925.56005859,1226.28503418,0.00000000,89.79632568,0.00000000); //object(concrete1mx25mx25m) (4)
    CreateDynamicObject(19450,1403.80700684,-1927.10705566,1228.50598145,0.00000000,0.00000000,0.00000000); //object(wall090) (11)
    CreateDynamicObject(19450,1403.81152344,-1902.22460938,1228.50598145,0.00000000,0.00000000,0.00000000); //object(wall090) (13)
    CreateDynamicObject(19450,1398.93298340,-1913.16894531,1228.50598145,0.00000000,0.00000000,270.00000000); //object(wall090) (14)
    CreateDynamicObject(19450,1403.80895996,-1917.81298828,1228.50598145,0.00000000,0.00000000,0.00000000); //object(wall090) (15)
    CreateDynamicObject(19388,1403.81701660,-1908.47399902,1228.50195312,0.00000000,0.00000000,0.00000000); //object(wall036) (1)
    CreateDynamicObject(19358,1403.81799316,-1911.66601562,1228.50195312,0.00000000,0.00000000,0.00000000); //object(wall006) (1)
    CreateDynamicObject(18981,1416.21289062,-1911.18652344,1226.33496094,0.00000000,89.79125977,0.00000000); //object(concrete1mx25mx25m) (5)
    CreateDynamicObject(19462,1402.04296875,-1908.78601074,1226.71594238,0.00000000,89.80020142,0.00000000); //object(wall102) (1)
    CreateDynamicObject(19462,1402.04797363,-1899.28405762,1226.71594238,0.00000000,89.79675293,0.00000000); //object(wall102) (2)
    CreateDynamicObject(19450,1400.31896973,-1901.75097656,1225.05505371,0.00000000,0.00000000,0.00000000); //object(wall090) (16)
    CreateDynamicObject(19450,1400.32604980,-1909.50097656,1225.05505371,0.00000000,0.00000000,0.00000000); //object(wall090) (17)
    CreateDynamicObject(19462,1398.58398438,-1908.45996094,1225.79003906,0.00000000,89.79632568,0.00000000); //object(wall102) (3)
    CreateDynamicObject(19462,1398.57897949,-1898.86096191,1225.79003906,0.00000000,89.79632568,0.00000000); //object(wall102) (4)
    CreateDynamicObject(19450,1396.90002441,-1909.48999023,1224.12902832,0.00000000,0.00000000,0.00000000); //object(wall090) (18)
    CreateDynamicObject(19450,1396.90698242,-1900.42199707,1224.12902832,0.00000000,0.00000000,0.00000000); //object(wall090) (19)
    CreateDynamicObject(19462,1395.28503418,-1908.44995117,1224.83898926,0.00000000,89.79632568,0.00000000); //object(wall102) (5)
    CreateDynamicObject(19462,1395.30505371,-1898.99804688,1224.83898926,0.00000000,89.79675293,0.00000000); //object(wall102) (6)
    CreateDynamicObject(19450,1393.50000000,-1909.48303223,1223.17797852,0.00000000,0.00000000,0.00000000); //object(wall090) (20)
    CreateDynamicObject(19450,1393.52197266,-1900.37500000,1223.17797852,0.00000000,0.00000000,0.00000000); //object(wall090) (21)
    CreateDynamicObject(19464,1400.86596680,-1912.99597168,1227.40100098,0.00000000,0.00000000,269.75000000); //object(wall104) (1)
    CreateDynamicObject(19464,1396.41394043,-1912.97399902,1227.40100098,0.00000000,0.00000000,269.74731445); //object(wall104) (2)
    CreateDynamicObject(19462,1391.88305664,-1908.44396973,1223.83801270,0.00000000,89.79632568,0.00000000); //object(wall102) (7)
    CreateDynamicObject(19462,1388.45605469,-1908.43994141,1223.83801270,0.00000000,89.79632568,0.00000000); //object(wall102) (8)
    CreateDynamicObject(19462,1384.98205566,-1908.47497559,1223.83801270,0.00000000,89.79632568,0.00000000); //object(wall102) (9)
    CreateDynamicObject(19462,1384.88500977,-1898.97399902,1223.83801270,0.00000000,89.79632568,0.00000000); //object(wall102) (10)
    CreateDynamicObject(19462,1388.33496094,-1898.93395996,1223.83801270,0.00000000,89.79632568,0.00000000); //object(wall102) (11)
    CreateDynamicObject(19462,1391.81005859,-1898.85595703,1223.83801270,0.00000000,89.79675293,0.00000000); //object(wall102) (12)
    CreateDynamicObject(19464,1390.56201172,-1912.98205566,1227.40100098,0.00000000,0.00000000,269.74731445); //object(wall104) (3)
    CreateDynamicObject(19464,1390.56799316,-1912.99304199,1222.42504883,0.00000000,180.00000000,89.74731445); //object(wall104) (4)
    CreateDynamicObject(19464,1385.29101562,-1912.96899414,1222.42504883,0.00000000,179.99450684,89.74731445); //object(wall104) (5)
    CreateDynamicObject(19464,1385.21105957,-1912.95703125,1227.40100098,0.00000000,0.00000000,269.74731445); //object(wall104) (6)
    CreateDynamicObject(19464,1400.77502441,-1897.46704102,1227.40100098,0.00000000,0.00000000,269.74731445); //object(wall104) (7)
    CreateDynamicObject(19464,1396.37500000,-1897.42504883,1227.40100098,0.00000000,0.00000000,269.74731445); //object(wall104) (8)
    CreateDynamicObject(19464,1391.26696777,-1897.37902832,1222.42504883,0.00000000,179.99450684,89.74731445); //object(wall104) (9)
    CreateDynamicObject(19464,1390.89794922,-1897.37194824,1227.40100098,0.00000000,0.00000000,269.74731445); //object(wall104) (10)
    CreateDynamicObject(19464,1386.01599121,-1897.37304688,1222.42504883,0.00000000,179.99450684,89.74731445); //object(wall104) (11)
    CreateDynamicObject(19464,1385.94201660,-1897.36303711,1227.40100098,0.00000000,0.00000000,269.74731445); //object(wall104) (12)
    CreateDynamicObject(1656,1471.04504395,-1857.85705566,1206.64904785,0.00000000,0.00000000,0.00000000); //object(esc_step) (1)
    CreateDynamicObject(14394,1399.29895020,-1914.12304688,1225.92895508,0.00000000,0.00000000,0.00000000); //object(dr_gsnew10) (1)
    CreateDynamicObject(14394,1395.99902344,-1914.15100098,1224.92895508,0.00000000,0.00000000,0.00000000); //object(dr_gsnew10) (2)
    CreateDynamicObject(14394,1392.65002441,-1914.27795410,1224.07995605,0.00000000,0.00000000,0.00000000); //object(dr_gsnew10) (3)
    CreateDynamicObject(2184,1400.97399902,-1898.83898926,1226.79699707,0.00000000,0.00000000,272.00000000); //object(med_office6_desk_2) (1)
    CreateDynamicObject(2184,1401.10400391,-1905.41601562,1226.79699707,0.00000000,0.00000000,271.99951172); //object(med_office6_desk_2) (2)
    CreateDynamicObject(2184,1397.38305664,-1898.56994629,1225.84802246,0.00000000,0.00000000,271.99951172); //object(med_office6_desk_2) (3)
    CreateDynamicObject(2184,1397.41394043,-1902.93896484,1225.84802246,0.00000000,0.00000000,271.99951172); //object(med_office6_desk_2) (4)
    CreateDynamicObject(2184,1397.40905762,-1907.17199707,1225.84802246,0.00000000,0.00000000,271.99951172); //object(med_office6_desk_2) (5)
    CreateDynamicObject(2184,1394.00500488,-1898.54699707,1224.92297363,0.00000000,0.00000000,271.99951172); //object(med_office6_desk_2) (6)
    CreateDynamicObject(2184,1394.03295898,-1902.99902344,1224.92297363,0.00000000,0.00000000,271.99951172); //object(med_office6_desk_2) (7)
    CreateDynamicObject(2184,1393.98400879,-1907.36804199,1224.92297363,0.00000000,0.00000000,271.99951172); //object(med_office6_desk_2) (8)
    CreateDynamicObject(19464,1403.81701660,-1900.19799805,1227.40100098,0.00000000,0.00000000,179.74731445); //object(wall104) (13)
    CreateDynamicObject(19464,1403.74804688,-1904.70300293,1227.40100098,0.00000000,0.00000000,179.99731445); //object(wall104) (14)
    CreateDynamicObject(19464,1403.76098633,-1912.18603516,1227.40100098,0.00000000,0.00000000,179.99450684); //object(wall104) (15)
    CreateDynamicObject(2079,1398.70605469,-1899.14794922,1226.51403809,0.00000000,0.00000000,345.25000000); //object(swank_din_chair_2) (1)
    CreateDynamicObject(2079,1402.57104492,-1900.29296875,1227.44104004,0.00000000,0.00000000,17.24536133); //object(swank_din_chair_2) (2)
    CreateDynamicObject(2079,1398.76098633,-1903.42199707,1226.51403809,0.00000000,0.00000000,345.24536133); //object(swank_din_chair_2) (3)
    CreateDynamicObject(2079,1398.81604004,-1904.50402832,1226.51403809,0.00000000,0.00000000,17.24304199); //object(swank_din_chair_2) (4)
    CreateDynamicObject(2079,1395.50000000,-1907.84094238,1225.56103516,0.00000000,0.00000000,345.24536133); //object(swank_din_chair_2) (5)
    CreateDynamicObject(2079,1398.92297363,-1908.80102539,1226.51403809,0.00000000,0.00000000,17.24304199); //object(swank_din_chair_2) (6)
    CreateDynamicObject(2079,1395.44104004,-1909.01794434,1225.56201172,0.00000000,0.00000000,17.24304199); //object(swank_din_chair_2) (8)
    CreateDynamicObject(2079,1398.86621094,-1907.69433594,1226.51403809,0.00000000,0.00000000,345.24536133); //object(swank_din_chair_2) (9)
    CreateDynamicObject(2079,1395.40600586,-1903.51403809,1225.56103516,0.00000000,0.00000000,345.24536133); //object(swank_din_chair_2) (11)
    CreateDynamicObject(2079,1395.26403809,-1898.98596191,1225.56103516,0.00000000,0.00000000,345.24536133); //object(swank_din_chair_2) (12)
    CreateDynamicObject(2079,1395.30895996,-1900.03894043,1225.56201172,0.00000000,0.00000000,17.24304199); //object(swank_din_chair_2) (13)
    CreateDynamicObject(2079,1398.75976562,-1900.10449219,1226.51403809,0.00000000,0.00000000,17.23754883); //object(swank_din_chair_2) (14)
    CreateDynamicObject(2079,1402.40905762,-1899.30297852,1227.44104004,0.00000000,0.00000000,348.24304199); //object(swank_din_chair_2) (15)
    CreateDynamicObject(2079,1402.35400391,-1906.06298828,1227.44104004,0.00000000,0.00000000,348.23913574); //object(swank_din_chair_2) (16)
    CreateDynamicObject(2079,1402.40295410,-1906.97497559,1227.44104004,0.00000000,0.00000000,17.24304199); //object(swank_din_chair_2) (17)
    CreateDynamicObject(19464,1383.32397461,-1900.14294434,1226.42602539,0.00000000,0.00000000,359.74731445); //object(wall104) (16)
    CreateDynamicObject(19464,1383.26196289,-1905.68103027,1226.42602539,0.00000000,0.00000000,359.74731445); //object(wall104) (17)
    CreateDynamicObject(19464,1383.29101562,-1909.96301270,1226.42602539,0.00000000,0.00000000,359.74731445); //object(wall104) (18)
    CreateDynamicObject(19464,1383.21594238,-1909.96704102,1229.22595215,0.00000000,0.00000000,359.74731445); //object(wall104) (19)
    CreateDynamicObject(19464,1382.96594238,-1909.98205566,1229.22595215,0.00000000,0.00000000,359.74731445); //object(wall104) (20)
    CreateDynamicObject(19464,1383.26293945,-1904.30200195,1229.22595215,0.00000000,0.00000000,359.74731445); //object(wall104) (21)
    CreateDynamicObject(19464,1383.29797363,-1900.02600098,1229.22595215,0.00000000,0.00000000,359.74731445); //object(wall104) (22)
    CreateDynamicObject(14455,1383.68395996,-1907.79394531,1225.60095215,0.00000000,0.00000000,270.00000000); //object(gs_bookcase) (1)
    CreateDynamicObject(14455,1383.74804688,-1898.21801758,1225.60095215,0.00000000,0.00000000,270.00000000); //object(gs_bookcase) (2)
    CreateDynamicObject(3077,1384.00402832,-1905.12597656,1223.92700195,0.00000000,0.00000000,270.00000000); //object(nf_blackboard) (1)
    CreateDynamicObject(18092,1387.25500488,-1905.11999512,1224.37194824,0.00000000,0.00000000,270.00000000); //object(ammun3_counter) (1)
    CreateDynamicObject(2853,1387.52404785,-1906.69897461,1224.87194824,0.00000000,0.00000000,0.00000000); //object(gb_bedmags03) (1)
    CreateDynamicObject(2828,1387.10705566,-1903.20605469,1224.87194824,0.00000000,0.00000000,112.25000000); //object(gb_ornament02) (1)
    CreateDynamicObject(2824,1387.64099121,-1905.12695312,1224.87194824,0.00000000,0.00000000,102.00000000); //object(gb_novels02) (1)
    CreateDynamicObject(2813,1387.14404297,-1907.32104492,1224.87194824,0.00000000,0.00000000,0.00000000); //object(gb_novels01) (1)
    CreateDynamicObject(2190,1387.66894531,-1904.18103027,1224.87194824,0.00000000,0.00000000,276.99996948); //object(pc_1) (1)
    CreateDynamicObject(3017,1387.69702148,-1903.34899902,1224.89404297,0.00000000,0.00000000,91.50000000); //object(arch_plans) (1)
    CreateDynamicObject(2164,1387.55603027,-1897.49694824,1223.95605469,0.00000000,0.00000000,0.00000000); //object(med_office_unit_5) (1)
    CreateDynamicObject(2164,1390.50500488,-1897.51403809,1223.95605469,0.00000000,0.00000000,0.00000000); //object(med_office_unit_5) (2)
    CreateDynamicObject(2079,1395.42382812,-1904.54199219,1225.56201172,0.00000000,0.00000000,17.24304199); //object(swank_din_chair_2) (18)
    CreateDynamicObject(1714,1386.43847656,-1905.56835938,1223.92895508,0.00000000,0.00000000,119.99816895); //object(kb_swivelchair1) (1)
    CreateDynamicObject(19461,1429.25305176,-1914.87402344,1228.50598145,0.00000000,0.00000000,0.25000000); //object(wall101) (2)
    CreateDynamicObject(19461,1429.27050781,-1920.00097656,1228.50598145,0.00000000,0.00000000,0.24719238); //object(wall101) (3)
    CreateDynamicObject(19461,1424.55078125,-1924.52832031,1228.50598145,0.00000000,0.00000000,271.24694824); //object(wall101) (4)
    CreateDynamicObject(19461,1408.17199707,-1931.26000977,1228.50598145,0.00000000,0.00000000,271.24145508); //object(wall101) (6)
    CreateDynamicObject(19461,1424.58203125,-1910.07226562,1228.50598145,0.00000000,0.00000000,271.24145508); //object(wall101) (7)
    CreateDynamicObject(19461,1408.47399902,-1903.78100586,1228.50598145,0.00000000,0.00000000,271.24694824); //object(wall101) (9)
    CreateDynamicObject(19461,1403.83105469,-1926.91296387,1228.50598145,0.00000000,0.00000000,0.24719238); //object(wall101) (10)
    CreateDynamicObject(19461,1403.83898926,-1917.51000977,1228.50598145,0.00000000,0.00000000,0.24719238); //object(wall101) (11)
    CreateDynamicObject(19461,1403.87097168,-1914.03198242,1228.50598145,0.00000000,0.00000000,0.24719238); //object(wall101) (12)
    CreateDynamicObject(19397,1403.84301758,-1908.46398926,1228.51696777,0.00000000,0.00000000,0.00000000); //object(wall045) (1)
    CreateDynamicObject(19461,1403.83996582,-1902.13000488,1228.50598145,0.00000000,0.00000000,0.24719238); //object(wall101) (13)
    CreateDynamicObject(18070,1407.70300293,-1917.32800293,1227.30895996,0.00000000,0.00000000,89.50000000); //object(gap_counter) (1)
    CreateDynamicObject(2190,1409.89794922,-1916.18994141,1227.81896973,0.00000000,0.00000000,276.99829102); //object(pc_1) (2)
    CreateDynamicObject(2190,1409.59301758,-1919.12097168,1227.81896973,0.00000000,0.00000000,225.99829102); //object(pc_1) (3)
    CreateDynamicObject(1714,1407.80200195,-1917.49096680,1226.80505371,0.00000000,0.00000000,119.99813843); //object(kb_swivelchair1) (2)
    CreateDynamicObject(2164,1404.08398438,-1919.17504883,1226.83105469,0.00000000,0.00000000,90.00000000); //object(med_office_unit_5) (3)
    CreateDynamicObject(2164,1404.06701660,-1916.47399902,1226.83105469,0.00000000,0.00000000,90.00000000); //object(med_office_unit_5) (4)
    CreateDynamicObject(1569,1429.19299316,-1915.51794434,1226.87597656,0.00000000,0.00000000,270.75000000); //object(adam_v_door) (1)
    CreateDynamicObject(1569,1429.23095703,-1918.51904297,1226.87597656,0.00000000,0.00000000,90.25000000); //object(adam_v_door) (2)
    CreateDynamicObject(638,1418.04394531,-1916.40905762,1227.53796387,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush) (1)
    CreateDynamicObject(638,1417.02697754,-1918.96203613,1227.53796387,0.00000000,0.00000000,270.00000000); //object(kb_planter_bush) (2)
    CreateDynamicObject(638,1414.87500000,-1918.95397949,1227.53796387,0.00000000,0.00000000,270.00000000); //object(kb_planter_bush) (3)
    CreateDynamicObject(638,1418.03796387,-1917.95996094,1227.53796387,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush) (4)
    CreateDynamicObject(638,1417.05297852,-1915.38305664,1227.53796387,0.00000000,0.00000000,270.00000000); //object(kb_planter_bush) (5)
    CreateDynamicObject(638,1414.88500977,-1915.38195801,1227.53796387,0.00000000,0.00000000,270.00000000); //object(kb_planter_bush) (6)
    CreateDynamicObject(638,1413.89294434,-1916.42395020,1227.53796387,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush) (7)
    CreateDynamicObject(638,1413.90002441,-1917.97497559,1227.53796387,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush) (8)
    CreateDynamicObject(1280,1418.75500488,-1917.19494629,1227.24499512,0.00000000,0.00000000,180.00000000); //object(parkbench1) (1)
    CreateDynamicObject(1280,1415.97302246,-1914.55297852,1227.24499512,0.00000000,0.00000000,269.99450684); //object(parkbench1) (2)
    CreateDynamicObject(1280,1415.93200684,-1919.80297852,1227.24499512,0.00000000,0.00000000,89.98901367); //object(parkbench1) (3)
    CreateDynamicObject(19373,1415.99694824,-1917.15405273,1226.76098633,0.00000000,89.80001831,0.00000000); //object(wall021) (1)
    CreateDynamicObject(870,1415.81103516,-1917.16503906,1227.08801270,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (1)
    CreateDynamicObject(870,1416.45104980,-1917.47705078,1227.08801270,0.00000000,0.00000000,310.00000000); //object(veg_pflowers2wee) (2)
    CreateDynamicObject(870,1415.39697266,-1916.79895020,1227.08801270,0.00000000,0.00000000,309.99572754); //object(veg_pflowers2wee) (3)
    CreateDynamicObject(870,1415.18896484,-1917.42102051,1227.08801270,0.00000000,0.00000000,309.99572754); //object(veg_pflowers2wee) (4)
    CreateDynamicObject(870,1416.31604004,-1916.85400391,1227.08801270,0.00000000,0.00000000,309.99572754); //object(veg_pflowers2wee) (5)
    CreateDynamicObject(1703,1425.66699219,-1910.88696289,1226.86901855,0.00000000,0.00000000,0.00000000); //object(kb_couch02) (1)
    CreateDynamicObject(1703,1421.16699219,-1910.90905762,1226.86901855,0.00000000,0.00000000,0.00000000); //object(kb_couch02) (2)
    CreateDynamicObject(1703,1423.26562500,-1923.63671875,1226.86901855,0.00000000,0.00000000,179.99450684); //object(kb_couch02) (3)
    CreateDynamicObject(1703,1427.66601562,-1923.65295410,1226.86901855,0.00000000,0.00000000,179.99450684); //object(kb_couch02) (4)
    CreateDynamicObject(15038,1424.40295410,-1910.76000977,1227.46594238,0.00000000,0.00000000,0.00000000); //object(plant_pot_3_sv) (1)
    CreateDynamicObject(15038,1424.45605469,-1923.91101074,1227.46594238,0.00000000,0.00000000,0.00000000); //object(plant_pot_3_sv) (2)
    CreateDynamicObject(1280,1408.51904297,-1904.35803223,1227.24499512,0.00000000,0.00000000,91.98901367); //object(parkbench1) (4)
    CreateDynamicObject(15038,1410.30957031,-1904.30468750,1227.46594238,0.00000000,0.00000000,0.00000000); //object(plant_pot_3_sv) (3)
    CreateDynamicObject(15038,1406.58605957,-1904.17895508,1227.46594238,0.00000000,0.00000000,0.00000000); //object(plant_pot_3_sv) (4)
    CreateDynamicObject(1280,1408.04602051,-1930.68298340,1227.24499512,0.00000000,0.00000000,269.98901367); //object(parkbench1) (5)
    CreateDynamicObject(15038,1409.96801758,-1930.88696289,1227.41601562,0.00000000,0.00000000,0.00000000); //object(plant_pot_3_sv) (5)
    CreateDynamicObject(15038,1406.19897461,-1930.83398438,1227.46594238,0.00000000,0.00000000,0.00000000); //object(plant_pot_3_sv) (6)
    CreateDynamicObject(19450,1413.25598145,-1898.96203613,1228.57495117,0.00000000,0.00000000,0.00000000); //object(wall090) (22)
    CreateDynamicObject(19450,1418.08703613,-1898.84899902,1228.57495117,0.00000000,0.00000000,270.00000000); //object(wall090) (23)
    CreateDynamicObject(19450,1424.68652344,-1898.81542969,1228.57495117,0.00000000,0.00000000,270.00000000); //object(wall090) (24)
    CreateDynamicObject(19450,1429.66394043,-1903.48205566,1228.57495117,0.00000000,0.00000000,0.00000000); //object(wall090) (25)
    CreateDynamicObject(19397,1416.42480469,-1906.99511719,1228.57897949,0.00000000,0.00000000,46.49963379); //object(wall045) (2)
    CreateDynamicObject(19369,1414.18298340,-1904.86596680,1228.57800293,0.00000000,0.00000000,46.50512695); //object(wall017) (1)
    CreateDynamicObject(19369,1418.68359375,-1909.13378906,1228.57800293,0.00000000,0.00000000,46.49414062); //object(wall017) (2)
    CreateDynamicObject(19450,1429.16296387,-1903.47204590,1228.57495117,0.00000000,0.00000000,0.00000000); //object(wall090) (27)
    CreateDynamicObject(19450,1429.15100098,-1905.15002441,1228.57495117,0.00000000,0.00000000,0.00000000); //object(wall090) (28)
    CreateDynamicObject(1492,1415.83898926,-1906.46899414,1226.80700684,0.00000000,0.00000000,315.99975586); //object(gen_doorint02) (1)
    CreateDynamicObject(19450,1424.59301758,-1909.95495605,1228.57495117,0.00000000,0.00000000,270.00000000); //object(wall090) (29)
    CreateDynamicObject(19388,1416.44335938,-1906.99121094,1228.50195312,0.00000000,0.00000000,46.49414062); //object(wall036) (2)
    CreateDynamicObject(19358,1414.32421875,-1904.96777344,1228.50195312,0.00000000,0.00000000,46.49414062); //object(wall006) (2)
    CreateDynamicObject(19358,1418.55957031,-1909.00097656,1228.50195312,0.00000000,0.00000000,46.74133301); //object(wall006) (3)
    CreateDynamicObject(1492,1403.90600586,-1907.70300293,1226.80700684,0.00000000,0.00000000,269.99975586); //object(gen_doorint02) (2)
    CreateDynamicObject(15038,1415.53405762,-1905.50195312,1227.46594238,0.00000000,0.00000000,0.00000000); //object(plant_pot_3_sv) (3)
    CreateDynamicObject(15038,1417.74499512,-1907.78295898,1227.46594238,0.00000000,0.00000000,0.00000000); //object(plant_pot_3_sv) (3)
    CreateDynamicObject(1703,1422.52404785,-1908.95495605,1226.86901855,0.00000000,0.00000000,179.99450684); //object(kb_couch02) (3)
    CreateDynamicObject(1703,1427.60498047,-1908.97802734,1226.86901855,0.00000000,0.00000000,179.99450684); //object(kb_couch02) (3)
    CreateDynamicObject(2165,1425.64196777,-1900.45996094,1226.87402344,0.00000000,0.00000000,90.00000000); //object(med_office_desk_1) (1)
    CreateDynamicObject(2166,1428.52905273,-1900.74694824,1226.87304688,0.00000000,0.00000000,179.50000000); //object(med_office_desk_2) (1)
    CreateDynamicObject(1714,1426.88696289,-1900.31494141,1226.87402344,0.00000000,0.00000000,289.99816895); //object(kb_swivelchair1) (1)
    CreateDynamicObject(2009,1414.91394043,-1900.34997559,1226.83398438,0.00000000,0.00000000,180.00000000); //object(officedesk2l) (1)
    CreateDynamicObject(2079,1415.65698242,-1901.22204590,1227.46899414,0.00000000,0.00000000,17.23754883); //object(swank_din_chair_2) (14)
    CreateDynamicObject(1714,1414.13903809,-1900.32397461,1226.87402344,0.00000000,0.00000000,39.99511719); //object(kb_swivelchair1) (1)
    CreateDynamicObject(2079,1427.78796387,-1902.55798340,1227.46899414,0.00000000,0.00000000,299.23754883); //object(swank_din_chair_2) (14)
    CreateDynamicObject(2370,1423.79101562,-1909.29003906,1226.86206055,0.00000000,0.00000000,0.00000000); //object(shop_set_1_table) (1)
    CreateDynamicObject(15038,1424.17797852,-1908.96997070,1228.34094238,0.00000000,0.00000000,0.00000000); //object(plant_pot_3_sv) (3)
    CreateDynamicObject(2200,1419.84497070,-1899.13000488,1226.84997559,0.00000000,0.00000000,0.00000000); //object(med_office5_unit_1) (1)
    CreateDynamicObject(2164,1418.07202148,-1899.00598145,1226.84204102,0.00000000,0.00000000,0.00000000); //object(med_office_unit_5) (5)
    CreateDynamicObject(2164,1422.06799316,-1899.00195312,1226.84204102,0.00000000,0.00000000,0.00000000); //object(med_office_unit_5) (6)
    CreateDynamicObject(2162,1413.39001465,-1901.15100098,1228.36096191,0.00000000,0.00000000,90.00000000); //object(med_office_unit_1) (1)
    CreateDynamicObject(2161,1428.99597168,-1900.24804688,1227.92602539,0.00000000,0.00000000,270.00000000); //object(med_office_unit_4) (1)
    CreateDynamicObject(2257,1429.04602051,-1905.16503906,1228.88403320,0.00000000,0.00000000,270.00000000); //object(frame_clip_4) (1)
    CreateDynamicObject(2258,1424.10400391,-1909.85595703,1229.12805176,0.00000000,0.00000000,180.00000000); //object(frame_clip_5) (1)
    CreateDynamicObject(19450,1429.28198242,-1929.42504883,1228.57604980,0.00000000,0.00000000,0.00000000); //object(wall090) (3)
    CreateDynamicObject(19450,1424.54296875,-1924.60302734,1228.57495117,0.00000000,0.00000000,270.50000000); //object(wall090) (24)
    CreateDynamicObject(19461,1429.27197266,-1929.45495605,1226.32995605,0.00000000,0.00000000,359.99719238); //object(wall101) (3)
    CreateDynamicObject(19461,1424.54895020,-1924.60595703,1226.32995605,0.00000000,0.00000000,270.50000000); //object(wall101) (3)
    CreateDynamicObject(19450,1429.28894043,-1931.27600098,1228.57604980,0.00000000,0.00000000,0.00000000); //object(wall090) (5)
    CreateDynamicObject(19461,1429.27001953,-1931.28100586,1226.32995605,0.00000000,0.00000000,359.99450684); //object(wall101) (3)
    CreateDynamicObject(19450,1424.47998047,-1936.10595703,1228.57495117,0.00000000,0.00000000,270.49987793); //object(wall090) (24)
    CreateDynamicObject(19461,1424.43701172,-1936.08105469,1226.32995605,0.00000000,0.00000000,270.49987793); //object(wall101) (3)
    CreateDynamicObject(19450,1414.95202637,-1936.16699219,1228.57495117,0.00000000,0.00000000,270.49987793); //object(wall090) (24)
    CreateDynamicObject(19461,1414.93505859,-1936.14904785,1226.32995605,0.00000000,0.00000000,270.49987793); //object(wall101) (3)
    CreateDynamicObject(19369,1418.68359375,-1909.13378906,1228.57800293,0.00000000,0.00000000,46.49414062); //object(wall017) (2)
    CreateDynamicObject(19369,1418.67797852,-1925.66101074,1228.50305176,0.00000000,0.00000000,313.49487305); //object(wall017) (2)
    CreateDynamicObject(19397,1416.33300781,-1927.85803223,1228.50402832,0.00000000,0.00000000,313.49487305); //object(wall045) (2)
    CreateDynamicObject(19369,1414.07702637,-1930.00500488,1228.50305176,0.00000000,0.00000000,313.49487305); //object(wall017) (2)
    CreateDynamicObject(19450,1413.06298828,-1935.89697266,1228.57604980,0.00000000,0.00000000,0.00000000); //object(wall090) (8)
    CreateDynamicObject(19461,1413.09497070,-1935.82397461,1226.32995605,0.00000000,0.00000000,359.99450684); //object(wall101) (3)
    CreateDynamicObject(19358,1414.22705078,-1929.89294434,1228.50195312,0.00000000,0.00000000,313.49487305); //object(wall006) (2)
    CreateDynamicObject(19388,1416.34094238,-1927.87500000,1228.50195312,0.00000000,0.00000000,313.49487305); //object(wall036) (2)
    CreateDynamicObject(19358,1418.63305664,-1925.71203613,1228.50195312,0.00000000,0.00000000,313.49487305); //object(wall006) (2)
    CreateDynamicObject(19369,1418.64099121,-1925.73303223,1226.32604980,0.00000000,0.00000000,313.49487305); //object(wall017) (2)
    CreateDynamicObject(19369,1418.07702637,-1926.26599121,1226.32604980,0.00000000,0.00000000,313.49487305); //object(wall017) (2)
    CreateDynamicObject(19369,1414.68896484,-1929.48400879,1226.32604980,0.00000000,0.00000000,313.49487305); //object(wall017) (2)
    CreateObject(19369,1412.40197754,-1931.65197754,1226.32604980,0.00000000,0.00000000,313.49487305); //object(wall017) (2)
    CreateObject(1492,1416.91296387,-1927.30603027,1226.73205566,0.00000000,0.00000000,223.99975586); //object(gen_doorint02) (1)
    CreateObject(2164,1429.15405273,-1926.71594238,1226.84204102,0.00000000,0.00000000,270.00000000); //object(med_office_unit_5) (7)
    CreateObject(2164,1429.17199707,-1933.49304199,1226.84204102,0.00000000,0.00000000,270.00000000); //object(med_office_unit_5) (8)
    CreateObject(2200,1429.07995605,-1929.87695312,1226.84997559,0.00000000,0.00000000,270.00000000); //object(med_office5_unit_1) (2)
    CreateObject(2112,1424.34399414,-1930.68005371,1227.25402832,0.00000000,0.00000000,0.00000000); //object(med_dinning_4) (1)
    CreateObject(2112,1423.04394531,-1930.68298340,1227.25402832,0.00000000,0.00000000,0.00000000); //object(med_dinning_4) (2)
    CreateObject(2112,1421.66894531,-1930.68603516,1227.25402832,0.00000000,0.00000000,0.00000000); //object(med_dinning_4) (3)
    CreateObject(2112,1420.31994629,-1930.68994141,1227.25402832,0.00000000,0.00000000,0.00000000); //object(med_dinning_4) (4)
    CreateObject(1714,1425.47399902,-1930.56494141,1226.86596680,0.00000000,0.00000000,284.00000000); //object(kb_swivelchair1) (5)
    CreateObject(1715,1424.39904785,-1929.36499023,1226.86303711,0.00000000,0.00000000,0.00000000); //object(kb_swivelchair2) (1)
    CreateObject(1715,1423.04797363,-1929.35095215,1226.86303711,0.00000000,0.00000000,0.00000000); //object(kb_swivelchair2) (2)
    CreateObject(1715,1421.67297363,-1929.36303711,1226.86303711,0.00000000,0.00000000,0.00000000); //object(kb_swivelchair2) (3)
    CreateObject(1715,1420.37304688,-1929.34802246,1226.86303711,0.00000000,0.00000000,0.00000000); //object(kb_swivelchair2) (4)
    CreateObject(1715,1420.39404297,-1931.74902344,1226.86303711,0.00000000,0.00000000,180.00000000); //object(kb_swivelchair2) (5)
    CreateObject(1715,1421.67004395,-1931.75500488,1226.86303711,0.00000000,0.00000000,179.99450684); //object(kb_swivelchair2) (6)
    CreateObject(1715,1422.96997070,-1931.76000977,1226.86303711,0.00000000,0.00000000,179.99450684); //object(kb_swivelchair2) (7)
    CreateObject(1715,1424.29504395,-1931.76599121,1226.86303711,0.00000000,0.00000000,179.99450684); //object(kb_swivelchair2) (8)
    CreateObject(1703,1422.28503418,-1935.43298340,1226.86901855,0.00000000,0.00000000,179.99450684); //object(kb_couch02) (3)
    CreateObject(15038,1419.44995117,-1935.45898438,1227.46594238,0.00000000,0.00000000,0.00000000); //object(plant_pot_3_sv) (3)
    CreateObject(15038,1423.12304688,-1935.52905273,1227.46594238,0.00000000,0.00000000,0.00000000); //object(plant_pot_3_sv) (3)
    CreateObject(2009,1414.72094727,-1934.56799316,1226.83398438,0.00000000,0.00000000,269.99450684); //object(officedesk2l) (2)
    CreateObject(2161,1413.16503906,-1935.54003906,1227.92602539,0.00000000,0.00000000,89.25000000); //object(med_office_unit_4) (2)
    CreateObject(2079,1414.63500977,-1935.45703125,1227.46899414,0.00000000,0.00000000,203.23754883); //object(swank_din_chair_2) (14)
    CreateObject(2571,1422.30395508,-1926.14294434,1226.85400391,0.00000000,0.00000000,0.00000000); //object(hotel_single_1) (1)
    CreateObject(9339,1411.40905762,-1923.40600586,1227.52197266,89.80020142,89.80093384,359.99890137); //object(sfnvilla001_cm) (1)
    CreateObject(9339,1411.98999023,-1923.94995117,1227.52197266,89.79632568,89.79705811,269.99426270); //object(sfnvilla001_cm) (2)
    CreateObject(9339,1411.39196777,-1924.53100586,1227.52197266,89.79675293,89.79675293,359.99450684); //object(sfnvilla001_cm) (3)
    CreateObject(9339,1410.88793945,-1923.91198730,1227.52197266,89.79125977,89.79125977,269.99450684); //object(sfnvilla001_cm) (4)
    CreateObject(9339,1411.97900391,-1911.82299805,1227.52197266,89.79156494,89.79040527,269.99536133); //object(sfnvilla001_cm) (5)
    CreateObject(9339,1411.38793945,-1911.28698730,1227.52197266,89.79632568,89.79702759,359.99423218); //object(sfnvilla001_cm) (6)
    CreateObject(9339,1411.39904785,-1912.41198730,1227.52197266,89.79632568,89.79663086,359.99465942); //object(sfnvilla001_cm) (7)
    CreateObject(9339,1410.85302734,-1911.83496094,1227.52197266,89.79125977,89.78576660,269.99450684); //object(sfnvilla001_cm) (8)
    CreateObject(4141,1411.44396973,-1912.15600586,1257.40405273,89.80020142,0.00000000,0.00000000); //object(hotelexterior1_lan) (1)
    CreateObject(4141,1411.44396973,-1908.10302734,1257.40405273,89.79632568,0.00000000,0.00000000); //object(hotelexterior1_lan) (2)
    CreateObject(4141,1390.34399414,-1907.90698242,1257.40405273,89.79632568,0.00000000,0.00000000); //object(hotelexterior1_lan) (3)
    CreateObject(4141,1386.29101562,-1908.54394531,1257.05505371,89.79675293,0.00000000,0.00000000); //object(hotelexterior1_lan) (4)
    CreateObject(4141,1413.29504395,-1912.14599609,1257.40405273,89.79675293,0.00000000,0.00000000); //object(hotelexterior1_lan) (5)
    CreateObject(18075,1408.91699219,-1926.01696777,1230.21801758,0.00000000,0.00000000,0.00000000); //object(lightd) (2)
    CreateObject(18075,1408.55603027,-1910.46997070,1230.21801758,0.00000000,0.00000000,0.00000000); //object(lightd) (3)
    CreateObject(18075,1424.09594727,-1917.36596680,1230.21801758,0.00000000,0.00000000,0.00000000); //object(lightd) (4)
    CreateObject(18075,1422.54602051,-1903.89697266,1230.14294434,0.00000000,0.00000000,0.00000000); //object(lightd) (5)
    CreateObject(18075,1423.35803223,-1931.31298828,1230.16796875,0.00000000,0.00000000,0.00000000); //object(lightd) (6)
    CreateObject(18075,1399.46594238,-1904.73095703,1229.84301758,0.00000000,0.00000000,0.00000000); //object(lightd) (7)
    CreateObject(18075,1390.06799316,-1904.64904785,1229.84301758,0.00000000,0.00000000,0.00000000); //object(lightd) (8)
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //
	CreateObject(1337,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); */
	//FBI
	CreateObject(14577, 1766.8818359375, -163.0498046875, 10.026786804199, 0, 0, 0, 300.0);
	CreateDynamicObject(980,320.10000610,-1487.59997559,26.39999962,0.00000000,0.00000000,326.00000000);
	FBIGate = CreateDynamicObject(980,284.29998779,-1543.40002441,26.20000076,0.00000000,0.00000000,325.99731445);
    CreateObject(14488, 1832.5908203125, -157.98828125, 7.5325045585632, 0, 0, 270, 300.0);
    CreateObject(3093, 1821.6416015625, -164.8427734375, 8.9824542999268, 0, 0, 179.99450683594, 300.0);
    CreateObject(3093, 1821.6469726563, -164.71719360352, 8.9824542999268, 0, 0, 179.99450683594, 300.0);
    CreateObject(10150, 1775.6837158203, -148.88383483887, 5.1457552909851, 0, 0, 0, 300.0);
    CreateObject(10150, 1775.6751708984, -146.10342407227, 5.1457552909851, 0, 0, 0, 300.0);
    CreateObject(3504, 2151.9624023438, 86.167503356934, 27.534030914307, 0, 0, 172, 300.0);
    CreateObject(3504, 2150.2546386719, 86.417388916016, 27.634029388428, 0, 340, 171.99645996094, 300.0);
    CreateObject(3504, 2148.4575195313, 86.541938781738, 27.534030914307, 0, 0, 171.99645996094, 300.0);
    CreateObject(14791, 1827.8920898438, -158.14352416992, 6.6050972938538, 0, 0, 0, 300.0);
    CreateObject(14782, 1801.5709228516, -158.58770751953, 4.1240577697754, 0, 0, 0, 300.0);
    CreateObject(14782, 1807.8201904297, -158.6208190918, 4.1240577697754, 0, 0, 0, 300.0);
    CreateObject(14782, 1798.6312255859, -162.15480041504, 4.1240577697754, 0, 0, 90, 300.0);
    CreateObject(14782, 1798.619140625, -168.78117370605, 4.1240577697754, 0, 0, 90, 300.0);
    CreateObject(14782, 1802.0788574219, -170.76602172852, 4.1240577697754, 0, 0, 180, 300.0);
    CreateObject(14782, 1807.5678710938, -171.0161895752, 4.1240577697754, 0, 0, 179.99450683594, 300.0);
    CreateObject(946, 1842.0892333984, -158.26264953613, 7.3207755088806, 0, 0, 92, 300.0);
    CreateObject(18070, 1804.9084472656, -165.01670837402, 3.5511231422424, 0, 0, 270, 300.0);
    CreateObject(16154, 1800.6433105469, -148.37963867188, 3.1073150634766, 0, 0, 90, 300.0);
    CreateObject(1737, 1795.2972412109, -176.10415649414, 3.1127243041992, 0, 0, 0, 300.0);
    CreateObject(1737, 1792.2889404297, -176.09899902344, 3.1127243041992, 0, 0, 0, 300.0);
    CreateObject(1737, 1786.3106689453, -176.11688232422, 3.1127243041992, 0, 0, 0, 300.0);
    CreateObject(1737, 1783.3216552734, -176.09262084961, 3.1127243041992, 0, 0, 0, 300.0);
    CreateObject(1737, 1789.2354736328, -176.09744262695, 3.1127243041992, 0, 0, 0, 300.0);
    CreateObject(1709, 1780.5502929688, -181.48300170898, 3.1082592010498, 0, 0, 270, 300.0);
    CreateObject(2069, 1802.2977294922, -183.07675170898, 3.1158738136292, 0, 0, 0, 300.0);
    CreateObject(2114, 1841.3162841797, -158.21304321289, 5.2641625404358, 0, 0, 0, 300.0);
    CreateObject(1722, 1783.6987304688, -176.73114013672, 3.1154851913452, 0, 0, 0, 300.0);
    CreateObject(1722, 1783.7380371094, -175.42916870117, 3.1154851913452, 0, 0, 192, 300.0);
    CreateObject(1722, 1786.7116699219, -177.14144897461, 3.1154851913452, 0, 0, 0, 300.0);
    CreateObject(1722, 1789.7109375, -177.17834472656, 3.1154851913452, 0, 0, 0, 300.0);
    CreateObject(1722, 1792.7109375, -177.21545410156, 3.1154851913452, 0, 0, 0, 300.0);
    CreateObject(1722, 1795.5375976563, -177.12535095215, 3.1154851913452, 0, 0, 328, 300.0);
    CreateObject(1722, 1795.8395996094, -175.05960083008, 3.1154851913452, 0, 0, 179.99682617188, 300.0);
    CreateObject(1722, 1792.7528076172, -175.01107788086, 3.1154851913452, 0, 0, 181.99450683594, 300.0);
    CreateObject(1722, 1789.9963378906, -174.9136505127, 3.1154851913452, 0, 0, 159.99450683594, 300.0);
    CreateObject(1722, 1786.8239746094, -175.0744934082, 3.1154851913452, 0, 0, 175.99389648438, 300.0);
    CreateObject(1723, 1795.6064453125, -189.97834777832, 3.1048874855042, 0, 0, 179.99993896484, 300.0);
    CreateObject(1723, 1798.6875, -189.9775390625, 3.1048874855042, 0, 0, 179.99450683594, 300.0);
    CreateObject(14576, 1790.0712890625, -177.630859375, -1.3194961547852, 0, 0, 270, 300.0);
    CreateObject(18036, 1767.525390625, -194.876953125, 0.49866136908531, 0, 357.98950195313, 90, 300.0);
    CreateObject(16770, 1761.6044921875, -184.4404296875, 0.37650647759438, 0, 0, 269.99450683594, 300.0);
    CreateObject(1209, 1810.8232421875, -162.9326171875, 3.1092667579651, 0, 0, 269.99450683594, 300.0);
    CreateObject(2705, 1798.5283203125, -159.33493041992, 4.6490917205811, 0, 0, 0, 300.0);
    CreateObject(2705, 1804.2977294922, -158.56265258789, 4.6490917205811, 0, 0, 292, 300.0);
    CreateObject(2689, 1798.6450195313, -159.56958007813, 4.6688966751099, 0, 0, 342, 300.0);
    CreateObject(2372, 1810.7719726563, -168.24127197266, 3.1114521026611, 0, 0, 0, 300.0);
    CreateObject(2706, 1810.5393066406, -167.24722290039, 3.7429921627045, 0, 0, 0, 300.0);
    CreateObject(2706, 1810.49609375, -167.09713745117, 3.7429921627045, 0, 0, 0, 300.0);
    CreateObject(2706, 1810.49609375, -167.0966796875, 3.7429921627045, 0, 0, 0, 300.0);
    CreateObject(2706, 1810.5390625, -167.54699707031, 3.7429921627045, 0, 0, 0, 300.0);
    CreateObject(2706, 1810.5390625, -167.77182006836, 3.7429921627045, 0, 0, 0, 300.0);
    CreateObject(2706, 1810.5390625, -168.02142333984, 3.7429921627045, 0, 0, 0, 300.0);
    CreateObject(2706, 1810.5390625, -168.19546508789, 3.7429921627045, 0, 0, 0, 300.0);
    CreateObject(2706, 1810.5390625, -168.37026977539, 3.7429921627045, 0, 0, 0, 300.0);
    CreateObject(2706, 1810.5390625, -168.52008056641, 3.7429921627045, 0, 0, 0, 300.0);
    CreateObject(934, 1783.7143554688, -176.72662353516, -0.78027927875519, 0, 0, 269.99996948242, 300.0);
    CreateObject(934, 1783.6573486328, -182.23204040527, -0.78027927875519, 0, 0, 269.99450683594, 300.0);
    CreateObject(927, 1783.060546875, -177.412109375, -1.0835292339325, 0, 0, 0, 300.0);
    CreateObject(2358, 1761.2677001953, -183.81509399414, -0.99189299345016, 0, 0, 0, 300.0);
    CreateObject(2359, 1762.1557617188, -183.75820922852, -0.89615625143051, 0, 0, 0, 300.0);
    CreateObject(2358, 1761.267578125, -183.814453125, -0.74189323186874, 0, 0, 0, 300.0);
    CreateObject(2358, 1761.267578125, -183.814453125, -0.491893440485, 0, 0, 0, 300.0);
    CreateObject(1211, 2230.9091796875, -90.8232421875, 25.845184326172, 0, 0, 0, 300.0);
    CreateObject(1211, 2285.2272949219, 133.70114135742, 25.820184707642, 0, 0, 0, 300.0);
    CreateObject(1211, 2525.6826171875, 103.2373046875, 25.820184707642, 0, 0, 0, 300.0);
    CreateObject(1257, 2217.3774414063, 34.245365142822, 26.763566970825, 0, 0, 268, 300.0);
    CreateObject(1363, 2302.1420898438, -19.664264678955, 26.320737838745, 0, 0, 0, 300.0);
    CreateObject(2066, 1775.939453125, -172.37748718262, 3.1024808883667, 0, 0, 0, 300.0);
    CreateObject(2066, 1776.5954589844, -171.99981689453, 3.0777697563171, 0, 0, 179.99993896484, 300.0);
    CreateObject(2162, 1777.4957275391, -171.99247741699, 3.102840423584, 0, 0, 0, 300.0);
    CreateObject(2191, 1779.3731689453, -172.4552154541, 3.1050071716309, 0, 0, 0, 300.0);
    CreateObject(2296, 1775.8177490234, -184.61199951172, 3.1148710250854, 0, 0, 90, 300.0);
    CreateObject(1735, 2319.8598632813, -62.407096862793, 25.484375, 0, 0, 0, 300.0);
    CreateObject(2311, 1780.2108154297, -183.39811706543, 3.1164512634277, 0, 0, 270, 300.0);
    CreateObject(2165, 1776.8831787109, -174.09187316895, 3.1072535514832, 0, 0, 269.99996948242, 300.0);
    CreateObject(1714, 1775.8905029297, -174.52066040039, 3.1092538833618, 0, 0, 86, 300.0);
    CreateObject(1714, 1776.6474609375, -178.72470092773, 3.1092538833618, 0, 4, 119.99548339844, 300.0);
    CreateObject(1998, 1776.3358154297, -178.01341247559, 3.1135334968567, 0, 0, 294, 300.0);
    CreateObject(1985, 1839.6892089844, -164.89013671875, 8.0324487686157, 0, 0, 0, 300.0);
    CreateObject(1985, 1836.50390625, -165.41690063477, 8.0324487686157, 0, 0, 0, 300.0);
    CreateObject(1985, 1836.5073242188, -167.69703674316, 8.0324487686157, 0, 0, 0, 300.0);
    CreateObject(1985, 1841.9831542969, -164.90020751953, 8.0324487686157, 0, 0, 0, 300.0);
    CreateObject(8674, 1787.3088378906, -176.09204101563, 5.4750175476074, 0, 0, 0, 300.0);
    CreateObject(8674, 1792.4445800781, -176.09838867188, 5.4750175476074, 0, 0, 0, 300.0);
    CreateObject(8674, 1787.30859375, -176.091796875, 2.4250173568726, 0, 0, 0, 300.0);
    CreateObject(8674, 1792.4495849609, -176.09216308594, 2.4250173568726, 0, 0, 0, 300.0);
    CreateObject(8674, 1782.5120849609, -169.05238342285, 4.2743482589722, 0, 0, 88, 300.0);
    CreateObject(8674, 1782.4869384766, -170.69334411621, 7.2243480682373, 0, 0, 87.994995117188, 300.0);
    CreateObject(7191, 1782.1419677734, -200.42297363281, 5.0655264854431, 0, 0, 0, 300.0);
    CreateObject(7191, 1782.1666259766, -198.22348022461, 7.6905360221863, 0, 0, 0, 300.0);
    CreateObject(2606, 1781.8991699219, -177.57788085938, 6.350145816803, 0, 0, 270, 300.0);
    CreateObject(2606, 1781.8981933594, -177.57638549805, 6.7751474380493, 0, 0, 269.99450683594, 300.0);
    CreateObject(2612, 1778.1287841797, -171.927734375, 5.3720097541809, 0, 0, 0, 300.0);
    CreateObject(2611, 1776.4223632813, -171.92608642578, 5.3813762664795, 0, 0, 0, 300.0);
    CreateObject(1587, 1766.4069824219, -202.19871520996, -0.33323276042938, 0, 0, 0, 300.0);
    CreateObject(1587, 1768.62109375, -200.18151855469, -0.33323276042938, 0, 0, 0, 300.0);
    CreateObject(1587, 1770.8013916016, -197.84097290039, -0.33323276042938, 0, 0, 0, 300.0);
    CreateObject(1587, 1764.2622070313, -204.54084777832, -0.33323276042938, 0, 0, 0, 300.0);
    CreateObject(1587, 1761.2703857422, -206.81300354004, -0.33323276042938, 0, 0, 0, 300.0);
    CreateObject(1586, 1768.6052246094, -200.13034057617, -1.0611902475357, 0, 0, 0, 300.0);
    CreateObject(1586, 1770.8029785156, -197.77349853516, -1.0611902475357, 0, 0, 0, 300.0);
    CreateObject(1586, 1766.3796386719, -202.1605682373, -1.0611902475357, 0, 0, 0, 300.0);
    CreateObject(1586, 1764.2548828125, -204.48956298828, -1.0611902475357, 0, 0, 0, 300.0);
    CreateObject(1586, 1761.2296142578, -206.77209472656, -1.0611902475357, 0, 0, 0, 300.0);
    CreateObject(3089, 1775.3518066406, -182.45237731934, 0.21931648254395, 0, 0, 92, 300.0);
    CreateObject(7191, 1772.2889404297, -181.73718261719, -19.059471130371, 90, 180.69494628906, 359.30505371094, 300.0);
    CreateObject(7191, 1777.5706787109, -179.85540771484, 24.690528869629, 270, 179.31182861328, 269.30639648438, 300.0);
    CreateObject(7191, 1777.5704345703, -179.82949829102, 24.690528869629, 270, 179.81115722656, 89.805694580078, 300.0);
    CreateObject(7191, 1778.5936279297, -179.85354614258, 24.690528869629, 270, 179.30786132813, 269.30236816406, 300.0);
    CreateObject(1491, 1780.5451660156, -179.89698791504, 3.1127243041992, 0, 0, 0, 300.0);
    CreateObject(7191, 1778.5408935547, -179.80459594727, 24.690528869629, 270, 179.81115722656, 89.805694580078, 300.0);
    CreateObject(7191, 1780.1652832031, -179.84375, 27.690528869629, 270, 179.94757080078, 89.942077636719, 300.0);
    CreateObject(7191, 1780.1783447266, -179.87109375, 27.740528106689, 270, 180.00408935547, 269.99859619141, 300.0);
    CreateObject(7191, 1800.99609375, -176.1943359375, 24.990528106689, 270, 179.99450683594, 269.98901367188, 300.0);
    CreateObject(7191, 1800.9670410156, -176.12078857422, 24.990528106689, 270, 180, 89.995880126953, 300.0);
    CreateObject(7191, 1800.9670410156, -176.12078857422, 24.990528106689, 270, 180, 89.995880126953, 300.0);
    CreateObject(1491, 1811.2344970703, -164.37358093262, 3.1127243041992, 0, 0, 269.99996948242, 300.0);
    CreateObject(1491, 1811.234375, -164.373046875, 5.5877242088318, 0, 0, 269.99450683594, 300.0);
    CreateObject(1491, 1822.0113525391, -164.71298217773, 5.0877223014832, 0, 0, 269.99450683594, 300.0);
    CreateObject(7191, 1799.7464599609, -176.20152282715, 24.990528106689, 270, 179.99450683594, 269.98901367188, 300.0);
    CreateObject(7191, 1799.6848144531, -176.14303588867, 24.990528106689, 270, 180.00149536133, 89.995910644531, 300.0);
    CreateObject(7191, 1797.458984375, -140.1181640625, 10.053957939148, 90, 179.92309570313, 180.07141113281, 300.0);
    CreateObject(7191, 1798.1083984375, -140.08984375, 10.053957939148, 90, 180.07141113281, 359.912109375, 300.0);
    CreateObject(7191, 1798.1083984375, -140.08984375, 10.053957939148, 90, 180.07141113281, 359.912109375, 300.0);
    CreateObject(8674, 1805.1226806641, -142.73063659668, 4.2737040519714, 0, 0, 0, 300.0);
    CreateObject(8674, 1803.3480224609, -142.71835327148, 7.1987047195435, 0, 0, 0, 300.0);
    CreateObject(8674, 1790.49609375, -142.70118713379, 4.2737040519714, 0, 0, 0, 300.0);
    CreateObject(8674, 1792.2692871094, -142.69256591797, 7.2237153053284, 0, 0, 0, 300.0);
    CreateObject(7191, 1792.2075195313, -140.72926330566, 4.8539562225342, 0, 180, 359.98348999023, 300.0);
    CreateObject(7191, 1792.2319335938, -140.72622680664, 6.0789608955383, 0, 179.99450683594, 359.97802734375, 300.0);
    CreateObject(7191, 1798.1242675781, -155.86117553711, 10.053957939148, 90, 180.07141113281, 359.912109375, 300.0);
    CreateObject(7191, 1797.7987060547, -155.82345581055, 10.053957939148, 90, 180.07141113281, 179.91204833984, 300.0);
    CreateObject(8674, 1805.0805664063, -153.5626373291, 4.2737040519714, 0, 0, 0, 300.0);
    CreateObject(8674, 1803.3033447266, -153.5765838623, 7.2237153053284, 0, 0, 0, 300.0);
    CreateObject(2635, 1794.8083496094, -142.15361022949, 3.5039968490601, 0, 0, 0, 300.0);
    CreateObject(1800, 1792.8939208984, -142.23677062988, 3.1061458587646, 0, 0, 0, 300.0);
    CreateObject(1800, 1792.8935546875, -142.236328125, 4.0561494827271, 0, 0, 0, 300.0);
    CreateObject(2635, 1800.6719970703, -142.24070739746, 3.5039968490601, 0, 0, 0, 300.0);
    CreateObject(1800, 1802.4154052734, -142.06558227539, 3.1061458587646, 0, 0, 0, 300.0);
    CreateObject(1800, 1802.4150390625, -142.0654296875, 4.0811495780945, 0, 0, 0, 300.0);
    CreateObject(1808, 1803.18359375, -151.10707092285, 3.1109623908997, 0, 0, 272, 300.0);
    CreateObject(1808, 1780.8828125, -172.1083984375, 3.1055202484131, 0, 0, 0, 300.0);
    CreateObject(2514, 1798.5662841797, -156.23887634277, 3.22900390625, 0, 0, 180, 300.0);
    CreateObject(2514, 1798.484375, -139.03515625, 3.0992784500122, 0, 0, 0, 300.0);
    CreateObject(2514, 1796.9970703125, -139.1875, 3.0996513366699, 0, 0, 0, 300.0);
    CreateObject(2635, 1800.6545410156, -154.21696472168, 3.5039968490601, 0, 0, 0, 300.0);
    CreateObject(1800, 1802.5582275391, -157.83964538574, 3.1061458587646, 0, 0, 0, 300.0);
    CreateObject(1800, 1802.5576171875, -157.8388671875, 4.1061496734619, 0, 0, 0, 300.0);
    CreateObject(1810, 1799.9964599609, -154.00680541992, 3.1100788116455, 0, 0, 86, 300.0);
    CreateObject(1810, 1800.50390625, -154.8359375, 3.1100788116455, 0, 0, 181.99548339844, 300.0);
    CreateObject(1810, 1801.3967285156, -142.5775604248, 3.1100788116455, 0, 0, 265.99401855469, 300.0);
    CreateObject(1810, 1800.8778076172, -141.61186218262, 3.1100788116455, 0, 0, 359.99002075195, 300.0);
    CreateObject(1810, 1795.052734375, -141.49652099609, 3.1100788116455, 0, 0, 359.98901367188, 300.0);
    CreateObject(1810, 1794.1431884766, -141.97515869141, 3.1100788116455, 0, 0, 77.989013671875, 300.0);
    CreateObject(1723, 1802.2977294922, -188.08203125, 3.1048874855042, 0, 0, 269.99450683594, 300.0);
    CreateObject(1723, 1802.3024902344, -184.40705871582, 3.1048874855042, 0, 0, 269.98901367188, 300.0);
    CreateObject(1723, 1802.2458496094, -177.9409942627, 3.1048874855042, 0, 0, 269.98901367188, 300.0);
    CreateObject(1723, 1798.7849121094, -176.95281982422, 3.1048874855042, 0, 0, 359.98901367188, 300.0);
    CreateObject(1723, 1782.9317626953, -182.52632141113, 3.0798873901367, 0, 0, 91.989013671875, 300.0);
    CreateObject(1723, 1783.0467529297, -185.77378845215, 3.0798873901367, 0, 0, 91.988525390625, 300.0);
    CreateObject(1723, 1783.1596679688, -188.97180175781, 3.0798873901367, 0, 0, 91.988525390625, 300.0);
    CreateObject(1742, 1785.927734375, -182.21212768555, 3.1166839599609, 0, 0, 272, 300.0);
    CreateObject(1742, 1792.9449462891, -181.80403137207, 3.1127243041992, 0, 0, 89.99951171875, 300.0);
    CreateObject(1491, 1772.7648925781, -183.29042053223, -1.0819970369339, 0, 0, 0, 300.0);
    CreateObject(9623, 2668.9018554688, 44.624286651611, 27.507638931274, 1.75, 0, 92, 300.0);
    CreateObject(9623, 2670.8928222656, 44.69393157959, 27.382640838623, 1.746826171875, 0, 91.99951171875, 300.0);
    CreateObject(968, 2675.8481445313, 43.40909576416, 25.320484161377, 0, 359.99993896484, 90.988494873047, 300.0);
	//LGarage
	CreateDynamicObject(14783,-1749.69995117,677.59997559,106.09999847,0.00000000,0.00000000,0.00000000); //object(int3int_kbsgarage) (1)
    CreateDynamicObject(13593,-1743.40002441,673.29998779,104.90000153,0.00000000,0.00000000,269.75000000); //object(kickramp03) (1)
    CreateDynamicObject(17951,-1845.28417969,675.06933594,110.12557983,0.00000000,0.00000000,0.00000000); //object(cjgaragedoor) (1)
    CreateDynamicObject(17951,-1756.90002441,674.79998779,106.50000000,0.00000000,0.00000000,0.00000000); //object(cjgaragedoor) (2)
    CreateDynamicObject(17951,-1756.90002441,680.70001221,106.50000000,0.00000000,0.00000000,0.00000000); //object(cjgaragedoor) (3)
	//LSFMD
	CreateDynamicObject(11008, 1487.8198242188, -2169.7194824219, 19.585941314697, 0, 0, 0);
	CreateDynamicObject(8553, 1493.646362, -2166.094727, 12.59, 0.0000, 0.0000, 179.9136); //Concrete
	CreateDynamicObject(8553, 1553.631714, -2166.116943, 12.59, 0.0000, 0.0000, 359.9136); //Concrete
	CreateDynamicObject(16564, 1577.7641601563, -2166.9350585938, 12.695111274719, 0, 0, 89.324768066406);
	CreateDynamicObject(17064, 1536.9736328125, -2161.5224609375, 12.695111274719, 0, 0, 0);
	CreateDynamicObject(12839, 1563.223511, -2183.149902, 16.214420, 0.0000, 0.0000, 0.0000); // Stairs To Helicopter
	CreateDynamicObject(1508, 369.2036, 162.4440, 1019.9944, 0.0000, 0.0000, 180.0000); //City Hall Room Block
	CreateDynamicObject(1569, 369.1764, 161.6, 1019.0, 0.0000, 0.0000, 90.0000); //City Hall Room Door
	//FBIGate = CreateDynamicObject(980,1831.19995117,-1314.80004883,15.30000019,0.00000000,0.00000000,273.25000000); //object(airportgate) (3)
    CreateDynamicObject(980,2875.19995117,-330.50000000,-2.79999995,0.00000000,0.00000000,266.50000000); //object(airportgate) (1)
    CreateDynamicObject(19458, 1519.46, -1649.37, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1515.98, -1649.36, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1519.42, -1640.01, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1516.00, -1639.99, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1522.93, -1587.99, -29.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1549.81, -1615.77, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1553.30, -1615.79, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1556.78, -1615.76, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1560.24, -1615.77, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1563.74, -1615.75, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1567.17, -1615.75, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1570.65, -1615.77, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1574.11, -1615.82, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1577.58, -1615.86, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1574.15, -1625.24, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1577.65, -1625.23, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1570.66, -1625.22, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1567.21, -1625.21, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1563.71, -1625.25, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1560.25, -1625.24, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1556.76, -1625.24, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1553.29, -1625.25, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19458, 1549.85, -1625.25, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(14877, 1522.78, -1589.92, -28.69,   0.00, 0.00, 270.00);
    CreateDynamicObject(19461, 1504.91, -1622.45, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1504.88, -1609.75, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1504.90, -1632.08, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1500.23, -1631.32, -24.89,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19461, 1500.11, -1612.27, -24.89,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19458, 1521.15, -1588.84, -28.30,   0.00, 0.00, 0.00);
    CreateDynamicObject(19458, 1524.40, -1588.47, -28.30,   0.00, 0.00, 0.00);
    CreateDynamicObject(19458, 1522.90, -1583.96, -27.96,   -90.00, 90.00, 0.00);
    CreateDynamicObject(19461, 1548.17, -1610.55, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1548.11, -1623.27, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1548.09, -1632.85, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1552.85, -1629.86, -24.89,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19461, 1562.28, -1629.85, -24.89,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19461, 1571.87, -1629.84, -24.89,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19461, 1581.29, -1629.85, -24.89,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19461, 1552.98, -1611.09, -24.89,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19461, 1562.53, -1611.06, -24.89,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19461, 1572.06, -1611.06, -24.89,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19461, 1581.37, -1611.07, -24.89,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19461, 1579.22, -1625.61, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1579.25, -1615.98, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19415, 1500.18, -1619.33, -24.88,   0.00, 0.00, 0.00);
    CreateDynamicObject(19415, 1500.21, -1622.45, -24.88,   0.00, 0.00, 0.00);
    CreateDynamicObject(19415, 1500.21, -1625.65, -24.88,   0.00, 0.00, 0.00);
    CreateDynamicObject(19415, 1500.23, -1628.80, -24.88,   0.00, 0.00, 0.00);
    CreateDynamicObject(19442, 1501.05, -1620.94, -24.94,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19442, 1500.99, -1623.96, -24.94,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19442, 1501.11, -1627.28, -24.94,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19442, 1501.11, -1630.32, -24.94,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19442, 1500.99, -1617.82, -24.94,   -180.00, 0.00, 90.00);
    CreateDynamicObject(19447, 1490.65, -1631.32, -24.88,   0.00, 0.00, 90.00);
    CreateDynamicObject(19447, 1481.15, -1631.32, -24.88,   0.00, 0.00, 90.00);
    CreateDynamicObject(19447, 1472.55, -1631.33, -24.88,   0.00, 0.00, 90.00);
    CreateDynamicObject(19447, 1490.68, -1612.26, -24.88,   0.00, 0.00, 90.00);
    CreateDynamicObject(19447, 1481.22, -1612.27, -24.88,   0.00, 0.00, 90.00);
    CreateDynamicObject(19447, 1471.75, -1612.25, -24.88,   0.00, 0.00, 90.00);
    CreateDynamicObject(19447, 1473.59, -1616.97, -24.88,   0.00, 0.00, 0.00);
    CreateDynamicObject(19447, 1473.62, -1626.50, -24.88,   0.00, 0.00, 0.00);
    CreateDynamicObject(2049, 1487.51, -1621.00, -26.16,   0.00, 0.00, 90.00);
    CreateDynamicObject(19442, 1487.39, -1620.90, -26.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(19442, 1476.35, -1626.75, -26.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(19442, 1481.71, -1623.26, -26.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(19442, 1479.30, -1614.85, -26.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(19442, 1479.96, -1619.84, -26.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(19442, 1485.23, -1616.80, -26.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(2049, 1485.37, -1616.80, -25.64,   0.00, 0.00, 90.00);
    CreateDynamicObject(2049, 1480.13, -1619.83, -25.51,   0.00, 0.00, 90.00);
    CreateDynamicObject(2049, 1481.89, -1623.28, -26.16,   0.00, 0.00, 90.00);
    CreateDynamicObject(2049, 1479.44, -1614.83, -25.12,   0.00, 0.00, 90.00);
    CreateDynamicObject(2049, 1476.53, -1626.90, -25.25,   0.00, 0.00, 90.00);
    CreateDynamicObject(19397, 1504.90, -1616.03, -24.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(19397, 1548.12, -1616.85, -24.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1521.25, -1649.22, -27.09,   0.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1521.26, -1639.66, -27.09,   0.00, 0.00, 0.00);
    CreateDynamicObject(3850, 1529.04, -1654.06, -24.73,   0.00, 0.00, 90.00);
    CreateDynamicObject(3850, 1525.57, -1654.05, -24.73,   0.00, 0.00, 90.00);
    CreateDynamicObject(3850, 1522.18, -1654.06, -24.73,   0.00, 0.00, 90.00);
    CreateDynamicObject(1536, 1545.25, -1651.25, -26.55,   0.00, 0.00, 90.00);
    CreateDynamicObject(1536, 1545.22, -1648.29, -26.55,   0.00, 0.00, 270.00);
    CreateDynamicObject(3051, 1528.28, -1584.34, -25.23,   0.00, 0.00, -45.00);
    CreateDynamicObject(3051, 1527.10, -1584.31, -25.23,   0.00, 0.00, 134.00);
    CreateDynamicObject(1491, 1515.31, -1635.25, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(1491, 1514.46, -1647.11, -26.58,   0.00, 0.00, 90.00);
    CreateDynamicObject(1491, 1514.43, -1616.83, -26.58,   0.00, 0.00, 90.00);
    CreateDynamicObject(1491, 1504.98, -1616.77, -26.58,   0.00, 0.00, 90.00);
    CreateDynamicObject(1491, 1538.51, -1617.65, -26.58,   0.00, 0.00, 90.00);
    CreateDynamicObject(1491, 1548.08, -1617.62, -26.58,   0.00, 0.00, 90.00);
    CreateDynamicObject(1491, 1536.08, -1609.96, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(1491, 1521.96, -1609.82, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(1491, 1515.34, -1609.74, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1544.95, -1651.60, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1544.94, -1648.05, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1531.23, -1653.96, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1537.93, -1654.16, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1521.69, -1663.17, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1521.76, -1635.74, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1534.54, -1635.83, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1537.91, -1635.59, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1537.87, -1634.31, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1534.63, -1628.37, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1518.45, -1628.30, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1514.96, -1615.03, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1514.99, -1610.07, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1521.83, -1610.06, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1535.60, -1610.35, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1538.29, -1615.70, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1525.07, -1602.63, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1530.96, -1602.58, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1524.42, -1594.13, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1529.22, -1585.05, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1526.19, -1584.90, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1517.36, -1586.62, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1515.93, -1584.84, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1497.60, -1584.56, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1497.70, -1602.60, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1513.80, -1602.69, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1543.64, -1605.30, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1538.93, -1605.22, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(19397, 1553.07, -1618.49, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19397, 1556.27, -1618.47, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19397, 1559.49, -1618.46, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19397, 1562.55, -1618.47, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19397, 1565.40, -1618.45, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19397, 1568.58, -1618.43, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19397, 1571.77, -1618.44, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19397, 1574.96, -1618.44, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19397, 1578.05, -1618.44, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19461, 1576.01, -1623.38, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1573.13, -1623.27, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1570.23, -1623.24, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1563.96, -1623.29, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1560.92, -1623.37, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1557.71, -1623.36, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1554.51, -1623.36, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19461, 1551.41, -1623.22, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19415, 1552.95, -1628.00, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19415, 1556.09, -1628.03, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19415, 1559.17, -1628.03, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19415, 1562.46, -1628.01, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19415, 1565.60, -1628.02, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19461, 1567.04, -1623.33, -24.89,   -180.00, 0.00, 0.00);
    CreateDynamicObject(19415, 1568.69, -1627.96, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19415, 1571.61, -1627.96, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19415, 1574.51, -1627.94, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(19415, 1577.63, -1627.94, -24.98,   0.00, 0.00, 90.00);
    CreateDynamicObject(2949, 1553.79, -1618.44, -26.61,   0.00, 0.00, 270.00);
    CreateDynamicObject(2949, 1556.97, -1618.40, -26.61,   0.00, 0.00, 270.00);
    CreateDynamicObject(2949, 1560.21, -1618.40, -26.61,   0.00, 0.00, 270.00);
    CreateDynamicObject(2949, 1563.28, -1618.41, -26.61,   0.00, 0.00, 270.00);
    CreateDynamicObject(2949, 1566.11, -1618.35, -26.61,   0.00, 0.00, 270.00);
    CreateDynamicObject(2949, 1569.31, -1618.37, -26.61,   0.00, 0.00, 270.00);
    CreateDynamicObject(2949, 1572.49, -1618.35, -26.61,   0.00, 0.00, 270.00);
    CreateDynamicObject(2949, 1575.67, -1618.36, -26.61,   0.00, 0.00, 270.00);
    CreateDynamicObject(2949, 1578.71, -1618.37, -26.61,   0.00, 0.00, 270.00);
    CreateDynamicObject(2010, 1548.61, -1629.15, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1578.70, -1611.61, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1548.67, -1611.71, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(1801, 1559.17, -1622.94, -26.64,   0.00, 0.00, -180.00);
    CreateDynamicObject(1801, 1562.47, -1622.78, -26.64,   0.00, 0.00, -180.00);
    CreateDynamicObject(1801, 1565.49, -1622.92, -26.64,   0.00, 0.00, -180.00);
    CreateDynamicObject(1801, 1568.59, -1622.92, -26.64,   0.00, 0.00, -180.00);
    CreateDynamicObject(1801, 1571.73, -1623.04, -26.64,   0.00, 0.00, -180.00);
    CreateDynamicObject(1801, 1574.69, -1623.05, -26.64,   0.00, 0.00, -180.00);
    CreateDynamicObject(1801, 1577.61, -1623.10, -26.64,   0.00, 0.00, -180.00);
    CreateDynamicObject(1801, 1555.99, -1622.94, -26.64,   0.00, 0.00, -180.00);
    CreateDynamicObject(1801, 1552.91, -1622.90, -26.64,   0.00, 0.00, -180.00);
    CreateDynamicObject(2198, 1527.50, -1613.09, -26.59,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1530.74, -1613.21, -26.59,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1533.53, -1613.62, -26.59,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1525.72, -1617.46, -26.53,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1529.18, -1617.94, -26.59,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1532.68, -1618.60, -26.53,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1524.54, -1621.21, -26.59,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1528.39, -1622.07, -26.59,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1531.85, -1622.75, -26.59,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1531.22, -1626.54, -26.59,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1527.16, -1625.87, -26.59,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1523.04, -1625.63, -26.53,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1519.07, -1613.90, -26.59,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1518.70, -1618.54, -26.53,   0.00, 0.00, 46.00);
    CreateDynamicObject(2198, 1518.40, -1622.95, -26.53,   0.00, 0.00, 46.00);
    CreateDynamicObject(1806, 1526.90, -1617.87, -26.58,   0.00, 0.00, 47.00);
    CreateDynamicObject(1806, 1525.73, -1621.59, -26.58,   0.00, 0.00, 44.00);
    CreateDynamicObject(1806, 1530.06, -1618.41, -26.58,   0.00, 0.00, 40.00);
    CreateDynamicObject(1806, 1529.18, -1622.50, -26.58,   0.00, 0.00, 47.00);
    CreateDynamicObject(1806, 1527.91, -1626.14, -26.58,   0.00, 0.00, 40.00);
    CreateDynamicObject(1806, 1523.73, -1626.07, -26.58,   0.00, 0.00, 47.00);
    CreateDynamicObject(1806, 1519.27, -1623.04, -26.58,   0.00, 0.00, 47.00);
    CreateDynamicObject(1806, 1531.93, -1626.91, -26.58,   0.00, 0.00, 33.00);
    CreateDynamicObject(1806, 1532.74, -1623.03, -26.58,   0.00, 0.00, 47.00);
    CreateDynamicObject(1806, 1533.51, -1618.78, -26.58,   0.00, 0.00, 40.00);
    CreateDynamicObject(1806, 1534.44, -1613.93, -26.58,   0.00, 0.00, 42.00);
    CreateDynamicObject(1806, 1531.70, -1613.48, -26.58,   0.00, 0.00, 55.00);
    CreateDynamicObject(1806, 1528.49, -1613.16, -26.58,   0.00, 0.00, 47.00);
    CreateDynamicObject(1806, 1519.56, -1618.48, -26.58,   0.00, 0.00, 47.00);
    CreateDynamicObject(1806, 1519.89, -1613.94, -26.58,   0.00, 0.00, 47.00);
    CreateDynamicObject(2164, 1533.90, -1609.98, -26.61,   0.00, 0.00, 0.00);
    CreateDynamicObject(2164, 1532.14, -1609.99, -26.61,   0.00, 0.00, 0.00);
    CreateDynamicObject(2164, 1530.42, -1609.98, -26.61,   0.00, 0.00, 0.00);
    CreateDynamicObject(2164, 1528.64, -1609.99, -26.61,   0.00, 0.00, 0.00);
    CreateDynamicObject(2164, 1526.87, -1609.98, -26.61,   0.00, 0.00, 0.00);
    CreateDynamicObject(2164, 1525.14, -1609.99, -26.61,   0.00, 0.00, 0.00);
    CreateDynamicObject(2612, 1514.53, -1620.90, -25.12,   0.00, 0.00, 90.00);
    CreateDynamicObject(2611, 1514.53, -1622.48, -25.11,   0.00, 0.00, 90.00);
    CreateDynamicObject(2611, 1514.54, -1624.06, -25.11,   0.00, 0.00, 90.00);
    CreateDynamicObject(2611, 1514.55, -1625.62, -25.11,   0.00, 0.00, 90.00);
    CreateDynamicObject(2611, 1514.55, -1612.15, -25.11,   0.00, 0.00, 90.00);
    CreateDynamicObject(2606, 1528.08, -1628.57, -24.71,   0.00, 0.00, 180.00);
    CreateDynamicObject(2606, 1530.06, -1628.56, -24.71,   0.00, 0.00, 180.00);
    CreateDynamicObject(2616, 1525.45, -1628.74, -24.70,   0.00, 0.00, 180.00);
    CreateDynamicObject(2310, 1521.71, -1639.02, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1521.56, -1642.76, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1521.64, -1647.76, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2604, 1518.98, -1637.29, -26.21,   0.00, 0.00, 90.00);
    CreateDynamicObject(2604, 1518.95, -1642.70, -26.21,   0.00, 0.00, 90.00);
    CreateDynamicObject(2604, 1519.00, -1648.15, -26.21,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1520.12, -1648.01, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1520.25, -1642.86, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1520.37, -1638.71, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1511.23, -1587.03, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1510.40, -1586.97, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1509.38, -1586.94, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1508.38, -1586.90, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1507.27, -1586.84, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2208, 1508.56, -1588.14, -26.62,   0.00, 0.00, 0.00);
    CreateDynamicObject(2208, 1505.70, -1588.13, -26.62,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1506.26, -1586.89, -26.18,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1506.26, -1589.12, -26.18,   0.00, 0.00, -90.00);
    CreateDynamicObject(2310, 1507.32, -1589.13, -26.18,   0.00, 0.00, -90.00);
    CreateDynamicObject(2310, 1508.31, -1589.15, -26.18,   0.00, 0.00, -90.00);
    CreateDynamicObject(2310, 1509.32, -1589.06, -26.18,   0.00, 0.00, -90.00);
    CreateDynamicObject(2310, 1510.34, -1589.02, -26.18,   0.00, 0.00, -90.00);
    CreateDynamicObject(2310, 1511.20, -1588.99, -26.18,   0.00, 0.00, -90.00);
    CreateDynamicObject(2310, 1504.68, -1588.07, -26.18,   0.00, 0.00, 900.00);
    CreateDynamicObject(1491, 1515.37, -1590.90, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2611, 1508.49, -1590.89, -25.16,   0.00, 0.00, 180.00);
    CreateDynamicObject(2611, 1509.97, -1590.89, -25.16,   0.00, 0.00, 180.00);
    CreateDynamicObject(2611, 1506.98, -1590.88, -25.16,   0.00, 0.00, 180.00);
    CreateDynamicObject(3077, 1501.85, -1587.84, -26.47,   0.00, 0.00, -90.00);
    CreateDynamicObject(2630, 1510.18, -1592.21, -26.57,   0.00, 0.00, 0.00);
    CreateDynamicObject(2628, 1510.39, -1600.82, -26.53,   0.00, 0.00, 135.00);
    CreateDynamicObject(2627, 1507.20, -1599.99, -26.62,   0.00, 0.00, 0.00);
    CreateDynamicObject(2628, 1502.50, -1593.40, -26.53,   0.00, 0.00, 47.00);
    CreateDynamicObject(2628, 1504.27, -1593.23, -26.53,   0.00, 0.00, 47.00);
    CreateDynamicObject(2628, 1506.79, -1592.86, -26.53,   0.00, 0.00, 47.00);
    CreateDynamicObject(2627, 1504.54, -1599.79, -26.62,   0.00, 0.00, 0.00);
    CreateDynamicObject(2627, 1502.23, -1599.70, -26.62,   0.00, 0.00, 0.00);
    CreateDynamicObject(1491, 1514.42, -1594.57, -26.58,   0.00, 0.00, 90.00);
    CreateDynamicObject(2631, 1499.18, -1594.92, -26.57,   0.00, 0.00, 0.00);
    CreateDynamicObject(2631, 1499.16, -1597.47, -26.57,   0.00, 0.00, 0.00);
    CreateDynamicObject(2390, 1508.02, -1591.30, -25.42,   0.00, 0.00, 0.00);
    CreateDynamicObject(2390, 1508.71, -1591.33, -25.42,   0.00, 0.00, 0.00);
    CreateDynamicObject(2371, 1543.59, -1598.90, -26.62,   0.00, 0.00, 0.00);
    CreateDynamicObject(2371, 1543.50, -1603.15, -26.62,   0.00, 0.00, 0.00);
    CreateDynamicObject(2371, 1543.53, -1601.03, -26.62,   0.00, 0.00, 0.00);
    CreateDynamicObject(2390, 1543.66, -1598.10, -25.87,   -22.58, 0.00, -0.06);
    CreateDynamicObject(2394, 1543.59, -1600.44, -25.74,   0.00, 0.00, 91.00);
    CreateDynamicObject(2394, 1543.55, -1602.66, -25.74,   0.00, 0.00, 91.00);
    CreateDynamicObject(1703, 1526.00, -1654.85, -26.62,   0.00, 0.00, 0.00);
    CreateDynamicObject(1703, 1523.50, -1654.83, -26.62,   0.00, 0.00, 0.00);
    CreateDynamicObject(1703, 1521.91, -1658.66, -26.62,   0.00, 0.00, 90.00);
    CreateDynamicObject(1703, 1527.93, -1602.41, -26.62,   0.00, 0.00, 180.00);
    CreateDynamicObject(1703, 1530.41, -1602.40, -26.62,   0.00, 0.00, 180.00);
    CreateDynamicObject(3077, 1486.54, -1646.86, -26.47,   0.00, 0.00, -90.00);
    CreateDynamicObject(2208, 1488.59, -1648.04, -26.62,   0.00, 0.00, 90.00);
    CreateDynamicObject(2310, 1500.88, -1644.80, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1500.79, -1645.90, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1500.73, -1648.14, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1500.72, -1649.22, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1498.54, -1648.22, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1498.54, -1649.14, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1496.63, -1649.15, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1496.66, -1648.07, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1498.80, -1645.61, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1498.92, -1644.58, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1496.75, -1645.61, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1496.77, -1644.56, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1494.33, -1644.60, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1494.29, -1645.78, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1494.38, -1648.04, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1494.31, -1649.08, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1492.03, -1649.07, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1492.05, -1648.07, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1492.17, -1644.57, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(2310, 1492.15, -1645.73, -26.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(3850, 1490.87, -1644.27, -26.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(3850, 1490.69, -1649.51, -26.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(3850, 1501.45, -1644.42, -26.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(3850, 1501.40, -1649.25, -26.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1502.12, -1645.90, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1501.91, -1647.90, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1490.48, -1645.60, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1490.29, -1648.00, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(1703, 1528.43, -1662.72, -26.62,   0.00, 0.00, 2700.00);
    CreateDynamicObject(1703, 1530.92, -1662.72, -26.62,   0.00, 0.00, 2700.00);
    CreateDynamicObject(1703, 1533.40, -1662.75, -26.62,   0.00, 0.00, 2700.00);
    CreateDynamicObject(1703, 1535.88, -1662.76, -26.62,   0.00, 0.00, 2700.00);
    CreateDynamicObject(2163, 1539.13, -1596.46, -26.59,   0.00, 0.00, 9000.00);
    CreateDynamicObject(1359, 1543.35, -1604.21, -25.82,   0.00, 0.00, 0.00);
    CreateDynamicObject(1359, 1533.65, -1628.30, -25.82,   0.00, 0.00, 0.00);
    CreateDynamicObject(1359, 1522.24, -1655.55, -25.82,   0.00, 0.00, 0.00);
    CreateDynamicObject(2690, 1522.05, -1654.24, -26.02,   0.00, 0.00, 0.00);
    CreateDynamicObject(2690, 1519.98, -1635.52, -24.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(1808, 1528.89, -1654.49, -26.56,   0.00, 0.00, 0.00);
    CreateDynamicObject(2610, 1536.46, -1596.64, -25.74,   0.00, 0.00, 0.00);
    CreateDynamicObject(2610, 1537.40, -1596.65, -25.74,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1535.66, -1597.21, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2610, 1537.88, -1596.64, -25.74,   0.00, 0.00, 0.00);
    CreateDynamicObject(2610, 1536.93, -1596.65, -25.74,   0.00, 0.00, 0.00);
    CreateDynamicObject(2610, 1538.38, -1596.64, -25.74,   0.00, 0.00, 0.00);
    CreateDynamicObject(2614, 1521.39, -1645.22, -26.21,   0.00, 0.00, 90.00);
    CreateDynamicObject(2614, 1521.39, -1640.84, -26.21,   0.00, 0.00, 90.00);
    CreateDynamicObject(2614, 1521.39, -1640.84, -26.21,   0.00, 0.00, 90.00);
    CreateDynamicObject(2614, 1521.40, -1650.16, -26.21,   0.00, 0.00, 90.00);
    CreateDynamicObject(1557, 1522.03, -1584.04, -29.51,   0.00, 0.00, 0.00);
    CreateDynamicObject(2690, 1539.78, -1605.68, -25.37,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1522.70, -1628.91, -24.95,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1530.12, -1628.91, -24.95,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1529.28, -1609.89, -24.95,   0.00, 0.00, -90.00);
    CreateDynamicObject(19431, 1534.41, -1609.88, -24.96,   0.00, 0.00, 90.00);
    CreateDynamicObject(19431, 1520.21, -1609.78, -24.96,   0.00, 0.00, 90.00);
    CreateDynamicObject(19431, 1518.64, -1609.78, -24.96,   0.00, 0.00, 90.00);
    CreateDynamicObject(19450, 1521.10, -1605.05, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1521.09, -1595.52, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1521.09, -1586.09, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1524.41, -1588.86, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1531.38, -1588.92, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1531.38, -1598.45, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1524.38, -1605.17, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1535.21, -1605.18, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1535.22, -1595.70, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1544.25, -1600.81, -25.12,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1538.55, -1610.49, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1538.41, -1623.27, -25.03,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1538.42, -1632.80, -25.03,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1538.42, -1639.78, -25.03,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1545.33, -1649.19, -25.03,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1538.46, -1658.74, -25.03,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1521.17, -1658.87, -25.03,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1514.42, -1652.80, -25.11,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1514.41, -1639.95, -24.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1514.40, -1630.55, -24.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1514.40, -1622.53, -24.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1514.39, -1609.67, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1514.39, -1600.17, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19431, 1514.38, -1591.56, -24.96,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1517.76, -1605.07, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1517.76, -1595.53, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1517.77, -1586.15, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1486.02, -1646.86, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1504.92, -1652.88, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1504.78, -1639.80, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1535.01, -1630.58, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1517.80, -1630.56, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1522.67, -1635.29, -24.95,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1530.17, -1635.31, -24.95,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1543.18, -1653.99, -25.03,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1543.28, -1644.49, -25.03,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1516.46, -1654.12, -25.12,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1525.98, -1663.64, -25.03,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1534.88, -1663.64, -25.03,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1509.65, -1648.11, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1509.52, -1644.62, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1500.41, -1651.57, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1490.82, -1651.57, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1500.11, -1642.46, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1490.56, -1642.45, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1543.35, -1618.50, -25.12,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1543.39, -1615.24, -25.12,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1539.83, -1596.14, -25.12,   0.00, 0.00, -90.00);
    CreateDynamicObject(2163, 1541.15, -1596.50, -26.59,   0.00, 0.00, 9000.00);
    CreateDynamicObject(2163, 1541.13, -1596.49, -25.70,   0.00, 0.00, 9000.00);
    CreateDynamicObject(2163, 1539.11, -1596.45, -25.67,   0.00, 0.00, 9000.00);
    CreateDynamicObject(2390, 1543.66, -1598.63, -25.87,   -22.58, 0.00, -0.06);
    CreateDynamicObject(2390, 1543.67, -1599.14, -25.87,   -22.58, 0.00, -0.06);
    CreateDynamicObject(19450, 1543.29, -1605.76, -25.12,   0.00, 0.00, -90.00);
    CreateDynamicObject(2390, 1543.66, -1597.58, -25.87,   -22.58, 0.00, -0.06);
    CreateDynamicObject(19450, 1529.32, -1603.25, -24.95,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1526.73, -1584.16, -24.95,   0.00, 0.00, -90.00);
    CreateDynamicObject(19431, 1521.18, -1584.15, -24.96,   0.00, 0.00, 90.00);
    CreateDynamicObject(19450, 1525.99, -1654.10, -26.82,   0.00, 0.00, -90.00);
    CreateDynamicObject(3850, 1521.21, -1652.33, -23.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(3850, 1521.23, -1648.91, -23.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(3850, 1521.23, -1645.48, -23.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(3850, 1521.23, -1642.05, -23.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(3850, 1521.24, -1638.60, -23.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(3850, 1521.26, -1635.18, -23.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1509.66, -1617.87, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1509.66, -1614.47, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1497.01, -1598.38, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19450, 1497.02, -1588.86, -24.95,   0.00, 0.00, 0.00);
    CreateDynamicObject(19431, 1517.34, -1586.00, -24.96,   0.00, 0.00, 222.00);
    CreateDynamicObject(19431, 1516.28, -1584.83, -24.96,   0.00, 0.00, 222.00);
    CreateDynamicObject(19450, 1509.60, -1603.17, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1501.00, -1603.17, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1501.68, -1584.23, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1511.22, -1584.22, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1509.72, -1590.83, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19450, 1500.29, -1590.85, -24.98,   0.00, 0.00, -90.00);
    CreateDynamicObject(19384, 1514.39, -1616.09, -24.99,   0.00, 0.00, 0.00);
    CreateDynamicObject(19384, 1538.55, -1616.90, -24.99,   0.00, 0.00, 0.00);
    CreateDynamicObject(19384, 1514.40, -1646.37, -24.99,   0.00, 0.00, 0.00);
    CreateDynamicObject(19384, 1514.35, -1593.86, -24.99,   0.00, 0.00, 0.00);
    CreateDynamicObject(19384, 1516.14, -1590.82, -24.99,   0.00, 0.00, 90.00);
    CreateDynamicObject(19384, 1516.11, -1609.67, -24.99,   0.00, 0.00, 90.00);
    CreateDynamicObject(19384, 1522.75, -1609.76, -24.99,   0.00, 0.00, 90.00);
    CreateDynamicObject(19384, 1536.87, -1609.92, -24.99,   0.00, 0.00, 90.00);
    CreateDynamicObject(19384, 1536.69, -1634.85, -24.99,   0.00, 0.00, 90.00);
    CreateDynamicObject(19384, 1516.10, -1635.17, -24.99,   0.00, 0.00, 90.00);
    CreateDynamicObject(19462, 1540.17, -1649.14, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1543.65, -1649.16, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1536.74, -1649.49, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1533.24, -1649.50, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1529.78, -1649.49, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1526.30, -1649.47, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1536.68, -1639.88, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1533.23, -1640.04, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1529.73, -1640.04, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1526.26, -1639.88, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1522.79, -1639.82, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1522.80, -1649.44, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1536.79, -1620.95, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1536.79, -1611.32, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1533.34, -1624.18, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1533.31, -1614.56, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1529.82, -1614.54, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1529.87, -1624.17, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1526.40, -1615.17, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1526.39, -1624.81, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1522.99, -1624.02, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1522.92, -1614.42, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1519.44, -1614.46, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1519.49, -1624.08, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1516.00, -1620.98, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1516.00, -1611.35, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1515.91, -1601.79, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1515.99, -1592.24, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1516.03, -1582.70, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1512.55, -1589.11, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1509.09, -1589.11, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1505.66, -1589.11, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1502.20, -1589.06, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1498.74, -1589.07, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1512.56, -1598.73, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1509.15, -1598.74, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1505.72, -1598.75, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1502.20, -1598.60, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1498.75, -1598.67, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1522.93, -1604.89, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1522.88, -1595.68, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1526.32, -1598.53, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1529.73, -1598.49, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1526.07, -1588.99, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1529.56, -1588.87, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1536.72, -1630.52, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1516.15, -1630.63, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1509.59, -1646.42, -26.65,   0.00, 90.00, 90.00);
    CreateDynamicObject(19462, 1503.05, -1646.73, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1499.58, -1646.70, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1496.09, -1646.82, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1492.60, -1646.78, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1489.15, -1646.64, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1485.70, -1646.43, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1536.65, -1659.11, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1533.16, -1659.13, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1529.66, -1659.11, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1526.21, -1659.09, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1522.77, -1659.02, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1503.13, -1626.45, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1499.67, -1626.42, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1503.12, -1616.86, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1499.64, -1616.80, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1537.00, -1601.72, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1540.47, -1600.92, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1543.92, -1600.87, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1536.98, -1592.05, -26.65,   0.00, 90.00, 0.00);
    CreateDynamicObject(19462, 1509.69, -1616.12, -26.65,   0.00, 90.00, 90.00);
    CreateDynamicObject(19462, 1543.36, -1616.82, -26.65,   0.00, 90.00, 90.00);
    CreateDynamicObject(2010, 1535.54, -1634.21, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1535.14, -1625.42, -26.58,   0.00, 0.00, 0.00);
    CreateDynamicObject(19449, 1496.19, -1617.10, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1496.18, -1626.74, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1492.74, -1617.05, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1492.72, -1626.68, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1489.27, -1617.15, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1489.22, -1626.79, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1485.77, -1626.53, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1485.77, -1616.89, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1482.27, -1616.96, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1482.26, -1626.55, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1478.77, -1616.96, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1478.77, -1626.58, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1475.26, -1617.14, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19449, 1475.26, -1626.77, -26.57,   0.00, 90.00, 0.00);
    CreateDynamicObject(19442, 1486.65, -1630.08, -26.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(19442, 1493.42, -1625.83, -26.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(19442, 1492.75, -1613.97, -26.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(2049, 1486.76, -1630.09, -25.25,   0.00, 0.00, 90.00);
    CreateDynamicObject(2049, 1493.54, -1625.90, -25.25,   0.00, 0.00, 90.00);
    CreateDynamicObject(2049, 1492.87, -1614.02, -25.25,   0.00, 0.00, 90.00);
    CreateDynamicObject(19454, 1516.08, -1614.53, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1519.58, -1614.49, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1523.06, -1614.50, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1526.55, -1614.49, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1529.94, -1614.48, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1533.41, -1614.46, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1536.86, -1614.49, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1536.56, -1623.99, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1533.05, -1624.10, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1529.52, -1624.08, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1526.02, -1624.13, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1522.52, -1624.02, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1519.01, -1624.06, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1515.50, -1624.10, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1516.16, -1604.82, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1516.07, -1595.21, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1512.67, -1598.47, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1509.22, -1598.47, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1505.72, -1598.48, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1502.28, -1598.50, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1498.80, -1598.49, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1498.89, -1588.93, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1502.38, -1588.93, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1505.89, -1588.94, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1509.38, -1588.92, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1512.78, -1588.90, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1516.19, -1585.65, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1522.77, -1604.94, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1522.76, -1595.35, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1522.69, -1585.73, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1526.25, -1589.05, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1529.74, -1589.04, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1529.59, -1598.45, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1526.07, -1598.48, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1503.18, -1616.83, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1499.69, -1616.81, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1499.72, -1626.41, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1503.15, -1626.50, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1496.22, -1626.41, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1496.16, -1616.79, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1492.72, -1616.86, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1489.23, -1616.88, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1485.71, -1616.77, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1482.23, -1616.87, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1478.77, -1616.85, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1475.26, -1616.78, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1478.83, -1626.46, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1475.36, -1626.32, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1482.32, -1626.49, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1485.83, -1626.45, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1489.36, -1626.47, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1492.76, -1626.48, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1536.91, -1604.89, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1536.92, -1595.32, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1540.38, -1600.85, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1543.87, -1600.86, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1503.12, -1647.07, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1499.63, -1647.08, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1496.16, -1647.07, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1492.69, -1647.04, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1489.21, -1647.07, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1485.77, -1647.03, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1515.99, -1633.74, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1516.03, -1643.32, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1516.03, -1652.92, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1519.52, -1652.91, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1519.51, -1643.32, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1519.50, -1633.88, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1536.57, -1633.56, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1536.59, -1643.17, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1536.57, -1652.77, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1540.02, -1649.22, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1543.49, -1649.17, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1536.61, -1662.27, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1533.16, -1662.22, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1529.66, -1662.20, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1526.33, -1662.09, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1522.82, -1662.07, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1533.07, -1652.60, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1533.14, -1643.06, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1533.16, -1633.56, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1529.60, -1652.55, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1526.09, -1652.52, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1522.77, -1652.49, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1522.70, -1642.91, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1522.69, -1633.31, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1526.21, -1642.94, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1529.62, -1642.98, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1526.16, -1633.35, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1529.69, -1633.58, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1549.97, -1624.94, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1553.43, -1624.97, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1556.86, -1624.95, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1560.35, -1624.95, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1563.85, -1624.95, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1567.35, -1624.96, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1570.82, -1624.96, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1574.27, -1624.95, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1577.77, -1624.91, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1577.70, -1615.29, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1574.20, -1615.29, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1570.73, -1615.32, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1567.25, -1615.32, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1563.82, -1615.33, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1560.33, -1615.34, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1556.82, -1615.31, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1553.39, -1615.38, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1549.90, -1615.43, -23.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19454, 1543.30, -1616.65, -23.40,   0.00, 90.00, 90.00);
    CreateDynamicObject(19454, 1509.67, -1616.28, -23.40,   0.00, 90.00, 90.00);
    CreateDynamicObject(19454, 1509.52, -1646.25, -23.40,   0.00, 90.00, 90.00);
    CreateDynamicObject(1893, 1528.68, -1614.61, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1525.76, -1614.61, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1522.48, -1614.63, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1528.56, -1615.98, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1528.49, -1617.36, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1525.80, -1617.38, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1525.78, -1616.02, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1522.38, -1615.96, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1522.35, -1617.32, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1522.20, -1622.97, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1522.21, -1623.95, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1522.12, -1625.13, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1525.56, -1622.98, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1525.55, -1624.00, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1525.55, -1625.16, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1528.31, -1622.97, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1528.44, -1623.98, -22.92,   0.00, 0.00, 0.00);
    CreateDynamicObject(1893, 1528.31, -1625.20, -22.92,   0.00, 0.00, 0.00);
	//random shiz
	CreateDynamicObject(955, 1928.674804, -1769.936889, 12.976878, 0.000000, 0.000000, 90.199989);
	CreateDynamicObject(955, 1811.529541, -1318.225341, 131.316848, 0.000000, 0.000000, 93.499984);
	CreateDynamicObject(1896, 1819.937500, -1315.691284, 131.904434, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(643, 1821.247314, -1292.680053, 132.202194, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(643, 1819.877685, -1296.191406, 132.022155, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1664, 1819.990844, -1296.499633, 132.552566, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1664, 1819.684448, -1296.049194, 132.604339, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1664, 1818.449340, -1292.027099, 132.617370, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1664, 1818.238525, -1292.432495, 132.637527, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1664, 1821.065917, -1292.686645, 132.757797, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1664, 1821.603759, -1292.951904, 132.756210, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2635, 1809.737182, -1311.992553, 131.314041, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1664, 1809.486450, -1312.101440, 131.927276, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2231, 1808.465942, -1318.786865, 131.396621, 0.000000, 0.000000, 178.399932);
	CreateDynamicObject(2231, 1806.394775, -1318.950927, 131.386428, 0.000000, 0.000000, 176.900039);
	CreateDynamicObject(1714, 257.155578, 69.666023, 1002.619995, 0.199999, 0.000000, -87.699981);

	//tiger skin brothel door fix
	CreateDynamicObject(19355, 968.388610, -53.241630, 1001.814758, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1569, 968.324951, -52.439041, 1000.084045, 0.000000, 0.000000, -88.800010);
	//NYPD exterio
    CreateDynamicObject(1505, -221.9176, 1404.6,26.6, 0.000000, 0.000000, -90.00000); // Lil Probe Inn Door For Locker Room
	CreateDynamicObject(5822, 1150.8000488281, -1382.5999755859, 20.290000915527, 0, 0, 93.654907226563); // All Saints Stairs
	CreateDynamicObject(8613,1601.40002441,-1633.80004883,15.39999962,0.00000000,0.00000000,180.00000000); //object(vgssstairs03_lvs) (1)
    CreateDynamicObject(13749,1583.40002441,-1661.00000000,20.39999962,0.00000000,0.00000000,54.00000000); //object(cunte_curvesteps1) (1)
    CreateDynamicObject(983,1534.90002441,-1660.09997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (1)
    CreateDynamicObject(983,1534.90002441,-1653.69995117,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (2)
    CreateDynamicObject(983,1534.90002441,-1647.30004883,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (3)
    CreateDynamicObject(983,1534.90002441,-1640.90002441,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (4)
    CreateDynamicObject(983,1538.09997559,-1637.80004883,13.19999981,0.00000000,0.00000000,88.00000000); //object(fenceshit3) (5)
    CreateDynamicObject(1237,1542.40002441,-1638.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(strtbarrier01) (3)
    CreateDynamicObject(983,1534.90002441,-1684.90002441,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (6)
    CreateDynamicObject(983,1534.90002441,-1691.30004883,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (7)
    CreateDynamicObject(983,1534.90002441,-1697.69995117,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (8)
    CreateDynamicObject(983,1538.09997559,-1700.90002441,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit3) (9)
    CreateDynamicObject(1237,1542.30004883,-1701.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(strtbarrier01) (4)
    CreateDynamicObject(1319,1535.50000000,-1663.40002441,13.10000038,0.00000000,0.00000000,0.00000000); //object(ws_ref_bollard) (1)
    CreateDynamicObject(1319,1537.00000000,-1663.40002441,13.10000038,0.00000000,0.00000000,0.00000000); //object(ws_ref_bollard) (2)
    CreateDynamicObject(1319,1536.90002441,-1682.19995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(ws_ref_bollard) (3)
    CreateDynamicObject(1319,1535.40002441,-1682.19995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(ws_ref_bollard) (4)
    CreateDynamicObject(2614,1555.00000000,-1675.59997559,22.00000000,0.00000000,0.00000000,270.00000000); //object(cj_us_flag) (1)
    CreateDynamicObject(1256,1543.00000000,-1664.90002441,13.19999981,0.00000000,0.00000000,0.00000000); //object(stonebench1) (1)
    CreateDynamicObject(1256,1543.09997559,-1661.19995117,13.19999981,0.00000000,0.00000000,0.00000000); //object(stonebench1) (2)
    CreateDynamicObject(2921,1554.90002441,-1678.00000000,19.60000038,0.00000000,0.00000000,0.00000000); //object(kmb_cam) (1)
    CreateDynamicObject(1233,1536.30004883,-1662.90002441,14.10000038,0.00000000,0.00000000,304.00000000); //object(noparkingsign1) (1)
    CreateDynamicObject(3264,1541.69995117,-1634.00000000,12.50000000,0.00000000,0.00000000,246.00000000); //object(privatesign3) (1)
    CreateDynamicObject(987,1596.50000000,-1638.50000000,12.19999981,0.00000000,0.00000000,0.00000000); //object(elecfence_bar) (1)
    CreateDynamicObject(987,1608.30004883,-1638.40002441,12.69999981,0.00000000,0.00000000,90.00000000); //object(elecfence_bar) (2)
    CreateDynamicObject(987,1608.19995117,-1626.50000000,12.69999981,0.00000000,0.00000000,90.00000000); //object(elecfence_bar) (3)
    CreateDynamicObject(987,1608.19995117,-1614.50000000,12.69999981,0.00000000,0.00000000,90.00000000); //object(elecfence_bar) (4)
    CreateDynamicObject(987,1608.19995117,-1602.40002441,12.69999981,0.00000000,0.00000000,180.00000000); //object(elecfence_bar) (5)
    CreateDynamicObject(987,1596.19995117,-1602.30004883,12.69999981,0.00000000,0.00000000,179.99450684); //object(elecfence_bar) (7)
    CreateDynamicObject(987,1584.19995117,-1602.30004883,12.69999981,0.00000000,0.00000000,179.99450684); //object(elecfence_bar) (8)
    CreateDynamicObject(987,1572.09997559,-1602.40002441,12.69999981,0.00000000,0.00000000,179.99450684); //object(elecfence_bar) (9)
    CreateDynamicObject(987,1560.09997559,-1602.30004883,12.69999981,0.00000000,0.00000000,179.99450684); //object(elecfence_bar) (10)
    CreateDynamicObject(987,1551.40002441,-1602.30004883,12.69999981,0.00000000,0.00000000,179.99450684); //object(elecfence_bar) (11)
    CreateDynamicObject(987,1539.50000000,-1602.40002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(elecfence_bar) (12)
    CreateDynamicObject(987,1539.59997559,-1606.00000000,12.50000000,0.00000000,0.00000000,270.00000000); //object(elecfence_bar) (13)
    CreateDynamicObject(987,1539.40002441,-1617.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(elecfence_bar) (14)
    CreateDynamicObject(987,1543.80004883,-1632.80004883,12.39999962,0.00000000,0.00000000,272.00000000); //object(elecfence_bar) (15)
    CreateDynamicObject(2190,1579.09997559,-1633.40002441,13.69999981,0.00000000,0.00000000,0.00000000); //object(pc_1) (1)
    CreateDynamicObject(2776,1579.90002441,-1634.40002441,13.10000038,0.00000000,0.00000000,230.00000000); //object(lee_stripchair2) (1)
    CreateDynamicObject(2241,1580.80004883,-1637.19995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(plant_pot_5) (1)
    CreateDynamicObject(1704,1580.19995117,-1637.09997559,12.60000038,0.00000000,0.00000000,180.00000000); //object(kb_chair03) (1)
    CreateDynamicObject(1491,1577.40002441,-1637.30004883,12.69999981,0.00000000,0.00000000,90.00000000); //object(gen_doorint01) (1)
    CreateDynamicObject(1622,1582.30004883,-1633.59997559,16.70000076,0.00000000,0.00000000,120.00000000); //object(nt_securecam2_01) (1)
    CreateDynamicObject(1622,1581.50000000,-1632.80004883,16.50000000,0.00000000,0.00000000,310.00000000); //object(nt_securecam2_01) (2)


	/*//All Saints Roof
	CreateDynamicObject(18850, 1162.734008, -1375.210815, 17.091678, 0.000000, 0.000000, -0.500000);
	CreateDynamicObject(984, 1172.739990, -1348.891479, 26.264764, 0.000000, 0.000000, 0.599999);
	CreateDynamicObject(984, 1150.097534, -1348.738525, 26.264764, 0.000000, 0.000000, -0.200000);
	CreateDynamicObject(983, 1172.813232, -1358.498046, 26.302030, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(983, 1150.072753, -1358.317993, 26.282030, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(984, 1150.105712, -1367.921997, 26.221002, 0.000000, 0.000000, 0.299999);
	CreateDynamicObject(8614, 1167.065673, -1358.098266, 27.816139, 0.000000, 0.000000, 179.399978);
	CreateDynamicObject(983, 1150.154296, -1377.530273, 26.255167, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(983, 1150.154296, -1381.601928, 26.245166, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(984, 1156.541870, -1384.752807, 26.205371, 0.000000, 0.000000, -90.000015);
	CreateDynamicObject(984, 1166.462036, -1384.752807, 26.205371, 0.000000, 0.000000, -90.000015);
	CreateDynamicObject(984, 1172.813842, -1378.355346, 26.205371, 0.000000, 0.000000, -179.600082);
	CreateDynamicObject(984, 1172.772094, -1368.153198, 26.235372, 0.000000, 0.000000, 179.700012);
	CreateDynamicObject(1533, 1161.424438, -1342.500244, 25.516014, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1533, 1159.933227, -1342.500244, 25.516014, 0.000000, 0.000000, 0.000000);

	//hitman HQ
	CreateDynamicObject(16150,2244.80004883,-1668.19995117,2.50000000,0.00000000,0.00000000,0.00000000); //object(ufo_barinterior) (1)
	CreateDynamicObject(11631,2243.50000000,-1680.80004883,4.30000019,0.00000000,0.00000000,180.00000000); //object(ranch_desk) (1)
	CreateDynamicObject(2636,2243.39990234,-1679.69995117,3.70000005,0.00000000,0.00000000,96.00000000); //object(cj_pizza_chair) (1)
	CreateDynamicObject(1726,2245.80004883,-1667.19995117,2.50000000,0.00000000,0.00000000,180.00000000); //object(mrk_seating2) (1)
	CreateDynamicObject(1727,2242.60009766,-1665.30004883,2.50000000,0.00000000,0.00000000,90.00000000); //object(mrk_seating2b) (1)
	CreateDynamicObject(14806,2244.69995117,-1662.30004883,3.59999990,0.00000000,0.00000000,0.00000000); //object(bdupshifi) (1)
	CreateDynamicObject(1727,2247.10009766,-1664.40002441,2.50000000,0.00000000,0.00000000,270.00000000); //object(mrk_seating2b) (2)
	CreateDynamicObject(14604,2244.89990234,-1680.90002441,4.09999990,0.00000000,0.00000000,12.00000000); //object(tv_stand_bike) (2)
	CreateDynamicObject(2628,2247.80004883,-1680.50000000,3.09999990,0.00000000,0.00000000,180.00000000); //object(gym_bench2) (1)
	CreateDynamicObject(2627,2246.50000000,-1680.30004883,3.09999990,0.00000000,0.00000000,180.00000000); //object(gym_treadmill) (1)
	CreateDynamicObject(2332,2247.19995117,-1662.50000000,2.90000010,0.00000000,0.00000000,0.00000000); //object(kev_safe) (1)
	CreateDynamicObject(2232,2242.60009766,-1662.48999023,3.90000010,0.00000000,0.00000000,0.00000000); //object(med_speaker_4) (1)
	CreateDynamicObject(2232,2246.39990234,-1662.55004883,3.90000010,0.00000000,0.00000000,0.00000000); //object(med_speaker_4) (2)
	CreateDynamicObject(2225,2243.60009766,-1662.30004883,2.50000000,0.00000000,0.00000000,0.00000000); //object(swank_hi_fi_2) (1)
	CreateDynamicObject(2186,2241.60009766,-1680.50000000,3.09999990,0.00000000,0.00000000,90.00000000); //object(photocopier_1) (1)
	CreateDynamicObject(2028,2245.10009766,-1662.60009766,3.20000005,0.00000000,0.00000000,0.00000000); //object(swank_console) (1)
	CreateDynamicObject(1828,2245.30004883,-1664.69995117,2.50000000,0.00000000,0.00000000,0.00000000); //object(man_sdr_rug) (1)
	CreateDynamicObject(1808,2248.30004883,-1678.69995117,3.09999990,0.00000000,0.00000000,270.00000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(1800,2249.10009766,-1670.50000000,2.50000000,0.00000000,0.00000000,0.00000000); //object(low_bed_1) (1)
	CreateDynamicObject(1778,2241.60009766,-1675.50000000,2.50000000,0.00000000,0.00000000,0.00000000); //object(cj_mop_pail) (1)
	CreateDynamicObject(1738,2248.30004883,-1668.09997559,3.20000005,0.00000000,0.00000000,90.00000000); //object(cj_radiator_old) (1)
	CreateDynamicObject(1736,2244.69995117,-1662.50000000,5.09999990,0.00000000,0.00000000,0.00000000); //object(cj_stags_head) (1)
	CreateDynamicObject(14685,2252.69995117,-1675.40002441,3.20000005,0.00000000,0.00000000,0.00000000); //object(int_tatooa13) (1)
	CreateDynamicObject(2805,2251.69995117,-1667.50000000,4.50000000,0.00000000,0.00000000,0.00000000); //object(cj_meat_bag_2) (1)
	CreateDynamicObject(2803,2252.50000000,-1667.90002441,3.20000005,0.00000000,0.00000000,0.00000000); //object(cj_meat_bag_1) (1)
	CreateDynamicObject(2915,2248.30004883,-1678.00000000,3.20000005,0.00000000,0.00000000,42.00000000); //object(kmb_dumbbell2) (1)
	CreateDynamicObject(2964,2244.69995117,-1673.69995117,2.50000000,0.00000000,0.00000000,0.00000000); //object(k_pooltablesm) (1)
	CreateDynamicObject(2965,2245.10009766,-1673.69995117,3.40000010,0.00000000,0.00000000,0.00000000); //object(k_pooltriangle01) (1)
	CreateDynamicObject(2967,2244.30004883,-1680.69995117,3.90000010,0.00000000,0.00000000,0.00000000); //object(mobile1993a) (1)
	CreateDynamicObject(977,2241.00000000,-1674.69995117,4.09999990,0.00000000,0.00000000,102.00000000); //object(newtowerdoor1) (1)
	CreateDynamicObject(2109,2244.79980469,-1664.59997559,2.40000010,0.00000000,0.00000000,0.00000000); //object(low_dinning_3) (1)
	CreateDynamicObject(2239,2248.00000000,-1662.80004883,2.50000000,0.00000000,0.00000000,0.00000000); //object(cj_mlight16) (1)
	CreateDynamicObject(630,2246.69995117,-1667.00000000,3.50000000,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (1)
	CreateDynamicObject(2167,2241.10009766,-1671.09997559,2.50000000,0.00000000,0.00000000,90.00000000); //object(med_office_unit_7) (1)
	CreateDynamicObject(2167,2241.10009766,-1670.19995117,2.50000000,0.00000000,0.00000000,90.00000000); //object(med_office_unit_7) (2)
	CreateDynamicObject(2167,2241.10009766,-1669.30004883,2.50000000,0.00000000,0.00000000,90.00000000); //object(med_office_unit_7) (3)
	CreateDynamicObject(2199,2241.19995117,-1677.80004883,3.09999990,0.00000000,0.00000000,90.00000000); //object(med_office6_mc_1) (1)
	CreateDynamicObject(2238,2247.19995117,-1662.59997559,3.79999995,0.00000000,0.00000000,0.00000000); //object(cj_lava_lamp) (1)

	//hitman fences
	CreateDynamicObject(987, 2192.328857, -2669.349365, 12.486860, 0.000000, 0.000000, 88.699996);
	CreateDynamicObject(987, 2192.806640, -2648.608642, 12.486860, 0.000000, 0.000000, 88.699996);
	CreateDynamicObject(987, 2197.026367, -2579.046875, 12.486860, 0.000000, 0.000000, 178.799987);
	CreateDynamicObject(987, 2137.906494, -2699.668701, 12.486860, 0.000000, 0.000000, -2.000016);
	CreateDynamicObject(987, 2125.974609, -2699.252197, 12.486860, 0.000000, 0.000000, -2.000016);
	CreateDynamicObject(987, 2114.123291, -2698.837158, 12.486860, 0.000000, 0.000000, -2.000016);
	CreateDynamicObject(987, 2115.442626, -2687.050048, 12.486860, 0.000000, 0.000000, -96.400024);
	CreateDynamicObject(987, 2115.857666, -2683.371337, 12.486860, 0.000000, 0.000000, -96.400024);
	hitmangate = CreateDynamicObject(971, 2192.741455, -2653.159423, 13.996870, 0.000000, 0.000000, 89.099990);


	// Pizza
	CreateDynamicObject(970,2121.80004883,-1786.09997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,2117.69995117,-1786.09997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,2113.60009766,-1786.09997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
	CreateDynamicObject(970,2109.50000000,-1786.09997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,2100.30004883,-1786.09997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (7)
	CreateDynamicObject(970,2123.89990234,-1784.09997559,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (8)
	CreateDynamicObject(970,2123.89990234,-1780.00000000,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (9)
	CreateDynamicObject(970,2123.89990234,-1775.90002441,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (10)
	CreateDynamicObject(970,2123.89990234,-1771.80004883,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (11)
	CreateDynamicObject(970,2123.89990234,-1767.69995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (12)
	CreateDynamicObject(970,2098.50000000,-1784.09997559,13.10000038,0.00000000,0.00000000,82.00000000); //object(fencesmallb) (14)
	CreateDynamicObject(970,2099.10009766,-1780.00000000,13.10000038,0.00000000,0.00000000,81.99645996); //object(fencesmallb) (15)
	CreateDynamicObject(970,2099.69995117,-1775.90002441,13.10000038,0.00000000,0.00000000,81.99645996); //object(fencesmallb) (16)
	CreateDynamicObject(970,2100.19995117,-1771.80004883,13.10000038,0.00000000,0.00000000,81.99645996); //object(fencesmallb) (17)
	CreateDynamicObject(970,2102.19995117,-1768.59997559,13.10000038,0.00000000,0.00000000,33.99645996); //object(fencesmallb) (18)
	CreateDynamicObject(970,2105.89990234,-1766.90002441,13.10000038,0.00000000,0.00000000,13.99169922); //object(fencesmallb) (19)
	CreateDynamicObject(970,2108.89990234,-1764.59997559,13.10000038,0.00000000,0.00000000,61.99108887); //object(fencesmallb) (20)
	CreateDynamicObject(970,2093.89990234,-1802.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (21)
	CreateDynamicObject(970,2097.80004883,-1803.19995117,13.10000038,0.00000000,0.00000000,334.00000000); //object(fencesmallb) (22)
	CreateDynamicObject(970,2093.89990234,-1811.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (23)
	CreateDynamicObject(970,2097.80004883,-1810.50000000,13.10000038,0.00000000,0.00000000,28.00000000); //object(fencesmallb) (24)
	CreateDynamicObject(970,2093.60009766,-1822.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (25)
	CreateDynamicObject(970,2097.69995117,-1822.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (26)
	CreateDynamicObject(970,2098.50000000,-1791.00000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (27)
	CreateDynamicObject(970,2094.39990234,-1791.00000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (28)
	*/
	//GymBlock
	CreateDynamicObject(994, 2222.465088, -1715.447388, 12.628170, 0.0000, 0.0000, 263.1245);
	CreateDynamicObject(994, 2223.253418, -1709.089966, 12.725977, 0.0000, 0.0000, 263.9840);
	CreateDynamicObject(994, 2232.644287, -1727.048462, 12.647192, 0.0000, 0.0000, 180.0773);
	CreateDynamicObject(994, 2239.051270, -1727.090210, 12.647192, 0.0000, 0.0000, 180.0773);
	CreateDynamicObject(994, 2238.903076, -1719.262451, 12.652877, 0.0000, 0.0000, 270.0773);
	CreateDynamicObject(994, 2221.543945, -1722.587158, 12.662817, 0.0000, 0.0000, 315.0773);
	CreateDynamicObject(994, 2224.709717, -1709.026855, 12.541059, 0.0000, 0.0000, 358.3585);
	//DMV


	// Bank Vault
	BankVault = CreateDynamicObject(2634, 2242.202148, 1631.861694, 961.833129, 0.000000, 0.000000, 9.799999);

	// NA HQ

    CreateDynamicObject(1522, 731.941955, -1358.044311, 22.105916, 0.000000, 0.000000, -90.100074);
	CreateDynamicObject(14488, 1211.8000488281, -760.20001220703, 1074.3000488281, 0, 0, 0);
	CreateDynamicObject(6874, 1212.4000244141, -754.70001220703, 1055.0999755859, 0, 0, 269.83056640625);
	CreateDynamicObject(1537, 1218.5999755859, -770.79998779297, 1072, 0, 0, 181.02136230469);
	CreateDynamicObject(1294, 1217.1909179688, -770.755859375, 1076.2299804688, 0, 0, 0);
	CreateDynamicObject(2395, 1218.4000244141, -749.40002441406, 1072.1999511719, 0, 0, 270.22546386719);
	CreateDynamicObject(2395, 1218.4000244141, -753.09997558594, 1072.1999511719, 0, 0, 270.22521972656);
	CreateDynamicObject(2395, 1218.8000488281, -756.70001220703, 1072.1999511719, 0, 0, 317.83325195313);
	CreateDynamicObject(2395, 1221.6999511719, -758.90002441406, 1072.1999511719, 0, 0, 355.91711425781);
	CreateDynamicObject(2395, 1218.8000488281, -756.70001220703, 1074.9399414063, 0, 0, 317.82897949219);
	CreateDynamicObject(2395, 1221.6999511719, -758.90002441406, 1074.9399414063, 0, 0, 355.9130859375);
	CreateDynamicObject(2395, 1218.4000244141, -753.09997558594, 1074.9399414063, 0, 0, 270.22521972656);
	CreateDynamicObject(2395, 1218.4000244141, -749.40002441406, 1074.9300537109, 0, 0, 270.22521972656);
	CreateDynamicObject(2796, 1219.9000244141, -757.59997558594, 1074.8000488281, 0, 0, 317.83337402344);
	CreateDynamicObject(1536, 1219.1999511719, -757, 1072, 0, 0, 317.83337402344);
	CreateDynamicObject(627, 1218.4000244141, -757.20001220703, 1074, 0, 0, 0);
	CreateDynamicObject(627, 1220.1999511719, -758.90002441406, 1074, 0, 0, 0);
	CreateDynamicObject(627, 1218, -749.5, 1074, 0, 0, 77.531341552734);
	CreateDynamicObject(1533, 1218.4000244141, -750.70001220703, 1072.1999511719, 0, 0, 268.865234375);
	CreateDynamicObject(1533, 1218.4000244141, -752.20001220703, 1072.1999511719, 0, 0, 268.86291503906);
	CreateDynamicObject(627, 1217.8000488281, -754.5, 1074, 0, 0, 77.530517578125);
	CreateDynamicObject(16151, 1221.1999511719, -764.5, 1072.5, 0, 0, 0);
	CreateDynamicObject(1775, 1222.1999511719, -765.90002441406, 1073.3000488281, 0, 0, 270.22546386719);
	CreateDynamicObject(1491, 1221.1999511719, -768.10009765625, 1070.6199951172, 0, 0, 0);
	CreateDynamicObject(2773, 1215.9000244141, -765.79998779297, 1072.5, 0, 0, 272.94592285156);
	CreateDynamicObject(2773, 1214.3000488281, -766.70001220703, 1072.5, 0, 0, 324.63220214844);
	CreateDynamicObject(2773, 1213.5, -768.5, 1072.5, 0, 0, 345.03283691406);
	CreateDynamicObject(2773, 1214.0999755859, -770, 1072.5, 0, 0, 59.842254638672);
	CreateDynamicObject(1432, 1216.0999755859, -769.29998779297, 1072.1999511719, 0, 0, 353.19897460938);
	CreateDynamicObject(1432, 1215.6999511719, -767.20001220703, 1072.1999511719, 0, 0, 5.4357604980469);
	CreateDynamicObject(1361, 1216.5999755859, -764.90002441406, 1072.9000244141, 0, 0, 0);
	CreateDynamicObject(1361, 1213.4000244141, -767.40002441406, 1072.9000244141, 0, 0, 0);
	CreateDynamicObject(1361, 1213, -769.5, 1072.9000244141, 0, 0, 0);
	CreateDynamicObject(1361, 1214.5, -765.5, 1072.9000244141, 0, 0, 0);
	CreateDynamicObject(630, 1217.9000244141, -755.29998779297, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1217.9000244141, -756, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1218.1999511719, -756.5, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1218, -750.29998779297, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1217.6999511719, -753.70001220703, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1220.8000488281, -759.20001220703, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1221.5999755859, -759.29998779297, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1216.8000488281, -764.90002441406, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1214.5999755859, -765.5, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1213.5, -767.40002441406, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1213, -769.40002441406, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(638, 1210.5999755859, -770.19995117188, 1072.9000244141, 0, 0, 270.22546386719);
	CreateDynamicObject(638, 1207.4000244141, -770.20001220703, 1072.9000244141, 0, 0, 270.22521972656);
	CreateDynamicObject(638, 1204.1999511719, -770.20001220703, 1072.9000244141, 0, 0, 270.22314453125);
	CreateDynamicObject(1544, 1216.4000244141, -769.70001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1216.3000488281, -769.59997558594, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1216, -768.79998779297, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.9000244141, -769, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.8000488281, -768.90002441406, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1543, 1216.4000244141, -769.5, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1543, 1215.8000488281, -769, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1543, 1215.9000244141, -768.79998779297, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1543, 1216.0999755859, -768.70001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1520, 1216.0999755859, -769.70001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1520, 1216, -769.79998779297, 1072.8000488281, 0, 0, 36.725372314453);
	CreateDynamicObject(1541, 1221.8000488281, -767.09997558594, 1074.1999511719, 0, 0, 88.413055419922);
	CreateDynamicObject(1542, 1222, -767.09997558594, 1073.5, 0, 0, 93.397888183594);
	CreateDynamicObject(1542, 1222, -767.09997558594, 1073.1999511719, 0, 0, 93.394775390625);
	CreateDynamicObject(1512, 1216, -769.29998779297, 1073, 0, 0, 36.725372314453);
	CreateDynamicObject(1512, 1216.0999755859, -769.09997558594, 1073, 0, 0, 321.91046142578);
	CreateDynamicObject(1512, 1215.4000244141, -766.90002441406, 1073, 0, 0, 13.602111816406);
	CreateDynamicObject(1512, 1215.5, -767, 1073, 0, 0, 340.9560546875);
	CreateDynamicObject(1520, 1215.4000244141, -767.09997558594, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1520, 1215.1999511719, -767, 1072.8000488281, 0, 0, 334.15606689453);
	CreateDynamicObject(1486, 1216.1999511719, -767.29998779297, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1216.0999755859, -767.40002441406, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1216.1999511719, -767.40002441406, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.4000244141, -767.70001220703, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.4000244141, -767.59997558594, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.3000488281, -767.70001220703, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.9000244141, -766.79998779297, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1216, -766.90002441406, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.9000244141, -766.90002441406, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.6999511719, -766.90002441406, 1073, 0, 0, 0);
	CreateDynamicObject(1544, 1215.5999755859, -767.70001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.5999755859, -767.59997558594, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.5, -767.70001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.8000488281, -767.20001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.8000488281, -767.29998779297, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.6999511719, -767.20001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1221.6999511719, -760.90002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1221.6999511719, -761.09997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1221.4000244141, -761.29998779297, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1221.5, -761.09997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.8000488281, -761.09997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.9000244141, -761.20001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.6999511719, -761.20001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.3000488281, -761.79998779297, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.3000488281, -761.70001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.1999511719, -761.79998779297, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.4000244141, -762.59997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.1999511719, -762.70001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.1999511719, -762.59997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.3000488281, -762.40002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220, -762.5, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220, -762.70001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.4000244141, -761.90002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.0999755859, -762, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.0999755859, -761.70001220703, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(1543, 1221.3000488281, -760.90002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.5999755859, -761, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.3000488281, -761, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.6999511719, -761.20001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.5, -761.40002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.0999755859, -761.09997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.0999755859, -761.29998779297, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.6999511719, -761.09997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.5999755859, -761.40002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(2671, 1219.1999511719, -769.09997558594, 1072.1999511719, 0, 0, 347.75817871094);
	CreateDynamicObject(2671, 1218.1999511719, -767, 1072.1999511719, 0, 0, 321.91162109375);
	CreateDynamicObject(2267, 1216.5999755859, -770.53002929688, 1074.0999755859, 0, 0, 180.45141601563);
	CreateDynamicObject(2266, 1221.5, -769.70001220703, 1073.9000244141, 0, 0, 268.86535644531);
	CreateDynamicObject(2266, 1221.5, -769.70001220703, 1073.0999755859, 0, 0, 268.86291503906);
	CreateDynamicObject(2266, 1221.5, -768.70001220703, 1073.0999755859, 0, 0, 268.86291503906);
	CreateDynamicObject(2266, 1221.5, -768.70001220703, 1073.9000244141, 0, 0, 268.86291503906);
	CreateDynamicObject(2172, 1209.4000244141, -767.79998779297, 1072.1999511719, 0, 0, 51.687561035156);
	CreateDynamicObject(2172, 1209.3000488281, -766.40002441406, 1072.1999511719, 0, 0, 232.13781738281);
	CreateDynamicObject(2172, 1206.4000244141, -766.59997558594, 1072.1999511719, 0, 0, 232.13562011719);
	CreateDynamicObject(2172, 1206.5, -768, 1072.1999511719, 0, 0, 51.685180664063);
	CreateDynamicObject(1806, 1210.5, -768.09997558594, 1072.1999511719, 0, 0, 0);
	CreateDynamicObject(1806, 1207.8000488281, -768.59997558594, 1072.1999511719, 0, 0, 34.004974365234);
	CreateDynamicObject(1806, 1208.3000488281, -766, 1072.1999511719, 0, 0, 355.91943359375);
	CreateDynamicObject(1806, 1205.4000244141, -766.59997558594, 1072.1999511719, 0, 0, 279.74645996094);
	CreateDynamicObject(2164, 1202.0999755859, -769.09997558594, 1072.1999511719, 0, 0, 91.133453369141);
	CreateDynamicObject(2164, 1202.0999755859, -767.19989013672, 1072.1999511719, 0, 0, 91.131591796875);
	CreateDynamicObject(2596, 1205.8000488281, -770.59997558594, 1075, 0, 0, 180.45141601563);
	CreateDynamicObject(2596, 1205, -770.70001220703, 1075, 0, 0, 180.45043945313);
	CreateDynamicObject(2596, 1204.1999511719, -770.59997558594, 1075, 0, 0, 180.45043945313);
	CreateDynamicObject(1752, 1204.8000488281, -770.79998779297, 1073.8000488281, 0, 0, 184.53198242188);
	CreateDynamicObject(627, 1182.6999511719, -768.59997558594, 1074, 0, 0, 0);
	CreateDynamicObject(627, 1202.4000244141, -770.40002441406, 1074, 0, 0, 10.881591796875);
	CreateDynamicObject(2395, 1202.4000244141, -754.29998779297, 1072.1999511719, 0, 0, 1.3601989746094);
	CreateDynamicObject(2395, 1206, -753.79998779297, 1072.1999511719, 0, 0, 54.404876708984);
	CreateDynamicObject(1491, 1207.8000488281, -751.09997558594, 1072.1999511719, 0, 0, 91.133453369141);
	CreateDynamicObject(2395, 1207.8000488281, -749.09997558594, 1071.9702148438, 0, 0, 102.01147460938);
	CreateDynamicObject(2395, 1207.8900146484, -750.59997558594, 1074.6999511719, 0, 0, 91.129852294922);
	CreateDynamicObject(2395, 1206, -753.79998779297, 1074.9400634766, 0, 0, 54.404296875);
	CreateDynamicObject(2395, 1202.4000244141, -754.29998779297, 1074.9499511719, 0, 0, 1.3568115234375);
	CreateDynamicObject(2395, 1205.5, -753.90002441406, 1072.1999511719, 0, 0, 185.44079589844);
	CreateDynamicObject(2395, 1207.5, -751.40002441406, 1072.1999511719, 0, 0, 234.4052734375);
	CreateDynamicObject(2395, 1201.8000488281, -754, 1072.1999511719, 0, 0, 133.75250244141);
	CreateDynamicObject(2395, 1201.8000488281, -754, 1074.9500732422, 0, 0, 133.74758911133);
	CreateDynamicObject(2395, 1205.5, -753.90002441406, 1074.9499511719, 0, 0, 185.43823242188);
	CreateDynamicObject(1294, 1200.8000488281, -754.29998779297, 1076, 0, 0, 0);
	CreateDynamicObject(1294, 1200.6999511719, -754.40002441406, 1076, 0, 0, 0);
	CreateDynamicObject(1294, 1204.5999755859, -753.90002441406, 1076, 0, 0, 0);
	CreateDynamicObject(2395, 1207.5, -751.40002441406, 1074.9499511719, 0, 0, 234.404296875);
	CreateDynamicObject(1294, 1206.4000244141, -751.09997558594, 1076, 0, 0, 0);
	CreateDynamicObject(1294, 1206.5, -749.59997558594, 1076, 0, 0, 0);
	CreateDynamicObject(1294, 1206.3000488281, -749.59997558594, 1076, 0, 0, 0);
	CreateDynamicObject(1294, 1206.1999511719, -751.09997558594, 1076, 0, 0, 0);
	CreateDynamicObject(2395, 1207.6999511719, -747.79998779297, 1074.6999511719, 0, 0, 270);
	CreateDynamicObject(2395, 1205.9000244141, -746.90002441406, 1072, 0, 0, 302.86437988281);
	CreateDynamicObject(14782, 1202.4000244141, -750.59997558594, 1073.1999511719, 0, 0, 89.773254394531);
	CreateDynamicObject(2700, 1204.6999511719, -753.79998779297, 1074.5, 0, 0, 93.853912353516);
	CreateDynamicObject(2700, 1203.8000488281, -753.90002441406, 1074.5, 0, 0, 93.852813720703);
	CreateDynamicObject(2400, 1203, -749.29998779297, 1072.1999511719, 0, 0, 0);
	CreateDynamicObject(2394, 1203.8000488281, -749.79998779297, 1073.5999755859, 0, 0, 0);
	CreateDynamicObject(2394, 1204.9000244141, -749.79998779297, 1072.9000244141, 0, 0, 0);
	CreateDynamicObject(2614, 1204.3000488281, -753.92443847656, 1075.6999511719, 0, 0, 184.98785400391);
	CreateDynamicObject(1280, 1204.0999755859, -753.59997558594, 1072.5999755859, 0, 0, 275.66638183594);
	CreateDynamicObject(1280, 1206.3000488281, -752.20001220703, 1072.5999755859, 0, 0, 325.99133300781);
	CreateDynamicObject(2845, 1202.9000244141, -750.70001220703, 1072.1999511719, 0, 0, 0);
	CreateDynamicObject(2846, 1203.9000244141, -750.59997558594, 1072.1999511719, 0, 0, 0);
	CreateDynamicObject(2843, 1203.5999755859, -751, 1072.1999511719, 0, 0, 0);
	CreateDynamicObject(2676, 1204.3000488281, -751.40002441406, 1072.3049316406, 0, 0, 59.848876953125);
	CreateDynamicObject(1999, 1204.6999511719, -763.29998779297, 1072.1999511719, 0, 0, 270.22546386719);
	CreateDynamicObject(1999, 1204.6999511719, -760, 1072.1999511719, 0, 0, 271.58544921875);
	CreateDynamicObject(1999, 1204.5999755859, -756.59997558594, 1072.1999511719, 0, 0, 271.580078125);
	CreateDynamicObject(2163, 1202, -764.40002441406, 1072, 0, 0, 90);
	CreateDynamicObject(2167, 1202, -762.59997558594, 1072, 0, 0, 90);
	CreateDynamicObject(2164, 1202, -760.20001220703, 1072, 0, 0, 89.773315429688);
	CreateDynamicObject(2164, 1202.0999755859, -757.90002441406, 1072.1999511719, 0, 0, 89.769287109375);
	CreateDynamicObject(2773, 1203.4000244141, -765.40002441406, 1072.5, 0, 0, 301.51062011719);
	CreateDynamicObject(2773, 1203.5, -755.59997558594, 1072.5, 0, 0, 244.38000488281);
	CreateDynamicObject(2773, 1201.6999511719, -755.79998779297, 1072.5, 0, 0, 304.22912597656);
	CreateDynamicObject(1808, 1202.1999511719, -761.40002441406, 1072, 0, 0, 91.133453369141);
	CreateDynamicObject(1806, 1203.1999511719, -764.40002441406, 1072.1999511719, 0, 0, 279.74487304688);
	CreateDynamicObject(1806, 1204, -760.5, 1072.1999511719, 0, 0, 238.93872070313);
	CreateDynamicObject(1806, 1203.3000488281, -757.29998779297, 1072.1999511719, 0, 0, 255.25891113281);


	// North LS Gas Station
	CreateDynamicObject(1676,998.63592529,-937.55993652,42.83398819,0.00000000,0.00000000,8.75000000); //object(washgaspump) (1)
	CreateDynamicObject(1676,1002.15386963,-937.07757568,42.83398819,0.00000000,0.00000000,8.74511719); //object(washgaspump) (2)
	CreateDynamicObject(1676,1005.69854736,-936.55706787,42.83398819,0.00000000,0.00000000,8.74511719); //object(washgaspump) (3)
	CreateDynamicObject(1676,1009.05902100,-936.06591797,42.83398819,0.00000000,0.00000000,8.74511719); //object(washgaspump) (4)
	CreateDynamicObject(997,1007.79016113,-936.89746094,41.40344238,0.00000000,0.00000000,8.50000000); //object(lhouse_barrier3) (1)
	CreateDynamicObject(997,1004.13403320,-937.44079590,41.40344238,0.00000000,0.00000000,7.99792480); //object(lhouse_barrier3) (2)
	CreateDynamicObject(997,1000.84777832,-937.91687012,41.40344238,0.00000000,0.00000000,8.24255371); //object(lhouse_barrier3) (3)
	CreateDynamicObject(997,997.16809082,-938.39813232,41.40344238,0.00000000,0.00000000,7.73974609); //object(lhouse_barrier3) (4)
	CreateDynamicObject(997,1007.56115723,-935.66760254,41.40344238,0.00000000,0.00000000,8.49792480); //object(lhouse_barrier3) (5)
	CreateDynamicObject(997,1003.90948486,-936.23516846,41.40344238,0.00000000,0.00000000,7.99255371); //object(lhouse_barrier3) (6)
	CreateDynamicObject(997,1000.61877441,-936.68615723,41.40344238,0.00000000,0.00000000,8.23974609); //object(lhouse_barrier3) (7)
	CreateDynamicObject(997,996.94824219,-937.21679688,41.40344238,0.00000000,0.00000000,7.73437500); //object(lhouse_barrier3) (8)

	// cocaine Lab Fixes
	CreateDynamicObject(7191,2338.39135742,-1182.56323242,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(1)
	CreateDynamicObject(13656,2292.93872070,-1132.04724121,1017.29772949,0.00000000,0.00000000,0.00000000, -1, 5); //object(fuckknows)(1)
	CreateDynamicObject(7191,2337.95458984,-1182.54309082,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(2)
	CreateDynamicObject(7191,2338.43408203,-1182.39440918,1032.95129395,90.00000000,180.00000000,90.24850464, -1, 5); //object(vegasnnewfence2b)(3)
	CreateDynamicObject(7191,2337.97314453,-1182.39111328,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(4)
	CreateDynamicObject(7191,2328.80346680,-1180.43066406,1034.70544434,0.00000000,270.00000000,88.50006104, -1, 5); //object(vegasnnewfence2b)(5)
	CreateDynamicObject(3055,2319.78198242,-1184.82641602,1032.36450195,63.75003052,269.99996948,178.5001220, -1, 5); //object(kmb_shutter)(1)
	CreateDynamicObject(7191,2328.83715820,-1186.81262207,1030.70446777,0.00000000,90.74990845,359.99481201, -1, 5); //object(vegasnnewfence2b)(6)
	CreateDynamicObject(7191,2326.84863281,-1187.03125000,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(8)
	CreateDynamicObject(7191,2337.31689453,-1186.55639648,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(9)
	CreateDynamicObject(7191,2339.06689453,-1186.13159180,1030.70446777,0.00000000,91.24694824,359.99453735, -1, 5); //object(vegasnnewfence2b)(10)
	CreateDynamicObject(7191,2338.39062500,-1182.56250000,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(11)
	CreateDynamicObject(7191,2337.95947266,-1179.38879395,1032.95129395,90.00000000,180.00000000,270.00000000, -1, 5); //object(vegasnnewfence2b)(12)
	CreateDynamicObject(7191,2338.38476562,-1179.43066406,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(13)
	CreateDynamicObject(7191,2337.96630859,-1179.23559570,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(14)

	// Bus Stops
	CreateDynamicObject(984,1181.00000000,-1346.00000000,13.19999981,0.00000000,0.00000000,309.26000977); //object(fenceshit2) (1)
	CreateDynamicObject(984,1185.50000000,-1311.59997559,13.19999981,0.00000000,0.00000000,0.74707031); //object(fenceshit2) (2)
	CreateDynamicObject(984,1180.50000000,-1301.19995117,13.19999981,0.00000000,0.00000000,50.74707031); //object(fenceshit2) (3)
	CreateDynamicObject(1280,1186.09997559,-1339.80004883,13.00000000,0.00000000,0.00000000,182.00000000); //object(parkbench1) (1)
	CreateDynamicObject(1280,1186.00000000,-1337.00000000,13.00000000,0.00000000,0.00000000,181.99951172); //object(parkbench1) (2)
	CreateDynamicObject(1229,1186.09997559,-1341.50000000,14.10000038,0.00000000,0.00000000,120.00000000); //object(bussign1) (1)
	CreateDynamicObject(984,1185.59997559,-1335.80004883,13.19999981,0.00000000,0.00000000,0.74707031); //object(fenceshit2) (4)
	CreateDynamicObject(1280,1539.59997559,-1743.59997559,12.89999962,0.00000000,0.00000000,270.00000000); //object(parkbench1) (3)
	CreateDynamicObject(1280,1536.80004883,-1743.59997559,12.89999962,0.00000000,0.00000000,270.00000000); //object(parkbench1) (4)
	CreateDynamicObject(1229,1541.19995117,-1743.59997559,14.10000038,0.00000000,0.00000000,220.00000000); //object(bussign1) (2)
	CreateDynamicObject(1229,1812.19995117,-1926.19995117,14.10000038,0.00000000,0.00000000,117.50000000); //object(bussign1) (3)
	CreateDynamicObject(1280,1811.90002441,-1924.50000000,13.00000000,0.00000000,0.00000000,180.00000000); //object(parkbench1) (5)
	CreateDynamicObject(1280,1811.90002441,-1921.80004883,13.00000000,0.00000000,0.00000000,179.99450684); //object(parkbench1) (6)

	// DMV

	//lsfmd
	//LSFMD
    CreateDynamicObject(4199,2408.09960938,-1354.09960938,876.66003418,0.00000000,0.00000000,0.00000000); //object(garages1_lan) (1)
    CreateDynamicObject(14425,2380.69921875,-1358.50000000,876.09997559,0.00000000,0.00000000,0.00000000); //object(madddoggs14) (2)
    CreateDynamicObject(9339,2410.87988281,-1370.47949219,879.41101074,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (3)
    CreateDynamicObject(9339,2410.59277344,-1370.47949219,881.87005615,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (4)
    CreateDynamicObject(9339,2410.59277344,-1370.47949219,879.09002686,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (5)
    CreateDynamicObject(9339,2410.59277344,-1370.47949219,880.49005127,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (6)
    CreateDynamicObject(9339,2410.59277344,-1370.50000000,883.27001953,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (7)
    CreateDynamicObject(9339,2410.59277344,-1370.50000000,884.66998291,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
    CreateDynamicObject(1569,2406.46191406,-1329.85937500,878.77899170,0.00000000,0.00000000,0.00000000); //object(adam_v_door) (1)
    CreateDynamicObject(4199,2408.12011719,-1345.09960938,876.66003418,0.00000000,0.00000000,0.00000000); //object(garages1_lan) (2)
    CreateDynamicObject(1569,2409.46972656,-1329.85937500,878.77899170,0.00000000,0.00000000,179.99450684); //object(adam_v_door) (2)
    CreateDynamicObject(9339,2410.88574219,-1370.47949219,880.80102539,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (9)
    CreateDynamicObject(9339,2410.59277344,-1344.40002441,884.67297363,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (10)
    CreateDynamicObject(9339,2410.59277344,-1344.40002441,883.27001953,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (11)
    CreateDynamicObject(9339,2410.88574219,-1370.47949219,882.20263672,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (13)
    CreateDynamicObject(9339,2410.59399414,-1344.39941406,881.87005615,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (15)
    CreateDynamicObject(9339,2410.87011719,-1341.41210938,879.09051514,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (16)
    CreateDynamicObject(9339,2410.59277344,-1370.47949219,879.09002686,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2410.59277344,-1341.40527344,880.49005127,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (18)
    CreateDynamicObject(9339,2410.87011719,-1341.40612793,880.49005127,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (19)
    CreateDynamicObject(2690,2410.39990234,-1363.59997559,880.79998779,0.00000000,0.00000000,292.00000000); //object(cj_fire_ext) (1)
    CreateDynamicObject(2690,2410.39990234,-1335.80004883,880.80004883,0.00000000,0.00000000,291.99462891); //object(cj_fire_ext) (2)
    CreateDynamicObject(2690,2410.39990234,-1349.19995117,880.79998779,0.00000000,0.00000000,291.99462891); //object(cj_fire_ext) (3)
    CreateDynamicObject(9339,2411.15625000,-1341.40588379,880.49005127,0.00000000,0.00000000,180.00000000); //object(sfnvilla001_cm) (20)
    CreateDynamicObject(9339,2412.01806641,-1341.40527344,879.10412598,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (21)
    CreateDynamicObject(9339,2411.15136719,-1370.47998047,879.10412598,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (22)
    CreateDynamicObject(9339,2411.43847656,-1341.40527344,879.10412598,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2411.72265625,-1341.40527344,880.49005127,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (24)
    CreateDynamicObject(9339,2411.44238281,-1341.40527344,880.49005127,0.00000000,0.00000000,180.00000000); //object(sfnvilla001_cm) (25)
    CreateDynamicObject(1502,2411.00000000,-1354.45117188,878.67004395,0.00000000,0.00000000,269.98901367); //object(gen_doorint04) (3)
    CreateDynamicObject(1502,2411.04980469,-1357.48925781,878.66998291,0.00000000,0.00000000,89.98901367); //object(gen_doorint04) (4)
    CreateDynamicObject(9339,2411.72265625,-1341.40527344,881.88897705,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (26)
    CreateDynamicObject(9339,2411.14941406,-1344.36999512,881.32000732,180.00000000,90.00000000,0.00000000); //object(sfnvilla001_cm) (27)
    CreateDynamicObject(9339,2410.59277344,-1341.41210938,879.09051514,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (16)
    CreateDynamicObject(9339,2411.15136719,-1341.40527344,879.10412598,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (22)
    CreateDynamicObject(9339,2411.43847656,-1370.48999023,879.10260010,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2424.09960938,-1357.56933594,879.10400391,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2424.10009766,-1357.56396484,880.10400391,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2411.15136719,-1370.47949219,880.10412598,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (22)
    CreateDynamicObject(9339,2424.09960938,-1357.56347656,880.10400391,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2424.09960938,-1357.56005859,881.10400391,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2411.72265625,-1341.40527344,879.10412598,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (21)
    CreateDynamicObject(9339,2412.01806641,-1341.40527344,880.49005127,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (24)
    CreateDynamicObject(9339,2410.59399414,-1318.29980469,881.87005615,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (15)
    CreateDynamicObject(9339,2410.59399414,-1318.29980469,883.27001953,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (11)
    CreateDynamicObject(9339,2410.59399414,-1318.27795410,884.66998291,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (10)
    CreateDynamicObject(9339,2405.50000000,-1350.44921875,879.09051514,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.50000000,-1350.44921875,880.49005127,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.50000000,-1350.44921875,881.87005615,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.50000000,-1350.44921875,883.27001953,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.50000000,-1350.44921875,884.66998291,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.21777344,-1350.44921875,879.09051514,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.21777344,-1350.44921875,880.49005127,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.21801758,-1350.44921875,882.20001221,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.21801758,-1350.44921875,883.60009766,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2404.95996094,-1350.44921875,882.20001221,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2404.95996094,-1350.44921875,883.60009766,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.50292969,-1324.35937500,884.66998291,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.50292969,-1324.35937500,883.27001953,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2404.93994141,-1324.35937500,881.32000732,0.00000000,90.00000000,0.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.50292969,-1324.35937500,881.86999512,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(4199,2407.50000000,-1327.80078125,876.70001221,90.00000000,180.00549316,179.98352051); //object(garages1_lan) (2)
    CreateDynamicObject(1893,2407.50097656,-1345.00000000,885.79998779,0.00000000,0.00000000,0.00000000); //object(shoplight1) (1)
    CreateDynamicObject(1893,2407.50097656,-1333.00195312,885.79998779,0.00000000,0.00000000,0.00000000); //object(shoplight1) (2)
    CreateDynamicObject(1893,2407.50097656,-1339.00195312,885.79998779,0.00000000,0.00000000,0.00000000); //object(shoplight1) (3)
    CreateDynamicObject(1893,2407.50097656,-1351.00000000,885.79998779,0.00000000,0.00000000,0.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,2407.50097656,-1357.00000000,885.79998779,0.00000000,0.00000000,0.00000000); //object(shoplight1) (5)
    CreateDynamicObject(1893,2407.50097656,-1363.00000000,885.79998779,0.00000000,0.00000000,0.00000000); //object(shoplight1) (6)
    CreateDynamicObject(9339,2404.93945312,-1324.35937500,881.32000732,0.00000000,90.00000000,0.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.21191406,-1321.53796387,880.49005127,0.00000000,0.00000000,180.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.50292969,-1321.53796387,880.49005127,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.50292969,-1321.53796387,879.09051514,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.21899414,-1321.53796387,879.09051514,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(14427,2404.93066406,-1337.39062500,871.88110352,0.00000000,0.00000000,0.00000000); //object(madddoggs16) (1)
    CreateDynamicObject(14423,2438.09960938,-1356.50000000,880.40002441,0.00000000,0.00000000,179.99450684); //object(madddoggs12) (1)
    CreateDynamicObject(4199,2400.00000000,-1345.09960938,876.66003418,0.00000000,0.00000000,0.00000000); //object(garages1_lan) (2)
    CreateDynamicObject(9339,2403.59960938,-1327.00000000,881.32202148,0.00000000,90.00000000,0.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2392.00000000,-1334.45996094,881.79998779,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2392.02001953,-1334.45996094,879.00000000,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2392.02001953,-1334.45996094,880.40002441,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2402.19921875,-1327.00000000,881.32501221,0.00000000,90.00000000,0.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2400.79980469,-1327.00000000,881.32702637,0.00000000,90.00000000,0.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2392.09960938,-1337.54003906,879.29998779,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2400.00000000,-1335.69995117,879.34997559,0.00000000,0.00000000,180.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2392.02001953,-1337.53698730,880.70397949,0.00000000,0.00000000,269.98901367); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2400.00000000,-1335.69921875,880.75000000,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.47949219,-1376.55957031,879.09051514,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.47998047,-1376.56994629,880.49005127,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.47949219,-1376.56933594,881.87005615,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.47949219,-1376.56933594,883.27001953,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2405.47949219,-1376.56933594,884.66998291,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2424.09960938,-1354.33007812,879.10400391,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2424.09960938,-1354.33007812,880.50402832,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2424.90991211,-1355.51000977,881.32000732,180.00000000,90.00000000,90.00000000); //object(sfnvilla001_cm) (30)
    CreateDynamicObject(9339,2424.92407227,-1354.13000488,881.32000732,180.00000000,90.00000000,270.00000000); //object(sfnvilla001_cm) (30)
    CreateDynamicObject(9339,2450.10009766,-1357.56933594,879.09997559,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2450.09960938,-1357.56933594,880.50000000,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(14423,2409.89990234,-1324.19995117,880.40002441,0.00000000,0.00000000,359.99450684); //object(madddoggs12) (1)
    CreateDynamicObject(4199,2448.39990234,-1347.19995117,876.65997314,0.00000000,0.00000000,0.00000000); //object(garages1_lan) (2)
    CreateDynamicObject(9339,2451.00000000,-1338.80004883,880.90002441,0.00000000,0.00000000,359.98352051); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(2257,2468.80004883,-1353.59997559,885.79998779,0.00000000,0.00000000,0.00000000); //object(frame_clip_4) (1)
    CreateDynamicObject(1893,2456.30859375,-1352.22753906,884.97045898,0.00000000,0.00000000,0.00000000); //object(shoplight1) (7)
    CreateDynamicObject(1893,2421.64550781,-1356.02539062,882.11511230,0.00000000,0.00000000,0.00000000); //object(shoplight1) (9)
    CreateDynamicObject(1569,2419.46972656,-1329.85937500,878.77899170,0.00000000,0.00000000,179.99450684); //object(adam_v_door) (2)
    CreateDynamicObject(1569,2409.46606445,-1369.99987793,878.79998779,0.00000000,0.00000000,180.00000000); //object(adam_v_door) (2)
    CreateDynamicObject(1569,2409.46972656,-1329.85937500,878.77899170,0.00000000,0.00000000,179.99450684); //object(adam_v_door) (2)
    CreateDynamicObject(1569,2406.45605469,-1369.99987793,878.79998779,0.00000000,0.00000000,0.00000000); //object(adam_v_door) (1)
    CreateDynamicObject(4199,2407.50000000,-1372.09960938,876.70001221,270.00000000,0.00000000,0.00000000); //object(garages1_lan) (2)
    CreateDynamicObject(9339,2451.50000000,-1357.56933594,881.90002441,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2424.90991211,-1356.90405273,881.32000732,0.00000000,270.00000000,270.00000000); //object(sfnvilla001_cm) (30)
    CreateDynamicObject(9339,2450.21997070,-1354.33007812,879.10400391,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2450.21972656,-1354.33007812,880.50402832,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2451.50000000,-1354.33007812,881.90002441,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.72607422,-1357.56933594,883.29998779,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.73999023,-1354.33007812,883.29998779,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2445.67700195,-1356.80004883,884.00000000,0.00000000,270.00000000,270.00000000); //object(sfnvilla001_cm) (30)
    CreateDynamicObject(9339,2445.67700195,-1355.39904785,884.00000000,0.00000000,270.00000000,270.00000000); //object(sfnvilla001_cm) (30)
    CreateDynamicObject(9339,2445.67700195,-1353.99902344,884.00000000,0.00000000,270.00000000,270.00000000); //object(sfnvilla001_cm) (30)
    CreateDynamicObject(9339,2427.62011719,-1357.56933594,883.29998779,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2427.62011719,-1354.33007812,883.29998779,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2.00000000,-1354.33007812,881.90002441,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2437.84008789,-1356.90002441,883.26989746,0.00000000,0.00000000,180.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2437.83984375,-1356.89941406,881.86602783,0.00000000,0.00000000,179.99450684); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.72558594,-1357.85998535,883.29998779,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2425.37988281,-1357.56933594,881.90002441,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(14853,2441.19921875,-1382.50976562,883.91998291,0.00000000,0.00000000,270.00000000); //object(veg_pol_main2) (1)
    CreateDynamicObject(9339,2425.37988281,-1354.33007812,881.90002441,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.73999023,-1354.33007812,884.70001221,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.73999023,-1354.33007812,886.09997559,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.72558594,-1357.56933594,884.70001221,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.72558594,-1357.56933594,886.09997559,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.73999023,-1354.33007812,887.50000000,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.72558594,-1354.33007812,888.90002441,0.00000000,0.00000000,90.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.72558594,-1357.56933594,887.50000000,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.72558594,-1357.56933594,888.90002441,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.72558594,-1357.85998535,884.70001221,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.72558594,-1357.85998535,886.09997559,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(9339,2453.72558594,-1357.85998535,887.50000000,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (23)
    CreateDynamicObject(2395,2456.89990234,-1382.00341797,886.64001465,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (1)
    CreateDynamicObject(2395,2456.89941406,-1363.50000000,883.90002441,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (2)
    CreateDynamicObject(2395,2456.89941406,-1367.23632812,883.90002441,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (3)
    CreateDynamicObject(2395,2456.89941406,-1370.97070312,883.90002441,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (4)
    CreateDynamicObject(2395,2456.89941406,-1374.69921875,883.90002441,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (5)
    CreateDynamicObject(2395,2456.89941406,-1378.43164062,883.90002441,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (6)
    CreateDynamicObject(2395,2456.89941406,-1382.00000000,883.90002441,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (7)
    CreateDynamicObject(2395,2456.50000000,-1392.69995117,882.85998535,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (8)
    CreateDynamicObject(2395,2456.89941406,-1374.69921875,886.64001465,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (9)
    CreateDynamicObject(2395,2456.89941406,-1370.97070312,886.64001465,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (10)
    CreateDynamicObject(2395,2456.89941406,-1367.23632812,886.64001465,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (11)
    CreateDynamicObject(2395,2456.89941406,-1363.50000000,886.64001465,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (12)
    CreateDynamicObject(1649,2461.63500977,-1382.31005859,885.53002930,0.00000000,0.00000000,180.00000000); //object(wglasssmash) (1)
    CreateDynamicObject(1523,2463.75000000,-1382.40002441,883.90997314,0.00000000,0.00000000,0.00000000); //object(gen_doorext10) (3)
    CreateDynamicObject(1649,2461.62011719,-1382.43261719,885.29998779,0.00000000,0.00000000,0.00000000); //object(wglasssmash) (3)
    CreateDynamicObject(1523,2466.86010742,-1365.03002930,883.90997314,0.00000000,0.00000000,90.00000000); //object(gen_doorext10) (4)
    CreateDynamicObject(1649,2.00000000,-1367.13964844,885.40002441,0.00000000,0.00000000,269.98901367); //object(wglasssmash) (15)
    CreateDynamicObject(1649,2466.87988281,-1367.19995117,885.40002441,0.00000000,0.00000000,89.98901367); //object(wglasssmash) (22)
    CreateDynamicObject(1649,2466.78002930,-1367.16003418,885.40002441,0.00000000,0.00000000,269.98901367); //object(wglasssmash) (23)
    CreateDynamicObject(3395,2456.89990234,-1380.00048828,883.90002441,0.00000000,0.00000000,180.00000000); //object(a51_sdsk_3_) (1)
    CreateDynamicObject(1997,2458.69995117,-1380.40002441,883.90002441,0.00000000,0.00000000,90.00000000); //object(hos_trolley) (2)
    CreateDynamicObject(2514,2400.60009766,-1335.19995117,878.79998779,0.00000000,0.00000000,90.00000000); //object(cj_toilet1) (1)
    CreateDynamicObject(2514,2400.60009766,-1336.80004883,878.79998779,0.00000000,0.00000000,90.00000000); //object(cj_toilet1) (2)
    CreateDynamicObject(2132,2466.00000000,-1380.69995117,883.90002441,0.00000000,0.00000000,270.00000000); //object(cj_kitch2_sink) (2)
    CreateDynamicObject(2131,2466.00000000,-1378.69995117,883.90002441,0.00000000,0.00000000,270.00000000); //object(cj_kitch2_fridge) (1)
    CreateDynamicObject(2010,2466.10009766,-1377.90002441,883.89001465,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
    CreateDynamicObject(2251,2457.10009766,-1379.00000000,885.59997559,0.00000000,0.00000000,316.50000000); //object(plant_pot_20) (1)
    CreateDynamicObject(3920,2460.30004883,-1382.09997559,887.59997559,0.00000000,0.00000000,0.00000000); //object(lib_veg3) (1)
    CreateDynamicObject(3920,2460.09960938,-1360.79980469,887.50000000,0.00000000,0.00000000,0.00000000); //object(lib_veg3) (2)
    CreateDynamicObject(1704,2461.30004883,-1381.64404297,883.90002441,0.00000000,0.00000000,180.00000000); //object(kb_chair03) (1)
    CreateDynamicObject(1704,2462.44995117,-1381.64404297,883.90002441,0.00000000,0.00000000,180.00000000); //object(kb_chair03) (2)
    CreateDynamicObject(2010,2462.89990234,-1381.80004883,883.90002441,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (2)
    CreateDynamicObject(1726,2470.64990234,-1363.59997559,883.90002441,0.00000000,0.00000000,270.00000000); //object(mrk_seating2) (1)
    CreateDynamicObject(2010,2470.69995117,-1363.00000000,883.90002441,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (3)
    CreateDynamicObject(2010,2470.60009766,-1366.19995117,883.90002441,0.00000000,0.00000000,312.00000000); //object(nu_plant3_ofc) (4)
    CreateDynamicObject(1726,2470.64990234,-1371.55004883,883.90002441,0.00000000,0.00000000,269.99450684); //object(mrk_seating2) (2)
    CreateDynamicObject(2010,2470.60009766,-1370.95996094,883.90002441,0.00000000,0.00000000,338.00000000); //object(nu_plant3_ofc) (5)
    CreateDynamicObject(2010,2470.60009766,-1374.09997559,883.90002441,0.00000000,0.00000000,338.00000000); //object(nu_plant3_ofc) (6)
    CreateDynamicObject(1208,2466.19995117,-1375.90002441,883.90002441,0.00000000,0.00000000,90.00000000); //object(washer) (1)
    CreateDynamicObject(1808,2466.30004883,-1376.44995117,883.90002441,0.00000000,0.00000000,270.00000000); //object(cj_watercooler2) (1)
    CreateDynamicObject(2149,2465.98999023,-1380.59997559,885.09899902,0.00000000,0.00000000,281.75000000); //object(cj_microwave1) (1)
    CreateDynamicObject(1208,2466.20092773,-1375.21997070,883.90002441,0.00000000,0.00000000,90.00000000); //object(washer) (2)
    CreateDynamicObject(14867,2466.39990234,-1370.92504883,885.40002441,0.00000000,0.00000000,90.00000000); //object(bobbie-cupboards) (1)
    CreateDynamicObject(2010,2466.10009766,-1366.30004883,883.89001465,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (7)
    CreateDynamicObject(2994,2458.89990234,-1372.69995117,884.40002441,0.00000000,0.00000000,270.00000000); //object(kmb_trolley) (1)
    CreateDynamicObject(1620,2466.50000000,-1381.30004883,886.59997559,0.00000000,0.00000000,0.00000000); //object(nt_vent2_01) (1)
    CreateDynamicObject(2423,2463.13696289,-1362.92395020,883.90002441,0.00000000,0.00000000,270.00000000); //object(cj_ff_conter_1b) (1)
    CreateDynamicObject(2424,2466.04003906,-1363.00000000,883.90002441,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_1) (1)
    CreateDynamicObject(2424,2465.11010742,-1363.00000000,883.90002441,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_1) (2)
    CreateDynamicObject(2424,2464.17700195,-1363.00000000,883.90002441,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_1) (3)
    CreateDynamicObject(2424,2463.15600586,-1362.01000977,883.90002441,0.00000000,0.00000000,268.00000000); //object(cj_ff_conter_1) (4)
    CreateDynamicObject(3964,2456.89990234,-1380.19995117,886.70001221,0.00000000,0.00000000,0.00000000); //object(lee_plane09) (1)
    CreateDynamicObject(2283,2465.10009766,-1360.30004883,886.20001221,0.00000000,0.00000000,0.00000000); //object(frame_thick_3) (1)
    CreateDynamicObject(2282,2466.00000000,-1376.30004883,886.00000000,0.00000000,0.00000000,270.00000000); //object(frame_thick_4) (1)
    CreateDynamicObject(2280,2461.39990234,-1381.67004395,885.59997559,0.00000000,0.00000000,180.00000000); //object(frame_thick_1) (1)
    CreateDynamicObject(3395,2456.89990234,-1374.00000000,883.90002441,0.00000000,0.00000000,180.00000000); //object(a51_sdsk_3_) (2)
    CreateDynamicObject(1997,2458.69921875,-1374.40002441,883.90002441,0.00000000,0.00000000,90.00000000); //object(hos_trolley) (3)
    CreateDynamicObject(2994,2458.89941406,-1378.59960938,884.40002441,0.00000000,0.00000000,270.00000000); //object(kmb_trolley) (2)
    CreateDynamicObject(2500,2463.19995117,-1362.16003418,884.94000244,0.00000000,0.00000000,268.00000000); //object(cj_ff_coffee) (1)
    CreateDynamicObject(2010,2460.89990234,-1360.59997559,883.90002441,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (8)
    CreateDynamicObject(1704,2461.29980469,-1376.19995117,883.90002441,0.00000000,0.00000000,179.99450684); //object(kb_chair03) (3)
    CreateDynamicObject(1704,2462.44921875,-1376.19995117,883.90002441,0.00000000,0.00000000,179.99450684); //object(kb_chair03) (4)
    CreateDynamicObject(2010,2462.89941406,-1376.19995117,883.90002441,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (9)
    CreateDynamicObject(1997,2458.69921875,-1368.39941406,883.90002441,0.00000000,0.00000000,90.00000000); //object(hos_trolley) (4)
    CreateDynamicObject(3395,2456.89941406,-1368.00000000,883.90002441,0.00000000,0.00000000,179.99450684); //object(a51_sdsk_3_) (3)
    CreateDynamicObject(2994,2458.89941406,-1366.69921875,884.40002441,0.00000000,0.00000000,270.00000000); //object(kmb_trolley) (3)
    CreateDynamicObject(1704,2461.29980469,-1370.19921875,883.90002441,0.00000000,0.00000000,179.99450684); //object(kb_chair03) (5)
    CreateDynamicObject(1704,2462.44921875,-1370.19921875,883.90002441,0.00000000,0.00000000,179.99450684); //object(kb_chair03) (6)
    CreateDynamicObject(2010,2462.89941406,-1370.19921875,883.90002441,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (10)
    CreateDynamicObject(1714,2464.89990234,-1361.80004883,883.90002441,0.00000000,0.00000000,0.00000000); //object(kb_swivelchair1) (2)
    CreateDynamicObject(1726,2458.19995117,-1360.76000977,883.90002441,0.00000000,0.00000000,0.00000000); //object(mrk_seating2) (3)
    CreateDynamicObject(2010,2457.29980469,-1360.59960938,883.90002441,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (11)
    CreateDynamicObject(1817,2458.89990234,-1385.50000000,883.90002441,0.00000000,0.00000000,0.00000000); //object(coffee_med_2) (1)
    CreateDynamicObject(2190,2464.50000000,-1363.30004883,884.90002441,0.00000000,0.00000000,180.00000000); //object(pc_1) (2)
    CreateDynamicObject(2201,2465.80004883,-1363.30004883,884.90002441,0.00000000,0.00000000,272.00000000); //object(printer_1) (1)
    CreateDynamicObject(2855,2459.39990234,-1385.00000000,884.40002441,0.00000000,0.00000000,266.00000000); //object(gb_bedmags05) (4)
    CreateDynamicObject(2239,2466.00000000,-1360.80004883,883.90002441,0.00000000,0.00000000,0.00000000); //object(cj_mlight16) (2)
    CreateDynamicObject(2261,2459.25000000,-1360.73999023,886.00000000,0.00000000,0.00000000,0.00000000); //object(frame_slim_2) (1)
    CreateDynamicObject(646,2457.19995117,-1390.40002441,884.29998779,0.00000000,0.00000000,294.00000000); //object(veg_palmkb14) (1)
    CreateDynamicObject(2257,2422.69921875,-1354.50000000,880.00000000,0.00000000,0.00000000,0.00000000); //object(frame_clip_4) (1)
    CreateDynamicObject(3964,2456.50000000,-1393.40002441,886.20001221,0.00000000,0.00000000,0.00000000); //object(lee_plane09) (2)
    CreateDynamicObject(1726,2470.64941406,-1379.54003906,883.90002441,0.00000000,0.00000000,269.99450684); //object(mrk_seating2) (4)
    CreateDynamicObject(2010,2470.59960938,-1378.95996094,883.90002441,0.00000000,0.00000000,337.99987793); //object(nu_plant3_ofc) (12)
    CreateDynamicObject(2010,2470.59960938,-1382.09960938,883.90002441,0.00000000,0.00000000,337.99987793); //object(nu_plant3_ofc) (13)
    CreateDynamicObject(2280,2470.70996094,-1364.56005859,886.00000000,0.00000000,0.00000000,270.00000000); //object(frame_thick_1) (2)
    CreateDynamicObject(3963,2468.69995117,-1385.90002441,886.00000000,0.00000000,0.00000000,359.80004883); //object(lee_plane08) (2)
    CreateDynamicObject(2282,2470.70996094,-1372.57995605,885.79998779,0.00000000,0.00000000,270.00000000); //object(frame_thick_4) (2)
    CreateDynamicObject(2279,2470.69995117,-1380.55004883,886.09997559,0.00000000,0.00000000,270.00000000); //object(frame_thick_6) (1)
    CreateDynamicObject(646,2469.89941406,-1354.09960938,885.29998779,0.00000000,0.00000000,245.99487305); //object(veg_palmkb14) (2)
    CreateDynamicObject(1726,2458.50000000,-1383.00000000,883.90002441,0.00000000,0.00000000,0.00000000); //object(mrk_seating2) (7)
    CreateDynamicObject(1817,2458.69921875,-1362.59960938,883.90002441,0.00000000,0.00000000,0.00000000); //object(coffee_med_2) (2)
    CreateDynamicObject(1455,2458.69995117,-1385.00000000,884.50000000,0.00000000,0.00000000,0.00000000); //object(dyn_glass) (1)
    CreateDynamicObject(1455,2458.80004883,-1384.90002441,884.50000000,0.00000000,0.00000000,0.00000000); //object(dyn_glass) (2)
    CreateDynamicObject(1455,2459.30004883,-1384.59997559,884.50000000,0.00000000,0.00000000,274.00000000); //object(dyn_glass) (3)
    CreateDynamicObject(2855,2459.19921875,-1362.09960938,884.40002441,0.00000000,0.00000000,0.00000000); //object(gb_bedmags05) (6)
    CreateDynamicObject(2010,2457.25000000,-1387.94995117,883.90002441,0.00000000,0.00000000,337.99987793); //object(nu_plant3_ofc) (14)
    CreateDynamicObject(2596,2459.10009766,-1388.00244141,886.50000000,0.00000000,0.00000000,180.00000000); //object(cj_sex_tv) (2)
    CreateDynamicObject(2313,2459.69995117,-1387.90002441,883.90002441,0.00000000,0.00000000,180.00000000); //object(cj_tv_table1) (1)
    CreateDynamicObject(1776,2460.80004883,-1388.20703125,884.90002441,0.00000000,0.00000000,180.00000000); //object(cj_candyvendor) (1)
    CreateDynamicObject(1302,2461.96997070,-1388.09997559,883.80004883,0.00000000,0.00000000,180.00000000); //object(vendmachfd) (1)
    CreateDynamicObject(2010,2457.50000000,-1383.19921875,883.90002441,0.00000000,0.00000000,337.99987793); //object(nu_plant3_ofc) (15)
    CreateDynamicObject(2886,2462.60009766,-1391.50000000,884.40002441,0.00000000,0.00000000,90.00000000); //object(sec_keypad) (1)
    CreateDynamicObject(2395,2456.89941406,-1378.43164062,886.64001465,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (17)
    CreateDynamicObject(2395,2456.50000000,-1396.40002441,882.85998535,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (18)
    CreateDynamicObject(2395,2455.56591797,-1390.00000000,882.85998535,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (19)
    CreateDynamicObject(2395,2462.26000977,-1388.50000000,882.85998535,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (20)
    CreateDynamicObject(2395,2459.29980469,-1390.00000000,882.85998535,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (21)
    CreateDynamicObject(2395,2455.56542969,-1390.00000000,885.59002686,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (22)
    CreateDynamicObject(2395,2459.29980469,-1390.00000000,885.59197998,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (23)
    CreateDynamicObject(2395,2462.26000977,-1390.00000000,885.59002686,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (24)
    CreateDynamicObject(2395,2459.29980469,-1390.00000000,885.59197998,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (25)
    CreateDynamicObject(2395,2456.50000000,-1392.69921875,882.85998535,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (26)
    CreateDynamicObject(2395,2456.50000000,-1396.39941406,885.59197998,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (27)
    CreateDynamicObject(2395,2456.50000000,-1392.69921875,885.59197998,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (28)
    CreateDynamicObject(2395,2462.26000977,-1393.71997070,885.59002686,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (29)
    CreateDynamicObject(2395,2462.19921875,-1397.45996094,885.59002686,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (30)
    CreateDynamicObject(2395,2462.00000000,-1396.90002441,885.59197998,0.00000000,0.00000000,178.00000000); //object(cj_sports_wall) (31)
    CreateDynamicObject(2395,2462.00000000,-1396.89941406,882.85998535,0.00000000,0.00000000,177.99499512); //object(cj_sports_wall) (32)
    CreateDynamicObject(2395,2458.27001953,-1396.77001953,882.85998535,0.00000000,0.00000000,177.99499512); //object(cj_sports_wall) (33)
    CreateDynamicObject(2395,2458.26953125,-1396.76953125,885.59197998,0.00000000,0.00000000,177.99499512); //object(cj_sports_wall) (34)
    CreateDynamicObject(2395,2462.26000977,-1394.55004883,882.85998535,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (35)
    CreateDynamicObject(1726,2457.18945312,-1385.98925781,883.90002441,0.00000000,0.00000000,90.00000000); //object(mrk_seating2) (8)
    CreateDynamicObject(14782,2458.80004883,-1396.40002441,883.90002441,0.00000000,0.00000000,178.00000000); //object(int3int_boxing30) (1)
    CreateDynamicObject(2164,2461.00000000,-1390.00000000,882.90002441,0.00000000,0.00000000,0.00000000); //object(med_office_unit_5) (1)
    CreateDynamicObject(2167,2460.08007812,-1390.00000000,882.90002441,0.00000000,0.00000000,0.00000000); //object(med_office_unit_7) (1)
    CreateDynamicObject(2162,2458.30004883,-1390.00000000,882.90002441,0.00000000,0.00000000,0.00000000); //object(med_office_unit_1) (1)
    CreateDynamicObject(646,2470.00000000,-1385.50000000,885.29998779,0.00000000,0.00000000,121.99768066); //object(veg_palmkb14) (3)
    CreateDynamicObject(2257,2459.60009766,-1390.00000000,885.90002441,0.00000000,0.00000000,0.00000000); //object(frame_clip_4) (1)
    CreateDynamicObject(3964,2467.19921875,-1372.29980469,886.00000000,0.00000000,0.00000000,0.00000000); //object(lee_plane09) (4)
    CreateDynamicObject(2198,2458.39990234,-1393.80004883,882.90002441,0.00000000,0.00000000,270.00000000); //object(med_office2_desk_3) (1)
    CreateDynamicObject(2198,2458.39990234,-1391.90002441,882.90002441,0.00000000,0.00000000,270.00000000); //object(med_office2_desk_3) (2)
    CreateDynamicObject(1806,2457.60009766,-1394.30004883,882.90002441,0.00000000,0.00000000,286.00000000); //object(med_office_chair) (1)
    CreateDynamicObject(1806,2457.39990234,-1392.50000000,882.90002441,0.00000000,0.00000000,271.99609375); //object(med_office_chair) (2)
    CreateDynamicObject(9339,2392.30102539,-1335.95996094,880.49005127,180.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(9339,2392.30004883,-1335.95495605,879.29998779,180.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (17)
    CreateDynamicObject(2518,2403.00000000,-1335.09997559,878.79998779,0.00000000,0.00000000,0.00000000); //object(cj_b_sink2) (1)
    CreateDynamicObject(2518,2403.89990234,-1336.88000488,878.79998779,0.00000000,0.00000000,180.00000000); //object(cj_b_sink2) (2)
    CreateDynamicObject(1492,2405.30004883,-1334.29895020,878.70001221,0.00000000,0.00000000,270.00000000); //object(gen_doorint02) (1)
    CreateDynamicObject(1492,2405.29980469,-1337.59960938,878.70001221,0.00000000,0.00000000,90.00000000); //object(gen_doorint02) (2)
    CreateDynamicObject(1314,2405.62988281,-1335.30004883,881.40002441,0.00000000,0.00000000,90.00000000); //object(twoplayer) (1)
    CreateDynamicObject(1314,2405.62988281,-1336.80004883,881.40002441,0.00000000,0.00000000,90.00000000); //object(twoplayer) (2)
    CreateDynamicObject(2395,2465.80004883,-1396.89001465,885.59197998,0.00000000,0.00000000,180.00000000); //object(cj_sports_wall) (36)
    CreateDynamicObject(2395,2465.80004883,-1396.89001465,882.85998535,0.00000000,0.00000000,180.00000000); //object(cj_sports_wall) (37)
    CreateDynamicObject(1569,2465.04003906,-1396.90002441,882.90002441,0.00000000,0.00000000,180.00000000); //object(adam_v_door) (3)
    CreateDynamicObject(1240,2464.30004883,-1396.90002441,885.79998779,0.00000000,0.00000000,0.00000000); //object(health) (4)


	//ATMs
	CreateDynamicObject(2942, 2228.383789, -1714.005249, 13.145634, 0.000000, 0.000000, -89.399971);
	CreateDynamicObject(2942, 1928.707275, -1773.489013, 13.176870, 0.000000, 0.000000, 91.299987);
	CreateDynamicObject(2942, 1102.388793, -1428.854858, 15.346872, 0.000000, 0.000000, 90.500022);



	//new prison
    CreateDynamicObject(8419,1796.79882812,-1548.17187500,5687.70214844,0.00000000,0.00000000,0.00000000); //object(vgsbldng01_lvs) (1)
    CreateDynamicObject(3944,1821.79687500,-1557.96679688,5698.92626953,0.00000000,0.00000000,270.24719238); //object(bistro_blok) (1)
    CreateDynamicObject(3944,1821.87402344,-1575.94921875,5698.92626953,0.00000000,0.00000000,270.24719238); //object(bistro_blok) (2)
    CreateDynamicObject(3944,1824.87207031,-1585.84765625,5698.92626953,0.00000000,0.00000000,0.24719238); //object(bistro_blok) (3)
    CreateDynamicObject(3944,1824.86718750,-1582.13378906,5698.92626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (4)
    CreateDynamicObject(3944,1806.78503418,-1584.22143555,5698.92626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (5)
    CreateDynamicObject(3944,1795.26306152,-1586.00744629,5698.92626953,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (6)
    CreateDynamicObject(3944,1795.24902344,-1582.25390625,5698.92626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (8)
    CreateDynamicObject(3944,1798.66406250,-1574.10253906,5698.92626953,0.00000000,0.00000000,90.47790527); //object(bistro_blok) (9)
    CreateDynamicObject(14437,1801.84790039,-1581.60253906,5700.90429688,0.00000000,0.00000000,270.50000000); //object(carter-bars) (1)
    CreateDynamicObject(8661,1808.54980469,-1576.13574219,5699.42871094,0.00000000,0.00000000,0.00000000); //object(gnhtelgrnd_lvs) (1)
    CreateDynamicObject(8661,1835.80200195,-1573.08117676,5702.91748047,0.00000000,359.98352051,0.09600830); //object(gnhtelgrnd_lvs) (3)
    CreateDynamicObject(3944,1821.87402344,-1575.94921875,5702.39501953,0.00000000,0.00000000,270.24719238); //object(bistro_blok) (12)
    CreateDynamicObject(3944,1824.80957031,-1582.13281250,5702.40478516,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (15)
    CreateDynamicObject(3944,1806.78417969,-1584.22070312,5702.40673828,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (16)
    CreateDynamicObject(8661,1816.45019531,-1575.28027344,5706.34667969,0.00000000,179.99450684,0.00000000); //object(gnhtelgrnd_lvs) (4)
    CreateDynamicObject(14437,1801.84765625,-1581.60253906,5704.89257812,0.00000000,0.00000000,270.49438477); //object(carter-bars) (2)
    CreateDynamicObject(3944,1793.48046875,-1581.34179688,5698.92626953,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1793.46484375,-1577.58789062,5698.92626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(3944,1793.46484375,-1577.58789062,5702.42626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (22)
    CreateDynamicObject(3944,1793.48046875,-1581.34179688,5702.41845703,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (23)
    CreateDynamicObject(8661,1784.27478027,-1559.68432617,5702.60644531,0.00000000,179.99450684,0.09597778); //object(gnhtelgrnd_lvs) (5)
    CreateDynamicObject(8661,1784.25488281,-1573.11132812,5702.90527344,0.00000000,359.98352051,0.00000000); //object(gnhtelgrnd_lvs) (6)
    CreateDynamicObject(3944,1798.66406250,-1574.10253906,5702.41455078,0.00000000,0.00000000,90.48339844); //object(bistro_blok) (24)
    CreateDynamicObject(14437,1801.79675293,-1576.83459473,5704.87500000,0.00000000,0.00000000,270.49438477); //object(carter-bars) (2)
    CreateDynamicObject(14437,1801.79589844,-1576.85156250,5700.90039062,0.00000000,0.00000000,270.48889160); //object(carter-bars) (2)
    CreateDynamicObject(3944,1793.51538086,-1576.59106445,5698.92626953,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1793.52307129,-1576.58715820,5702.42041016,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1793.51391602,-1572.83447266,5698.92626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(3944,1793.51367188,-1572.83398438,5702.42041016,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(14437,1801.80175781,-1572.08593750,5700.90039062,0.00000000,0.00000000,270.48889160); //object(carter-bars) (2)
    CreateDynamicObject(14437,1801.80175781,-1572.08593750,5704.88671875,0.00000000,0.00000000,270.49438477); //object(carter-bars) (2)
    CreateDynamicObject(8661,1835.75585938,-1553.13378906,5702.91748047,0.00000000,359.98352051,0.00000000); //object(gnhtelgrnd_lvs) (3)
    CreateDynamicObject(8661,1835.82031250,-1553.18554688,5702.61279297,0.00000000,179.98352051,0.18676758); //object(gnhtelgrnd_lvs) (3)
    CreateDynamicObject(8661,1808.52148438,-1556.15332031,5699.42871094,0.00000000,0.00000000,0.00000000); //object(gnhtelgrnd_lvs) (1)
    CreateDynamicObject(3944,1821.79833984,-1557.91821289,5702.39501953,0.00000000,0.00000000,270.24719238); //object(bistro_blok) (12)
    CreateDynamicObject(14437,1801.78039551,-1567.40783691,5700.90039062,0.00000000,0.00000000,270.74438477); //object(carter-bars) (2)
    CreateDynamicObject(14437,1801.78027344,-1567.40722656,5704.88867188,0.00000000,0.00000000,270.73608398); //object(carter-bars) (2)
    CreateDynamicObject(8661,1816.47851562,-1555.29980469,5706.34667969,0.00000000,179.99450684,0.00000000); //object(gnhtelgrnd_lvs) (4)
    CreateDynamicObject(3944,1793.52490234,-1571.81909180,5698.92626953,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1793.52441406,-1571.81835938,5702.41455078,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1793.50561523,-1568.06567383,5698.92626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(3944,1793.50488281,-1568.06542969,5702.42041016,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(3944,1798.51269531,-1556.09082031,5698.92626953,0.00000000,0.00000000,90.47241211); //object(bistro_blok) (9)
    CreateDynamicObject(3944,1798.51269531,-1556.09082031,5702.40283203,0.00000000,0.00000000,90.47790527); //object(bistro_blok) (9)
    CreateDynamicObject(8661,1784.22570801,-1553.13757324,5702.90527344,0.00000000,359.99450684,0.00000000); //object(gnhtelgrnd_lvs) (6)
    CreateDynamicObject(3944,1793.48242188,-1567.14257812,5698.92626953,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1793.48242188,-1567.14257812,5702.39111328,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1793.47106934,-1563.38732910,5698.92626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(3944,1793.47070312,-1563.38671875,5702.39306641,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(16101,1816.01269531,-1579.16503906,5702.91113281,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (1)
    CreateDynamicObject(16101,1816.01660156,-1569.74511719,5702.91113281,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(16101,1804.04882812,-1579.32714844,5702.91113281,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (3)
    CreateDynamicObject(16101,1804.09179688,-1570.01855469,5702.91699219,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (4)
    CreateDynamicObject(3944,1795.24902344,-1582.25390625,5702.40087891,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (8)
    CreateDynamicObject(3944,1795.26269531,-1586.00683594,5702.42236328,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (6)
    CreateDynamicObject(14437,1801.72949219,-1562.65234375,5704.88867188,0.00000000,0.00000000,270.73608398); //object(carter-bars) (2)
    CreateDynamicObject(14437,1801.72949219,-1562.65234375,5700.88867188,0.00000000,0.00000000,270.73608398); //object(carter-bars) (2)
    CreateDynamicObject(3944,1793.45263672,-1562.38696289,5698.92626953,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1793.45214844,-1562.38671875,5702.40869141,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1793.43823242,-1558.63208008,5702.39306641,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(3944,1793.43750000,-1558.63183594,5698.92626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(14437,1801.65039062,-1557.91528320,5704.88867188,0.00000000,0.00000000,270.73608398); //object(carter-bars) (2)
    CreateDynamicObject(3944,1793.38610840,-1557.64782715,5702.40869141,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(14437,1801.65039062,-1557.91503906,5700.89257812,0.00000000,0.00000000,270.73608398); //object(carter-bars) (2)
    CreateDynamicObject(3944,1793.36926270,-1553.90283203,5702.39306641,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(3944,1793.38732910,-1553.86218262,5698.92626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(14437,1801.65502930,-1553.17675781,5704.88867188,0.00000000,0.00000000,270.73608398); //object(carter-bars) (2)
    CreateDynamicObject(3944,1793.39208984,-1552.90771484,5702.40869141,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1793.38903809,-1549.15209961,5702.39306641,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(14437,1801.65429688,-1553.17675781,5700.88867188,0.00000000,0.00000000,270.73608398); //object(carter-bars) (2)
    CreateDynamicObject(3944,1793.39160156,-1552.90722656,5698.93017578,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1793.38867188,-1549.15136719,5698.93408203,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (21)
    CreateDynamicObject(3944,1826.20007324,-1553.61230469,5702.42626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.21008301,-1558.38220215,5702.42626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.28601074,-1563.12133789,5702.42626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.34631348,-1567.86547852,5702.42626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.34741211,-1572.60693359,5702.42626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.33691406,-1577.35864258,5702.42626953,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.33691406,-1577.35839844,5698.95361328,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.34667969,-1572.60644531,5698.93212891,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.34570312,-1567.86523438,5698.91064453,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.28515625,-1563.12109375,5698.93603516,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.20996094,-1558.38183594,5698.93603516,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.20263672,-1557.28918457,5702.40869141,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.19921875,-1553.61230469,5698.94775391,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.20214844,-1557.28906250,5698.92041016,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.20739746,-1562.05627441,5698.92041016,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.20703125,-1562.05566406,5702.41259766,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.28247070,-1566.78552246,5702.41259766,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.28222656,-1566.78515625,5698.92041016,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.35754395,-1571.53771973,5698.92041016,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.35742188,-1571.53710938,5702.40869141,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.34191895,-1576.27734375,5702.40869141,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.34179688,-1576.27734375,5698.90283203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.33337402,-1581.03796387,5698.90283203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.32775879,-1581.03955078,5702.42041016,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.20336914,-1552.55566406,5702.40869141,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.20312500,-1552.55566406,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1826.19421387,-1548.88330078,5698.94775391,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.18945312,-1548.87988281,5702.43212891,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(16101,1815.97167969,-1560.16894531,5702.91113281,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(16101,1815.97656250,-1550.82714844,5702.91113281,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(16101,1803.93652344,-1560.45410156,5702.91113281,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(16101,1803.96191406,-1551.02636719,5702.91113281,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(3944,1814.25781250,-1540.88378906,5698.92626953,0.00000000,0.00000000,270.24719238); //object(bistro_blok) (1)
    CreateDynamicObject(3944,1799.69531250,-1548.69628906,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1796.11523438,-1550.85681152,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1796.09692383,-1548.84777832,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1796.11523438,-1550.85644531,5702.41845703,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1796.09667969,-1548.84765625,5702.42041016,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1799.67871094,-1544.94726562,5698.94775391,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1799.69482422,-1548.68481445,5702.41259766,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1799.67871094,-1544.94726562,5702.43017578,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1816.79003906,-1544.87695312,5701.42431641,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1820.78906250,-1544.86230469,5698.90869141,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1820.79003906,-1548.53906250,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1820.78417969,-1548.52832031,5702.42822266,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1803.00268555,-1548.67028809,5701.42041016,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1820.77734375,-1544.85351562,5702.40673828,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1803.19531250,-1548.66308594,5702.41259766,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1817.29003906,-1544.83593750,5702.40673828,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(2774,1810.42285156,-1557.33691406,5711.89599609,0.00000000,0.00000000,0.00000000); //object(cj_airp_pillars) (1)
    CreateDynamicObject(2774,1810.27685547,-1570.86743164,5711.89599609,0.00000000,0.00000000,0.00000000); //object(cj_airp_pillars) (2)
    CreateDynamicObject(9339,1803.55761719,-1570.54980469,5702.76074219,0.00000000,90.00000000,359.99450684); //object(sfnvilla001_cm) (4)
    CreateDynamicObject(3944,1793.39819336,-1557.61108398,5698.93017578,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(9339,1803.55371094,-1559.57031250,5702.76074219,0.00000000,90.00000000,359.98352051); //object(sfnvilla001_cm) (5)
    CreateDynamicObject(8661,1784.27832031,-1579.65625000,5702.60644531,0.00000000,179.99450684,0.08789062); //object(gnhtelgrnd_lvs) (5)
    CreateDynamicObject(9339,1816.52185059,-1562.73168945,5702.76074219,0.00000000,90.00000000,180.06707764); //object(sfnvilla001_cm) (5)
    CreateDynamicObject(9339,1816.53161621,-1570.88439941,5702.76074219,0.00000000,90.00000000,180.06591797); //object(sfnvilla001_cm) (5)
    CreateDynamicObject(8661,1835.85986328,-1573.16455078,5702.61279297,0.00000000,179.98352051,0.18676758); //object(gnhtelgrnd_lvs) (3)
    CreateDynamicObject(9339,1803.05957031,-1582.34948730,5702.76074219,0.00000000,90.00000000,90.07922363); //object(sfnvilla001_cm) (5)
    CreateDynamicObject(8661,1817.83520508,-1591.58935547,5702.91748047,0.00000000,359.97802734,0.09338379); //object(gnhtelgrnd_lvs) (3)
    CreateDynamicObject(8661,1810.61291504,-1591.61975098,5702.60009766,0.00000000,179.99450684,0.08789062); //object(gnhtelgrnd_lvs) (5)
    CreateDynamicObject(3944,1814.25781250,-1540.88378906,5702.41992188,0.00000000,0.00000000,270.24719238); //object(bistro_blok) (1)
    CreateDynamicObject(9339,1805.76745605,-1552.08361816,5702.76074219,0.00000000,90.00000000,270.37957764); //object(sfnvilla001_cm) (5)
    CreateDynamicObject(8661,1817.08593750,-1542.71777344,5702.60644531,0.00000000,179.98352051,0.36254883); //object(gnhtelgrnd_lvs) (3)
    CreateDynamicObject(8661,1812.46984863,-1542.76843262,5702.91748047,0.00000000,359.98352051,0.28799438); //object(gnhtelgrnd_lvs) (3)
    CreateDynamicObject(14414,1810.02880859,-1579.82275391,5699.69384766,0.00000000,0.00000000,0.00000000); //object(carter-stairs05) (1)
    CreateDynamicObject(14414,1810.00781250,-1574.50964355,5699.52880859,359.93566895,179.95227051,180.11187744); //object(carter-stairs05) (3)
    CreateDynamicObject(8661,1808.03527832,-1586.85168457,5682.88867188,0.00000000,269.98022461,0.00000000); //object(gnhtelgrnd_lvs) (6)
    CreateDynamicObject(9339,1808.17785645,-1589.91906738,5699.73095703,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (42)
    CreateDynamicObject(8661,1812.04882812,-1586.80957031,5682.87597656,0.00000000,269.97802734,179.99450684); //object(gnhtelgrnd_lvs) (6)
    CreateDynamicObject(970,1804.20080566,-1579.57775879,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (7)
    CreateDynamicObject(970,1804.19970703,-1575.43432617,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (15)
    CreateDynamicObject(970,1804.20214844,-1571.36157227,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (16)
    CreateDynamicObject(970,1804.18688965,-1554.67761230,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (20)
    CreateDynamicObject(970,1804.19470215,-1558.83972168,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (23)
    CreateDynamicObject(970,1804.19726562,-1563.01464844,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1804.19958496,-1567.18603516,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (25)
    CreateDynamicObject(970,1806.31152344,-1552.64550781,5703.25097656,0.00000000,179.99450684,180.28564453); //object(fencesmallb) (27)
    CreateDynamicObject(970,1809.72265625,-1552.63183594,5703.25097656,0.00000000,179.99450684,180.28564453); //object(fencesmallb) (28)
    CreateDynamicObject(970,1813.80078125,-1552.60937500,5703.25097656,0.00000000,179.99450684,180.28564453); //object(fencesmallb) (29)
    CreateDynamicObject(970,1806.26147461,-1581.68676758,5703.25097656,0.00000000,179.99450684,180.28564453); //object(fencesmallb) (30)
    CreateDynamicObject(970,1815.87304688,-1554.67883301,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (31)
    CreateDynamicObject(970,1815.88781738,-1558.80700684,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (32)
    CreateDynamicObject(970,1815.88183594,-1562.94421387,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (33)
    CreateDynamicObject(970,1815.87670898,-1567.06286621,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (34)
    CreateDynamicObject(970,1815.86779785,-1571.18701172,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (35)
    CreateDynamicObject(970,1815.87207031,-1575.30664062,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (36)
    CreateDynamicObject(970,1815.86938477,-1579.58117676,5703.25097656,0.00000000,179.99450684,270.00000000); //object(fencesmallb) (37)
    CreateDynamicObject(970,1813.81652832,-1581.65966797,5703.25097656,0.00000000,179.99450684,180.28564453); //object(fencesmallb) (38)
    CreateDynamicObject(9339,1808.17773438,-1589.91894531,5701.12939453,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (48)
    CreateDynamicObject(9339,1808.17773438,-1589.91894531,5702.19677734,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (49)
    CreateDynamicObject(9339,1811.89672852,-1589.91967773,5699.73095703,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (50)
    CreateDynamicObject(9339,1811.89648438,-1589.91894531,5701.12939453,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (51)
    CreateDynamicObject(9339,1811.89648438,-1589.91894531,5702.18896484,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (52)
    CreateDynamicObject(8661,1808.32141113,-1586.81933594,5682.88867188,0.00000000,269.97802734,180.00000000); //object(gnhtelgrnd_lvs) (6)
    CreateDynamicObject(8661,1811.75683594,-1586.86145020,5682.88867188,0.00000000,269.97802734,0.00000000); //object(gnhtelgrnd_lvs) (6)
    CreateDynamicObject(2930,1801.79150391,-1552.40869141,5702.05517578,0.00000000,0.00000000,0.48001099); //object(chinatgate) (1)
    CreateDynamicObject(2930,1801.77014160,-1557.13854980,5702.05517578,0.00000000,0.00000000,0.47790527); //object(chinatgate) (2)
    CreateDynamicObject(2930,1801.83581543,-1561.86804199,5702.05517578,0.00000000,0.00000000,0.47790527); //object(chinatgate) (3)
    CreateDynamicObject(2930,1801.94006348,-1566.64123535,5702.05517578,0.00000000,0.00000000,0.47790527); //object(chinatgate) (4)
    CreateDynamicObject(2930,1801.93615723,-1571.29345703,5702.05517578,0.00000000,0.00000000,0.47790527); //object(chinatgate) (5)
    CreateDynamicObject(2930,1801.90808105,-1576.06445312,5702.05517578,0.00000000,0.00000000,0.47790527); //object(chinatgate) (6)
    CreateDynamicObject(2930,1801.95166016,-1580.82141113,5702.05517578,0.00000000,0.00000000,0.47790527); //object(chinatgate) (7)
    CreateDynamicObject(2930,1801.95117188,-1580.82128906,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (8)
    CreateDynamicObject(2930,1801.92639160,-1576.08361816,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (9)
    CreateDynamicObject(2930,1801.91748047,-1571.30688477,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (10)
    CreateDynamicObject(2930,1801.90710449,-1566.63781738,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (11)
    CreateDynamicObject(2930,1801.83142090,-1561.85119629,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (12)
    CreateDynamicObject(2930,1801.78356934,-1557.14074707,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (13)
    CreateDynamicObject(2930,1801.76660156,-1552.39672852,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (14)
    CreateDynamicObject(2930,1817.90026855,-1552.16015625,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (15)
    CreateDynamicObject(2930,1817.90173340,-1556.90173340,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (16)
    CreateDynamicObject(2930,1817.97802734,-1561.65954590,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (17)
    CreateDynamicObject(2930,1818.01013184,-1566.40661621,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (18)
    CreateDynamicObject(2930,1818.06726074,-1571.15270996,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (19)
    CreateDynamicObject(2930,1818.04797363,-1575.87060547,5705.54882812,0.00000000,0.00000000,0.47790527); //object(chinatgate) (20)
    CreateDynamicObject(2930,1818.10192871,-1580.65954590,5705.53613281,0.00000000,0.00000000,0.47790527); //object(chinatgate) (21)
    CreateDynamicObject(2930,1818.10156250,-1580.65917969,5702.04150391,0.00000000,0.00000000,0.47790527); //object(chinatgate) (22)
    CreateDynamicObject(2930,1818.05444336,-1575.90368652,5702.04150391,0.00000000,0.00000000,0.47790527); //object(chinatgate) (23)
    CreateDynamicObject(2930,1818.05017090,-1571.16259766,5702.04150391,0.00000000,0.00000000,0.47790527); //object(chinatgate) (24)
    CreateDynamicObject(2930,1818.03869629,-1566.39038086,5702.04150391,0.00000000,0.00000000,0.47790527); //object(chinatgate) (25)
    CreateDynamicObject(2930,1817.97448730,-1561.65429688,5702.04150391,0.00000000,0.00000000,0.47790527); //object(chinatgate) (26)
    CreateDynamicObject(2930,1817.89257812,-1556.90429688,5702.04150391,0.00000000,0.00000000,0.47790527); //object(chinatgate) (27)
    CreateDynamicObject(2930,1817.90490723,-1552.17919922,5702.04150391,0.00000000,0.00000000,0.47790527); //object(chinatgate) (28)
    CreateDynamicObject(1886,1815.44580078,-1584.49584961,5702.71582031,32.00000000,0.00000000,212.67195129); //object(shop_sec_cam) (3)
    CreateDynamicObject(1886,1815.44531250,-1584.49511719,5706.43798828,20.17175293,359.18182373,212.95001221); //object(shop_sec_cam) (4)
    CreateDynamicObject(1886,1804.72534180,-1584.74670410,5706.43798828,20.17089844,359.18151855,149.02813721); //object(shop_sec_cam) (5)
    CreateDynamicObject(1886,1811.33569336,-1570.86816406,5706.43798828,40.93139648,359.04653931,157.44683838); //object(shop_sec_cam) (6)
    CreateDynamicObject(1886,1809.10241699,-1571.58654785,5706.43798828,40.92956543,359.04418945,346.48513794); //object(shop_sec_cam) (7)
    CreateDynamicObject(1886,1809.33081055,-1557.48364258,5706.43798828,40.92407227,359.04418945,346.48132324); //object(shop_sec_cam) (8)
    CreateDynamicObject(1886,1802.70556641,-1550.57910156,5702.68164062,4.92764282,359.27514648,25.83746338); //object(shop_sec_cam) (9)
    CreateDynamicObject(1886,1814.60083008,-1549.29809570,5702.89746094,20.92602539,359.22656250,259.74060059); //object(shop_sec_cam) (11)
    CreateDynamicObject(1886,1802.39941406,-1523.69921875,5702.79980469,20.92346191,359.21997070,135.73059082); //object(shop_sec_cam) (12)
    CreateDynamicObject(1432,1812.47045898,-1561.33886719,5699.42871094,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (1)
    CreateDynamicObject(1432,1807.20642090,-1559.40454102,5699.42871094,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (2)
    CreateDynamicObject(1432,1808.27185059,-1563.35205078,5699.42871094,0.00000000,0.00000000,324.00000000); //object(dyn_table_2) (3)
    CreateDynamicObject(2964,1810.37011719,-1567.12988281,5699.42871094,0.00000000,0.00000000,1.53259277); //object(k_pooltablesm) (1)
    CreateDynamicObject(3001,1810.49450684,-1567.13024902,5700.35888672,0.00000000,0.00000000,288.00000000); //object(k_poolballstp07) (1)
    CreateDynamicObject(3002,1810.77832031,-1566.83886719,5700.35888672,0.00000000,0.00000000,0.00000000); //object(k_poolballspt01) (1)
    CreateDynamicObject(3004,1809.68261719,-1567.60351562,5700.32080078,0.00000000,0.00000000,279.99755859); //object(k_poolq2) (1)
    CreateDynamicObject(2999,1810.80786133,-1567.15295410,5700.35888672,0.00000000,0.00000000,0.00000000); //object(k_poolballstp05) (1)
    CreateDynamicObject(3000,1810.68029785,-1566.77563477,5700.35888672,0.00000000,0.00000000,0.00000000); //object(k_poolballstp06) (1)
    CreateDynamicObject(3100,1810.70202637,-1566.98657227,5700.35888672,0.00000000,0.00000000,0.00000000); //object(k_poolballspt02) (1)
    CreateDynamicObject(1771,1799.17675781,-1553.91699219,5700.06250000,0.00000000,0.00000000,267.99499512); //object(cj_bunk_bed1) (1)
    CreateDynamicObject(1771,1799.13684082,-1558.71337891,5700.06250000,0.00000000,0.00000000,267.99499512); //object(cj_bunk_bed1) (2)
    CreateDynamicObject(1771,1799.14404297,-1563.45874023,5700.06250000,0.00000000,0.00000000,267.99499512); //object(cj_bunk_bed1) (3)
    CreateDynamicObject(1771,1799.21130371,-1568.11999512,5700.06250000,0.00000000,0.00000000,267.99499512); //object(cj_bunk_bed1) (4)
    CreateDynamicObject(1771,1799.20434570,-1572.90747070,5700.06250000,0.00000000,0.00000000,267.99499512); //object(cj_bunk_bed1) (5)
    CreateDynamicObject(1771,1799.41284180,-1577.63220215,5700.06250000,0.00000000,0.00000000,267.99499512); //object(cj_bunk_bed1) (6)
    CreateDynamicObject(1771,1799.36816406,-1582.29760742,5700.06250000,0.00000000,0.00000000,267.99499512); //object(cj_bunk_bed1) (7)
    CreateDynamicObject(1771,1799.36816406,-1582.29687500,5703.52832031,0.00000000,0.00000000,267.99499512); //object(cj_bunk_bed1) (8)
    CreateDynamicObject(1771,1799.17224121,-1577.66955566,5703.52832031,0.00000000,0.00000000,268.57098389); //object(cj_bunk_bed1) (9)
    CreateDynamicObject(1771,1799.14794922,-1572.91101074,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (10)
    CreateDynamicObject(1771,1799.08996582,-1568.09118652,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (11)
    CreateDynamicObject(1771,1799.03686523,-1563.54675293,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (12)
    CreateDynamicObject(1771,1798.96545410,-1558.70800781,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (13)
    CreateDynamicObject(1771,1798.96105957,-1553.98596191,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (14)
    CreateDynamicObject(1771,1821.28747559,-1552.52319336,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (15)
    CreateDynamicObject(1771,1821.30163574,-1557.24548340,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (16)
    CreateDynamicObject(1771,1821.35961914,-1561.95336914,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (17)
    CreateDynamicObject(1771,1821.38452148,-1566.76086426,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (18)
    CreateDynamicObject(1771,1821.35400391,-1571.39025879,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (19)
    CreateDynamicObject(1771,1821.36853027,-1576.12365723,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (20)
    CreateDynamicObject(1771,1821.35913086,-1580.90112305,5703.52832031,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (21)
    CreateDynamicObject(1771,1821.29614258,-1580.97509766,5699.96093750,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (22)
    CreateDynamicObject(1771,1820.92456055,-1576.25769043,5699.96093750,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (23)
    CreateDynamicObject(1771,1821.20080566,-1571.42248535,5699.96093750,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (24)
    CreateDynamicObject(1771,1821.33178711,-1566.68542480,5699.96093750,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (25)
    CreateDynamicObject(1771,1821.04321289,-1561.90600586,5699.96093750,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (26)
    CreateDynamicObject(1771,1821.28369141,-1557.21472168,5699.96093750,0.00000000,0.00000000,268.56628418); //object(cj_bunk_bed1) (27)
    CreateDynamicObject(1771,1820.87792969,-1552.49804688,5699.96093750,0.00000000,0.00000000,268.56079102); //object(cj_bunk_bed1) (28)
    CreateDynamicObject(8661,1795.26757812,-1536.16308594,5699.42871094,0.00000000,0.00000000,0.00000000); //object(gnhtelgrnd_lvs) (1)
    CreateDynamicObject(8661,1815.89160156,-1523.47851562,5702.61279297,0.00000000,179.98352051,0.35705566); //object(gnhtelgrnd_lvs) (3)
    CreateDynamicObject(3944,1799.73852539,-1536.44458008,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1799.67260742,-1546.68945312,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1799.65393066,-1544.67834473,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1799.63574219,-1540.93164062,5698.94775391,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1799.72363281,-1532.69433594,5698.94775391,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1814.18847656,-1520.82421875,5698.92626953,0.00000000,0.00000000,270.24719238); //object(bistro_blok) (1)
    CreateDynamicObject(8661,1835.25683594,-1536.17382812,5699.42871094,0.00000000,0.00000000,0.00000000); //object(gnhtelgrnd_lvs) (1)
    CreateDynamicObject(3944,1817.83496094,-1540.92578125,5698.90869141,0.00000000,0.00000000,89.35729980); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1806.06298828,-1527.03234863,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(8661,1795.67968750,-1516.17871094,5699.42871094,0.00000000,0.00000000,0.00000000); //object(gnhtelgrnd_lvs) (1)
    CreateDynamicObject(3944,1781.63525391,-1532.77685547,5698.94775391,0.00000000,0.00000000,180.24169922); //object(bistro_blok) (10)
    CreateDynamicObject(8661,1776.05468750,-1523.70898438,5702.59619141,0.00000000,179.98352051,0.36254883); //object(gnhtelgrnd_lvs) (3)
    CreateDynamicObject(3944,1791.41503906,-1526.25390625,5698.92626953,0.00000000,0.00000000,90.46691895); //object(bistro_blok) (9)
    CreateDynamicObject(3944,1797.77148438,-1537.70019531,5698.92626953,0.00000000,0.00000000,270.24719238); //object(bistro_blok) (1)
    CreateDynamicObject(3944,1806.04492188,-1523.32519531,5698.94775391,0.00000000,0.00000000,180.43365479); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1826.11132812,-1530.63671875,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1791.43884277,-1508.18127441,5698.92773438,0.00000000,0.00000000,89.35729980); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1795.85205078,-1514.72521973,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1813.94482422,-1514.56762695,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1828.83007812,-1537.07421875,5698.92626953,0.00000000,0.00000000,270.24719238); //object(bistro_blok) (1)
    CreateDynamicObject(2774,1823.34277344,-1538.48046875,5711.89599609,0.00000000,0.00000000,358.07995605); //object(cj_airp_pillars) (1)
    CreateDynamicObject(2774,1809.00000000,-1518.69995117,5711.89990234,0.00000000,0.00000000,0.00000000); //object(cj_airp_pillars) (1)
    CreateDynamicObject(2165,1808.19152832,-1540.04028320,5699.42871094,0.00000000,0.00000000,270.00000000); //object(med_office_desk_1) (1)
    CreateDynamicObject(2166,1807.18457031,-1537.88281250,5699.42871094,0.00000000,0.00000000,270.00000000); //object(med_office_desk_2) (1)
    CreateDynamicObject(2774,1810.47070312,-1529.65722656,5711.89599609,0.00000000,0.00000000,0.00000000); //object(cj_airp_pillars) (1)
    CreateDynamicObject(2165,1803.94140625,-1540.14160156,5699.42871094,0.00000000,0.00000000,270.00000000); //object(med_office_desk_1) (3)
    CreateDynamicObject(1715,1806.70019531,-1540.58007812,5699.42871094,0.00000000,0.00000000,90.00000000); //object(kb_swivelchair2) (1)
    CreateDynamicObject(1715,1802.51660156,-1540.80883789,5699.42871094,0.00000000,0.00000000,90.00000000); //object(kb_swivelchair2) (2)
    CreateDynamicObject(2186,1803.02929688,-1536.03808594,5699.42871094,0.00000000,0.00000000,0.00000000); //object(photocopier_1) (1)
    CreateDynamicObject(1893,1802.15551758,-1537.94140625,5702.89648438,0.00000000,0.00000000,270.00000000); //object(shoplight1) (1)
    CreateDynamicObject(1893,1806.49743652,-1537.82360840,5702.89648438,0.00000000,0.00000000,270.00000000); //object(shoplight1) (2)
    CreateDynamicObject(1893,1811.81811523,-1541.87536621,5702.89648438,0.00000000,0.00000000,270.00000000); //object(shoplight1) (3)
    CreateDynamicObject(1893,1811.57324219,-1533.77832031,5702.89648438,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1813.62695312,-1524.57031250,5702.89648438,0.00000000,0.00000000,270.00000000); //object(shoplight1) (5)
    CreateDynamicObject(1893,1805.00000000,-1531.40002441,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (6)
    CreateDynamicObject(1893,1794.44824219,-1529.83020020,5702.89648438,0.00000000,0.00000000,270.00000000); //object(shoplight1) (7)
    CreateDynamicObject(1744,1806.08642578,-1535.55322266,5700.98535156,0.00000000,0.00000000,0.00000000); //object(med_shelf) (1)
    CreateDynamicObject(2007,1805.77929688,-1536.04101562,5699.42871094,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
    CreateDynamicObject(2007,1806.76660156,-1536.03320312,5699.42871094,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2606,1800.96679688,-1538.12011719,5701.23583984,0.00000000,0.00000000,90.47241211); //object(cj_police_counter2) (1)
    CreateDynamicObject(2606,1800.96679688,-1538.12011719,5702.10107422,0.00000000,0.00000000,90.47241211); //object(cj_police_counter2) (2)
    CreateDynamicObject(2606,1800.96679688,-1538.12011719,5701.66699219,0.00000000,0.00000000,90.47790527); //object(cj_police_counter2) (3)
    CreateDynamicObject(2737,1805.56823730,-1541.70532227,5701.09423828,0.00000000,0.00000000,180.28797913); //object(police_nb_car) (1)
    CreateDynamicObject(2608,1800.90527344,-1538.15795898,5700.02880859,0.00000000,0.00000000,90.40002441); //object(polce_shelf) (1)
    pdoor1 =    CreateDynamicObject(1495,1808.76147461,-1547.63208008,5699.42480469,0.00000000,0.00000000,0.00000000); //object(gen_doorext01) (1)
    pdoor2 =    CreateDynamicObject(1495,1811.76184082,-1547.60510254,5699.42480469,0.00000000,0.00000000,180.00000000); //object(gen_doorext01) (1)
    CreateDynamicObject(2922,1812.06420898,-1545.75073242,5700.73779297,0.00000000,0.00000000,0.00000000); //object(kmb_keypad) (1)
    CreateDynamicObject(3944,1784.99609375,-1527.20996094,5698.93408203,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(3944,1784.98925781,-1523.48278809,5698.94775391,0.00000000,0.00000000,180.42846680); //object(bistro_blok) (10)
    edoor5 =    CreateDynamicObject(1495,1797.00830078,-1525.15258789,5699.42480469,0.00000000,0.00000000,180.00000000); //object(gen_doorext01) (1)
    edoor6 =    CreateDynamicObject(1495,1794.00976562,-1525.18676758,5699.42480469,0.00000000,0.00000000,360.00000000); //object(gen_doorext01) (1)
    CreateDynamicObject(3944,1803.03417969,-1523.34570312,5701.43505859,0.00000000,0.00000000,180.42846680); //object(bistro_blok) (10)
    CreateDynamicObject(3944,1802.77673340,-1527.05676270,5701.42382812,0.00000000,0.00000000,0.48889160); //object(bistro_blok) (18)
    CreateDynamicObject(2922,1793.60168457,-1524.29077148,5701.02148438,0.00000000,0.00000000,0.00000000); //object(kmb_keypad) (2)
    CreateDynamicObject(2922,1797.37084961,-1526.25024414,5701.02148438,0.00000000,0.00000000,181.02421570); //object(kmb_keypad) (3)
    CreateDynamicObject(2137,1817.43090820,-1543.30224609,5699.42871094,0.00000000,0.00000000,90.00000000); //object(cj_k3_low_unit3) (1)
    CreateDynamicObject(2137,1817.42773438,-1544.26660156,5699.42871094,0.00000000,0.00000000,90.00000000); //object(cj_k3_low_unit3) (2)
    CreateDynamicObject(2140,1817.42956543,-1542.31909180,5699.42871094,0.00000000,359.90399170,89.92001343); //object(cj_k3_tall_unit1) (1)
    CreateDynamicObject(2305,1817.43859863,-1545.22509766,5699.42871094,0.00000000,0.00000000,180.00000000); //object(cj_k3_c_unit) (1)
    CreateDynamicObject(2137,1818.42675781,-1545.23071289,5699.42871094,0.00000000,0.00000000,179.72790527); //object(cj_k3_low_unit3) (2)
    CreateDynamicObject(2137,1819.39123535,-1545.23596191,5699.42871094,0.00000000,0.00000000,179.72534180); //object(cj_k3_low_unit3) (2)
    CreateDynamicObject(2136,1823.29870605,-1545.24780273,5699.43505859,0.00000000,0.00000000,180.04756165); //object(cj_k3_sink) (1)
    CreateDynamicObject(2135,1820.34899902,-1545.24804688,5699.42871094,0.00000000,0.00000000,179.80798340); //object(cj_k3_cooker) (1)
    CreateDynamicObject(2139,1821.32910156,-1545.22949219,5699.42871094,0.00000000,0.00000000,179.99450684); //object(cj_k3_low_unit2) (1)
    CreateDynamicObject(2986,1809.74877930,-1562.58264160,5706.32080078,0.00000000,179.99993896,0.00000000); //object(lxr_motelvent) (1)
    CreateDynamicObject(1811,1821.18847656,-1540.96032715,5700.03808594,0.00000000,0.00000000,88.65600586); //object(med_din_chair_5) (1)
    CreateDynamicObject(2357,1822.64355469,-1542.21972656,5699.82226562,0.00000000,0.00000000,0.00000000); //object(dunc_dinning) (1)
    CreateDynamicObject(1811,1822.21960449,-1540.97045898,5700.03808594,0.00000000,0.00000000,88.65417480); //object(med_din_chair_5) (3)
    CreateDynamicObject(1811,1823.22497559,-1540.99890137,5700.03808594,0.00000000,0.00000000,88.65417480); //object(med_din_chair_5) (4)
    CreateDynamicObject(1811,1824.23706055,-1541.00854492,5700.03808594,0.00000000,0.00000000,88.65417480); //object(med_din_chair_5) (5)
    CreateDynamicObject(1811,1824.11352539,-1543.46655273,5700.03808594,0.00000000,0.00000000,269.64624023); //object(med_din_chair_5) (6)
    CreateDynamicObject(1811,1823.15698242,-1543.43945312,5700.03808594,0.00000000,0.00000000,269.35491943); //object(med_din_chair_5) (7)
    CreateDynamicObject(1811,1822.22631836,-1543.41857910,5700.03808594,0.00000000,0.00000000,269.35180664); //object(med_din_chair_5) (8)
    CreateDynamicObject(1811,1821.21301270,-1543.42346191,5700.03808594,0.00000000,0.00000000,269.35180664); //object(med_din_chair_5) (9)
    CreateDynamicObject(2290,1827.59228516,-1534.86401367,5699.42871094,0.00000000,0.00000000,178.81640625); //object(swk_couch_1) (1)
    CreateDynamicObject(2290,1829.13146973,-1531.40148926,5699.42871094,0.00000000,0.00000000,269.77349854); //object(swk_couch_1) (2)
    CreateDynamicObject(2239,1828.80102539,-1534.66772461,5699.42871094,0.00000000,0.00000000,170.00000000); //object(cj_mlight16) (1)
    CreateDynamicObject(1754,1824.04663086,-1533.53955078,5699.42871094,0.00000000,0.00000000,120.00000000); //object(swank_single_1) (1)
    CreateDynamicObject(1814,1826.22839355,-1533.07885742,5699.42871094,0.00000000,0.00000000,0.00000000); //object(coffee_med_1) (1)
    CreateDynamicObject(1778,1817.25036621,-1541.87622070,5699.42871094,0.00000000,0.00000000,190.00000000); //object(cj_mop_pail) (1)
    CreateDynamicObject(2297,1825.99987793,-1530.08557129,5699.42871094,0.00000000,0.00000000,315.47204590); //object(tv_unit_2) (1)
    CreateDynamicObject(2964,1820.30004883,-1534.50000000,5699.39990234,0.00000000,0.00000000,88.47290039); //object(k_pooltablesm) (1)
    CreateDynamicObject(3004,1820.19995117,-1535.19995117,5700.29980469,0.00000000,0.00000000,343.99291992); //object(k_poolq2) (1)
    CreateDynamicObject(3106,1820.19995117,-1534.40002441,5700.39990234,0.00000000,0.00000000,0.00000000); //object(k_poolball8) (1)
    CreateDynamicObject(3105,1820.69995117,-1534.09997559,5700.39990234,0.00000000,0.00000000,0.00000000); //object(k_poolballspt07) (1)
    CreateDynamicObject(3103,1819.84460449,-1534.58190918,5700.17871094,0.00000000,0.00000000,0.00000000); //object(k_poolballspt05) (1)
    CreateDynamicObject(3102,1819.87048340,-1534.57617188,5700.20605469,0.00000000,0.00000000,0.00000000); //object(k_poolballspt04) (1)
    CreateDynamicObject(3042,1810.27856445,-1570.02526855,5705.46337891,0.00000000,0.00000000,0.00000000); //object(ct_vent) (1)
    CreateDynamicObject(2611,1829.66809082,-1542.43457031,5701.15332031,0.00000000,0.00000000,270.19201660); //object(police_nb1) (1)
    CreateDynamicObject(2612,1829.56201172,-1537.86413574,5701.12744141,0.00000000,0.00000000,270.19201660); //object(police_nb2) (1)
    CreateDynamicObject(1615,1810.40820312,-1547.75317383,5705.97070312,0.00000000,0.00000000,90.00000000); //object(nt_alarm2_01) (1)
    CreateDynamicObject(18070,1799.44238281,-1520.61328125,5699.91113281,0.00000000,0.00000000,90.00000000); //object(gap_counter) (1)
    CreateDynamicObject(18070,1799.36877441,-1511.49890137,5699.91113281,0.00000000,0.00000000,90.49438477); //object(gap_counter) (2)
    CreateDynamicObject(1892,1801.55957031,-1515.51367188,5699.42871094,0.00000000,0.00000000,270.00000000); //object(security_gatsh) (1)
    CreateDynamicObject(2422,1799.87145996,-1517.93786621,5700.42138672,0.00000000,0.00000000,180.00000000); //object(cj_ff_till) (1)
    CreateDynamicObject(2422,1798.67309570,-1517.95727539,5700.42138672,0.00000000,0.00000000,179.99450684); //object(cj_ff_till) (2)
    CreateDynamicObject(18070,1799.44238281,-1520.61328125,5702.12451172,0.00000000,179.98352051,90.49438477); //object(gap_counter) (3)
    CreateDynamicObject(18070,1799.36816406,-1511.49804688,5702.13183594,0.00000000,179.88800049,90.49438477); //object(gap_counter) (6)
    CreateDynamicObject(3857,1801.50683594,-1520.96032715,5703.30322266,0.00000000,0.00000000,315.13604736); //object(ottosmash3) (1)
    CreateDynamicObject(16101,1801.49902344,-1524.13977051,5702.73730469,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(16101,1801.50000000,-1517.30004883,5702.70019531,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(3857,1801.50683594,-1520.95996094,5703.30322266,0.00000000,0.00000000,135.13183594); //object(ottosmash3) (2)
    CreateDynamicObject(16101,1801.63781738,-1514.88720703,5708.98730469,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(16101,1797.31726074,-1514.90759277,5708.98730469,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(16101,1797.32739258,-1517.29516602,5708.98730469,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(16101,1797.35571289,-1524.03149414,5708.98730469,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (2)
    CreateDynamicObject(1533,1809.09997559,-1513.80004883,5699.39990234,0.00000000,0.00000000,0.00000000); //object(gen_doorext12) (3)
    CreateDynamicObject(1533,1810.59997559,-1513.80004883,5699.39990234,0.00000000,0.00000000,0.00000000); //object(gen_doorext12) (4)
    CreateDynamicObject(1722,1810.50000000,-1524.09997559,5699.41992188,0.00000000,0.00000000,0.00000000); //object(off_chairnu) (7)
    CreateDynamicObject(1722,1811.19995117,-1524.09997559,5699.41992188,0.00000000,0.00000000,0.00000000); //object(off_chairnu) (8)
    CreateDynamicObject(1722,1811.90002441,-1524.09997559,5699.41992188,0.00000000,0.00000000,0.00000000); //object(off_chairnu) (9)
    CreateDynamicObject(1722,1812.59997559,-1524.09997559,5699.41992188,0.00000000,0.00000000,0.00000000); //object(off_chairnu) (10)
    CreateDynamicObject(2239,1814.69995117,-1523.80004883,5699.39990234,0.00000000,0.00000000,200.00000000); //object(cj_mlight16) (2)
    CreateDynamicObject(1815,1813.50000000,-1523.69995117,5699.41992188,0.00000000,0.00000000,0.00000000); //object(coffee_low_2) (1)
    CreateDynamicObject(1722,1815.00000000,-1521.90002441,5699.41992188,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (11)
    CreateDynamicObject(1722,1815.00000000,-1521.19995117,5699.41992188,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (12)
    CreateDynamicObject(1722,1815.00000000,-1520.50000000,5699.41992188,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (13)
    CreateDynamicObject(1722,1815.00000000,-1519.80004883,5699.41992188,0.00000000,0.00000000,90.00000000); //object(off_chairnu) (14)
    CreateDynamicObject(2852,1814.00000000,-1523.19995117,5699.91992188,0.00000000,0.00000000,0.00000000); //object(gb_bedmags02) (1)
    CreateDynamicObject(2190,1801.19995117,-1520.09997559,5700.39990234,0.00000000,0.00000000,270.00000000); //object(pc_1) (1)
    CreateDynamicObject(2190,1801.19995117,-1521.80004883,5700.27001953,0.00000000,0.00000000,248.00000000); //object(pc_1) (2)
    CreateDynamicObject(2190,1801.19995117,-1521.80004883,5700.56982422,0.00000000,180.00000000,275.00000000); //object(pc_1) (3)
    CreateDynamicObject(1715,1799.00000000,-1521.90002441,5699.39990234,0.00000000,0.00000000,130.00000000); //object(kb_swivelchair2) (3)
    CreateDynamicObject(1715,1799.00000000,-1519.59997559,5699.39990234,0.00000000,0.00000000,91.99572754); //object(kb_swivelchair2) (4)
    CreateDynamicObject(1808,1814.80004883,-1516.80004883,5699.39990234,0.00000000,0.00000000,268.25000000); //object(cj_watercooler2) (1)
    CreateDynamicObject(1808,1790.69995117,-1519.00000000,5699.39990234,0.00000000,0.00000000,90.00000000); //object(cj_watercooler2) (2)
    CreateDynamicObject(3578,1802.79980469,-1519.00000000,5698.62988281,29.99816895,0.00000000,90.00000000); //object(dockbarr1_la) (1)
    CreateDynamicObject(1886,1814.49902344,-1548.46679688,5706.64746094,20.92346191,359.21997070,325.73364258); //object(shop_sec_cam) (12)
    CreateDynamicObject(1886,1791.09997559,-1523.80004883,5702.79980469,20.92346191,359.21997070,135.73059082); //object(shop_sec_cam) (12)
    CreateDynamicObject(1886,1814.40002441,-1514.09997559,5702.79980469,20.92346191,359.21997070,283.73056030); //object(shop_sec_cam) (12)
    CreateDynamicObject(1892,1810.90002441,-1514.40002441,5699.50000000,0.00000000,0.00000000,0.00000000); //object(security_gatsh) (1)
    CreateDynamicObject(1892,1809.30004883,-1514.40002441,5699.50000000,0.00000000,0.00000000,0.00000000); //object(security_gatsh) (1)
    CreateDynamicObject(2165,1795.50000000,-1533.00000000,5699.39990234,0.00000000,0.00000000,90.00000000); //object(med_office_desk_1) (3)
    CreateDynamicObject(970,1790.09997559,-1528.00000000,5699.70019531,90.00000000,180.00000000,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1528.00000000,5700.00000000,90.00000000,180.00000000,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1528.00000000,5700.29980469,90.00000000,179.99450684,270.49987793); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1528.00000000,5700.60009766,90.00000000,180.00000000,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1528.00000000,5700.89990234,90.00000000,180.00000000,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1528.00000000,5701.20019531,90.00000000,180.00000000,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1532.09997559,5699.70019531,90.00000000,179.99450684,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1532.09997559,5700.00000000,90.00000000,179.99450684,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1532.09997559,5700.29980469,90.00000000,179.99450684,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1532.09997559,5700.60009766,90.00000000,179.99450684,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1532.09997559,5700.89990234,90.00000000,179.99450684,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1532.09997559,5701.20019531,90.00000000,179.99450684,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1528.00000000,5701.50000000,90.00000000,179.99450684,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(970,1790.09997559,-1532.09997559,5701.50000000,90.00000000,179.99450684,270.00000000); //object(fencesmallb) (24)
    CreateDynamicObject(3578,1791.80004883,-1531.19995117,5698.62988281,29.99816895,0.00000000,90.00000000); //object(dockbarr1_la) (1)
    CreateDynamicObject(2166,1795.59997559,-1530.09997559,5699.39990234,0.00000000,0.00000000,0.00000000); //object(med_office_desk_2) (1)
    CreateDynamicObject(1715,1796.80004883,-1532.69995117,5699.39990234,0.00000000,0.00000000,262.00000000); //object(kb_swivelchair2) (1)
    CreateDynamicObject(2186,1798.09997559,-1530.30004883,5699.39990234,0.00000000,0.00000000,270.00000000); //object(photocopier_1) (1)
    CreateDynamicObject(1886,1798.69995117,-1530.19995117,5701.79980469,0.00000000,0.00000000,270.00000000); //object(shop_sec_cam) (12)
    CreateDynamicObject(1886,1791.59997559,-1526.19995117,5701.50000000,0.00000000,0.00000000,0.00000000); //object(shop_sec_cam) (12)
    CreateDynamicObject(1886,1791.59997559,-1533.69995117,5701.50000000,0.00000000,0.00000000,180.00000000); //object(shop_sec_cam) (12)
    CreateDynamicObject(3944,1801.44396973,-1537.70666504,5698.89990234,0.00000000,0.00000000,90.00000000); //object(bistro_blok) (1)
    CreateDynamicObject(2007,1802.09997559,-1533.00000000,5699.39990234,0.00000000,0.00000000,180.00000000); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1801.09997559,-1533.00000000,5699.39990234,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1805.09997559,-1533.00000000,5699.39990234,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1804.09997559,-1533.00000000,5699.39990234,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1803.09997559,-1533.00000000,5699.39990234,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1805.09997559,-1533.00000000,5700.79980469,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1804.09997559,-1533.00000000,5700.79980469,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1803.09997559,-1533.00000000,5700.79980469,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1802.09997559,-1533.00000000,5700.79980469,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1801.09997559,-1533.00000000,5700.79980469,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1801.09997559,-1529.59997559,5699.39990234,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1802.09997559,-1529.59997559,5699.39990234,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1803.09997559,-1529.59997559,5699.39990234,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1804.09997559,-1529.59997559,5699.39990234,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1805.09997559,-1529.59997559,5699.39990234,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1805.09997559,-1529.59997559,5700.79980469,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1804.09997559,-1529.59997559,5700.79980469,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1803.09997559,-1529.59997559,5700.79980469,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1802.09997559,-1529.59997559,5700.79980469,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1801.09997559,-1529.59997559,5700.79980469,0.00000000,0.00000000,179.99450684); //object(filing_cab_nu01) (2)
    CreateDynamicObject(9339,1804.90002441,-1530.19995117,5689.20019531,90.00000000,90.00000000,0.00000000); //object(sfnvilla001_cm) (5)
    CreateDynamicObject(1893,1802.19995117,-1531.30004883,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (6)
    CreateDynamicObject(2007,1805.08703613,-1530.80004883,5699.39990234,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
    CreateDynamicObject(2007,1805.08703613,-1530.80004883,5700.79980469,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
    CreateDynamicObject(2007,1804.09997559,-1530.80004883,5700.79980469,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
    CreateDynamicObject(2007,1803.09997559,-1530.80004883,5700.79980469,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
    CreateDynamicObject(2007,1802.09997559,-1530.80004883,5700.79980469,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
    CreateDynamicObject(2007,1801.09997559,-1530.80004883,5700.79980469,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
    CreateDynamicObject(2007,1801.09997559,-1530.80004883,5699.39990234,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
    CreateDynamicObject(2007,1802.09997559,-1530.80004883,5699.39990234,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
    CreateDynamicObject(2007,1803.09997559,-1530.80004883,5699.39990234,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
    CreateDynamicObject(2007,1804.09997559,-1530.80004883,5699.39990234,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
    CreateDynamicObject(1893,1820.19995117,-1533.80004883,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1823.30004883,-1541.69995117,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1827.09997559,-1541.69995117,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1827.09997559,-1531.80004883,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1820.19995117,-1541.80004883,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1823.69995117,-1531.80004883,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1802.50000000,-1527.40002441,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1807.80004883,-1527.40002441,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1798.30004883,-1520.09997559,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1794.00000000,-1520.09997559,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1805.00000000,-1520.09997559,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1812.00000000,-1520.09997559,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1812.00000000,-1515.09997559,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(1893,1805.00000000,-1515.09997559,5702.89990234,0.00000000,0.00000000,270.00000000); //object(shoplight1) (4)
    CreateDynamicObject(2844,1801.30004883,-1532.09997559,5699.39990234,0.00000000,0.00000000,66.00000000); //object(gb_bedclothes03) (1)
    CreateDynamicObject(2845,1802.59997559,-1532.09997559,5699.39990234,0.00000000,0.00000000,270.00000000); //object(gb_bedclothes04) (1)
    CreateDynamicObject(2303,1806.30004883,-1533.00000000,5699.39990234,0.00000000,0.00000000,180.00000000); //object(cj_k3_wash_mac) (1)
    CreateDynamicObject(2303,1807.59997559,-1533.00000000,5699.39990234,0.00000000,0.00000000,179.99450684); //object(cj_k3_wash_mac) (2)
    CreateDynamicObject(2741,1808.30004883,-1533.40002441,5701.00000000,0.00000000,0.00000000,180.00000000); //object(cj_soap_disp) (1)
    CreateDynamicObject(1789,1829.19995117,-1543.69995117,5700.00000000,0.00000000,0.00000000,270.00000000); //object(cj_chambermaid) (1)
    CreateDynamicObject(1789,1829.19995117,-1541.90002441,5700.00000000,0.00000000,0.00000000,270.00000000); //object(cj_chambermaid) (2)
    CreateDynamicObject(1808,1804.80004883,-1535.69995117,5699.39990234,0.00000000,0.00000000,0.00000000); //object(cj_watercooler2) (3)
    CreateDynamicObject(2596,1800.59997559,-1522.59997559,5702.10009766,0.00000000,0.00000000,240.00000000); //object(cj_sex_tv) (1)
    CreateDynamicObject(2813,1807.30004883,-1537.69995117,5700.20019531,0.00000000,0.00000000,0.00000000); //object(gb_novels01) (1)
    CreateDynamicObject(2817,1804.19995117,-1539.19995117,5699.42382812,0.00000000,0.00000000,0.00000000); //object(gb_bedrug01) (1)
    CreateDynamicObject(2822,1821.40002441,-1545.30004883,5700.50000000,0.00000000,0.00000000,280.00000000); //object(gb_kitchplatecln01) (1)
    CreateDynamicObject(2828,1806.59997559,-1535.90002441,5701.29980469,0.00000000,0.00000000,164.50000000); //object(gb_ornament02) (1)
    CreateDynamicObject(2831,1821.09997559,-1542.40002441,5700.29980469,0.00000000,0.00000000,0.00000000); //object(gb_platedirty03) (1)
    CreateDynamicObject(2894,1799.80004883,-1523.09997559,5700.41015625,0.00000000,0.00000000,0.00000000); //object(kmb_rhymesbook) (1)
    CreateDynamicObject(1828,1826.80004883,-1532.59997559,5699.41015625,0.00000000,0.00000000,358.00000000); //object(man_sdr_rug) (1)
    CreateDynamicObject(2286,1806.00000000,-1513.80004883,5701.39990234,0.00000000,0.00000000,0.00000000); //object(frame_5) (1)
    CreateDynamicObject(2279,1806.69995117,-1523.68994141,5701.29980469,0.00000000,0.00000000,180.00000000); //object(frame_thick_6) (1)
    CreateDynamicObject(2275,1811.59997559,-1523.59997559,5701.10009766,0.00000000,0.00000000,180.00000000); //object(frame_fab_4) (1)
    CreateDynamicObject(2261,1814.50000000,-1520.30004883,5701.00000000,0.00000000,0.00000000,270.00000000); //object(frame_slim_2) (1)
    CreateDynamicObject(1537,1808.00000000,-1583.59997559,5699.39990234,0.00000000,0.00000000,270.00000000); //object(gen_doorext16) (1)
    CreateDynamicObject(1537,1812.09997559,-1582.09997559,5699.39990234,0.00000000,0.00000000,90.00000000); //object(gen_doorext16) (2)
    CreateDynamicObject(1537,1808.40002441,-1582.09997559,5699.39990234,0.00000000,0.00000000,90.00000000); //object(gen_doorext16) (3)
    CreateDynamicObject(1537,1811.69995117,-1583.59997559,5699.39990234,0.00000000,0.00000000,270.00000000); //object(gen_doorext16) (4)
    CreateDynamicObject(1537,1809.30004883,-1585.02294922,5699.39990234,0.00000000,0.00000000,179.50000000); //object(gen_doorext16) (5)
    CreateDynamicObject(16101,1811.90002441,-1577.09997559,5707.79980469,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (1)
    CreateDynamicObject(16101,1808.19995117,-1577.09997559,5707.79980469,0.00000000,179.99450684,0.00000000); //object(des_windsockpole) (1)

/*	// Tax Vault
	CreateDynamicObject(2614, 361.70001220703, 165.10000610352, 1020.9000244141, 0, 0, 89.247436523438);
	CreateDynamicObject(2634, 369.5, 162.39999389648, 1020.4000244141, 0, 0, 269.99816894531);
	CreateDynamicObject(7930, 363.5, 168.80000305176, 1023.200012207, 0, 0, 90.7470703125);
	CreateDynamicObject(7930, 363.5, 168.80000305176, 1020.200012207, 0, 0, 90.741577148438);
	CreateDynamicObject(2290, 367.20001220703, 167.10000610352, 1019, 0, 0, 270);
	CreateDynamicObject(2571, 363, 163.60000610352, 1019, 0, 0, 88.494873046875);
	CreateDynamicObject(2332, 367.10000610352, 168.69999694824, 1019.5, 0, 0, 0.7470703125);
	CreateDynamicObject(2332, 367.10000610352, 168.69999694824, 1020.4000244141, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 367.10000610352, 168.69999694824, 1021.299987793, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 367.10000610352, 168.69999694824, 1022.200012207, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 365.79998779297, 168.69999694824, 1019.5, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 365.79998779297, 168.69999694824, 1020.4000244141, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 365.79998779297, 168.69999694824, 1021.299987793, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 365.79998779297, 168.69999694824, 1022.200012207, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 364.39999389648, 168.60000610352, 1019.5, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 364.39999389648, 168.60000610352, 1020.4000244141, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 364.39999389648, 168.60000610352, 1021.299987793, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 364.39999389648, 168.60000610352, 1022.200012207, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 363.10000610352, 168.5, 1019.5, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 363.10000610352, 168.5, 1020.4000244141, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 363.10000610352, 168.5, 1021.299987793, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 363.10000610352, 168.5, 1022.200012207, 0, 0, 0.7415771484375);
	CreateDynamicObject(1361, 362.10000610352, 167.69999694824, 1019.700012207, 0, 0, 0);
	CreateDynamicObject(631, 362, 167.80000305176, 1020.700012207, 0, 0, 16.495971679688);
	CreateDynamicObject(1361, 362.10000610352, 162.69999694824, 1019.700012207, 0, 0, 0);
	CreateDynamicObject(631, 362.29998779297, 162.69999694824, 1020.799987793, 0, 0, 21.741943359375);
	CreateDynamicObject(2332, 367.70001220703, 167.60000610352, 1021.5999755859, 0, 0, 270);
	CreateDynamicObject(2332, 367.70001220703, 167.60000610352, 1020.700012207, 0, 0, 269.98901367188);
	CreateDynamicObject(2332, 367.70001220703, 166.60000610352, 1021.5999755859, 0, 0, 269.98901367188);
	CreateDynamicObject(2332, 367.70001220703, 166.60000610352, 1020.700012207, 0, 0, 269.98901367188);
	CreateDynamicObject(2332, 367.70001220703, 164.10000610352, 1020.4000244141, 0, 0, 269.98901367188);
	CreateDynamicObject(2332, 367.70001220703, 164.10000610352, 1021.299987793, 0, 0, 269.98901367188);
	CreateDynamicObject(2332, 367.70001220703, 164.10000610352, 1022.200012207, 0, 0, 269.98901367188);
	CreateDynamicObject(1550, 366.39999389648, 167.39999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366, 167.80000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366.39999389648, 168, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366.89999389648, 168, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366.39999389648, 165.10000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366.39999389648, 164.5, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 366.79998779297, 164.30000305176, 1019.5, 0, 0, 0);
	CreateDynamicObject(1550, 367.29998779297, 164.19999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366.70001220703, 164, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 366.29998779297, 164, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 367.20001220703, 165.30000305176, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 364.60000610352, 167.39999389648, 1019.0999755859, 0, 90, 322.49816894531);
	CreateDynamicObject(1550, 363.20001220703, 167.10000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.79998779297, 166.89999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.60000610352, 163.30000305176, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 362.89999389648, 162.80000305176, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 363.20001220703, 163.30000305176, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 365.10000610352, 167.60000610352, 1019.0999755859, 0, 90, 293.2470703125);
	CreateDynamicObject(16378, 365.5, 159.19999694824, 1019.7299804688, 0, 0, 0);
	CreateDynamicObject(2332, 361.89999389648, 158.5, 1021.4000244141, 0, 0, 89.247436523438);
	CreateDynamicObject(2332, 361.89999389648, 158.5, 1020.5, 0, 0, 89.241943359375);
	CreateDynamicObject(2332, 361.89999389648, 158.5, 1019.5999755859, 0, 0, 89.241943359375);
	CreateDynamicObject(2332, 361.89999389648, 159.69999694824, 1021.4000244141, 0, 0, 89.241943359375);
	CreateDynamicObject(2332, 361.89999389648, 159.69999694824, 1020.5, 0, 0, 89.241943359375);
	CreateDynamicObject(2332, 361.89999389648, 159.69999694824, 1019.5999755859, 0, 0, 89.241943359375);
	CreateDynamicObject(1550, 362.89999389648, 162.39999389648, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 363, 162, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 363.29998779297, 162.19999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363.20001220703, 162.60000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363, 163.19999694824, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 367.39999389648, 157.69999694824, 1021, 0, 0, 0);
	CreateDynamicObject(2614, 361.70001220703, 165.10000610352, 1020.9000244141, 0, 0, 89.247436523438);
	CreateDynamicObject(1549, 365.39999389648, 159.10000610352, 1018.9000244141, 0, 0, 0);
	CreateDynamicObject(2267, 367.70001220703, 159.30000305176, 1015.700012207, 0, 0, 270);
	CreateDynamicObject(1550, 367.20001220703, 165.69999694824, 1019.700012207, 0, 49.998779296875, 287.24853515625);
	CreateDynamicObject(1550, 367.10000610352, 166.30000305176, 1019.5999755859, 0, 270, 275.99853515625);
	CreateDynamicObject(1550, 363.29998779297, 162.89999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363.5, 162.5, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363.5, 161.89999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363.29998779297, 161.80000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.79998779297, 161.60000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.39999389648, 161.89999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363.20001220703, 161.39999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363, 161.10000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.39999389648, 161.19999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.70001220703, 161.30000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.29998779297, 161.60000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.79998779297, 161.69999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.89999389648, 162.10000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362, 161.30000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.5, 161, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.79998779297, 161.39999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.89999389648, 160.80000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.39999389648, 161, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.10000610352, 160.60000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.60000610352, 160.60000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.79998779297, 160.80000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.29998779297, 160.30000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.79998779297, 160.30000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.70001220703, 160.69999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.89999389648, 162.10000610352, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.70001220703, 161.69999694824, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.70001220703, 161.30000305176, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362, 161.5, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.10000610352, 161.69999694824, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.29998779297, 161.80000305176, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.5, 161.5, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.29998779297, 161.19999694824, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.79998779297, 160.89999389648, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.10000610352, 160.89999389648, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.20001220703, 161.80000305176, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 361.89999389648, 161.69999694824, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 361.70001220703, 161.19999694824, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 361.79998779297, 161.5, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 362, 161.69999694824, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 362, 161.30000305176, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 361.89999389648, 161, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 362.10000610352, 161.60000610352, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 367.39999389648, 158, 1021, 0, 0, 0);
	CreateDynamicObject(1550, 367.60000610352, 158.69999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 367.60000610352, 159.19999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 367.60000610352, 159.69999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 367.5, 160.89999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1226, 369.10000610352, 160.30000305176, 1019.5999755859, 0, 0, 56.25);
*/
	// NYPD Between
	CreateDynamicObject(1215,254.931777,85.353546,1001.001831,0.000000,0.000000,0.000000); // NYPD Office Between
	CreateDynamicObject(1215,254.931777,85.870002,1001.001831,0.000000,0.000000,0.000000); // NYPD Office Between
	CreateDynamicObject(1215,254.931777,86.386558,1001.001831,0.000000,0.000000,0.000000); // NYPD Office Between

 	/*// Idlewood Gas Station Fences
	CreateDynamicObject(970,1942.48376465,-1766.52941895,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1942.48632812,-1770.73071289,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,1942.49255371,-1774.95690918,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (3)
	CreateDynamicObject(970,1942.50024414,-1779.18383789,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1940.84838867,-1779.14770508,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (5)
	CreateDynamicObject(970,1940.82446289,-1774.85656738,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (6)
	CreateDynamicObject(970,1940.81445312,-1770.59240723,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (7)
	CreateDynamicObject(970,1940.82299805,-1766.36853027,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (8)
	CreateDynamicObject(1569,1564.05126953,-1667.39648438,27.39560699,0.00000000,0.00000000,0.00000000); //object(adam_v_door) (1)
*/
	// NYPD Interior, Exterior & Garage
	CreateDynamicObject(970,1544.79089355,-1637.28112793,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (1)
	CreateDynamicObject(970,1549.14111328,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (2)
	CreateDynamicObject(970,1553.41735840,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (3)
	CreateDynamicObject(970,1557.76708984,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (4)
	CreateDynamicObject(970,1561.96630859,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (5)
	CreateDynamicObject(970,1566.21630859,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (6)
	CreateDynamicObject(970,1570.46606445,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (7)
	CreateDynamicObject(970,1574.74133301,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (8)
	CreateDynamicObject(970,1577.80664062,-1639.56396484,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (9)
	CreateDynamicObject(970,1577.79174805,-1643.91601562,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (10)
	CreateDynamicObject(970,1577.80053711,-1648.26770020,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (11)
	CreateDynamicObject(970,1577.81018066,-1652.56835938,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (12)
	CreateDynamicObject(970,1577.82360840,-1656.86816406,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (13)
	CreateDynamicObject(970,1577.86291504,-1661.11816406,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (14)
	CreateDynamicObject(970,1577.85290527,-1665.40075684,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (15)
	CreateDynamicObject(970,1577.84338379,-1669.75097656,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (16)
	CreateDynamicObject(970,1577.83422852,-1674.00170898,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (17)
	CreateDynamicObject(970,1577.82177734,-1678.25024414,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (18)
	CreateDynamicObject(970,1577.81457520,-1682.47644043,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (19)
	CreateDynamicObject(970,1577.80590820,-1686.72631836,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (20)
	CreateDynamicObject(970,1577.79833984,-1690.92675781,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (21)
	CreateDynamicObject(970,1577.78869629,-1695.12719727,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (22)
	CreateDynamicObject(970,1577.77587891,-1699.32617188,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (23)
	CreateDynamicObject(970,1577.76440430,-1703.57592773,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (24)
	CreateDynamicObject(970,1577.75207520,-1707.79968262,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (25)
	CreateDynamicObject(970,1577.74096680,-1712.07360840,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (26)
	CreateDynamicObject(970,1575.26379395,-1714.37219238,27.95359612,0.00000000,0.00000000,180.00000000); //DynamicObject(fencesmallb) (27)
	CreateDynamicObject(970,1570.98278809,-1714.34692383,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (28)
	CreateDynamicObject(970,1566.72412109,-1714.34838867,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (29)
	CreateDynamicObject(970,1562.49572754,-1714.34582520,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (30)
	CreateDynamicObject(970,1558.26892090,-1714.34130859,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (31)
	CreateDynamicObject(970,1554.04333496,-1714.33496094,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (32)
	CreateDynamicObject(970,1549.81799316,-1714.32873535,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (33)
	CreateDynamicObject(970,1545.59289551,-1714.32116699,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (34)
	CreateDynamicObject(970,1542.66857910,-1711.92492676,27.95359612,0.00000000,0.00000000,89.99450684); //DynamicObject(fencesmallb) (35)
	CreateDynamicObject(970,1542.66015625,-1707.70080566,27.95359612,0.00000000,0.00000000,89.99450684); //DynamicObject(fencesmallb) (36)
	CreateDynamicObject(970,1542.64746094,-1703.47424316,27.95359612,0.00000000,0.00000000,89.99450684); //DynamicObject(fencesmallb) (37)
	CreateDynamicObject(970,1546.46936035,-1700.84899902,27.95359612,0.00000000,0.00000000,359.99450684); //DynamicObject(fencesmallb) (38)
	CreateDynamicObject(970,1550.74743652,-1700.83483887,27.95359612,0.00000000,0.00000000,359.98901367); //DynamicObject(fencesmallb) (39)
	CreateDynamicObject(970,1553.63476562,-1698.10791016,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (40)
	CreateDynamicObject(970,1553.62658691,-1693.77722168,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (41)
	CreateDynamicObject(970,1553.60217285,-1689.51794434,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (42)
	CreateDynamicObject(970,1553.59069824,-1685.26623535,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (43)
	CreateDynamicObject(970,1553.57897949,-1681.04003906,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (44)
	CreateDynamicObject(970,1553.58093262,-1670.81103516,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (45)
	CreateDynamicObject(970,1553.56982422,-1666.50891113,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (46)
	CreateDynamicObject(970,1553.53320312,-1662.25659180,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (47)
	CreateDynamicObject(970,1553.54724121,-1658.03039551,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (48)
	CreateDynamicObject(970,1553.53686523,-1653.75488281,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (49)
	CreateDynamicObject(970,1550.29052734,-1650.73937988,27.95359612,0.00000000,0.00000000,179.98901367); //DynamicObject(fencesmallb) (50)
	CreateDynamicObject(970,1545.93115234,-1650.77368164,27.95359612,0.00000000,0.00000000,179.98352051); //DynamicObject(fencesmallb) (51)
	CreateDynamicObject(970,1542.56152344,-1648.35388184,27.95359612,0.00000000,0.00000000,89.98352051); //DynamicObject(fencesmallb) (52)
	CreateDynamicObject(970,1542.55651855,-1644.07580566,27.95359612,0.00000000,0.00000000,89.98352051); //DynamicObject(fencesmallb) (53)
	CreateDynamicObject(970,1542.54882812,-1639.84790039,27.95359612,0.00000000,0.00000000,89.98352051); //DynamicObject(fencesmallb) (54)
	CreateDynamicObject(1215,1542.68469238,-1637.52331543,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (1)
	CreateDynamicObject(1215,1577.41918945,-1637.37463379,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (2)
	CreateDynamicObject(1215,1543.00610352,-1650.63269043,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (3)
	CreateDynamicObject(1215,1553.51025391,-1650.73876953,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (4)
	CreateDynamicObject(1215,1553.87353516,-1678.61999512,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (5)
	CreateDynamicObject(1215,1553.90393066,-1672.60510254,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (6)
	CreateDynamicObject(1215,1553.38757324,-1700.83959961,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (7)
	CreateDynamicObject(1215,1543.25537109,-1700.90600586,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (8)
	CreateDynamicObject(1215,1542.91027832,-1714.26464844,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (9)
	CreateDynamicObject(1215,1577.68847656,-1714.46398926,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (10)
	CreateDynamicObject(970,1553.58093262,-1670.81103516,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (55)
	CreateDynamicObject(983,1544.67871094,-1620.55090332,13.06636715,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(983,1544.66882324,-1635.94934082,13.06636715,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (2)
	CreateDynamicObject(1495,1582.60693359,-1637.98974609,12.39045906,0.00000000,0.00000000,0.00000000); //object(gen_doorext01) (1)
	CreateDynamicObject(2951,264.64941406,79.29980469,1001.00000000,0.00000000,90.00000000,0.24719238); //object(a51_labdoor) (1)
	CreateDynamicObject(2951,272.10000610,79.54000092,1001.00000000,0.00000000,90.00000000,183.24987793); //object(a51_labdoor) (2)
	CreateDynamicObject(3397,269.59960938,80.09960938,1000.00000000,0.00000000,0.00000000,271.99951172); //object(a51_sdsk_1_) (1)
	CreateDynamicObject(2921,270.39999390,81.50000000,1002.90002441,0.00000000,0.00000000,356.00000000); //object(kmb_cam) (1)
	CreateDynamicObject(16782,269.19921875,79.59960938,1002.09997559,0.00000000,0.00000000,92.74658203); //object(a51_radar_scan) (1)
	CreateDynamicObject(1671,269.89999390,81.50000000,1000.50000000,0.00000000,0.00000000,337.99987793); //object(swivelchair_a) (1)
	CreateDynamicObject(2395,154.69999695,157.39999390,519.00000000,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (7)
	CreateDynamicObject(2008,252.79980469,83.00000000,1001.40002441,0.00000000,0.00000000,29.98718262); //object(officedesk1) (1)
	CreateDynamicObject(1715,254.39999390,82.19999695,1001.40002441,0.00000000,0.00000000,229.99328613); //object(kb_swivelchair2) (1)
	CreateDynamicObject(1722,252.89999390,84.80000305,1001.40002441,0.00000000,0.00000000,211.99218750); //object(off_chairnu) (1)
	CreateDynamicObject(1722,252.10000610,84.30000305,1001.40002441,0.00000000,0.00000000,211.99218750); //object(off_chairnu) (2)
	CreateDynamicObject(633,251.50000000,82.39941406,1002.40002441,0.00000000,0.00000000,289.99511719); //object(veg_palmkb10) (1)
	CreateDynamicObject(2172,256.59960938,82.29980469,1001.09997559,0.00000000,0.00000000,179.99450684); //object(med_office2_desk_1) (1)
	CreateDynamicObject(2172,258.50000000,82.29980469,1001.09997559,0.00000000,0.00000000,179.99450684); //object(med_office2_desk_1) (2)
	CreateDynamicObject(1715,257.89999390,83.69999695,1001.40002441,0.00000000,0.00000000,19.99511719); //object(kb_swivelchair2) (2)
	CreateDynamicObject(1715,256.00000000,83.59999847,1001.40002441,0.00000000,0.00000000,15.99060059); //object(kb_swivelchair2) (4)
	CreateDynamicObject(1703,251.30000305,88.50000000,1001.40002441,0.00000000,0.00000000,90.00000000); //object(kb_couch02) (1)
	CreateDynamicObject(1703,252.09960938,91.19921875,1001.40002441,0.00000000,0.00000000,0.00000000); //object(kb_couch02) (2)
	CreateDynamicObject(1808,251.30000305,91.19999695,1001.40002441,0.00000000,0.00000000,43.00000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(2637,217.59960938,80.69921875,1004.40002441,0.00000000,0.00000000,269.74182129); //object(cj_pizza_table2) (3)
	CreateDynamicObject(2289,218.29980469,82.79980469,1006.20001221,0.00000000,0.00000000,0.00000000); //object(frame_2) (1)
	CreateDynamicObject(2267,253.89999390,81.86000061,1003.50000000,0.00000000,0.00000000,180.00000000); //object(frame_wood_3) (2)
	CreateDynamicObject(2637,217.59960938,78.59999847,1004.40002441,0.00000000,0.00000000,269.74731445); //object(cj_pizza_table2) (3)
	CreateDynamicObject(2637,217.59960938,76.50000000,1004.40002441,0.00000000,0.00000000,269.74182129); //object(cj_pizza_table2) (3)
	CreateDynamicObject(2184,219.39999390,68.09999847,1004.00000000,0.00000000,0.00000000,161.99890137); //object(med_office6_desk_2) (1)
	CreateDynamicObject(2164,221.89999390,68.09999847,1004.00000000,0.00000000,0.00000000,270.00000000); //object(med_office_unit_5) (1)
	CreateDynamicObject(2167,221.89999390,66.30000305,1004.00000000,0.00000000,0.00000000,270.00000000); //object(med_office_unit_7) (1)
	CreateDynamicObject(1714,217.69999695,66.50000000,1004.00000000,0.00000000,0.00000000,149.99633789); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1704,219.39941406,69.69921875,1004.00000000,0.00000000,0.00000000,325.99182129); //object(kb_chair03) (1)
	CreateDynamicObject(1704,217.30000305,70.09999847,1004.00000000,0.00000000,0.00000000,359.99450684); //object(kb_chair03) (2)
	CreateDynamicObject(2200,219.89999390,72.80000305,1004.09997559,0.00000000,0.00000000,0.00000000); //object(med_office5_unit_1) (1)
	CreateDynamicObject(2200,217.69999695,72.80000305,1004.09997559,0.00000000,0.00000000,0.00000000); //object(med_office5_unit_1) (2)
	CreateDynamicObject(7091,218.19999695,60.59999847,1107.80004883,0.00000000,0.00000000,0.00000000); //object(vegasflag02) (1)
	CreateDynamicObject(2614,219.60000610,65.90000153,1006.09997559,0.00000000,0.00000000,180.00000000); //object(cj_us_flag) (1)
	CreateDynamicObject(1671,217.60000610,82.50000000,1004.50000000,0.00000000,0.00000000,0.00000000); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,219.10000610,81.30000305,1004.50000000,0.00000000,0.00000000,270.00000000); //object(swivelchair_a) (3)
	CreateDynamicObject(1671,219.10000610,79.50000000,1004.50000000,0.00000000,0.00000000,270.00000000); //object(swivelchair_a) (5)
	CreateDynamicObject(1671,219.10000610,77.69999695,1004.50000000,0.00000000,0.00000000,270.00000000); //object(swivelchair_a) (7)
	CreateDynamicObject(1671,219.10000610,75.90000153,1004.50000000,0.00000000,0.00000000,270.00000000); //object(swivelchair_a) (9)
	CreateDynamicObject(1671,216.10000610,76.00000000,1004.50000000,0.00000000,0.00000000,90.00000000); //object(swivelchair_a) (10)
	CreateDynamicObject(1671,216.10000610,77.80000305,1004.50000000,0.00000000,0.00000000,90.00000000); //object(swivelchair_a) (12)
	CreateDynamicObject(1671,216.10000610,79.40000153,1004.50000000,0.00000000,0.00000000,90.00000000); //object(swivelchair_a) (14)
	CreateDynamicObject(1671,216.10000610,81.00000000,1004.50000000,0.00000000,0.00000000,90.00000000); //object(swivelchair_a) (17)
	CreateDynamicObject(1703,242.89999390,70.09999847,1002.59997559,0.00000000,0.00000000,90.00000000); //object(kb_couch02) (3)
	CreateDynamicObject(1703,242.89999390,63.09999847,1002.59997559,0.00000000,0.00000000,90.00000000); //object(kb_couch02) (4)
	CreateDynamicObject(2614,246.39999390,72.30000305,1006.09997559,0.00000000,0.00000000,0.00000000); //object(cj_us_flag) (2)
	CreateDynamicObject(2612,218.00000000,72.77999878,1006.70001221,0.00000000,0.00000000,0.00000000); //object(police_nb2) (1)
	CreateDynamicObject(2611,220.69999695,72.77999878,1006.70001221,0.00000000,0.00000000,0.00000000); //object(police_nb1) (1)
	CreateDynamicObject(1215,254.931777,85.353546,1001.001831,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(1215,254.931777,85.870002,1001.001831,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(1215,254.931777,86.386558,1001.001831,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,256.567230,85.237609,1001.441955,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,253.326797,85.388061,1001.408813,0.000000,0.000000,-180.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,250.600021,85.254783,1001.408020,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,250.553466,85.231056,1004.123474,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,253.314941,85.389854,1004.129272,0.000000,0.000000,-180.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,259.306549,85.365196,1004.129272,0.000000,0.000000,-180.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,256.567230,85.237609,1004.169067,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,259.294555,85.347633,1001.415832,0.000000,0.000000,-180.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,256.641754,85.393638,1003.450927,0.000000,0.000000,-180.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,253.695861,85.249870,1003.445861,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,254.829906,84.834633,1001.464904,0.000000,0.000000,-90); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,255.050000,82.078000,1001.464904,0.000000,0.000000,90); //object(cj_sports_wall) (3)
	CreateDynamicObject(1703,242.89999390,67.59999847,1002.59997559,0.00000000,0.00000000,90.00000000); //object(kb_couch02) (3)

	// Bank
	print("Static objects loaded.");
	return 1;
}

stock LoadPickups()
{
    Create3DTextLabel(".", COLOR_RED, 1031.6764,-1442.6636,13.5546, 15, 0, 1);
	// Fixing pickups, 1st one doesn't show for some reason
	new string[128];
    CreatePickup(1239, 1, -520.4179,-505.3250,24.6084); // Trucker Job
    Create3DTextLabel("Trucker Job\n{FFFF00}/join to get the job", COLOR_RED, -520.4179,-505.3250,24.6084, 30, 0, 1);
    CreatePickup(1239, 1, 2165.2358,-2271.5012,13.3413);// Weapons Dealer Job
	Create3DTextLabel("Weapons Dealer Job\n{FFFF00}/join to get the job", COLOR_RED, 2165.2358,-2271.5012,13.3413, 15, 0, 1);
	CreatePickup(1239, 1, 1415.4907,-1301.0790,13.5449); // Weapons Smuggler Job
	Create3DTextLabel("Weapons Smuggler Job\n{FFFF00}/join to get the job", COLOR_RED, 1415.4907,-1301.0790,13.5449, 15, 0, 1);
    CreatePickup(348, 1, 1423.6010,-1317.9398,13.5547); // Materials Pickup
    Create3DTextLabel("Materials Pickup\n{FFFF00}/getmats to get packages", COLOR_RED, 1423.6010,-1317.9398,13.5547, 15, 0, 1);
    CreatePickup(1279, 1, 2172.5471,-2264.2207,13.3416); // Materials Dropoff
    Create3DTextLabel("Materials Dropoff\n{FFFF00}/dropmats to get materials", COLOR_RED, 2172.5471,-2264.2207,13.3416, 15, 0, 1);
    CreatePickup(1239, 1, 2330.0693,-2315.4709,13.5469); // Mechanic Job
    Create3DTextLabel("Mechanic Job\n{FFFF00}/join to get the job", COLOR_RED, 2330.0693,-2315.4709,13.5469, 15, 0, 1);
    CreatePickup(1239, 1, 1380.8300,-1088.7698,27.3844); // Lawyer Job
    Create3DTextLabel("Lawyer Job\n{FFFF00}/join to get the job", COLOR_RED, 1380.8300,-1088.7698,27.3844, 15, 0, 1);
    CreatePickup(1239, 1, 2178.5518,-1660.4418,14.9644); // Drugs Dealer Job
    Create3DTextLabel("Drugs Dealer Job\n{FFFF00}/join to get the job\n/dropweed to deliver weed", COLOR_RED, 2178.5518,-1660.4418,14.9644, 15, 0, 1);
    CreatePickup(1239, 1, 2354.4045,-1169.8337,28.0339); // Drugs Smuggler Job
    Create3DTextLabel("Drugs Smuggler Job\n{FFFF00}/join to get the job\n/dropcocaine to deliver cocaine", COLOR_RED, 2354.4045,-1169.8337,28.0339, 15, 0, 1);
    CreatePickup(1239, 1, 2941.2471,-2053.3892,3.5480); // Weed Packages Pickup
    Create3DTextLabel("Weed Packages Pickup\n{FFFF00}/getweed to get packages", COLOR_RED, 2941.2471,-2053.3892,3.5480, 15, 0, 1);
    CreatePickup(1239, 1, 2941.2471,-2050.1772,3.5480); // cocaine Packages Pickup
    Create3DTextLabel("Cocaine Packages Pickup\n{FFFF00}/getcocaine to get packages", COLOR_RED, 2941.2471,-2050.1772,3.5480, 15, 0, 1);
    CreatePickup(1279, 1, 323.0012,1118.5720,1083.8828); // Actual Weed Pickup
    format(string, sizeof(string), "Weed Pickup\n{FFFF00}/buyweed to get weed\nAvailable Stock: %d/2000", Weed);
    WeedText = CreateDynamic3DTextLabel(string, COLOR_RED, 323.0012,1118.5720,1083.8828, 15);
    CreatePickup(1279, 1, 2345.3992,-1185.6423,1027.9766); // Actual cocaine Pickup
    format(string, sizeof(string), "cocaine Pickup\n{FFFF00}/buycocaine to get cocaine\nAvailable Stock: %d/2000", cocaine);
    cocaineText = CreateDynamic3DTextLabel(string, COLOR_RED, 2345.3992,-1185.6423,1027.9766, 15);
    CreatePickup(1239, 1, 2227.9976,-1718.2604,13.5321); // Bodyguard Job
    Create3DTextLabel("Bodyguard Job\n{FFFF00}/join to get the job", COLOR_RED, 2227.9976,-1718.2604,13.5321, 15, 0, 1);
    CreatePickup(1239, 1, 2229.4753,-1721.8873,13.5673); // gym
    Create3DTextLabel("{FFFFFF}Ganton Gym\nType {DF0101}/enter {FFFFFF}to go inside", COLOR_RED, 2229.4753,-1721.8873,13.5673, 30, 0, 1);
    CreatePickup(1239, 1, 2352.0059,-1170.1798,28.0511); // Cocaine Lab
    Create3DTextLabel("{FFFFFF}Cocaine Lab\nType {DF0101}/enter {FFFFFF}to go inside", COLOR_RED, 2352.0059,-1170.1798,28.0511, 30, 0, 1);
    CreatePickup(1239, 1, 2165.950927,-1671.177368,15.073158); // Drug House
    Create3DTextLabel("{FFFFFF}Drug House\nType {DF0101}/enter {FFFFFF}to go inside", COLOR_RED, 2165.950927,-1671.177368,15.073158, 30, 0, 1);
    CreatePickup(1239, 1, 1481.050415,-1772.313476,18.795755); // Cityhall
    Create3DTextLabel("{FFFFFF}City Hall\nType {DF0101}/enter {FFFFFF}to go inside", COLOR_RED, 1481.050415,-1772.313476,18.795755, 30, 0, 1);
    CreatePickup(1247, 1, 1555.235229,-1675.652343,16.195312); // NYPD
    Create3DTextLabel("{FFFF00}Los Santos Police Department\n{FF0000}'To serve and protect'\n{FFFF00}/enter at this spot.", COLOR_RED, 1555.235229,-1675.652343,16.195312, 30, 0, 1);
    CreatePickup(1247, 1, 330.9090,-1510.1177,36.0391); // FBI
    Create3DTextLabel("Federal Bureau Of Invesitgation\n{FFFF00}/enter at this spot.", COLOR_RED, 330.9090,-1510.1177,36.0391, 30, 0, 1);
    CreatePickup(1239, 1, 2045.037719,-1908.032592,13.546875); // DMV
    Create3DTextLabel("{FFFF00}License Center\n{FF0000}Licenses of all kinds\n{FFFF00}/enter at this spot.", COLOR_RED, 2045.037719,-1908.032592,13.546875, 30, 0, 1);
    CreatePickup(1239, 1, -480.1533,-539.1694,25.5296); // Trucker Pickup
    Create3DTextLabel("Packages Pickup\n{FFFF00}/loadpackages to get crates", COLOR_RED, -480.1533,-539.1694,25.5296, 30, 0, 1);
    CreatePickup(1239, 1, 2222.5107,-2682.7368,13.5409); // Trucker Dropoff
	format(string, sizeof(string), "Packages Dropoff\n{FFFF00}/deliverpackages to deliver crates\nAvailable Products: %d/10000", Products);
    ProductsText = CreateDynamic3DTextLabel(string, COLOR_RED, 2222.5107,-2682.7368,13.5409, 30);
    CreatePickup(1239, 1, 545.6661,-1292.2437,17.2422); // Dealership
    Create3DTextLabel("Vehicles Dealership\n{FFFF00}/buycar to buy a vehicle", COLOR_RED, 545.6661,-1292.2437,17.2422, 15, 0, 1);
   // CreatePickup(1239, 1, 1490.2968,1305.7004,1093.2964); // DMV Inside
   // Create3DTextLabel("Department of Motor Vehicles\n{FFFF00}/getlic to start your drivers license test", COLOR_RED, 1490.2968,1305.7004,1093.2964, 15, 0, 1);
    Create3DTextLabel("Door\n{FFFF00}/exit or press F\nto get out", COLOR_RED, 1494.4541,1303.5806,1093.2891, 15, 0, 1);
	CreatePickup(1239, 1, 352.1964,173.3516,1025.7891); // Government Lockers
    Create3DTextLabel("Government Lockers\n{FFFF00}/locker to grab your weapons", COLOR_RED, 352.1964,173.3516,1025.7891, 15, 0, 1);
    //paintball text
    Create3DTextLabel("{FFFFFF}PaintBall Arena\n{A80000}/paintball [join] to join the paintball",0x0000FFFF, 1310.1110,-1368.5656,14.517786, 20,0,1);
    CreatePickup(1239, 1, 1462.409545,-1011.160156,26.843750); // Bank
    Create3DTextLabel("{FFFFFF}Bank Of Los Santos\nType {DF0101}/enter {FFFFFF}to go inside", COLOR_RED, 1462.409545,-1011.160156,26.843750, 30, 0, 1);
    CreatePickup(1239, 1, 962.3975,-1433.5745,14.0537); // DMV Inside
    Create3DTextLabel("License Center\n{FFFFFF}Type /getlicense for a list of licenses.", COLOR_RED, 962.3975,-1433.5745,14.0537, 15, 0, 1);
    CreatePickup(1313, 1, 1310.1110,-1368.5656,13.517786); // paintball pickup
    //Cityhall
    CreatePickup(1239, 1, 361.8299,173.3985,1008.3828); // Telecom Company
    Create3DTextLabel("{FF6347}Service: {00FF00}/phchange\n{FF6347}Service: {00FF00}/namechange\n{FF6347}Service: {00FF00}/agechange\n{FF6347}Service: {00FF00}/sexchange", COLOR_LIGHTRED, 361.8299,173.3985,1008.3828+0.9, 15, 0, 1);
	//tune shop
	CreatePickup(1318, 1, 2117.5835,-1153.0809,24.2201);
	Create3DTextLabel("{FFFFFF}Vehicle Modification Shop\n{A80000}/upgradecar to open the menu",0x0000FFFF, 2117.5835,-1153.0809,24.2201, 20,0,1);
	//
	CreatePickup(1239, 1, 1154.0901,-1772.2408,16.5992); // NG
    Create3DTextLabel("Los Santos National Prison\n{FFFF00}/enter at this spot.", COLOR_RED, 1154.0901,-1772.2408,16.5992, 30, 0, 1);
	//ATM text
	Create3DTextLabel("ATM\n{FFFF00}/awithdraw /adeposit", COLOR_RED, 2228.383789, -1714.005249, 14.145634, 15, 0, 1);
	Create3DTextLabel("ATM\n{FFFF00}/awithdraw /adeposit", COLOR_RED, 1928.707275, -1773.489013, 14.176870, 15, 0, 1);
	Create3DTextLabel("ATM\n{FFFF00}/awithdraw /adeposit", COLOR_RED, 1102.388793, -1428.854858, 16.346872, 15, 0, 1);


    //Bank withdraw
    Create3DTextLabel("Bank\n{FFFF00}/withdraw , /deposit", COLOR_RED, 2228.4658,1651.1661,961.7596, 15, 0, 1);
    Create3DTextLabel("Bank\n{FFFF00}/withdraw , /deposit", COLOR_RED, 2227.0308,1655.4127,961.7531, 15, 0, 1);
	//
    //NYPD
    Create3DTextLabel("NYPD Locker room\n{FFFF00}/locker", COLOR_RED, 255.071,77.074,1003.211, 15, 0, 1);
    Create3DTextLabel("LSFMD Locker room\n{FFFF00}/locker", COLOR_RED, 1252.2406,321.0259,-11.7422, 15, 0, 1);
    Create3DTextLabel("Liquor Store\n{FFFFFF}/store", COLOR_GREEN, 2271.6699,-1742.9114,13.5469, 15, 0, 1);
    Create3DTextLabel("NYPD Accessories\n{FFFF00}/buypolicetoys", COLOR_RED, 253.2935,76.9233,1003.6406, 15, 0, 1);
    Create3DTextLabel("Hitman Agency PC\n{FFFF00}/order /hitmanname", COLOR_RED, 2243.8555,-1680.0319,4.0939, 15, 0, 1);
    Create3DTextLabel("FBI Locker room\n{FFFF00}/locker", COLOR_RED, 387.3867,-1162.4469,1223.6930, 5, 0, 1);
    Create3DTextLabel("FBI Elevator\n{FFFF00}/elevator", COLOR_RED, 397.4298,-1167.1226,1223.6667, 5, 0, 1);
    Create3DTextLabel("FBI Elevator\n{FFFF00}/elevator", COLOR_RED, 1665.8561,-1650.3574,76.2188, 5, 0, 1);
    Create3DTextLabel("FBI Elevator Bottom Floor\n{FFFF00}/elevator", COLOR_RED, 389.5572,-1162.8600,1227.8639, 5, 0, 1);
    Create3DTextLabel("FBI Elevator Rooftop\n{FFFF00}/elevator", COLOR_RED, 393.3255,-1162.8689,1227.8639, 5, 0, 1);
    //LSFMD Enter
    CreatePickup(1239, 1, 1498.6595,-2182.5081,14.1682); //LSFMD
    Create3DTextLabel("{FFFFFF}Los Santos Fire & Medic Department\nType {DF0101}/enter {FFFFFF}to go inside", COLOR_RED, 1498.6595,-2182.5081,14.1682, 30, 0, 1);
    //News Enter
    CreatePickup(1239, 1, 649.2127,-1360.7007,13.5856); //news
    Create3DTextLabel("{FFFFFF}Television Building\nType {DF0101}/enter {FFFFFF}to go inside", COLOR_RED, 649.2127,-1360.7007,13.5856, 30, 0, 1);
    // Universty Enter
    CreatePickup(1239, 1, 1219.3258,-1812.1523,16.5938); //news
    CreatePickup(1239, 1, 765.9518,15.2308,1000.6991, 1); // Boxer Job
    Create3DTextLabel("Boxer Job\n{FFFF00}/join to get the job", COLOR_RED, 765.9518,15.2308,1000.6991, 15, 1, 1);
    CreatePickup(1239, 1, 756.3295,5.6053,1000.6988, 1); // Gym /train
    Create3DTextLabel("Fighting Styles\n{FFFF00}/train to change your fighting style", COLOR_RED, 756.3295,5.6053,1000.6988, 15, 0, 1);
    Create3DTextLabel("Boxer 1\n{FFFF00}/bid 1 to place a bid on this boxer", COLOR_RED, 763.1202,2.4917,1001.5942, 25, 1, 0);
    Create3DTextLabel("Boxer 2\n{FFFF00}/bid 2 to place a bid on this boxer", COLOR_RED, 758.5969,-1.9768,1001.5942, 25, 1, 0);
    Parachute = CreatePickup(371, 1, 1544.0267,-1353.1768,329.4745); // Parachute
    // Bank Robbery // INT:83, VW:8473
    Create3DTextLabel("Bank Vault\n{FFFF00}/startrobbery to open the vault door", COLOR_RED, 2242.0234,1632.7185,961.7531, 25, 8473, 0);
    // News Vault
    Create3DTextLabel("News Agency Vault\n{FFFF00}/newsvault to check the money inside\n/vaultwithdraw to withdraw money", COLOR_RED, 1202.8289,-762.5840,1073.1819, 15, 0, 1);
    //Pilot
    //Car Jacker
    //CreatePickup(1239, 1, 562.3151,-1293.1195,17.2482); // CARJACKER Job
    //Create3DTextLabel("Car Jacker Job\n{FFFF00}/join to get the job", COLOR_RED, 562.3151,-1293.1195,17.2482, 15, 0, 1);
    /*
    403.8016,-2088.7976,7.8359 ; Fish1
	398.7358,-2088.7939,7.8359 ; Fish2
	396.1771,-2088.7976,7.8359 ; Fish3
	391.0683,-2088.7974,7.8359 ; Fish4
	383.4282,-2088.7969,7.8359 ; Fish5
	374.9623,-2088.7974,7.8359 ; Fish6
	369.8990,-2088.7976,7.8359 ; Fish7
	367.3003,-2088.7981,7.8359 ; Fish8
	362.1855,-2088.7974,7.8359 ; Fish9
	354.5370,-2088.7983,7.8359 ; Fish10
	*/
    print("Static pickups loaded.");
	return 1;
}

stock ShowStats(playerid, playerb)
{
	new string[256], gender[8], Float:H, Float:A;
	// Gender
	if(PlayerInfo[playerb][pGender] == 1) format(gender, sizeof(gender), "Male");
	else if(PlayerInfo[playerb][pGender] == 2) format(gender, sizeof(gender), "Female");
	// Health and Armor
	GetPlayerHealth(playerb, H); GetPlayerArmour(playerb, A);
	// Total Wealth
	//new idx = PlayerInfo[playerb][pHouse];
	//new idx2 = PlayerInfo[playerb][pBiz];
	//new TotalWealth = PlayerInfo[playerb][pMoney]+PlayerInfo[playerb][pBank]+HouseInfo[idx][hMoney]+BizInfo[idx2][bMoney];
	// Loyal
	new loyal[4];
	if(!PlayerInfo[playerb][pLoyal]) format(loyal, sizeof(loyal), "Yes");
	if(PlayerInfo[playerb][pLoyal]) format(loyal, sizeof(loyal), "No");
	// Oldskool
	new oldskool[4];
	if(PlayerInfo[playerid][pHours] >= 248) format(oldskool, sizeof(oldskool), "Yes");
	else if(PlayerInfo[playerid][pHours] < 248) format(oldskool, sizeof(oldskool), "No");
	//fac-fam rank
	new rank[128];
	if(PlayerInfo[playerb][pFac] >= 1) format(rank, sizeof(rank), "%s", RPFRN(playerb));
	else format(rank, sizeof(rank), "None");
	//fac-fam
	new org[128];
	if(PlayerInfo[playerb][pFac] >= 1) format(org, sizeof(org), "%s", RPFNEx(playerb));
	else format(org, sizeof(org), "None");
	//
	new rank2[128];
	if(PlayerInfo[playerb][pFam] >=1) format(rank2, sizeof(rank2), "%s", RPFaRN(playerb));
	else format(rank2, sizeof(rank2), "None");
	//fac-fam
	new org2[128];
	if(PlayerInfo[playerb][pFam] >=1) format(org2, sizeof(org2), "%s", RPFaN(playerb));
	else format(org2, sizeof(org2), "None");
	new exp = PlayerInfo[playerb][pExp];
	new nxtlevel = PlayerInfo[playerb][pLevel]+1;
	new expamount = nxtlevel*4;
	new costlevel = nxtlevel*4000;//10k for testing purposes
	/*//respect
	new respectneed[4];
	if(PlayerInfo[playerb][pLevel] == 1) format(respectneed, sizeof(respectneed), "4");
 	else if(PlayerInfo[playerb][pLevel] == 2) format(respectneed, sizeof(respectneed), "10");
  	else if(PlayerInfo[playerb][pLevel] == 3) format(respectneed, sizeof(respectneed), "18");
   	else if(PlayerInfo[playerb][pLevel] == 4) format(respectneed, sizeof(respectneed), "30");
    else if(PlayerInfo[playerb][pLevel] == 5) format(respectneed, sizeof(respectneed), "42");
    else if(PlayerInfo[playerb][pLevel] == 6) format(respectneed, sizeof(respectneed), "54");
    else if(PlayerInfo[playerb][pLevel] == 7) format(respectneed, sizeof(respectneed), "70");
    else if(PlayerInfo[playerb][pLevel] == 8) format(respectneed, sizeof(respectneed), "88");
    else if(PlayerInfo[playerb][pLevel] == 9) format(respectneed, sizeof(respectneed), "108");
    else if(PlayerInfo[playerb][pLevel] == 10) format(respectneed, sizeof(respectneed), "130");
    else if(PlayerInfo[playerb][pLevel] == 11) format(respectneed, sizeof(respectneed), "154");
    else if(PlayerInfo[playerb][pLevel] == 12) format(respectneed, sizeof(respectneed), "180");
    else if(PlayerInfo[playerb][pLevel] == 13) format(respectneed, sizeof(respectneed), "208");
    else if(PlayerInfo[playerb][pLevel] == 14) format(respectneed, sizeof(respectneed), "238");
    else if(PlayerInfo[playerb][pLevel] == 15) format(respectneed, sizeof(respectneed), "270");
    else if(PlayerInfo[playerb][pLevel] == 16) format(respectneed, sizeof(respectneed), "304");
    else if(PlayerInfo[playerb][pLevel] == 17) format(respectneed, sizeof(respectneed), "340");
    else if(PlayerInfo[playerb][pLevel] == 18) format(respectneed, sizeof(respectneed), "378");
    else if(PlayerInfo[playerb][pLevel] == 19) format(respectneed, sizeof(respectneed), "418");
    else if(PlayerInfo[playerb][pLevel] == 20) format(respectneed, sizeof(respectneed), "460");
    else if(PlayerInfo[playerb][pLevel] == 21) format(respectneed, sizeof(respectneed), "504");
    else if(PlayerInfo[playerb][pLevel] == 22) format(respectneed, sizeof(respectneed), "550");
    else if(PlayerInfo[playerb][pLevel] == 23) format(respectneed, sizeof(respectneed), "598");
    else if(PlayerInfo[playerb][pLevel] == 24) format(respectneed, sizeof(respectneed), "648");
    else if(PlayerInfo[playerb][pLevel] == 25) format(respectneed, sizeof(respectneed), "700");
    else if(PlayerInfo[playerb][pLevel] == 26) format(respectneed, sizeof(respectneed), "754");
    else if(PlayerInfo[playerb][pLevel] == 27) format(respectneed, sizeof(respectneed), "810");
    else if(PlayerInfo[playerb][pLevel] == 28) format(respectneed, sizeof(respectneed), "868");
    else if(PlayerInfo[playerb][pLevel] == 29) format(respectneed, sizeof(respectneed), "928");*/
	//new average = (PlayerInfo[playerb][pTMinutes] / PlayerInfo[playerb][pDay]);
	// Stats
	format(string, sizeof(string), " Statistics of %s", RPN(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Level: [%d] - Gender: [%s] - Age: [%d] - Money: [$%d] - Bank: [$%d] - Health: [%0.1f] - Armor: [%0.1f]", PlayerInfo[playerb][pLevel], gender, PlayerInfo[playerb][pAge], PlayerInfo[playerb][pMoney], PlayerInfo[playerb][pBank], H, A);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "Phone Number: [%d] - Playing Hours: [%d] Next Level: [%d/%d] - Next Level Cost: [$%d] - Respect Points: [%d]", PlayerInfo[playerb][pNumber], PlayerInfo[playerb][pHours], exp, expamount, costlevel, PlayerInfo[playerb][pExp]);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "Occupation: [%s] - Wanted Level: [%d] - Crimes Committed: [%d] - Arrested: [%dx] - Kill: [%d] - Death: [%d]", RPJN(playerb), PlayerInfo[playerb][pWanted], PlayerInfo[playerb][pCrimes], PlayerInfo[playerb][pArrested], PlayerInfo[playerb][pKill], PlayerInfo[playerb][pDeath]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Faction: [%s] - Faction Rank: [%s] - Family: [%s] - Family Rank: [%s]", org, rank, org2, rank2);
	SendClientMessage(playerid, COLOR_RADIO, string);
	format(string, sizeof(string), "Business: [%s] - House: [%s] - Garage: [%s] - Vehicles: 1[%s (ID:%d) - 2[%s (ID:%d)]", RBT(PlayerInfo[playerb][pBiz]), RPHK(playerb), RPGK(playerb), RVN(GetVehicleModel(PlayerInfo[playerb][pVeh])), PlayerInfo[playerb][pVeh], RVN(GetVehicleModel(PlayerInfo[playerb][pVVeh])), PlayerInfo[playerb][pVVeh]);
	SendClientMessage(playerid, COLOR_RADIO, string);
	SendClientMessage(playerid, COLOR_BLUE, " Type /inv to see you're inventory");
	return 1;
}

stock ShowInv(playerid, playerb)
{
	new string[128];
	// Inventory
	SendClientMessage(playerid, COLOR_LIGHTRED, "_____________________________________________________");
	format(string, sizeof(string), "%s's Inventory.", RPN(playerb));
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "Weed:[%d] cocaine:[%d] Cigars:[%d] Sprunk:[%d] Spraycan:[%d] Package:[%s]", PlayerInfo[playerb][pWeed], PlayerInfo[playerb][pcocaine], PlayerInfo[playerb][pCigar], PlayerInfo[playerb][pSprunk], PlayerInfo[playerb][pSpray], RPPN(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Low-Class Materials:[%d] Medium-Class Materials:[%d] High-Class Materials:[%d]", PlayerInfo[playerb][pMaterials], PlayerInfo[playerb][pMMaterials], PlayerInfo[playerb][pHMaterials]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Gas Can:[%d litres] Ropes:[%d] Blindfolds:[%d]", PlayerInfo[playerb][pGas], PlayerInfo[playerb][pRope], PlayerInfo[playerb][pBlindfold]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(playerid, COLOR_REPORT, "** For information about your accessories/toys use the '/toys' command.");
	return 1;
}

stock IsPlayerInWater(playerid)
{
	new anim = GetPlayerAnimationIndex(playerid);
 	if (((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return 1;
  	return 0;
}

stock IsPlayerAiming(playerid)
{
	new anim = GetPlayerAnimationIndex(playerid);
	if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) || (anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
 	return 0;
}

stock GetPlayerNameEx(playerid) {

	new
		sz_playerName[MAX_PLAYER_NAME],
		i_pos;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	while ((i_pos = strfindex(sz_playerName, "_", false, i_pos)) != -1) sz_playerName[i_pos] = ' ';
	return sz_playerName;
}

stock SetPlayerWalkingStyle(playerid, style)
{
	PlayerInfo[playerid][pWalkStyle] = style;
}

stock GetPlayerWalkingStyle(playerid)
{
	return PlayerInfo[playerid][pWalkStyle];
}

forward WalkAnim(playerid);
public WalkAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (GetPlayerWalkingStyle(playerid) == WALK_NORMAL)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_PED)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
 	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	return true;
}

stock SetVehicleForwardVelocity(vehicleid, Float:Velocity, Float:Z)
{
	new Float:Angle;
	new Float:SpeedX, Float:SpeedY;
	GetVehicleZAngle(vehicleid, Angle);
	SpeedX = floatsin(-Angle, degrees);
	SpeedY = floatcos(-Angle, degrees);
	SetVehicleVelocity(vehicleid, floatmul(Velocity, SpeedX), floatmul(Velocity, SpeedY), Z);
	return true;
}

stock SetPlayerForwardVelocity(playerid, Float:Velocity, Float:Z)
{
if(!IsPlayerConnected(playerid)) return false;
new Float:Angle;
new Float:SpeedX, Float:SpeedY;
GetPlayerFacingAngle(playerid, Angle);
SpeedX = floatsin(-Angle, degrees);
SpeedY = floatcos(-Angle, degrees);
SetPlayerVelocity(playerid, floatmul(Velocity, SpeedX), floatmul(Velocity, SpeedY), Z);
return true;
}

stock RWN(weaponid)
{
	new name[32];
	GetWeaponName(weaponid, name, sizeof(name));
	if(weaponid == 0) format(name, sizeof(name), "None");
	return name;
}

stock RPIP(playerid)
{
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

stock RPVIPN(playerid)
{
	new name[32];
	if(PlayerInfo[playerid][pVIP] == 0) format(name, sizeof(name), "None");
	else if(PlayerInfo[playerid][pVIP] == 1) format(name, sizeof(name), "Bronze");
	else if(PlayerInfo[playerid][pVIP] == 2) format(name, sizeof(name), "Silver");
	else if(PlayerInfo[playerid][pVIP] == 3) format(name, sizeof(name), "Gold");
	else if(PlayerInfo[playerid][pVIP] == 4) format(name, sizeof(name), "Platinum");
	return name;
}

stock RPALN(playerid)
{
	new name[32];
	if(PlayerInfo[playerid][pAdmin] == 1) format(name, sizeof(name), "Moderator");
	else if(PlayerInfo[playerid][pAdmin] == 2) format(name, sizeof(name), "Admin");
	else if(PlayerInfo[playerid][pAdmin] == 3) format(name, sizeof(name), "Admin");
	else if(PlayerInfo[playerid][pAdmin] == 4) format(name, sizeof(name), "Admin");
	else if(PlayerInfo[playerid][pAdmin] == 5) format(name, sizeof(name), "General Admin");
	else if(PlayerInfo[playerid][pAdmin] == 6) format(name, sizeof(name), "Senior Admin");
	else if(PlayerInfo[playerid][pAdmin] == 7) format(name, sizeof(name), "Head Admin");
	else if(PlayerInfo[playerid][pAdmin] == 8) format(name, sizeof(name), "Server Owner");
	else if(PlayerInfo[playerid][pAdmin] == 9) format(name, sizeof(name), "Server Scripter");
	else if(PlayerInfo[playerid][pMapper] == 1) format(name, sizeof(name), "Trial Mapper");
	else if(PlayerInfo[playerid][pMapper] == 2) format(name, sizeof(name), "General Mapper");
	else if(PlayerInfo[playerid][pMapper] == 3) format(name, sizeof(name), "Senior Mapper");
	else if(PlayerInfo[playerid][pMapper] == 4) format(name, sizeof(name), "Asst. Head mapper");
	else if(PlayerInfo[playerid][pMapper] == 5) format(name, sizeof(name), "Head Mapper");
	return name;
}

stock HT(idx)
{
	new ht[50];
	    if(!HouseInfo[idx][hLevel]) format(ht, sizeof(ht), "None");
		else if(HouseInfo[idx][hLevel] == 1) format(ht, sizeof(ht), "Small Appartment");
		else if(HouseInfo[idx][hLevel] == 2) format(ht, sizeof(ht), "Medium Appartment");
		else if(HouseInfo[idx][hLevel] == 3) format(ht, sizeof(ht), "Large Appartment");
		else if(HouseInfo[idx][hLevel] == 4) format(ht, sizeof(ht), "Small Crib");
		else if(HouseInfo[idx][hLevel] == 5) format(ht, sizeof(ht), "Medium Crib");
		else if(HouseInfo[idx][hLevel] == 6) format(ht, sizeof(ht), "Large Crib");
		else if(HouseInfo[idx][hLevel] == 7) format(ht, sizeof(ht), "Small Mansion");
		else if(HouseInfo[idx][hLevel] == 8) format(ht, sizeof(ht), "Medium Mansion");
		else if(HouseInfo[idx][hLevel] == 9) format(ht, sizeof(ht), "Luxury Mansion");
		else if(HouseInfo[idx][hLevel] == 10)format(ht, sizeof(ht), "Luxury Villa");
		else if(HouseInfo[idx][hLevel] == 11)format(ht, sizeof(ht), "Huge Luxury Villa");
	return ht;
}

stock GT(idx)
{
	new ht[50];
		if(GarageInfo[idx][gLevel] == 1) format(ht, sizeof(ht), "Small Garage");
	return ht;
}

stock GTT(idx)
{
	new ht[50];
		if(GarageInfo[idx][gLevel] == 1) format(ht, sizeof(ht), "Space for 1 vehicle");
	return ht;
}

stock SPDN()
{
	new dayz[32];
	if(DayNoDrops == 1)
	{
		format(dayz, sizeof(dayz), "{00C0FF}Day Of No Drops");
	}
	if(DayPaycheck == 1)
	{
 		format(dayz, sizeof(dayz), "{00C0FF}Day Of Rising Economy");
	}
	if(DayNoPD == 1)
	{
 		format(dayz, sizeof(dayz), "{F81414}Education Day");
	}
	if(DayNoShops == 1)
	{
		format(dayz, sizeof(dayz), "{F81414}Sunday");
	}
	if(DayNoJobs == 1)
	{
		format(dayz, sizeof(dayz), "{F81414}Day Of National Protests");
	}
	if(DayRespect == 1)
	{
        format(dayz, sizeof(dayz), "{00C0FF}Day Of Hard Labour");
	}
	return dayz;
}

stock SPDName()
{
	new dayz[256];
	if(DayNoDrops == 1)
	{
		format(dayz, sizeof(dayz), "~b~Day Of No Drops~n~~w~Today the NYPD is busy with stopping crimes ~n~Therefore the doctors wont take your weapons~n~ in the hospital.~n~((Today you don't lose weapons when you die.))");
	}
	else if(DayPaycheck == 1)
	{
 		format(dayz, sizeof(dayz), "~b~Day Of Rising Economy~n~~w~Today the Los Santos Government won a community~n~project,therefore everyones salary is bigger.~n~((Today you get 25 percent bigger paychecks.))");
	}
	else if(DayNoPD == 1)
	{
 		format(dayz, sizeof(dayz), "~r~Education Day~n~~w~Today the Governor has called all services~n~and their leaders in the city hall~n~therefore there is no services on duty.~n~((Today members of factions can't go on duty.))");
	}
	else if(DayNoShops == 1)
	{
		format(dayz, sizeof(dayz), "~r~Sunday~n~~w~      It's Sunday-all shops are closed!~n~  ((Today you can't enter any shops/businesses.))");
	}
	else if(DayNoJobs == 1)
	{
		format(dayz, sizeof(dayz), "~r~Day Of National Protests~n~~w~Today there was a break in global economy,therefore~n~ all the people went out on a national protest.~n~    ((Today you can't join or do any job.))");
	}
	else if(DayRespect == 1)
	{
        format(dayz, sizeof(dayz), "~b~Day Of Hard Labour~n~~w~Today we celebrate the Day Of Hard Labour,therefore~n~  respect is easily earned on the streets of LS.~n~     ((Today you get double respect.))");
	}
	else
	{
	    format(dayz, sizeof(dayz), "Today is just an ordinary day.");
	}
	return dayz;
}

stock RPHLN(playerid)
{
	new name[32];
	if(PlayerInfo[playerid][pHelper] == 1) format(name, sizeof(name), "Community Helper");
	else if(PlayerInfo[playerid][pHelper] == 2) format(name, sizeof(name), "General Helper");
	else if(PlayerInfo[playerid][pHelper] == 3) format(name, sizeof(name), "Senior Helper");
	else if(PlayerInfo[playerid][pHelper] == 4) format(name, sizeof(name), "Asst. Head Helper");
	else if(PlayerInfo[playerid][pHelper] == 5) format(name, sizeof(name), "Head Helper");
	else if(PlayerInfo[playerid][pAdmin] >= 5) format(name, sizeof(name), "Big Boss");
	return name;
}

stock IsPlayerLoggedIn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pLoggedIn])
	    {
	        return 1;
	    }
	}
	return 0;
}

stock SendNearbyMessage(playerid, Float:radius, string[], col1, col2, col3, col4, col5)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new Float:ix, Float:iy, Float:iz;
	new Float:cx, Float:cy, Float:cz;
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
	        {
				GetPlayerPos(i, ix, iy, iz);
				cx = (x - ix);
				cy = (y - iy);
				cz = (z - iz);
				if(((cx < radius/16) && (cx > -radius/16)) && ((cy < radius/16) && (cy > -radius/16)) && ((cz < radius/16) && (cz > -radius/16)))
				{
				    SendClientMessage(i, col1, string);
				}
				else if(((cx < radius/8) && (cx > -radius/8)) && ((cy < radius/8) && (cy > -radius/8)) && ((cz < radius/8) && (cz > -radius/8)))
				{
				    SendClientMessage(i, col2, string);
				}
				else if(((cx < radius/4) && (cx > -radius/4)) && ((cy < radius/4) && (cy > -radius/4)) && ((cz < radius/4) && (cz > -radius/4)))
				{
				    SendClientMessage(i, col3, string);
				}
				else if(((cx < radius/2) && (cx > -radius/2)) && ((cy < radius/2) && (cy > -radius/2)) && ((cz < radius/2) && (cz > -radius/2)))
				{
				    SendClientMessage(i, col4, string);
				}
				else if(((cx < radius) && (cx > -radius)) && ((cy < radius) && (cy > -radius)) && ((cz < radius) && (cz > -radius)))
				{
				    SendClientMessage(i, col5, string);
				}
			}
	    }
	}
	return 1;
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(targetid, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, radius ,x, y, z))
	{
	    return 1;
	}
	return 0;
}

stock IsPlayerNearVehicle(playerid, vehicleid, Float:radius)
{
	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicleid, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, radius ,x, y, z))
	{
	    return 1;
	}
	return 0;
}

stock SSSShowDialog(playerid, dialogid)
{
    new string[256], line1[256];
	switch(dialogid)
	{
	    case 0: // Tutorial Dialog
		{
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Tutorial","Are you ready for the tutorial?", "Yes", "");
		}
		case 1: // Register
		{
		    ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Register", "{FFFFFF}Welcome to Intense Role-Play.\n\n{FFFFFF}Please register your account by entering your desired password below.", "Register", "Quit");
		}
		case 2: // Login
		{
		    format(string, sizeof(string), "Welcome to Intense Role-Play %s.\nPlease enter your password below to continue.", RPN(playerid), PlayerInfo[playerid][pLevel]);
		    ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Login",string, "Login", "Quit");
        }
		case 3: // Male/Female
		{
		    ShowPlayerDialog(playerid, 3, DIALOG_STYLE_LIST, "Choose your character's gender", "Male\nFemale", "Choose", "Cancel");
		}
		case 4: // Age
		{
		    ShowPlayerDialog(playerid, 4, DIALOG_STYLE_INPUT, "Character's age","Choose your character's age (25-80)", "Choose", "Cancel");
		}
		case 5: // NYPD Lockers
		{
		    ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "NYPD Lockers", "Duty\nArmory\nClothes", "Choose", "Cancel");
		}
		case 6: // NYPD Armory
		{
		    ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, "NYPD Lockers", "Nightstick ($50)\nMace ($100)\nDesert Eagle ($200)\nShotgun ($100)\nMP5 ($600)\nM4 ($1000)\nCombat Shotgun ($1500)\nSniper Rifle ($2500)\nPainkiller ($100)\nVest ($200)", "Choose", "Cancel");
		}
		case 7: // Clothes Dialog
		{
		    ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Clothes","Choose your clothes (( Skin ID ))", "Choose", "Cancel");
		}
		case 8: // Smartphone Browse 1
		{
		    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "Smartphone Web Browser","Downloading a song costs $50\n\n1) 2pac-Soon as I get home      2) Wiz Khalifa - Reefer Party", "Next", "Close");
		}
		case 9: // Mechanic
		{
		    ShowPlayerDialog(playerid, 9, DIALOG_STYLE_LIST, "Mechanic Tools", "Repair Vehicle\nAdd/Remove Nitros\nAdd/Remove Hydraulics", "Choose", "Cancel");
		}
		case 10: // Dealership Main
		{
		    ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, "Choose a category", "Bikes\nNormal Vehicles\nLowriders\nOff-Road Vehicles\nSport Vehicles", "Choose", "Cancel");
		}
        case 11: // Bikes
		{
		    ShowPlayerDialog(playerid, 11, DIALOG_STYLE_LIST, "Bikes", "BMX ($600)\nFaggio ($4,000)\nFreeway ($6,000)\nSanchez ($4,000)\nQuad ($6,000)\nPCJ-600 ($20,000)\nFCR-900 ($25,000)", "Choose", "Cancel");
		}
		case 12: // Normal Vehicles
		{
		    ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Normal Vehicles", "Comet ($30,000)\nFeltzer ($26,000)\nStallion ($26,000)\nWindsor ($28,000)\nSentinel ($24,000)\nManana ($22,000)", "Choose", "Cancel");
		}
		case 13: // Off-Road Vehicles
		{
		    ShowPlayerDialog(playerid, 13, DIALOG_STYLE_LIST, "Off-Road Vehicles", "Huntley ($22,000)\nLandstalker ($24,000)\nSandking ($30,000)", "Choose", "Cancel");
		}
		case 14: // Sport Vehicles
		{
		    ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Sport Vehicles", "Sultan ($60,000)\nBanshee ($65,000)\nBuffalo ($70,000)\nBullet ($90,000)\nCheetah ($80,000)\nJester ($70,000)\nTurismo ($110,000)\nSuper GT($200,000)\nInfernus($300,000)", "Choose", "Cancel");
		}
		case 15: // Smartphone advertise
		{
		    ShowPlayerDialog(playerid, 15, DIALOG_STYLE_INPUT, "Smartphone","Type in the advertisement you wish to create", "Choose", "Cancel");
		}
		case 16: // VIP Dialog
		{
		    ShowPlayerDialog(playerid, 16, DIALOG_STYLE_LIST, "VIP Center:", "VIP Color\nVIP Tag Above Head\nTune Vehicle\nCreate Advertisement\nChange Skin\nChange Age\nChange Gender\nChange Name\nVIP Points", "Choose", "Cancel");
		}
		case 17: // Changing Skin
		{
		    ShowPlayerDialog(playerid, 17, DIALOG_STYLE_INPUT, "VIP Skin Change","Choose a skin between 0 and 299", "Choose", "Cancel");
		}
		case 18: // Change name
		{
		    ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "VIP Name Change","Type in your new name (Admins will approve/disapprove ASAP)", "Submit", "Cancel");
		}
		case 19: // Weapons Shop
		{
			ShowPlayerDialog(playerid, 19, DIALOG_STYLE_LIST, "VIP Weapons Shop", "Knife ($10000)\n5 Grenades ($20000)\n5 Molotov Cocktails ($20000)", "Choose", "Cancel");
		}
		case 20: // VIP advertise
		{
		    ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "VIP Advertisement","Please write your advertisement below in the given place.", "Choose", "Cancel");
		}
		case 21: // Lowriders
		{
		    ShowPlayerDialog(playerid, 21, DIALOG_STYLE_LIST, "Lowriders", "Blade($25,000)\nBroadway ($35,000)\nRemington ($30,000)\nSavanna ($25,000)\nSlamvan ($27,000)\nTornado ($24,000)\nVoodo ($30,000)", "Choose", "Cancel");
		}
		case 22: // Fighting Styles
		{
		    ShowPlayerDialog(playerid, 22, DIALOG_STYLE_LIST, "Choose a style", "Normal ($3,000)\nBoxing ($3,000)\nKung-Fu ($3,000)\nKnee-Head ($3,000)\nGrab-Kick ($3,000)\nElbow ($3,000)", "Choose", "Cancel");
		}
		case 23: // Toys
		{
			// 1 Glasses, 2 watches, 3 bandana, 4 hats

		    format(string, sizeof(string), "Slot 0 (%s)\nSlot 1 (%s)\nSlot 2 (%s)\nSlot 3 (%s)\nSlot 4 (%s)\nSlot 5 (%s)\nSlot 6 (%s)\nSlot 7 (%s)\nSlot 8 (%s)\nSlot 9 (%s)", RPTN(playerid, 0), RPTN(playerid, 1), RPTN(playerid, 2), RPTN(playerid, 3), RPTN(playerid, 4), RPTN(playerid, 5), RPTN(playerid, 6), RPTN(playerid, 7), RPTN(playerid, 8), RPTN(playerid, 9));
			ShowPlayerDialog(playerid, 23, DIALOG_STYLE_LIST, "Your toys", string, "Choose", "Cancel");
		}
		case 24: // Toy Add/Remove/Edit
		{
		    new info[16], type[16];
		    if(!IsPlayerAttachedObjectSlotUsed(playerid, toyslot[playerid])) format(info, sizeof(info), "Show Toy");
		    else format(info, sizeof(info), "Hide Toy");
		    format(string, sizeof(string), "%s\nEdit Toy", info);
		    format(type, sizeof(type), "Toy Slot %d", toyslot[playerid]);
		    ShowPlayerDialog(playerid, 24, DIALOG_STYLE_LIST, type, string, "Choose", "Back");
		}
		case 25: // Toy adding bones
		{
	    	 /*
             1) Spine | 2) Head | 3) Left upper arm | 4) Right upper arm | 5) Left hand | 6) Right hand | 7) Left thigh
			 8) Right thigh | 9) Left foot | 10) Right foot | 11) Right calf | 12) Left calf | 13) Left forearm
			 14) Right forearm | 15) Left clavicle | 16) Right clavicle | 17) Neck | 18) Jaw
			*/
		    ShowPlayerDialog(playerid, 25, DIALOG_STYLE_LIST, "Choose a bone", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearmRight forearm\nLeft clavicle\nRight clavicle\nNeck\nJaw", "Choose", "Back");
		}
		case 26: // Loyal Points
		{
		    format(string, sizeof(string), "You have %d loyalty points.", PlayerInfo[playerid][pLPoints]);
		    ShowPlayerDialog(playerid, 26, DIALOG_STYLE_LIST, string, "Refill Everybody's Health (2 Points)\nRepair All Vehicles (4 Points)\nRefill All Vehicles (6 Points)", "Confirm", "Cancel");
		}
		case 27: // NA Lockers
		{
		    ShowPlayerDialog(playerid, 27, DIALOG_STYLE_LIST, "NA Lockers", "Camera\nClothes", "Choose", "Cancel");
		}
		case 28: // paintball guns menu
		{
		    ShowPlayerDialog(playerid, 28, DIALOG_STYLE_LIST, "Paintball Weapons Choose:", "Deagle\nMicro SMG/Uzi\nTec-9", "Choose", "Cancel");
		}
		case 29: // paintball heavy guns
		{
		    ShowPlayerDialog(playerid, 29, DIALOG_STYLE_LIST, "Paintball Weapons Choose:", "Spas12\nM4\nShotgun", "Choose", "Cancel");
		}
		case 30: // Tune shop menu
		{
		    ShowPlayerDialog(playerid, 30, DIALOG_STYLE_LIST, "Vehicle tune shop:", "Red Neon-500$\nBlue Neon-500$\nGreen Neon-500$\nWhite Neon-500$\nPink Neon-500$\nYellow Neon-500$\nRemove Neon-1000$", "Buy", "Cancel");
		}
		case 31:
		{
		    ShowPlayerDialog(playerid, 31, DIALOG_STYLE_INPUT, "VIP Vehicle Model Changer","Type in the vehicle ID you would like:", "Submit", "Cancel");
		}
		case 32:
		{
		    ShowPlayerDialog(playerid, 32, DIALOG_STYLE_LIST, "LSFMD Locker", "Duty\nUniform", "Select", "Cancel");
		}
		case 33:
		{
		    ShowPlayerDialog(playerid, 33, DIALOG_STYLE_LIST, "LSFMD Uniform", "Paramedic 1\nParamedic 2\nParamedic 3\nWoman Uniform", "Select", "Cancel");
		}
		case 34:
		{
		    ShowPlayerDialog(playerid, 34, DIALOG_STYLE_LIST, "Liquor Store", "Pocket Of Cigars($300)\nPocket Of Soda Cans($100)\nBeer($200)\nLiqour Bottle($350)", "Buy", "Cancel");
		}
		case 35: // FBI Lockers
		{
		    ShowPlayerDialog(playerid, 35, DIALOG_STYLE_LIST, "FBI Lockers", "Duty\nArmory\nClothes", "Choose", "Cancel");
		}
		case 36: // VIP advertise
		{
		    ShowPlayerDialog(playerid, 36, DIALOG_STYLE_INPUT, "VIP Advertisement","Please write your advertisement below in the given place.", "Choose", "Cancel");
		}
		case 37: // VIP Adv
		{
		    ShowPlayerDialog(playerid, 37, DIALOG_STYLE_LIST, "Advertisement Coloring", "Red Color\nOrange Color\nPink Color", "Choose", "Cancel");
		}
		case 38: // VIP advertise
		{
		    ShowPlayerDialog(playerid, 38, DIALOG_STYLE_INPUT, "VIP Advertisement","Please write your advertisement below in the given place.", "Choose", "Cancel");
		}
		case 39: // License
		{
		    ShowPlayerDialog(playerid, 39, DIALOG_STYLE_LIST, "Official Licenses","Driving License ($1000)\nFlying License ($10000)", "Choose", "Cancel");
		}
		case 40: // NYPD Lockers
		{
		    ShowPlayerDialog(playerid, 40, DIALOG_STYLE_LIST, "Hospital Spawn", "Gym\nNYPD\nAll Saints Hospital\nGeneral County Hospital", "Choose", "Cancel");
		}
		case 41: // Change name
		{
		    ShowPlayerDialog(playerid, 41, DIALOG_STYLE_INPUT, "Name Change","Type in your new name (Admins will approve/disapprove ASAP)", "Submit", "Cancel");
		}
		case 42: // Loyal Points
		{
		    format(string, sizeof(string), "You have %d VIP points.", PlayerInfo[playerid][pLPoints]);
		    ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, string, "Refill Everybody's Health (2 Points)\nRepair All Vehicles (4 Points)\nRefill All Vehicles (6 Points)", "Confirm", "Cancel");
		}
		case 43: // NG Lockers
		{
		    ShowPlayerDialog(playerid, 43, DIALOG_STYLE_LIST, "NG Lockers", "Duty\nArmory\nClothes", "Choose", "Cancel");
		}
		case 44: ShowPlayerDialog(playerid, 44, DIALOG_STYLE_LIST, "Which job do you need help with?", "Mechanic\nLawyer\nTrucker\nWeapons Dealer\nWeapons Smuggler\nDrugs Dealer\nDrugs Smuggler\nBody Guard\nBoxer", "Select", "Cancel");
        case 45:
        {
			format(string, sizeof(string), "{D50000}Mechanic");
        	format(line1, sizeof(line1), "/mech");
			format(string, sizeof(string), "%s", line1);
            ShowPlayerDialog(playerid, 45, DIALOG_STYLE_MSGBOX, string, string, "Done", "Cancel");
		}
		case 46:
        {
			format(string, sizeof(string), "{D50000}Lawyer");
			format(line1, sizeof(line1), "/free /defend /wanted");
			format(string, sizeof(string), "%s", line1);
            ShowPlayerDialog(playerid, 46, DIALOG_STYLE_MSGBOX, string, string, "Done", "Cancel");
		}
		case 47:
        {
			format(string, sizeof(string), "{D50000}Trucker");
			format(line1, sizeof(line1), "/loadpackages /deliverpackages");
			format(string, sizeof(string), "%s", line1);
            ShowPlayerDialog(playerid, 47, DIALOG_STYLE_MSGBOX, string, string, "Done", "Cancel");
		}
		case 48:
		{
			format(string, sizeof(string), "{D50000}Weapons Dealer");
			format(line1, sizeof(line1), "/sellgun /sellmats /creategun");
			format(string, sizeof(string), "%s", line1);
            ShowPlayerDialog(playerid, 48, DIALOG_STYLE_MSGBOX, string, string, "Done", "Cancel");
		}
		case 49:
		{
			format(string, sizeof(string), "{D50000}Weapons Smuggler");
			format(line1, sizeof(line1), "/getmats /dropmats /sellmats");
			format(string, sizeof(string), "%s", line1);
            ShowPlayerDialog(playerid, 49, DIALOG_STYLE_MSGBOX, string, string, "Done", "Cancel");
		}
		case 50:
		{
			format(string, sizeof(string), "{D50000}Drugs Dealer");
			format(line1, sizeof(line1), "/buyweed /buycrack /sellweed /sellcrack");
			format(string, sizeof(string), "%s", line1);
            ShowPlayerDialog(playerid, 50, DIALOG_STYLE_MSGBOX, string, string, "Done", "Cancel");
		}
		case 51:
		{
			format(string, sizeof(string), "{D50000}Drugs Smuggler");
			format(line1, sizeof(line1), "/getweed /dropweed /getcrack /dropcrack");
			format(string, sizeof(string), "%s", line1);
            ShowPlayerDialog(playerid, 51, DIALOG_STYLE_MSGBOX, string, string, "Done", "Cancel");
		}
		case 52:
		{
			format(string, sizeof(string), "{D50000}Body Guard");
			format(line1, sizeof(line1), "/vest");
			format(string, sizeof(string), "%s", line1);
            ShowPlayerDialog(playerid, 52, DIALOG_STYLE_MSGBOX, string, string, "Done", "Cancel");
		}
		case 53:
		{
			format(string, sizeof(string), "{D50000}Boxer");
			format(line1, sizeof(line1), "/fight");
			format(string, sizeof(string), "%s", line1);
            ShowPlayerDialog(playerid, 53, DIALOG_STYLE_MSGBOX, string, string, "Done", "Cancel");
		}
	}
	return 1;
}

stock GiveDodMoney(playerid, amount)
{
	new string[128];
	if(amount < 0) format(string, sizeof(string), "~r~-$%d", amount*-1);
	else if(amount > 0) format(string, sizeof(string), "~g~+$%d", amount);
	GameTextForPlayer(playerid, string, 3000, 1);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pMoney] += amount;
	return 1;
}

stock SetDodMoney(playerid, amount)
{
    PlayerInfo[playerid][pMoney] = amount;
	return 1;
}

stock split(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc))
    {
        if(strsrc[i] == delimiter || i == strlen(strsrc))
        {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}
stock SendPlayerFamMessage(playerid, color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pFam] == PlayerInfo[playerid][pFam])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock SendCopMessage(color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pFac] == 1)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendHitmanMessage(color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pFac] == 3)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendFBIMessage(color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pFac] == 6)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendLSFMDMessage(color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pFac] == 5)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendTesterMessage(color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pTester])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendAdminMessage(color, admlvl, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pAdmin] >= admlvl)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendMapperMessage(color, admlvl, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pMapper] >= admlvl)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendVIPMessage(color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pVIP] && !VIPOff[i])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock SendHelperMessage(color, admlvl, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pHelper] >= admlvl)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock SendPlayerFactionMessage(playerid, rank, color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pFac] == PlayerInfo[playerid][pFac] && PlayerInfo[i][pFacRank] >= rank)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock Log(sz_fileName[], sz_input[]) {

	new	sz_logEntry[156], i_dateTime[2][3], File: fileHandle = fopen(sz_fileName, io_append);
	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);
	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}

stock AddBan(playerid)
{
 	new string[24];
	new File:ban = fopen("ban.cfg", io_append);
	format(string, sizeof(string), "%s\r\n", RPIP(playerid));
	fwrite(ban, string);
	fclose(ban);
}

stock AddRangeBan(IP[])
{
 	new string[24];
	new File:ban = fopen("ban.cfg", io_append);
	format(string, sizeof(string), "%s\r\n", IP);
	fwrite(ban, string);
	fclose(ban);
}

stock CheckBan(ip[])
{
	new string[20];
    new File: file = fopen("ban.cfg", io_read);
	while(fread(file, string))
	{
	    if (strcmp(ip, string, true, strlen(ip)) == 0)
	    {
	        fclose(file);
	        return 1;
	    }
	}
	fclose(file);
	return 0;
}



fdeleteline(filename[], line)
{
  new count, string[256], File:file, File:temp;

  file= fopen(filename, io_read);
  temp = fopen("tmpfile.tmp", io_write);

  while (fread(file, string))
    if (++count != line)
      fwrite(temp, string);

  fclose(file);
  fclose(temp);

  file= fopen(filename, io_write);
  temp = fopen("tmpfile.tmp", io_read);

  while (fread(temp, string))
    fwrite(file, string);

  fclose(file);
  fclose(temp);
  fremove("tmpfile.tmp");
}

stock IsValidIP(ip[])
{
    new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if (ip[i] == '.')
		{
		    a++;
		}
	}
	if (a != 3)
	{
	    return 1;
	}
	return 0;
}

stock SpawnChar(playerid)
{
    if(IsPlayerLoggedIn(playerid))
	{
	    // Legit Loyalty
	    if(!PlayerInfo[playerid][pLoyal] && PlayerInfo[playerid][pHours] < 24) {PlayerInfo[playerid][pLoyal] = 1;}
	    // Safe Admin
		if(PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pSafeAdmin] && !aDuty[playerid])
		{
		    new string[128];
		    format(string, sizeof(string), "%s (%s) has been flagged as an unsafe admin.", RPN(playerid), RPIP(playerid));
		    Log("logs/safeadmin.log", string);
		    Kick(playerid);
		}
	    // Tutorial
	    TogglePlayerControllable(playerid, 1);
	    // Family Strikes
	    if(PlayerInfo[playerid][pFam])
	    {
	        new idx = PlayerInfo[playerid][pFam];
			if(FamInfo[idx][fStrikes] >= 3)
			{
			    PlayerInfo[playerid][pFam] = 0;
				PlayerInfo[playerid][pFamRank] = 0;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your family has been disbanded due to having 3 strikes, you have been autokicked from the family.");
			}
	    }
	    // Website
	    TextDrawShowForPlayer(playerid, WebTD);
	    //C4
	    PreloadAnimLib(playerid, "BOMBER");
	    PreloadAnimLib(playerid, "PED");
		Pspawned[playerid] = 1;
		//neons
		neon[playerid] = 1;
		topened[playerid] = 0;
		CarHop[playerid] = 0;
		SpeedHack[playerid] = 0;
		sellgunlowmats[playerid] = 0;
		sellgunmedmats[playerid] = 0;
		sellgunhighmats[playerid] = 0;
		blowgun[playerid] = 0;
		fMeter[playerid] = 1;
	    //loginscreen exit
	    TextDrawHideForPlayer(playerid, MainMenuTxtdraw[0]);
	    TextDrawHideForPlayer(playerid, MainMenuTxtdraw[1]);
	    TextDrawHideForPlayer(playerid, MainMenuTxtdraw[2]);
	    TextDrawHideForPlayer(playerid, MainMenuTxtdraw[3]);
	    TextDrawHideForPlayer(playerid, MainMenuTxtdraw[4]);

	    // Time
	    TextDrawShowForPlayer(playerid, TimeTD);
	    // Name Color & Level & Wanted Level
		SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	    SetPlayerColor(playerid, TRANSPARENT_WHITE);
	    SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWanted]);
	    // Download bar
		Download[playerid] = CreateProgressBar(499.00, 103.00, 107.50, 3.20, -16776961, 100.0);
		SetProgressBarMaxValue(Download[playerid], 100);
		SetProgressBarColor(Download[playerid], COLOR_GREEN);
		// Custom Int
		if(PlayerInfo[playerid][pSpawnFreeze])
		{
		    SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
		}
	    // Business, House and Gates Checking
	    if(PlayerInfo[playerid][pBiz] != 0 && strcmp(RPNU(playerid), BizInfo[PlayerInfo[playerid][pBiz]][bOwner]) || PlayerInfo[playerid][pBiz] != 0 && !strlen(BizInfo[PlayerInfo[playerid][pBiz]][bOwner]))
	    {
			PlayerInfo[playerid][pBiz] = 0;
			SendClientMessage(playerid, COLOR_WHITE, " An administrator has sold your business while you were offline.");
	    }
	    if(PlayerInfo[playerid][pHouse] != 0 && strcmp(RPNU(playerid),  HouseInfo[PlayerInfo[playerid][pHouse]][hOwner]) || PlayerInfo[playerid][pHouse] != 0 && !strlen(HouseInfo[PlayerInfo[playerid][pHouse]][hOwner]))
	    {
			PlayerInfo[playerid][pHouse] = 0;
			SendClientMessage(playerid, COLOR_WHITE, " An administrator has sold your house while you were offline.");
	    }
	    new idx; idx = PlayerInfo[playerid][pGate][0]; // Gate slot 1
	    if(idx && !GateInfo[idx][gModel])
	    {
	        PlayerInfo[playerid][pGate][0] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 1 while you were offline.");
	    }
	    idx = PlayerInfo[playerid][pGate][1]; // Gate slot 2
	    if(idx && !GateInfo[idx][gModel])
	    {
	        PlayerInfo[playerid][pGate][1] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 2 while you were offline.");
	    }
	    idx = PlayerInfo[playerid][pGate][2]; // Gate slot 3
	    if(idx && !GateInfo[idx][gModel])
	    {
	        PlayerInfo[playerid][pGate][2] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 3 while you were offline.");
	    }
	    // Spawning
	 	if(PlayerInfo[playerid][pX] == 0 && PlayerInfo[playerid][pY] == 0 && PlayerInfo[playerid][pZ] == 0)
	    {
	        PlayerInfo[playerid][pX] = 958.9146;
	        PlayerInfo[playerid][pY] = -1411.4772;
	        PlayerInfo[playerid][pZ] = 13.3833;
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        SetPlayerPos(playerid, 958.9146,-1411.4772,13.3833); // THE SPAWN D
	        SetPlayerFacingAngle(playerid, 93.3274);
	        SetCameraBehindPlayer(playerid);
	        TogglePlayerSpectating(playerid,0);
	        
	    }
	   else
	    {
		    SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
		    SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
		    // HP and Armor
			if(PlayerInfo[playerid][pHealth] <= 0) PlayerInfo[playerid][pHealth] = 100;
			SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
			SetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
	    }
	    // Skin
	    SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	    // Guns
		for(new i = 0; i < 13; i++)
		{
		    if(PlayerInfo[playerid][pWeapon][i]) GiveDodWeapon(playerid, PlayerInfo[playerid][pWeapon][i], PlayerInfo[playerid][pWeaponAmmo][i]);
		}
		// Hospital
		if(!PlayerInfo[playerid][pPrison])
		{
			if(PlayerInfo[playerid][pHospital])
			{
			    if(eventdeath[playerid] == 1)
			    {
					SetPlayerPos(playerid, eX, eY, eZ);
					SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
					SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
					PlayerInfo[playerid][pHospital] = 0;
					SetPlayerHealth(playerid, eHP);
					SetPlayerArmour(playerid, eARMOR);
					SendClientMessage(playerid, COLOR_LIGHTRED, "*** You have died in the event,beter luck next time. ***");
					GunsBeingRemoved[playerid] = 1;
					ResetPlayerWeapons(playerid);
					GunsBeingRemoved[playerid] = 1;
					for(new w = 0; w < 13; w++)
					{
						GiveDodWeapon(playerid, PlayerInfo[playerid][pWeapon][w], PlayerInfo[playerid][pWeaponAmmo][w]);
					}
					eventdeath[playerid] = 0;
					return 1;
				}
			    if(dueldeath[playerid] == 1)
			    {
					SetPlayerPos(playerid, eX, eY, eZ);
					SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
					SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
					PlayerInfo[playerid][pHospital] = 0;
					SetPlayerHealth(playerid, eHP);
					SetPlayerArmour(playerid, eARMOR);
					SendClientMessage(playerid, COLOR_LIGHTRED, "*** You have died in the duel,beter luck next time. ***");
					GunsBeingRemoved[playerid] = 1;
					ResetPlayerWeapons(playerid);
					GunsBeingRemoved[playerid] = 1;
					for(new w = 0; w < 13; w++)
					{
						GiveDodWeapon(playerid, PlayerInfo[playerid][pWeapon][w], PlayerInfo[playerid][pWeaponAmmo][w]);
					}
					eventdeath[playerid] = 0;
					// playerb
					return 1;
				}
				Hospital[playerid] = random(2);
				if(Hospital[playerid] == 0) // AllSaints
				{

				    SetPlayerPos(playerid, 1177.5485,-1323.5773,11.0761);
				    SetPlayerCameraPos(playerid,1223.2250,-1289.4913,31.9257);
				    SetPlayerCameraLookAt(playerid,1177.5485,-1323.5773,14.0761);
				}
				else if(Hospital[playerid] == 1) // County General
				{
				    SetPlayerPos(playerid, 2034.0833,-1404.6536,14.2539);
				    SetPlayerCameraPos(playerid,1997.1254,-1457.8685,34.8850);
				    SetPlayerCameraLookAt(playerid,2034.0833,-1404.6536,17.2539);
				}
				ResetDodWeapons(playerid);
				PlayerInfo[playerid][pFacDuty] = 0;
				SetPlayerInterior(playerid, 0);
			 	SetPlayerVirtualWorld(playerid, 0);
			    TogglePlayerControllable(playerid, 0);
				HospitalTime[playerid] = 10;
				if(PlayerInfo[playerid][pVIP] >= 2) HospitalTime[playerid] = 1;
				HospitalCountDown[playerid] = SetTimerEx("HospitalTimer", 1000, false, "d", playerid);
				if(DayNoDrops == 1)
				{
		  			for (new i = 0; i < 13; i++)
					{
					    GiveDodWeapon(playerid, DNDW[1][0], 7);
						GiveDodWeapon(playerid, DNDW[2][0], 7);
						GiveDodWeapon(playerid, DNDW[3][0], 7);
						GiveDodWeapon(playerid, DNDW[4][0], 7);
						GiveDodWeapon(playerid, DNDW[5][0], 7);
						GiveDodWeapon(playerid, DNDW[6][0], 7);
						GiveDodWeapon(playerid, DNDW[7][0], 7);
						GiveDodWeapon(playerid, DNDW[8][0], 7);
						GiveDodWeapon(playerid, DNDW[9][0], 7);
						GiveDodWeapon(playerid, DNDW[10][0], 7);
						GiveDodWeapon(playerid, DNDW[11][0], 7);
						GiveDodWeapon(playerid, DNDW[12][0], 7);
					}
				}
			}
		}
		// NYPD Duty
        if(PlayerInfo[playerid][pFacDuty] && PlayerInfo[playerid][pFac] == 1)
        {
	    	SetPlayerColor(playerid, TRANSPARENT_BLUE);
		}
		// NYPD-Prison
		if(PlayerInfo[playerid][pPrison] == 1)
		{
		    ResetDodWeapons(playerid);
		    SetPlayerColor(playerid, TRANSPARENT_ORANGE);
			SetPlayerInterior(playerid, 1);
			new RandomCell = random(sizeof(RandomPrison));
			SetPlayerFacingAngle(playerid, RandomPrison[RandomCell][3]);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			SetPlayerPos(playerid, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
			SetCameraBehindPlayer(playerid);
		}
		// Admin-Prison
		if(PlayerInfo[playerid][pPrison] == 2)
		{
			ResetDodWeapons(playerid);
		    SetPlayerColor(playerid, TRANSPARENT_ORANGE);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 1);
			new RandomCell = random(sizeof(RandomPrison));
			SetPlayerFacingAngle(playerid, RandomPrison[RandomCell][3]);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			SetPlayerPos(playerid, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
			SetCameraBehindPlayer(playerid);
		}
		// Bank Robbery
		if(PlayerInfo[playerid][pFac] == 1 && RobberyStarted)
	    {
	        TextDrawShowForPlayer(playerid, Textdraw0);
			TextDrawShowForPlayer(playerid, Textdraw1);
	    	if(BankRobbersCount == 2) {TextDrawShowForPlayer(playerid, Textdraw2);}
			else if(BankRobbersCount == 3) {TextDrawShowForPlayer(playerid, Textdraw3);}
			else if(BankRobbersCount == 4) {TextDrawShowForPlayer(playerid, Textdraw4);}
			else if(BankRobbersCount == 5) {TextDrawShowForPlayer(playerid, Textdraw5);}
	    }
	    if(PlayerPaintballing[playerid] == 1)
	    {
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
	        GunsBeingRemoved[playerid] = 1;
         	ResetPlayerWeapons(playerid);
         	DestroyPickup(pbHealth);
          	SetPlayerHealth(playerid, 100);
    		SetPlayerArmour(playerid, 100);
		    new rand = random(sizeof(PaintballSpawns));
			SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
   			for (new i = 0; i < 13; i++)
			{
				GiveDodWeapon(playerid, pbGuns[2][0], 99999);
				GiveDodWeapon(playerid, pbGuns[3][0], 99999);
				GiveDodWeapon(playerid, pbGuns[4][0], 99999);
				GiveDodWeapon(playerid, pbGuns[5][0], 99999);
				GiveDodWeapon(playerid, pbGuns[6][0], 99999);
			}
			SetCameraBehindPlayer(playerid);
	    }
	}
	return 1;
}

stock fcreate(filename[])
{
	if (fexist(filename)) return false;
	new File:fhnd;
	fhnd=fopen(filename,io_write);
	if (fhnd) {
		fclose(fhnd);
		return true;
	}
	return false;
}

stock IsAReporter(playerid)
{
	if(PlayerInfo[playerid][pFac] == 4) return 1;
	return 0;
}

stock IsACop(playerid)
{
	if(PlayerInfo[playerid][pFac] == 1) return 1;
	return 0;
}
stock IsAAdmin(playerid)
{
	if(PlayerInfo[playerid][pAdmin] > 1) return 1;
	return 0;
}
stock IsAFlight(playerid)
{
	if(PlayerInfo[playerid][pJob] == 12 && PlayerInfo[playerid][pVIPJob] == 12) return 1;
	return 0;
}
stock IsHitman(playerid)
{
	if(PlayerInfo[playerid][pFac] == 3) return 1;
	return 0;
}

stock IsFBI(playerid)
{
	if(PlayerInfo[playerid][pFac] == 6) return 1;
	return 0;
}
stock IsChief(playerid){
	if(PlayerInfo[playerid][pFac] == 5) return 1;
	return 0;
}
stock IsNG(playerid)
{
	if(PlayerInfo[playerid][pFac] == 7) return 1;
	return 0;
}
stock IsMedic(playerid)
{
	if(PlayerInfo[playerid][pFac] == 5) return 1;
	return 0;
}

stock IsAGov(playerid)
{
	if(PlayerInfo[playerid][pFac] == 2) return 1;
	return 0;
}

stock IsAHitman(playerid)
{
	if(PlayerInfo[playerid][pFac] == 3) return 1;
	return 0;
}

stock RemoveDodWeapon(playerid, weaponid)
{
    GunsBeingRemoved[playerid] = 1;
    ResetPlayerWeapons(playerid);
    GunsBeingRemoved[playerid] = 1;
    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	for(new w = 0; w < 13; w++)
	{
	    GetPlayerWeaponData(playerid, w, TempGuns[w], TempGunsAmmo[w]);
	    if(PlayerInfo[playerid][pWeapon][w] == weaponid)
		{
			PlayerInfo[playerid][pWeapon][w] = 0;
			TempGuns[w] = 0;
			TempGunsAmmo[w] = 0;
		}
	    PlayerInfo[playerid][pWeapon][w] = 0;
	}
	for(new w = 0; w < 13; w++)
	{
	    GiveDodWeapon(playerid, TempGuns[w], TempGunsAmmo[w]);
	}
	return 1;
}

stock SaveDodAmmo(playerid)
{
	for(new i = 0; i < 13; i++)
	{
	    new Guns[2][13];
	    GetPlayerWeaponData(playerid, i, Guns[0][i], Guns[1][i]);
		if(PlayerInfo[playerid][pWeapon][i] == Guns[0][i])
		{
		    PlayerInfo[playerid][pWeaponAmmo][i] = Guns[1][i];
		}
	}
	return 1;
}

stock ResetDodWeapons(playerid)
{
    GunsBeingRemoved[playerid] = 1;
    ResetPlayerWeapons(playerid);
    GunsBeingRemoved[playerid] = 1;
    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	for(new i = 0; i < 13; i++)
	{
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][i] = 0;
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeaponAmmo][i] = 0;
	    GunsBeingRemoved[playerid] = 1;
	}
	GunsBeingRemoved[playerid] = 1;
	return 1;
}

stock GiveDodWeapon(playerid, weaponid, ammo)
{
	GunsBeingRemoved[playerid] = 1;
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	if(weaponid == 0 || weaponid == 1)
	{ // Slot 0
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][0] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 2 || weaponid == 3 || weaponid == 4 || weaponid == 5 || weaponid == 6 || weaponid == 7 || weaponid == 8 || weaponid == 9)
	{ // Slot 1
		GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][1] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 22 || weaponid == 23 || weaponid == 24)
	{ // Slot 2
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][2] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 25 || weaponid == 26 || weaponid == 27)
	{ // Slot 3
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][3] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 28 || weaponid == 29 || weaponid == 32)
	{ // Slot 4
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][4] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 30 || weaponid == 31)
	{ // Slot 5
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][5] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 33 || weaponid == 34)
	{ // Slot 6
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][6] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 35 || weaponid == 36 || weaponid == 37 || weaponid == 38)
	{ // Slot 7
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][7] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 16 || weaponid == 17 || weaponid == 18 || weaponid == 39)
	{ // Slot 8
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][8] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 41 || weaponid == 42 || weaponid == 43)
	{ // Slot 9
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][9] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 10 || weaponid == 11 || weaponid == 12 || weaponid == 13 || weaponid == 14 || weaponid == 15)
	{ // Slot 10
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][10] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 44 || weaponid == 45 || weaponid == 46)
	{ // Slot 11
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][11] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 40)
	{ // Slot 12
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][12] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
}

stock RPFN(playerid)
{
	new facname[32];
	if(PlayerInfo[playerid][pFac] == 0) format(facname, sizeof(facname), "None");
	else if(PlayerInfo[playerid][pFac] == 1) format(facname, sizeof(facname), "NYPD");
	else if(PlayerInfo[playerid][pFac] == 2) format(facname, sizeof(facname), "GOV");
	else if(PlayerInfo[playerid][pFac] == 3) format(facname, sizeof(facname), "HA");
	else if(PlayerInfo[playerid][pFac] == 4) format(facname, sizeof(facname), "News");
	else if(PlayerInfo[playerid][pFac] == 5) format(facname, sizeof(facname), "LSFMD");
	else if(PlayerInfo[playerid][pFac] == 6) format(facname, sizeof(facname), "FBI");
	else if(PlayerInfo[playerid][pFac] == 7) format(facname, sizeof(facname), "NG");
	return facname;
}

stock RPFNEx(playerid)
{
	new facname[32];
	if(PlayerInfo[playerid][pFac] == 0) format(facname, sizeof(facname), "None");
	else if(PlayerInfo[playerid][pFac] == 1) format(facname, sizeof(facname), "Los Santos Police Department");
	else if(PlayerInfo[playerid][pFac] == 2) format(facname, sizeof(facname), "Government");
	else if(PlayerInfo[playerid][pFac] == 3) format(facname, sizeof(facname), "Hitman Agency");
	else if(PlayerInfo[playerid][pFac] == 4) format(facname, sizeof(facname), "Los Santos News Agency");
	else if(PlayerInfo[playerid][pFac] == 5) format(facname, sizeof(facname), "Los Santos Fire & Medic Department");
	else if(PlayerInfo[playerid][pFac] == 6) format(facname, sizeof(facname), "Federal Bureau Of Investigation");
	else if(PlayerInfo[playerid][pFac] == 7) format(facname, sizeof(facname), "National Guards");
	return facname;
}

stock RPFaRN(playerid)
{
	new rankname[32];
	if(PlayerInfo[playerid][pFamRank] == 0 && PlayerInfo[playerid][pFam] == 0) format(rankname, sizeof(rankname), "None");
	else if(PlayerInfo[playerid][pFam])
	{
		if(PlayerInfo[playerid][pFamRank] == 1) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank1]);
		else if(PlayerInfo[playerid][pFamRank] == 2) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank2]);
		else if(PlayerInfo[playerid][pFamRank] == 3) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank3]);
		else if(PlayerInfo[playerid][pFamRank] == 4) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank4]);
		else if(PlayerInfo[playerid][pFamRank] == 5) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank5]);
		else if(PlayerInfo[playerid][pFamRank] == 6) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank6]);
	}
	return rankname;
}

stock RPFaN(playerid)
{
    new famname[32];
    if(!PlayerInfo[playerid][pFam]) format(famname, sizeof(famname), "None");
    else format(famname, sizeof(famname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fName]);
    return famname;
}

stock RFaN(idx)
{
    new famname[32];
    if(!idx) format(famname, sizeof(famname), "None");
    else format(famname, sizeof(famname), "%s", FamInfo[idx][fName]);
    return famname;
}

stock RPFRN(playerid)
{
	new rankname[32];
	if(PlayerInfo[playerid][pFacRank] == 0 && PlayerInfo[playerid][pFac] == 0) format(rankname, sizeof(rankname), "Civilian");
	else if(PlayerInfo[playerid][pFac])
	{
		if(PlayerInfo[playerid][pFacRank] == 0) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank0]);
		else if(PlayerInfo[playerid][pFacRank] == 1) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank1]);
		else if(PlayerInfo[playerid][pFacRank] == 2) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank2]);
		else if(PlayerInfo[playerid][pFacRank] == 3) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank3]);
		else if(PlayerInfo[playerid][pFacRank] == 4) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank4]);
		else if(PlayerInfo[playerid][pFacRank] == 5) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank5]);
		else if(PlayerInfo[playerid][pFacRank] == 6) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank6]);
	}
	return rankname;
}

stock RPFL(playerid)
{
	new leader[4];
	if(PlayerInfo[playerid][pFacLeader] == 0) format(leader, sizeof(leader), "No");
	else if(PlayerInfo[playerid][pFacLeader] == 1) format(leader, sizeof(leader), "Yes");
	return leader;
}

stock RPFDN(playerid)
{
	new divname[8];
	if(PlayerInfo[playerid][pFac] == 1)
	{
		if(PlayerInfo[playerid][pFacDiv] == 1) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv1]);
		else if(PlayerInfo[playerid][pFacDiv] == 2) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv2]);
		else if(PlayerInfo[playerid][pFacDiv] == 3) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv3]);
		else if(PlayerInfo[playerid][pFacDiv] == 4) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv4]);
	}
	if(PlayerInfo[playerid][pFacDiv] == 0) format(divname, sizeof(divname), "None");
	return divname;
}



stock RPFDL(playerid)
{
	new leader[4];
	if(PlayerInfo[playerid][pFacDivLeader] == 0) format(leader, sizeof(leader), "No");
	else format(leader, sizeof(leader), "Yes");
	return leader;
}


stock IsHoldingFirearm(playerid)
{
	if(GetPlayerWeapon(playerid) < 16) return 0;
	if(GetPlayerWeapon(playerid) > 40) return 0;
	return 1;
}



stock TogglePlayerTazed(playerid, status)
{
	Tazed[playerid] = status;
	return 1;
}
stock IsPlayerTazed(playerid)
{
	if(!Tazed[playerid]) return 0;
	if(Tazed[playerid]) return 1;
	return 1;
}

stock TogglePlayerTied(playerid, status)
{
	Tied[playerid] = status;
	return 1;
}
stock IsPlayerTied(playerid)
{
	if(!Tied[playerid]) return 0;
	if(Tied[playerid]) return 1;
	return 1;
}

stock TogglePlayerCuffed(playerid, status)
{
	Cuffed[playerid] = status;
	return 1;
}
stock IsPlayerCuffed(playerid)
{
	if(!Cuffed[playerid]) return 0;
	if(Cuffed[playerid]) return 1;
	return 1;
}

// TIMERS
forward LoyalFeatures();
public LoyalFeatures()
{
	if(LHealth) LHealth --;
	if(LFix) LFix --;
	if(LRefill) LRefill --;
	return 1;
}

forward FishingTime(playerid);
public FishingTime(playerid)
{
    FishTime[playerid] --;
    if(FishTime[playerid] < 0)
    {
        FishTime[playerid] = 0;
    }
	if(FishTime[playerid] > 0)
	{
		SetTimerEx("FishingTime", 1000, false, "i", playerid);
	}

	return 1;
}

forward BankVaultTimer();
public BankVaultTimer()
{
	//CfreateExplosion(2242.0234,1632.7185,961.7531, 11, 5);
	DestroyDynamicObject(BankC4);
	MoveDynamicObject(BankVault, 2241.946044, 1629.377319, 960.893493, 100, 89.799987, -18.700002, 10.300001);
	SendRobberyMessage(COLOR_LIGHTRED, "** The bank vault has been exploded, money will be loaded in 5 minutes **");
	SendRobberyMessage(COLOR_LIGHTRED, "** If you exit the bank before the money is loaded you will fail the robbery **");
	SendRobberyMessage(COLOR_LIGHTRED, "** You will be informed when the money is fully loaded and ready to be delivered **");
	SendCopMessage(COLOR_BLUE, "LS Bank: Robbers have loaded money and are on their way out of the bank, stop them!");
	SetTimer("BankVaultLoaded", 300000, false);
	return 1;
}

forward BankVaultLoaded();
public BankVaultLoaded()
{
    SendRobberyMessage(COLOR_LIGHTRED, "** The money is loaded successfully, go and deliver it to the checkpoint **");
	foreach(Player, playerid)
	{
	    if(BankRobber[playerid])
	    {
	        DeliverMoney[playerid] = 1;
	        SetPlayerCheckpoint(playerid, -2227.4868,2327.0056,7.5469, 10);
	    }
	}
	BankBlock = 0;
	MoveDynamicObject(BankVault, 2242.202148, 1631.861694, 961.833129, 100, 0.000000, 0.000000, 9.799999);
	return 1;
}
forward FalseBanFix(playerid);
public FalseBanFix(playerid)
{
    FalseBan[playerid] = 1;
	return 1;
}

forward RefillTimer(playerid);
public RefillTimer(playerid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective, string[128];
	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || engine)
	{
	    GiveDodMoney(playerid, -(Refill[playerid]*2));
	    format(string, sizeof(string), "* %s has stopped refilling their vehicle.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have refilled your vehicle for $%d.", (Refill[playerid]*2));
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    if(PointInfo[5][pOwner])
	    {
			new idx = PointInfo[5][pOwner];
			FamInfo[idx][fMoney] += Refill[playerid]*2;
			PointInfo[5][pProfit] += Refill[playerid]*2;
	    }
	    Refill[playerid] = 0;
	    return 1;
	}
	new veh = GetPlayerVehicleID(playerid);
	Refill[playerid] ++;
	Fuel[veh] ++;
	if(Fuel[veh] >= 100 || PlayerInfo[playerid][pMoney]-2 <= (Refill[playerid]*2))
	{
	    GiveDodMoney(playerid, -(Refill[playerid]*2));
	    format(string, sizeof(string), "* %s has stopped refilling their vehicle.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have refilled your vehicle for $%d.", (Refill[playerid]*2));
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    	if(PointInfo[5][pOwner])
	    {
			new idx = PointInfo[5][pOwner];
			FamInfo[idx][fMoney] += Refill[playerid]*2;
			PointInfo[5][pProfit] += Refill[playerid]*2;
	    }
	    Refill[playerid] = 0;
	    return 1;
	}
	if(Fuel[veh] < 100)
	{
	    SetTimerEx("RefillTimer", 1000, false, "i", playerid);
	}
	return 1;
}

forward FuelTimer();
public FuelTimer()
{
	for(new vehid=0; vehid < MAX_VEHICLES; vehid++)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(engine && Fuel[vehid])
		{
		    FuelVar[vehid] ++;
		    if(GetVehicleSpeed(vehid, 0) != 0 && FuelVar[vehid] >= 72/2)
		    {
		        FuelVar[vehid] = 0;
				Fuel[vehid] --;
			}
			else if(GetVehicleSpeed(vehid, 0) == 0 && FuelVar[vehid] >= 108/2)
		    {
		        FuelVar[vehid] = 0;
				Fuel[vehid] --;
			}
		}
	}
	return 1;
}

forward AltTabTimer();
public AltTabTimer()
{
    foreach(Player, i)
    {
        if(IsPlayerLoggedIn(i))
		{
		    // AFK Detection
			GetPlayerPos(i, NewPos[i][0], NewPos[i][1], NewPos[i][2]);
			if(IsPlayerInRangeOfPoint(i, 3, OldPos[i][0], OldPos[i][1], OldPos[i][2])) {AFK[i] ++;} else {AFK[i] = 0;}
			GetPlayerPos(i, OldPos[i][0], OldPos[i][1], OldPos[i][2]);
			if(AFK[i] >= 600)
			{
			    if(!IsAFK[i])
			    {
					IsAFK[i] = 1;
					SendClientMessage(i, COLOR_LIGHTBLUE, " You have been standing in the same area for 10 minutes, you have been marked as AFK.");
					LoopingAnim(i,"BEACH", "ParkSit_M_loop", 4.0,1,0,0,0,0);
                    /*AFKText[i] = Create3DTextLabel("AFK", COLOR_CYAN, 0, 0, -20, 25, -1, 1);
			    	Attach3DTextLabelToPlayer(AFKText[i], i, 0, 0, 0.35);*/
			    	//AFKText[i] = CreateDynamic3DTextLabel("AFK", COLOR_CYAN, 0, 0, -20, 25, i);
			    	//Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL,AFKText[i] , E_STREAMER_ATTACH_OFFSET_Z, 0.35);
				}
			}
			else if(AFK[i] == 0)
			{
				if(IsAFK[i])
				{
					IsAFK[i] = 0;
					SendClientMessage(i, COLOR_LIGHTBLUE, " You have moved from your AFK area, you are not marked as AFK anymore.");
                    //Delete3DTextLabel(AFKText[i]);
                    if(IsValidDynamic3DTextLabel(AFKText[i])) DestroyDynamic3DTextLabel(AFKText[i]);
				}
			}
		    // Alt-Tab Detection
		    AltTabbed[i] ++;
		    if(AltTabbed[i] < 2)
			{
				if(HasText[i])
				{
				    HasText[i] = 0;
					//Delete3DTextLabel(AltTabText[i]);
					if(IsValidDynamic3DTextLabel(AltTabText[i])) DestroyDynamic3DTextLabel(AltTabText[i]);
				}
			}
		    if(AltTabbed[i] > 2) {Tabbed[i] = 1;}
		    else Tabbed[i] = 0;
			if(Tabbed[i])
			{
			    if(!HasText[i])
			    {
			    	HasText[i] = 1;
			    	/*AltTabText[i] = Create3DTextLabel("Alt Tabbed", COLOR_RED, 0, 0, -20, 25, -1, 1);
			    	Attach3DTextLabelToPlayer(AltTabText[i], i, 0, 0, 0.3);*/
			    //	AltTabText[i] = CreateDynamic3DTextLabel("Alt Tabbed", COLOR_RED, 0, 0, -20, 25, i);
			    //Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, AltTabText[i] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
			    }
				/*if(Event[i])
				{
				    new string[128];
					format(string, sizeof(string), "AdmWarn: %s is alt-tabbed inside the event.", RPN(i));
				    SendAdminMessage(COLOR_DARKRED, 1, string);
			    }*/
			}
		}
	}
	return 1;
}
forward AntiTPHacks(playerid);
public AntiTPHacks(playerid)
{
	AntiTP[playerid] = 0;
	return 1;
}
forward CapturePoint(playerid, idx);
public CapturePoint(playerid, idx)
{
	new Float:Cap[3], string[128];
	GetPlayerPos(playerid, Cap[0], Cap[1], Cap[2]);
	if(Cap[0] == Capture[0] && Cap[1] == Capture[1] && Cap[2] == Capture[2])
	{
	    format(string, sizeof(string), "%s has attempted to capture the %s for %s, it will be theirs in 10 minutes.", RPN(playerid), PointInfo[idx][pName], RPFaN(playerid));
	    SendClientMessageToAll(COLOR_YELLOW, string);
	    Capturing = 0;
	    PointInfo[idx][pOwner] = 0;
	    KillTimer(PointTimer);
	    Capturer = playerid;
	    CapturerFam = idx;
	    PointTimer = SetTimerEx("FinalCapture", 600000, false, "dd", Capturer, CapturerFam);
	}
	else
	{
		Capturing = 0;
		SendClientMessage(playerid, COLOR_GREY, "You have moved from your position and failed to capture the point.");
	}
	return 1;
}

forward FinalCapture(playerid, idx);
public FinalCapture(playerid, idx)
{
	new string[128];
	format(string, sizeof(string), "%s has successfully captured the %s for %s.", RPN(playerid), PointInfo[idx][pName], RPFaN(playerid));
	SendClientMessageToAll(COLOR_YELLOW, string);
	Capturer = -1;
 	CapturerFam = -1;
	PointInfo[idx][pTime] = 24;
	PointInfo[idx][pOwner] = PlayerInfo[playerid][pFam];
	DestroyDynamicPickup(PointInfo[idx][pPickup]);
	DestroyDynamic3DTextLabel(PointInfo[idx][pText]);
	SavePoints();
	return 1;
}

forward DayOver();
public DayOver()
{
	//new string[80];
    //format(string, sizeof(string), "%s has just ended.", SPDN());
	//SendClientMessageToAll(COLOR_LIGHTRED, string);
	DayNoDrops = 0;
	DayRespect = 0;
	DayPaycheck = 0;
	DayNoPD = 0;
	DayNoShops = 0;
	DayNoJobs = 0;
	SendRconCommand("hostname Intense Role-Play [www.intenseroleplay.tk]");
	return 1;
}
forward PayCheckDone();
public PayCheckDone()
{
    PayChecks = 0;
	return 1;
}
forward HealthHackCheck(playerid, giveplayerid);
public HealthHackCheck(playerid, giveplayerid)
{
	new string[128];
 	if(giveplayerid == INVALID_PLAYER_ID)
    {
        SendClientMessage(playerid, COLOR_GREY, "Player has logged off, causing the health hacks check to be cancelled.");
        HHcheckUsed = 0;
        return 1;
    }
    if(!IsPlayerInRangeOfPoint(giveplayerid,20,-1400.994873, 106.899650, 1032.273437))
    {
        SendClientMessage(playerid, COLOR_GREY, "Player is either desynced, lagging or using NOP SetPlayerPos hacks, the health hacks check has been cancelled.");

		SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
		SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

        HHcheckUsed = 0;
		return 1;
    }

    new Float:health;
    GetPlayerHealth(giveplayerid, health);
    if(health == 100)
	{
	    format(string, sizeof(string), "HealthHackWarn: (POSITIVE) %s may be health hacking.", RPN(giveplayerid));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
    }
    else
	{
		format(string, sizeof(string), "HealthHackWarn: (NEGATIVE) %s is not health hacking.", RPN(giveplayerid));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
    }

	SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
	SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
	SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
	SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
	SetCameraBehindPlayer(giveplayerid);
	SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 	SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  	for(new i = 0; i < 6; i++)
	{
		HHcheckFloats[giveplayerid][i] = 0;
	}
	HHcheckVW[giveplayerid] = 0;
	HHcheckInt[giveplayerid] = 0;

    HHcheckUsed = 0;
    return 1;
}

forward WeaponCheat();
public WeaponCheat()
{
	foreach(Player, playerid)
	{
		// Weapon Anticheat
	    if(IsPlayerLoggedIn(playerid) && !GunsBeingRemoved[playerid] && FalseBan[playerid])
	    {
		    if(GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][0] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][1] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][2] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][3] &&
			GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][4] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][5] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][6] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][7] &&
			GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][8] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][9] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][10] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][11] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][12] &&
			GetPlayerWeapon(playerid) != EventWep[0] && GetPlayerWeapon(playerid) != EventWep[1] && GetPlayerWeapon(playerid) != EventWep[2])
		    {
		        if(GetPlayerState(playerid) != PLAYER_STATE_EXIT_VEHICLE || GetPlayerState(playerid) != PLAYER_STATE_ENTER_VEHICLE_DRIVER || GetPlayerState(playerid) != PLAYER_STATE_ENTER_VEHICLE_PASSENGER)
		        {
		            if(GetPlayerWeapon(playerid) != 46)
		            {
				        new string[128];
		                format(string, sizeof(string), "AdmWarn: %s has been AUTO-VIEW-CHANGED by MOLE, reason: Possible Weapon Hacks (%s)", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
						SendAdminMessage(COLOR_DARKRED, 1, string);
		                /*Log("logs/ban.log", string);
						new file[32];
						format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
						format(string, sizeof(string), "Weapon Hacks (%s)", RWN(GetPlayerWeapon(playerid)));
						dini_Set(file, "Cash", string);
						dini_Set(file, "BannedBy", "AutoBan");
						PlayerInfo[playerid][pBanned] = 1;
						AddBan(playerid);*/
						SetPlayerVirtualWorld(playerid, 5);
						/*SetTimerEx("kickbug", 5000, false, "i", playerid);*/
					}
				}
		    }
	    }
	    if(GunsBeingRemoved[playerid]) GunsBeingRemoved[playerid] = 0;
	}
	return 1;
}
forward SaveServer();
public SaveServer()
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i))
		{
		    SaveChar(i);
		}
	}
	SaveFactions();
	SaveFamilies();
	SavePoints();
	SaveBiz();
	SaveHouses();
	SaveDoors();
    SaveObjects();
    SaveObjects22();
	SaveGates();
	SaveMapIcons();
	SaveArrestPoint();
	SaveDrugs();
	SaveMOTDS();
	return 1;
}
forward DrugTimer(playerid);
public DrugTimer(playerid)
{
	DrugTimeout[playerid] = 0;
	return 1;
}
forward Stoned(playerid);
public Stoned(playerid)
{
	SetPlayerWeather(playerid, 1);
	PlayerInfo[playerid][pStoned] = 0;
}
forward Tut1(playerid);
public Tut1(playerid)
{
	for(new i=0; i<103; i++)
	{
	    SendClientMessage(playerid,COLOR_WHITE, "");
	}
	TextDrawShowForPlayer(playerid, TutorialTD);
    //cmd_hangup(playerid, params);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 94375);
    TogglePlayerControllable(playerid, 0);
    SetPlayerCameraPos(playerid, 1668.9432,-1458.1198,120.6119);
    SetPlayerCameraLookAt(playerid,1586.5640,-1281.9943,120.6119);
    SetPlayerPos(playerid,1582.0026,-1274.0721,119.7132);
	SendClientMessage(playerid, COLOR_ORANGE, "Introduction to Intense Role-Play - Part One");
	SendClientMessage(playerid, COLOR_WHITE, "This is a role-play server, which means you have to act as you would in real life, depending on who you're role-playing.");
	SendClientMessage(playerid, COLOR_WHITE, "Please pay attention to avoid asking questions later on.");
	Tut[playerid] = SetTimerEx("Tut2", 12000, false, "i", playerid);
	return 1;
}
forward Tut2(playerid);
public Tut2(playerid)
{
	for(new i=0; i<103; i++)
	{
	    SendClientMessage(playerid,COLOR_WHITE, "");
	}
    /*InterpolateCameraPos(playerid, 1668.9432,-1458.1198,120.6119, 1506.6499,-1675.8396,41.2007, 3000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, 1586.5640,-1281.9943,120.6119, 1554.6344,-1675.5366,16.1953, 3000, CAMERA_MOVE);*/
	SetPlayerCameraPos(playerid,2324.685303, -2340.955078, 15.422848);
	SetPlayerCameraLookAt(playerid, 2325.380859, -2309.979248, 14.838473);
	SetPlayerPos(playerid,2324.685303, -2340.955078, 0.0000);
    SendClientMessage(playerid, COLOR_ORANGE, "Procedure to earn cash - Part Two");
    SendClientMessage(playerid, COLOR_WHITE, "There are many jobs located around Los Santos, these are represented by yellow dots/information icons.");
    SendClientMessage(playerid, COLOR_WHITE, "Jobs can be a good source of income.");
    SendClientMessage(playerid, COLOR_WHITE, "You can also do side-jobs in your spare time such as Fishing by the pier.");
    SendClientMessage(playerid, COLOR_WHITE, "You can also withdraw (/withdraw) and deposit (/deposit) your cash in the city Bank of Los Santos.");
	Tut[playerid] = SetTimerEx("Tut3", 16000, false, "i", playerid);
	return 1;
}
forward Tut3(playerid);
public Tut3(playerid)
{
	for(new i=0; i<103; i++)
	{
	    SendClientMessage(playerid,COLOR_WHITE, "");
	}
    //InterpolateCameraPos(playerid, 1506.6499,-1675.8396,41.2007, 2072.5891,-1928.0503,13.3052, 3000, CAMERA_MOVE);
    //InterpolateCameraLookAt(playerid, 1554.6344,-1675.5366,16.1953, 2072.5891,-1928.0503,13.3052, 3000, CAMERA_MOVE);
	SetPlayerCameraPos(playerid,1508.442627, -1614.123291, 14.966317);
	SetPlayerCameraLookAt(playerid, 1540.993042, -1641.426758, 19.695374);
	SetPlayerPos(playerid,1508.442627, -1614.123291, 0.0000);
    SendClientMessage(playerid, COLOR_ORANGE, "Public Services & Laws - Part Three");
    SendClientMessage(playerid, COLOR_WHITE, "We have a total of six factions. We will introduce one of them.");
    SendClientMessage(playerid, COLOR_WHITE, "This is the Los Santos Police Department. If you cause trouble you'll be either wasted or imprisoned.");
    SendClientMessage(playerid, COLOR_WHITE, "If you wish to be a part of Los Santos Police Department, contact the Chief of Police or any other high commands.");
    SendClientMessage(playerid, COLOR_WHITE, "Attacked? In trouble? Contact 911 as soon as possible. (/call 911)");
    SendClientMessage(playerid, COLOR_WHITE, "If you wish to apply for any other faction, then visit our forums www.intenseroleplay.tk");
	Tut[playerid] = SetTimerEx("Tut4", 16000, false, "i", playerid);
	return 1;
}
forward Tut4(playerid);
public Tut4(playerid)
{
	for(new i=0; i<103; i++)
	{
	    SendClientMessage(playerid,COLOR_WHITE, "");
	}
    /*InterpolateCameraPos(playerid, 1444.9666,-1709.8527,42.3163, 2441.1738,-1698.3149,31.4247, 3000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, 1483.7808,-1762.6996,18.7958, 2507.3250,-1648.5522,13.8510, 3000, CAMERA_MOVE);*/
	SetPlayerCameraPos(playerid,1404.699707, -1351.813965, 18.349072);
	SetPlayerCameraLookAt(playerid, 1424.194946, -1318.100342, 12.749156);
	SetPlayerPos(playerid,1404.699707, -1351.813965, 0.0000);
    SendClientMessage(playerid, COLOR_ORANGE, "Rules & Regulations");
    SendClientMessage(playerid, COLOR_WHITE, "Death-matching is forbidden - don't kill anyone without any valid role-play reason.");
    SendClientMessage(playerid, COLOR_WHITE, "Driver-Drive-By isn't allowed - don't use weapons while sitting in/on a vehicle. However, passengers may drive-by.");
    SendClientMessage(playerid, COLOR_WHITE, "Car-parking is forbidden - you're not suppose to park vehicles to kill a person.");
    SendClientMessage(playerid, COLOR_WHITE, "Forcing to avoid arrest/death is also not allowed.");
    SendClientMessage(playerid, COLOR_WHITE, "Money-Farming/Server Advertising and Hacking will result into a straight ban.");
	Tut[playerid] = SetTimerEx("Tut5", 16000, false, "i", playerid);
	return 1;
}
forward Tut5(playerid);
public Tut5(playerid)
{
	for(new i=0; i<103; i++)
	{
	    SendClientMessage(playerid,COLOR_WHITE, "");
	}
    /*InterpolateCameraPos(playerid, 2441.1738,-1698.3149,31.4247, 1733.3695,2300.4736,28.1169, 3000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid,2507.3250,-1648.5522,13.8510, 1677.3669,2340.1497,9.8972, 3000, CAMERA_MOVE);*/
	SetPlayerCameraPos(playerid,1303.166504, -925.366211, 46.389950);
	SetPlayerCameraLookAt(playerid, 1352.937622, -852.624817, 49.568592);
	SetPlayerPos(playerid,1303.166504, -925.366211, 0.0000);
    SendClientMessage(playerid, COLOR_ORANGE, "Businesses - Part Four");
    SendClientMessage(playerid, COLOR_WHITE, "We've a total of six types of businesses that can be owned by players. We will introduce one of them.");
    SendClientMessage(playerid, COLOR_WHITE, "A 24/7 store where you can purchase items from. Such as Cellphones, Walkie-Talkies etc.");
    SendClientMessage(playerid, COLOR_WHITE, "Normal players can own one business at a time whereas VIP's can own two businesses.");
    SendClientMessage(playerid, COLOR_WHITE, "In order to get a business, contact an administrator to create you one or find a business which is owned by The State.");
	Tut[playerid] = SetTimerEx("Tut6", 18000, false, "i", playerid);
	return 1;
}
forward Tut6(playerid);
public Tut6(playerid)
{
	for(new i=0; i<103; i++)
	{
	    SendClientMessage(playerid,COLOR_WHITE, "");
	}
    /*InterpolateCameraPos(playerid, 2441.1738,-1698.3149,31.4247, 1733.3695,2300.4736,28.1169, 3000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid,2507.3250,-1648.5522,13.8510, 1677.3669,2340.1497,9.8972, 3000, CAMERA_MOVE);*/
	SetPlayerCameraPos(playerid, 1470.760, -892.135, 59.225);
	SetPlayerCameraLookAt(playerid, 1470.164, -895.571, 58.015);
	SetPlayerPos(playerid, 1470.164, -895.571, -5.015);
    SendClientMessage(playerid, COLOR_ORANGE, "Housing System - Part Five");
    SendClientMessage(playerid, COLOR_WHITE, "We've dyanmic houses which have a total of tweleve levels.");
    SendClientMessage(playerid, COLOR_WHITE, "There is a wide variety of houses across the state of Los Santos that players can purchase.");
	SendClientMessage(playerid, COLOR_WHITE, "If you own a house, you'll be able to store stuff in your house's safe. You can store drugs, materials, cash and weapons.");
    SendClientMessage(playerid, COLOR_WHITE, "Normal players can purchase one house whereas VIP's can purchase up to two houses.");
    SendClientMessage(playerid, COLOR_WHITE, "You can get a house by finding an unowned house that is owned by The State or contact an administrator to create you one.");
	Tut[playerid] = SetTimerEx("TutFinal", 18000, false, "i", playerid);
	return 1;
}
forward TutFinal(playerid);
public TutFinal(playerid)
{
	for(new i=0; i<103; i++)
	{
	    SendClientMessage(playerid,COLOR_WHITE, "");
	}
    SendClientMessage(playerid, COLOR_ORANGE, "End of the Tutorial");
    SendClientMessage(playerid, COLOR_WHITE, "This is the end of the tutorial.");
	SendClientMessage(playerid, COLOR_WHITE, "Hopefully, you'll understand these system more thoroughly after the tutorial.");
	SendClientMessage(playerid, COLOR_WHITE, "Remember, if you have any questions, use /newbie or /helpme.");
	SendClientMessage(playerid, COLOR_WHITE, "You can also type /help for a list of commands.");
	PlayerInfo[playerid][pTutorial] = 1;
 	SpawnChar(playerid);
	TogglePlayerControllable(playerid, 1);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	TextDrawHideForPlayer(playerid, TutorialTD);
	// Starter Package
	PlayerInfo[playerid][pNew] = 1;
	PlayerInfo[playerid][pModel] = 299;
	SetPlayerSkin(playerid, 299);
	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
	
	return 1;
}

forward FreeTimer(playerid);
public FreeTimer(playerid)
{
	FreeTimeout[playerid] --;
	if(FreeTimeout[playerid] > 0)
	{
	    SetTimerEx("FreeTimer", 1000, false, "i", playerid);
	}
	return 1;
}

forward DefendTimer(playerid);
public DefendTimer(playerid)
{
	DefendTimeout[playerid] --;
	if(DefendTimeout[playerid] > 0)
	{
	    SetTimerEx("DefendTimer", 1000, false, "i", playerid);
	}
	return 1;
}

forward NOPSetPlayerPos();
public NOPSetPlayerPos()
{
    // NOP Vehicle Cheat
    foreach(Player, playerid)
    {
	    if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)
		{
		    if(IsLeoVehicle(GetPlayerVehicleID(playerid)) && PlayerInfo[playerid][pFac] != 1 || IsTruckerVehicle(GetPlayerVehicleID(playerid)) && PlayerInfo[playerid][pJob] != JOB_TRUCKER)
		    {
			    new string[128];
			    format(string, sizeof(string), "AdmWarn: %s is either desynced or using NOP hacks. (Driving Restricted Vehicle)", RPN(playerid));
			    SendAdminMessage(COLOR_DARKRED, 1, string);
			    RemovePlayerFromVehicle(playerid);
		    }
		}
	}
	return 1;
}

forward ADTimer();
public ADTimer()
{
	if(!LastAd)
	{
		for(new i=0; i<MAX_ADS; i++)
		{
		    if(strlen(AD[i]) > 0 && !LastAd)
			{
			    new string[128];
				SendClientMessageToAll(COLOR_GREEN, AD[i]);
				if(AdQueue > 0) AdQueue --;
		    	LastAd = TIMER_AD;
		    	// LastAds
		    	new File: file = fopen("logs/advertisements.log", io_append);
                if(!dini_Exists("logs/advertisements.log")) dini_Create("logs/advertisements.log");
				format(string, sizeof(string), "%s\r\n", AD[i]);
				fwrite(file, string);
				fclose(file);
		    	// End of LastAds
		    	foreach(Player, p)
		    	{
		    		if(strfind(AD[i], RPN(p)) != -1)
		    		{
		    		    HasAD[p] = 0;
		    		    SendClientMessage(p, COLOR_LIGHTBLUE, " You can now submit another advertisement.");
		    		}
		    	}
		    	format(AD[i], 128, "");
			}
		}
	}
	if(LastAd > 0) LastAd--;
	return 1;
}

forward Clock();
public Clock()
{
    new string[128];
	gettime(thour, tmin, tsec);
	new Day, Month, Year;
	getdate(Year, Month, Day);
	//clock fixes-Fox
	new clockfix[4];
	if(tsec < 10) format(clockfix, sizeof(clockfix), "0%d", tsec);
	else if(tsec >= 10) format(clockfix, sizeof(clockfix), "%d", tsec);
	new minfix[4];
	if(tmin < 10) format(minfix, sizeof(minfix), "0%d", tmin);
	else if(tmin >= 10) format(minfix, sizeof(minfix), "%d", tmin);
	new hourfix[4];
	if(thour < 10) format(hourfix, sizeof(hourfix), "0%d", thour);
	else if(thour >= 10) format(hourfix, sizeof(hourfix), "%d", thour);
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        if(!IsAFK[i])
	        {
	            PlayerInfo[i][pDay] = Day;
				Seconds[i] ++;
				if(Seconds[i] == 60)
				{
				    Seconds[i] = 0;
				    PlayerInfo[i][pMinutes] ++;
				    PlayerInfo[i][pTMinutes] ++;
				    if(PlayerInfo[i][pVIPTemp])
				    {
				    	PlayerInfo[i][pVIPTemp] --;
				    	if(PlayerInfo[i][pVIPTemp] <= 0)
				    	{
				    	    PlayerInfo[i][pVIP] = 0;
				    	    PlayerInfo[i][pVIPDay] = 0;
				    	    PlayerInfo[i][pVIPMonth] = 0;
				    	    PlayerInfo[i][pVIPHour] = 0;
				    	    PlayerInfo[i][pVIPTemp] = 0;
							format(string, sizeof(string), "AdmWarn: %s's temporary Bronze VIP package has expired.", RPN(i));
							SendAdminMessage(COLOR_DARKRED, 1, string);
							Log("logs/makevip.log", string);
							SendClientMessage(i, COLOR_LIGHTBLUE, " Your temporary Bronze VIP package has expired.");
				    	}
					}
				}
				if(PlayerInfo[i][pVIP])
			    {
			        if(Day >= PlayerInfo[i][pVIPDay] && Month >= PlayerInfo[i][pVIPMonth] && !PlayerInfo[i][pVIPTemp])
			        {
						format(string, sizeof(string), "AdmWarn: %s's %s VIP package has expired.", RPN(i), RPVIPN(i));
						SendAdminMessage(COLOR_DARKRED, 1, string);
						Log("logs/makevip.log", string);
						format(string, sizeof(string), " Your %s VIP package has expired.", RPVIPN(i));
						SendClientMessage(i, COLOR_LIGHTBLUE, string);
						PlayerInfo[i][pVIP] = 0;
			    	    PlayerInfo[i][pVIPDay] = 0;
			    	    PlayerInfo[i][pVIPMonth] = 0;
			    	    PlayerInfo[i][pVIPHour] = 0;
			    	    PlayerInfo[i][pVIPTemp] = 0;
			        }
			    }
			}
	    }
	}
	// Paycheck
	if(tmin == 0 && tsec <= 4 && PayChecks == 0)
	{
	    SetWorldTime(thour);
		Paycheck();
		// Points
		for(new idx = 0; idx<MAX_POINTS; idx++)
	    {
	    	PointBC[idx] = 0;
	    }
	/*	for(new idx = 0; idx < MAX_POINTS; idx++)
		{
			if(PointInfo[idx][pTime]) PointInfo[idx][pTime] --;
			if(!PointInfo[idx][pTime] && !PointBC[idx])
			{
			    PointInfo[idx][pOwner] = 0;
			    PointInfo[idx][pProfit] = 0;
			    format(string, sizeof(string), "The {00FF00}%s {FF6347}is available to be captured.", PointInfo[idx][pName]);
			    SendClientMessageToAll(COLOR_LIGHTRED, string);
			    DestroyDynamicPickup(PointInfo[idx][pPickup]);
			    DestroyDynamic3DTextLabel(PointInfo[idx][pText]);
		    	PointInfo[idx][pText] = CreateDynamic3DTextLabel("Point\n/capture", COLOR_WHITE, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]+0.3, 15);

			}
	    }*/
	}
	return 1;
}

forward EnterExitTimer(playerid);
public EnterExitTimer(playerid)
{
    TogglePlayerControllable(playerid, 1);
	return 1;
}

forward pollend(playerid);
public pollend(playerid)
{
	new string[128];
    format(string, sizeof(string), "The Poll has ended, {FFFFFF}%d{FF6347} people voted {FFFFFF}No{FF6347}, {FFFFFF}%d{FF6347} people voted {FFFFFF}Yes{FF6347}.", PollN, PollY);
    SendClientMessageToAll(COLOR_LIGHTRED, string);
    PollOn = 0;
	return 1;
}

forward Lol(playerid);
public Lol(playerid)
{
	new Float:Pos[4];
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	CreateExplosion(Pos[0], Pos[1], Pos[2], 0, 10.0);
	return 1;
}
forward Lol1(playerid);
public Lol1(playerid)
{
	new string[128];
	format(string, sizeof(string), "%s: AllahuAkbar!", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	return 1;
}
forward HospitalTimer(playerid);
public HospitalTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		new string[128];
		if(HospitalTime[playerid] > 0)
		{
			format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Hospital Time Left: ~w~%d ~r~seconds", HospitalTime[playerid]);
			GameTextForPlayer(playerid, string,1500, 3);
			HospitalTime[playerid] --;
			HospitalCountDown[playerid] = SetTimerEx("HospitalTimer", 1000, false, "d", playerid);
		}
		else if(HospitalTime[playerid] <= 0)
		{
		    if(Hospital[playerid] == 0)
		    {
			    SetPlayerPos(playerid, 1177.5485,-1323.5773,14.0761);
			    SetPlayerFacingAngle(playerid, 269.4692);
		    }
		    else if(Hospital[playerid] == 1)
		    {
	            SetPlayerPos(playerid, 2034.0833,-1404.6536,17.2539);
			    SetPlayerFacingAngle(playerid, 178.1200);
		    }
		    PlayerInfo[playerid][pHospital] = 0;
		    SetCameraBehindPlayer(playerid);
		    TogglePlayerControllable(playerid, 1);
		    PlayerInfo[playerid][pArmor] = 0;
		    PlayerInfo[playerid][pDeath] ++;
		    SetPlayerHealth(playerid, 40);
		    SetPlayerArmour(playerid, 0);
		    SendClientMessage(playerid, COLOR_MEDIC, "(( You have lost 10 minutes of your IC memory, you don't remember the situation you died in ))");
			KillTimer(HospitalCountDown[playerid]);
			if(PlayerInfo[playerid][pVIP])
			{
				SetPlayerHealth(playerid, 100);
				SendClientMessage(playerid, COLOR_VIP, "Bronze VIP: You have spawned with 100 health points.");
			}
			if(PlayerInfo[playerid][pVIP] >= 2) SendClientMessage(playerid, COLOR_VIP, "Silver VIP: You have recovered quickly from the hospital.");
			if(PlayerInfo[playerid][pVIP] >= 3)
			{
				SetPlayerArmour(playerid, 50);
				SendClientMessage(playerid, COLOR_VIP, "Gold VIP: You have spawned with 50 armor points.");
			}
			if(PlayerInfo[playerid][pVIP] >= 4)
			{
				SetPlayerArmour(playerid, 100);
				SendClientMessage(playerid, COLOR_VIP, "Platinum VIP: You have spawned with 100 armor points.");
			}
		}
	}
	return 1;
}

//new BugMessage;
//forward Bug();
//public Bug()
//{
	/*if(!BugMessage)
	{
		SendClientMessageToAll(COLOR_ORANGE, "Need help? Use '/newbie' or '/helpme'.");
		BugMessage = 1;
	}
	else if(BugMessage == 1)
	{
		SendClientMessageToAll(COLOR_ORANGE, "To check what is new, Use '/updates'.");
        BugMessage = 2;
	}*/
/*	else if(BugMessage == 2)
	{
		SendClientMessageToAll(COLOR_YELLOW, "You can request help from our community helpers using /helpme.");
		BugMessage = 3;
	}
	else if(BugMessage == 3)
	{
		SendClientMessageToAll(COLOR_RED, "Want to get free VIP packages? /refhelp.");
		BugMessage = 4;
	}
	else if(BugMessage == 4)
	{
		SendClientMessageToAll(COLOR_RED, "If you wish to join a faction,or apply for a family please visit f and make an application by the format.");
		BugMessage = 0;
	}*/
//	return 1;
//}

forward zombiegateopendown();
public zombiegateopendown()
{
    MoveDynamicObject(zombieliftdoorattached1, 1786.893188, -1303.144531, 14.553212, 1.5);
    MoveDynamicObject(zombieliftdoorattached2, 1786.539428, -1303.147583, 14.552817, 1.5);
    MoveDynamicObject(zombieliftdoornotattached1, 1786.539428, -1303.147583, 14.552817, 1.5);
    MoveDynamicObject(zombieliftdoornotattached2, 1786.893188, -1303.144531, 14.553212, 1.5);
    SetTimer("zombiegatemoveup", 7000, false);
	return 1;
}
forward zombiegatemoveup();
public zombiegatemoveup()
{
    MoveDynamicObject(zombieliftdoorattached1, 1786.893188, -1303.157958, 126.623245, 1.5);
    MoveDynamicObject(zombieliftdoorattached2, 1786.539428, -1303.136230, 126.632812, 1.5);
    MoveDynamicObject(zombielift, 1786.689941, -1303.389038, 126.675018, 1.5);
    SetTimer("zombiegateopenup", 85000, false);
	return 1;
}

forward zombiegateopenup();
public zombiegateopenup()
{
    MoveDynamicObject(zombieliftdoorattached1, 1784.962890, -1303.144165, 126.623245, 1.5);
    MoveDynamicObject(zombieliftdoorattached2, 1788.349853, -1303.145263, 126.632812, 1.5);
    MoveDynamicObject(zombieliftdoornotattached3, 1788.349853, -1303.145263, 126.632812, 1.5);
    MoveDynamicObject(zombieliftdoornotattached4, 1784.962890, -1303.144165, 126.623245, 1.5);
    SetTimer("zombiegatecloseup", 7000, false);
	return 1;
}
forward zombiegatecloseup();
public zombiegatecloseup()
{
    MoveDynamicObject(zombieliftdoorattached1, 1786.893188, -1303.157958, 126.623245, 1.5);
    MoveDynamicObject(zombieliftdoorattached2, 1786.539428, -1303.136230, 126.632812, 1.5);
    MoveDynamicObject(zombieliftdoornotattached3, 1786.539428, -1303.136230, 126.632812, 1.5);
    MoveDynamicObject(zombieliftdoornotattached4, 1786.893188, -1303.157958, 126.623245, 1.5);
    SetTimer("zombiegategoesdown", 7000, false);
	return 1;
}

forward zombiegategoesdown();
public zombiegategoesdown()
{
    MoveDynamicObject(zombieliftdoorattached1, 1786.893188, -1303.157958, 14.553212, 1.5);
    MoveDynamicObject(zombieliftdoorattached2, 1786.539428, -1303.136230, 14.552817, 1.5);
    MoveDynamicObject(zombielift, 1786.689941, -1303.389038, 14.604994, 1.5);
            foreach(Player, i)
			{
			    if(IsPlayerLoggedIn(i))
			    {
                zombielifttt[i] = 0;
			    }
			}
	return 1;
}

forward SprunkTimer(playerid);
public SprunkTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		NoSprunk[playerid] = 0;
	}
	return 1;
}



forward NewbieTimer(playerid);
public NewbieTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		NewbieTime[playerid]--;
		if(NewbieTime[playerid] > 0)
		{
		    SetTimerEx("NewbieTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}

forward ATMTimer(playerid);
public ATMTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		ATMTime[playerid]--;
		if(ATMTime[playerid] > 0)
		{
		    SetTimerEx("ATMTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}

forward GarageTimer(playerid);
public GarageTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		GarageTime[playerid]--;
		if(GarageTime[playerid] > 0)
		{
		    SetTimerEx("GarageTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}

forward ReportTimer(playerid);
public ReportTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		ReportTime[playerid]--;
		if(ReportTime[playerid] > 0)
		{
		    SetTimerEx("ReportTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}

forward HelpTimer(playerid);
public HelpTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		HelpTime[playerid]--;
		if(HelpTime[playerid] > 0)
		{
		    SetTimerEx("HelpTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}

forward TazeTimer(playerid);
public TazeTimer(playerid)
{
    if(IsPlayerLoggedIn(playerid))
	{
	    new string[128];
		if (TazeTimeout[playerid] > 0)
	   	{
	   		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Tazer effect fading in ~w~%d ~r~seconds", TazeTimeout[playerid]);
			GameTextForPlayer(playerid, string,1500, 3);
			TazeTimeout[playerid] -= 1;
	   	}
	   	if(TazeTimeout[playerid] <= 0)
	   	{
	   	    KillTimer(TazeCountDown[playerid]);
	   	    TogglePlayerControllable(playerid, 1);
	   	    TogglePlayerTazed(playerid, 0);
	   	}
   	}
	return 1;
}


forward CuffTimer(playerid);
public CuffTimer(playerid)
{
    if(IsPlayerLoggedIn(playerid))
	{
	    new string[128];
		if (CuffTimeout[playerid] > 0)
	   	{
	   		//format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Cuffs open in ~w~%d ~r~seconds", CuffTimeout[playerid]);
			//GameTextForPlayer(playerid, string,1500, 3);
			CuffTimeout[playerid] -= 1;
	   	}
	   	if(CuffTimeout[playerid] <= 0)
	   	{
	   	    KillTimer(CuffCountDown[playerid]);
	   	    //TogglePlayerControllable(playerid, 1);
	   	    TogglePlayerCuffed(playerid, 0);
	   	    TogglePlayerTazed(playerid, 0);
	   	    if(!Uncuffed[playerid])
	   	    {
		   	    format(string, sizeof(string), "* %s manages to get their hands out of the cuffs.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			Uncuffed[playerid] = 0;
			KillTimer(CuffCountDown[playerid]);
			RemovePlayerAttachedObject(playerid, 0);
			ClearAnimations(playerid);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	   	}
   	}
	return 1;
}

forward PhoneCall(playerid);
public PhoneCall(playerid)
{
    if(IsPlayerLoggedIn(playerid))
	{
		new string[128];
		if(Calling[playerid])
		{
		    CallTime[playerid] ++;
		    format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Call timer: ~w~%d ~r~seconds", CallTime[playerid]);
			GameTextForPlayer(playerid, string,1500, 3);
		    SetTimerEx("PhoneCall", 1000, false, "d", playerid);
		}
	}
	return 1;
}

forward PrisonTimer();
public PrisonTimer()
{
	foreach(Player, playerid)
	{
		new string[128];
	    if(PlayerInfo[playerid][pPrisonTime] <=0)
	    {
	        if(PlayerInfo[playerid][pPrison] == 1) // NYPD Prison
			{
			    PlayerInfo[playerid][pPrison] = 0;
				PlayerInfo[playerid][pPrisonTime] = 0;
				SetPlayerInterior(playerid, 0);
				SetPlayerFacingAngle(playerid, 357.5062);
				SetPlayerColor(playerid, TRANSPARENT_WHITE);
				SetPlayerPos(playerid, 1154.3971,-1768.5394,16.5938);
				SetCameraBehindPlayer(playerid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have served your prison time, try to be a better citizen.");
				format(string, sizeof(string), "NYPD: %s has been released as they served their prison time.", RPN(playerid));
				foreach(Player, i)
				{
				    if(IsACop(i))
				    {
				        SendClientMessage(i, COLOR_BLUE, string);
				    }
				}
			}
	        else if(PlayerInfo[playerid][pPrison] == 2) // Admin Prison
			{
			    PlayerInfo[playerid][pPrison] = 0;
				PlayerInfo[playerid][pPrisonTime] = 0;
				format(PlayerInfo[playerid][pPrisonReason], 64, "");
				format(PlayerInfo[playerid][pPrisonBy], 32, "");
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerFacingAngle(playerid, 357.5062);
				SetPlayerColor(playerid, TRANSPARENT_WHITE);
				SetPlayerPos(playerid, 1154.3971,-1768.5394,16.5938);
				SetCameraBehindPlayer(playerid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have served your prison time, try to be a better player.");
			}
	    }
	    else
	    {
	    	PlayerInfo[playerid][pPrisonTime] --;
	    	format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Prison Time Left: ~w~%d ~r~seconds", PlayerInfo[playerid][pPrisonTime]);
			GameTextForPlayer(playerid, string,1500, 3);
		}
	}
	return 1;
}

// Stocks
stock RPNU(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

stock RPN(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if(name[i] == '_') name[i] = ' ';
    }
    return name;
}

stock IsGovVehicle(vehicleid)
{
	for(new i=0; i<12; i++)
	{
	    if(vehicleid == FacInfo[2][fCars][i]) return 1;
	}
	return 0;
}

stock IsDMVCar(vehicleid)
{
    for(new i=0; i<5; i++)
    {
        if(vehicleid == DMVCar[i]) return 1;
    }
    return 0;
}

stock IsDLCar(vehicleid)
{
    for(new i=0; i<12; i++)
    {
        if(vehicleid == DLCar[i]) return 1;
    }
    return 0;
}


stock IsNewsVehicle(vehicleid)
{
	for(new i=0; i<8; i++)
	{
	    if(vehicleid == FacInfo[4][fCars][i]) return 1;
	}
	return 0;
}

stock IsHitmanVehicle(vehicleid)
{
    for(new i=0; i<8; i++)
	{
	    if(vehicleid == FacInfo[3][fCars][i]) return 1;
	}
	return 0;
}

stock IsLSFMDVehicle(vehicleid)
{
	for(new i=0; i<8; i++)
	{
	    if(vehicleid == FacInfo[5][fCars][i]) return 1;
	}
	return 0;
}
stock IsLeoVehicle(vehicleid)
{
	for(new i=0; i<26; i++)
	{
	    if(vehicleid == FacInfo[1][fCars][i]) return 1;
	}
	return 0;
}
stock IsAPlane(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 460,464,476,511,512,513,519,520,553,577,592,593: return 1;
	}
	return 0;
}
stock IsFBIVehicle(vehicleid)
{
	for(new i=0; i<15; i++)
	{
	    if(vehicleid == FacInfo[6][fCars][i]) return 1;
	}
	return 0;
}
stock IsNGVehicle(vehicleid)
{
	for(new i=0; i<15; i++)
	{
	    if(vehicleid == FacInfo[7][fCars][i]) return 1;
	}
	return 0;
}
stock IsFamVehicle(vehicleid)
{
	for(new idx=1; idx<MAX_FAMILIES; idx++)
	{
	    for(new v=0; v<5; v++)
	    {
			if(vehicleid == FamInfo[idx][fVeh][v]) return 1;
		}
	}
	return 0;
}

stock GFVS(vehicleid)
{
	new slot;
	for(new idx=1; idx<MAX_FAMILIES; idx++)
	{
	    for(new v=0; v<5; v++)
	    {
			if(vehicleid == FamInfo[idx][fVeh][v]) {slot = v;}
		}
	}
	return slot;
}

stock RVF(vehicleid)
{
	new fam;

	return fam;
}

stock IsTruckerVehicle(vehicleid)
{
	for(new i=0; i<10; i++)
	{
	    if(vehicleid == JobInfo[JOB_TRUCKER][jCars][i]) return 1;
	}
	return 0;
}

stock IsCruiser(vehicleid)
{
	for(new i=0; i<6; i++)
	{
	    if(vehicleid == FacInfo[1][fCars][i]) return 1;
	}
	return 0;
}

forward NYPDLobbyTimer();
public NYPDLobbyTimer()
{
	if(NYPDLobbyStatus == 1)
    {
    	MoveDynamicObject(NYPDLobby[0], 246.4050, 72.3000, 1003.6700, 1.50);
    	MoveDynamicObject(NYPDLobby[1], 246.4050, 72.5750, 1003.6650, 1.50);
    	MoveDynamicObject(NYPDLobby[2], 246.9850, 72.4500, 1003.7000, 1.50);
    	MoveDynamicObject(NYPDLobby[3], 245.8330, 72.4500, 1003.7000, 1.50);
    	NYPDLobbyStatus = 0;
    	foreach(Player, i)
    	{
			if(IsPlayerInRangeOfPoint(i, 15, 246.381317,72.578338,1003.706604) || IsPlayerInRangeOfPoint(i, 3, 246.381317,72.292190,1003.706604))
			{
				SendClientMessage(i, COLOR_PURPLE, "* The lobby door automatically closes. (( NYPD Lobby ))");
			}
		}
    }
	return 1;
}

forward NYPDCellsTimer();
public NYPDCellsTimer()
{
	if(NYPDCellsStatus == 1)
    {
    	MoveDynamicObject(NYPDCells[0], 259.105194,90.812126,1002.584350, 1.50);
    	MoveDynamicObject(NYPDCells[1], 258.843353,90.840599,1002.584350, 1.50);
    	MoveDynamicObject(NYPDCells[2], 258.949157,91.412040,1002.528625, 1.50);
    	MoveDynamicObject(NYPDCells[3], 258.949157,90.292076,1002.528625, 1.50);
    	NYPDCellsStatus = 0;
    	foreach(Player, i)
    	{
			if(IsPlayerInRangeOfPoint(i, 3, 259.105194,90.812126,1002.584350) || IsPlayerInRangeOfPoint(i, 3, 258.843353,90.840599,1002.584350))
			{
				SendClientMessage(i, COLOR_PURPLE, "* The cells door automatically closes. (( NYPD Cells ))");
			}
		}
    }
	return 1;
}

forward ElevatorUp();
public ElevatorUp()
{
	if(ElDoorStatus == 1)
    {
    	MoveDynamicObject(ElDoor[0], 1786.761108, -1299.382934, 14.544997, 1.5);
    	MoveDynamicObject(ElDoor[1], 1786.702148, -1299.372070, 14.545944, 1.5);
    	ElDoorStatus = 0;
    	foreach(Player, i)
    	{
			if(IsPlayerInRangeOfPoint(i, 10,  1786.702148, -1299.372070, 14.545944) || IsPlayerInRangeOfPoint(i, 10, 1786.702148, -1299.372070, 14.545944))
			{
				SendClientMessage(i, COLOR_PURPLE, "* The door automatically closes and the elevator starts going up. (( VIP Elevator ))");
			}
		}
    }
	return 1;
}

forward ElDoorClose();
public ElDoorClose()
{
	if(ElDoorStatus == 1)
	{
        MoveDynamicObject(ElDoor[0], 1786.761108, -1299.382934, 14.544997, 1.5);
    	MoveDynamicObject(ElDoor[1], 1786.702148, -1299.372070, 14.545944, 1.5);
    	ElDoorStatus = 0;
    	foreach(Player, i)
    	{
			if(IsPlayerInRangeOfPoint(i, 10,  1786.702148, -1299.372070, 14.545944) || IsPlayerInRangeOfPoint(i, 10, 1786.702148, -1299.372070, 14.545944))
			{
				SendClientMessage(i, COLOR_PURPLE, "* The door automatically closes. (( VIP Elevator ))");
			}
		}
	}
	return 1;
}

forward TopFloor();
public TopFloor()
{
    foreach(Player, i)
   	{
		if(IsPlayerInRangeOfPoint(i, 5, 1786.6078,-1303.2161,13.5529))
    	{
	    	SetPlayerPos(i, 1829.9160,-1301.6019,132.0686);
	    	SetPlayerFacingAngle(i, 182.4977);
	    	GameTextForPlayer(i, "Top floor", 3000, 1);
	    	SendClientMessage(i, COLOR_PURPLE, "* The door closes behind your back and the elevator goes down. (( VIP Elevator ))");
    	}
    }
	return 1;
}

forward PrDoorsTimer();
public PrDoorsTimer()
{
	if(PrDoorStatus1 == 1)
    {
    	MoveDynamicObject(edoor5,1797.00830078,-1525.15258789,5699.42480469,0.50);
     	MoveDynamicObject(edoor6,1794.00976562,-1525.18676758,5699.42480469,0.50);
    	PrDoorStatus1 = 0;
    	foreach(Player, i)
    	{
			if(IsPlayerInRangeOfPoint(i, 3, 1797.00830078,-1525.15258789,5699.42480469) || IsPlayerInRangeOfPoint(i, 3, 1793.6631,-1523.9191,5700.4287))
			{
				SendClientMessage(i, COLOR_PURPLE, "* The door automatically closes. (( Prison ))");
			}
		}
    }
    if(PrDoorStatus2 == 1)
    {
    	MoveDynamicObject(pdoor1,1808.76147461,-1547.63208008,5699.42480469,0.50);
     	MoveDynamicObject(pdoor2,1811.76184082,-1547.60510254,5699.42480469,0.50);
    	PrDoorStatus2 = 0;
    	foreach(Player, i)
    	{
			if(IsPlayerInRangeOfPoint(i, 3, 1812.0830,-1545.2319,5700.4287) || IsPlayerInRangeOfPoint(i, 3, 1810.3752,-1548.3003,5700.4287))
			{
				SendClientMessage(i, COLOR_PURPLE, "* The door automatically closes. (( Prison ))");
			}
		}
    }
	return 1;
}

// Animations Defines

stock LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
	gPlayerUsingLoopingAnim[playerid] = 1;
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	TextDrawShowForPlayer(playerid,txtAnimHelper);
	animation[playerid]++;
}

stock OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	animation[playerid]++;
}

stock StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

stock RemovePlayerWeapon(playerid, weaponid) //Credits to whoever made this
{
	if(!IsPlayerConnected(playerid) || weaponid < 0 || weaponid > 50)
	    return;

	new
	    saveweapon[13],
	    saveammo[13];

	// Probably could be done using one loop
	for(new slot = 0; slot < 13; slot++)
	    GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);

	ResetPlayerWeapons(playerid);

	for(new slot; slot < 13; slot++)
	{
		if(saveweapon[slot] == weaponid || saveammo[slot] == 0)
			continue;

		GiveDodWeapon(playerid, saveweapon[slot], saveammo[slot]);
	}

	// give them weapon ID 0 to reset the current armed weapon
	// to a fist and not the last weapon in their inventory
	GiveDodWeapon(playerid, 0, 1);

}

// End of animations defines

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

stock RBT(bizid)
{
	new string[24];
	if(!BizInfo[bizid][bType]) format(string, sizeof(string), "None");
    else if(BizInfo[bizid][bType] == 1) format(string, sizeof(string), "24/7 Market");
    else if(BizInfo[bizid][bType] == 2) format(string, sizeof(string), "Clothes Store");
    else if(BizInfo[bizid][bType] == 3) format(string, sizeof(string), "Ammunation");
    else if(BizInfo[bizid][bType] == 4) format(string, sizeof(string), "Club");
    else if(BizInfo[bizid][bType] == 5) format(string, sizeof(string), "Advertisement Agency");
    else if(BizInfo[bizid][bType] == 6) format(string, sizeof(string), "Fast Food");
	return string;
}

stock RHS(bizid)
{
	new string[16];
	if(!HouseInfo[bizid][hStatus]) format(string, sizeof(string), "Locked");
    else if(HouseInfo[bizid][hStatus]) format(string, sizeof(string), "Unlocked");
	return string;
}

stock RBS(bizid)
{
	new string[40];
	if(!BizInfo[bizid][bStatus]) format(string, sizeof(string), "This business is closed");
    else if(BizInfo[bizid][bStatus]) format(string, sizeof(string), "This business is opened");
	return string;
}

stock RPBP(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", BizInfo[PlayerInfo[playerid][pBiz]][bProducts]);
	return string;
}

stock RPVIPBP(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", BizInfo[PlayerInfo[playerid][pVBiz]][bProducts]);
	return string;
}

stock RPPNO(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pNumber]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pNumber]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pNumber]);
	return string;
}

stock RPBM(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "$%d", BizInfo[PlayerInfo[playerid][pBiz]][bMoney]);
	return string;
}
stock RPBK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "0");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pBiz]);
	return string;
}

stock RPBS(playerid)
{
	new idx = PlayerInfo[playerid][pBiz];
	return BizInfo[idx][bSold];
}

stock RPBL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pBiz];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", BizInfo[idx][bLevel]);
	return string;
}

// VIP
stock RPVIPBM(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "$%d", BizInfo[PlayerInfo[playerid][pVBiz]][bMoney]);
	return string;
}
stock RPVIPBK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "0");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pVBiz]);
	return string;
}

stock RPVIPBS(playerid)
{
	new idx = PlayerInfo[playerid][pVBiz];
	return BizInfo[idx][bSold];
}

stock RPVIPBL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pVBiz];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", BizInfo[idx][bLevel]);
	return string;
}
//

stock RPHL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pHouse];
	if(!PlayerInfo[playerid][pHouse]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pHouse]) format(string, sizeof(string), "%d", HouseInfo[idx][hLevel]);
	return string;
}

stock RPVIPHL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pVHouse];
	if(!PlayerInfo[playerid][pVHouse]) format(string, sizeof(string), "0");
	else if(PlayerInfo[playerid][pVHouse]) format(string, sizeof(string), "%d", HouseInfo[idx][hLevel]);
	return string;
}

stock RPHK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pHouse]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pHouse]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pHouse]);
	return string;
}

stock RPGK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pGarage]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pGarage]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pGarage]);
	return string;
}

stock RPVIPGK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pVGarage]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVGarage]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pVGarage]);
	return string;
}

stock RPVIPHK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pVHouse]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVHouse]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pVHouse]);
	return string;
}

stock RPJN(playerid)
{
	new string[32];
	if(PlayerInfo[playerid][pJob] == JOB_NONE) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pJob] == JOB_MECHANIC) format(string, sizeof(string), "Mechanic");
	else if(PlayerInfo[playerid][pJob] == JOB_LAWYER) format(string, sizeof(string), "Lawyer");
	else if(PlayerInfo[playerid][pJob] == JOB_TRUCKER) format(string, sizeof(string), "Trucker");
	else if(PlayerInfo[playerid][pJob] == JOB_WDEALER) format(string, sizeof(string), "Weapons Dealer");
	else if(PlayerInfo[playerid][pJob] == JOB_WSMUGGLER) format(string, sizeof(string), "Weapons Smuggler");
	else if(PlayerInfo[playerid][pJob] == JOB_DDEALER) format(string, sizeof(string), "Drugs Dealer");
	else if(PlayerInfo[playerid][pJob] == JOB_DSMUGGLER) format(string, sizeof(string), "Drugs Smuggler");
	else if(PlayerInfo[playerid][pJob] == JOB_BODYGUARD) format(string, sizeof(string), "Bodyguard");
	else if(PlayerInfo[playerid][pJob] == JOB_BOXER) format(string, sizeof(string), "Boxer");
	return string;
}

stock RPVJN(playerid)
{
	new string[32];
	if(PlayerInfo[playerid][pVIPJob] == JOB_NONE) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_MECHANIC) format(string, sizeof(string), "Mechanic");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_LAWYER) format(string, sizeof(string), "Lawyer");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_TRUCKER) format(string, sizeof(string), "Trucker");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_WDEALER) format(string, sizeof(string), "Weapons Dealer");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_WSMUGGLER) format(string, sizeof(string), "Weapons Smuggler");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_DDEALER) format(string, sizeof(string), "Drugs Dealer");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_DSMUGGLER) format(string, sizeof(string), "Drugs Smuggler");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_BODYGUARD) format(string, sizeof(string), "Bodyguard");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_BOXER) format(string, sizeof(string), "Boxer");
	return string;
}

stock RPJL(playerid, skillid)
{
    // Legal Jobs: 1) Mechanic | 2) Lawyer | 3) Trucker | 4) Fisher
	// Illegal Jobs: 5) Weapons Dealer | 6) Weapons Smuggler | 7) Drugs Dealer | 8) Drugs Smuggler | 9) Car Jacker
	// L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	new string[4], skill, level;
	skill = PlayerInfo[playerid][pJobSkill][skillid];
	if(skill < 100) level = 1;
	else if(skill < 300) level = 2;
	else if(skill < 700) level = 3;
	else if(skill < 1200) level = 4;
	else if(skill >= 1200) level = 5;
	format(string, sizeof(string), "%d", level);
	return string;
}

stock RPJS(playerid, jobid)
{
	return PlayerInfo[playerid][pJobSkill][jobid];
}


stock RPPN(playerid)
{
	new string[20];
	format(string, sizeof(string), "None");
	if(PlayerInfo[playerid][pJob] == JOB_TRUCKER)
	{
		if(PlayerInfo[playerid][pTPackages] == 1) format(string, sizeof(string), "Products");
	}
	else if(PlayerInfo[playerid][pJob] == JOB_WSMUGGLER)
	{
        if(PlayerInfo[playerid][pMPackages]) format(string, sizeof(string), "Materials");
        if(PlayerInfo[playerid][pMMPackages]) format(string, sizeof(string), "Medium Materials");
        if(PlayerInfo[playerid][pHPackages]) format(string, sizeof(string), "High Materials");
	}
	else if(PlayerInfo[playerid][pJob] == JOB_DSMUGGLER)
	{
        if(PlayerInfo[playerid][pDPackages] == 1) format(string, sizeof(string), "Weed");
        else if(PlayerInfo[playerid][pDPackages] == 2) format(string, sizeof(string), "cocaine");
	}
	return string;
}

stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock AddDodWantedLevel(playerid, crime[])
{
	PlayerInfo[playerid][pCrimes] ++;
	PlayerInfo[playerid][pWanted] ++;
    SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+1);
    if(PlayerInfo[playerid][pWanted] == 1) format(PlayerInfo[playerid][pWanted1], 64, "%s", crime);
    if(PlayerInfo[playerid][pWanted] == 2) format(PlayerInfo[playerid][pWanted2], 64, "%s", crime);
    if(PlayerInfo[playerid][pWanted] == 3) format(PlayerInfo[playerid][pWanted3], 64, "%s", crime);
    if(PlayerInfo[playerid][pWanted] == 4) format(PlayerInfo[playerid][pWanted4], 64, "%s", crime);
    if(PlayerInfo[playerid][pWanted] == 5) format(PlayerInfo[playerid][pWanted5], 64, "%s", crime);
    if(PlayerInfo[playerid][pWanted] == 6) format(PlayerInfo[playerid][pWanted6], 64, "%s", crime);
	return 1;
}

stock ClearDodWantedLevels(playerid)
{
    PlayerInfo[playerid][pWanted] = 0;
    SetPlayerWantedLevel(playerid, 0);
    format(PlayerInfo[playerid][pWanted1], 64, "");
    format(PlayerInfo[playerid][pWanted2], 64, "");
    format(PlayerInfo[playerid][pWanted3], 64, "");
    format(PlayerInfo[playerid][pWanted4], 64, "");
    format(PlayerInfo[playerid][pWanted5], 64, "");
    format(PlayerInfo[playerid][pWanted6], 64, "");
	return 1;
}

stock IsPlayerNearBankBooth(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 5, 2308.9587,-13.2498,26.7422)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2228.5593,1651.2610,961.7596)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2236.6938,1634.4552,961.7531)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2250.9041,1662.3793,961.7531)) return 1;
	return 0;
}

stock IsPlayerNearATM(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2, 2228.383789, -1714.005249, 13.145634)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1928.707275, -1773.489013, 13.176870)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1102.388793, -1428.854858, 15.346872)) return 1;
	return 0;
}

stock Paycheck()
{
	// Bank Robbery
	if(BankRobberyTime) BankRobberyTime --;
	// Bonus Calculation
	new bonus;
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i)) bonus ++;
	}
	bonus = bonus*2;
	// Paycheck
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        if(PlayerInfo[i][pMinutes] >= 45)
	        {
	            new string[128], idx;
	            // Calculating Paycheck
		        new paycheck = ((PlayerInfo[i][pMinutes]*PlayerInfo[i][pMinutes]) / 12) * PlayerInfo[i][pLevel];
		        new taxamount = (TaxPercent * paycheck) / 100;
		        new finalpaycheck = paycheck - taxamount;
		        if(PlayerInfo[i][pInternet]) {finalpaycheck = finalpaycheck - 50; TaxMoney += 50;}
		        idx = PlayerInfo[i][pBiz];
		        if(PlayerInfo[i][pBiz]) {finalpaycheck = finalpaycheck - (BizInfo[idx][bLevel] * PlayerInfo[i][pLevel]); TaxMoney += (BizInfo[idx][bLevel] * PlayerInfo[i][pLevel]);}
                idx = PlayerInfo[i][pHouse];
				if(PlayerInfo[i][pHouse]) {finalpaycheck = finalpaycheck - (HouseInfo[idx][hLevel] * PlayerInfo[i][pLevel]); TaxMoney += (HouseInfo[idx][hLevel] * PlayerInfo[i][pLevel]);}
				if(PlayerInfo[i][pVIP] == 2) {finalpaycheck = finalpaycheck * (125/100);}
				if(PlayerInfo[i][pVIP] == 3) {finalpaycheck = finalpaycheck * (150/100);}
				if(PlayerInfo[i][pVIP] == 4) {finalpaycheck = finalpaycheck * (200/100);}
				finalpaycheck = finalpaycheck + ((bonus/100)*finalpaycheck);
				// Increasing Respect
				new calc, stack[4];
				if(PlayerInfo[i][pMinutes] >= 120)
				{
					calc = (PlayerInfo[i][pMinutes]/60);
					format(stack, sizeof(stack), "%d", calc);
			        PlayerInfo[i][pExp] += strval(stack);
		        }
		        else
		        {
		            PlayerInfo[i][pExp] ++;
		            PlayerInfo[i][pHours] ++;
		        }
		        if(DayRespect == 1)
				{
                    PlayerInfo[i][pExp] ++;
					SendClientMessage(i, COLOR_LIGHTBLUE, "* You have been given 1 additional respect point due to the current day ((/day))");
				}
		        /*// Levels: 1-30
				new OldLevel = PlayerInfo[i][pLevel];
		        if(PlayerInfo[i][pLevel] == 1 && PlayerInfo[i][pExp] >= 4) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 2 && PlayerInfo[i][pExp] >= 8) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 30 && PlayerInfo[i][pExp] >= 369) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 31 && PlayerInfo[i][pExp] >= 425) PlayerInfo[i][pLevel]++;
                new NewLevel = PlayerInfo[i][pLevel];
		        // Setting Level
		        SetPlayerScore(i, PlayerInfo[i][pLevel]);*/
		        new oldbalance = PlayerInfo[i][pBank];
		        PlayerInfo[i][pBank] += finalpaycheck;
		        TaxMoney += taxamount;
		        // Paycheck Report

	    		format(string, sizeof(string), "{FF6347}Minutes Played: {FFFFFF}%d {00FF00} {FF6347}Level: {FFFFFF}%d  {FF6347}Respect: {FFFFFF}%d", PlayerInfo[i][pMinutes], PlayerInfo[i][pLevel], PlayerInfo[i][pExp]);
	    		SendClientMessage(i, COLOR_FADE1, string);
	    		format(string, sizeof(string), "{FF6347}Paycheck: {FFFFFF}$%d  {FF6347}Tax Amount: {FFFFFF}$%d (%d percent)  {FF6347}Total Paycheck: {FFFFFF}$%d", paycheck, taxamount, TaxPercent, finalpaycheck);
				SendClientMessage(i, COLOR_FADE1, string);
	    		format(string, sizeof(string), "{FF6347}Old Balance: {FFFFFF}$%d  {FF6347}New Balance: {FFFFFF}$%d", oldbalance, PlayerInfo[i][pBank]);
	    		SendClientMessage(i, COLOR_FADE1, string);
	    		if(PlayerInfo[i][pMinutes] >= 120)
				{
					format(string, sizeof(string), "* You have been given %d respect points for playing for %d minutes.", strval(stack), PlayerInfo[i][pMinutes]);
	            	if(PlayerInfo[i][pVIPBuddy]) PlayerInfo[i][pVIPBuddy] -= strval(stack);
				}
				else
				{
					format(string, sizeof(string), "* You have been given 1 respect point for playing for %d minutes.", PlayerInfo[i][pMinutes]);
	            	if(PlayerInfo[i][pVIPBuddy]) PlayerInfo[i][pVIPBuddy] --;
				}
				SendClientMessage(i, COLOR_LIGHTBLUE, string);
				if(PlayerInfo[i][pInternet]) SendClientMessage(i, COLOR_LIGHTBLUE, "* You have been charged $50 for having smartphone internet service activated.");
                idx = PlayerInfo[i][pBiz];
				if(PlayerInfo[i][pBiz])
				{
				    format(string, sizeof(string), "* You have been charged $%d for having a business.", BizInfo[idx][bLevel] * PlayerInfo[i][pLevel]);
				    SendClientMessage(i, COLOR_LIGHTBLUE, string);
				}
				idx = PlayerInfo[i][pHouse];
				if(PlayerInfo[i][pHouse])
				{
				    format(string, sizeof(string), "* You have been charged $%d for having a house.", HouseInfo[idx][hLevel] * PlayerInfo[i][pLevel]);
				    SendClientMessage(i, COLOR_LIGHTBLUE, string);
				}
				if(PlayerInfo[i][pVIP] == 2) SendClientMessage(i, COLOR_VIP, "* Silver VIP: Your paycheck was 25 percent higher than usual.");
				else if(PlayerInfo[i][pVIP] == 3) SendClientMessage(i, COLOR_VIP, "* Gold VIP: Your paycheck was 50 percent higher than usual.");
				else if(PlayerInfo[i][pVIP] == 4) SendClientMessage(i, COLOR_VIP, "* Platinum VIP: Your paycheck was 100 percent higher than usual.");
				// Clearing Playing Minutes
	    		PlayerInfo[i][pMinutes] = 0;
	    	/*	// Giving a reward point
	    		if(!PlayerInfo[i][pVIP])
	    		{
		    		PlayerInfo[i][pReward] ++;
		    		if(PlayerInfo[i][pReward] >= 2124)
		    		{
						PlayerInfo[i][pReward] = 0;
						PlayerInfo[i][pVIP] = 1;
						PlayerInfo[i][pVIPTemp] = 60*24;
						format(string, sizeof(string), "RewardWarn: %s has been rewarded a Bronze VIP package for 24 hours for being active.", RPN(i));
						SendClientMessageToAll(COLOR_VIP, string);
						Log("logs/makevip.log", string);
						SendClientMessage(i, COLOR_LIGHTBLUE, " You will not be rewarded again until your Bronze VIP reward time is over.");
		    		}
		    		else
		    		{
						format(string, sizeof(string), "* You have gained an activity point, you have total of %d points.", PlayerInfo[i][pReward]);
						SendClientMessage(i, COLOR_VIP, string);
		    		}
	    		}*/
	    		// Loyal Points
	    		if(PlayerInfo[i][pVIP])
	    		{
	    		    PlayerInfo[i][pLPoints] ++;
   					format(string, sizeof(string), "* You have gained a VIP point, you have total of %d points.", PlayerInfo[i][pLPoints]);
	    		    SendClientMessage(i, COLOR_LIME, string);
	    		}
    		}
    		else
			{
			    SendClientMessage(i, COLOR_LIGHTRED, " You haven't played long enough to recieve a paycheck.");
			}
			PayChecks = 1;
			SetTimer("PayCheckDone", 5000, false);
		}
    }
	return 1;
}
stock stringContainsIP(const szStr[])
{
    new
        iDots,
        i
    ;
    while(szStr[i] != EOS)
    {
        if('0' <= szStr[i] <= '9')
        {
            do
            {
                if(szStr[i] == '.')
                    iDots++;

                i++;
            }
            while(('0' <= szStr[i] <= '9') || szStr[i] == '.' || szStr[i] == ':');
        }
        if(iDots > 2)
            return 1;
        else
            iDots = 0;

        i++;
    }
    return 0;
}



// new function
stock RPIDFN(playername[])
{
  for(new i = 0; i <= MAX_PLAYERS; i++)
  {
    if(IsPlayerConnected(i))
    {
      new playername2[MAX_PLAYER_NAME];
      GetPlayerName(i, playername2, sizeof(playername2));
      if(strcmp(playername2, playername, true, strlen(playername)) == 0)
      {
        return i;
      }
    }
  }
  return INVALID_PLAYER_ID;
}

stock SetVehicleSpeed(vehicleid,mph) //Miles Per Hour
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
	{
		multiple = (mph / (DV * 100)); //Multiplying DV by 100 calculates speed in MPH
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

stock ModifyVehicleSpeed(vehicleid,mph) //Miles Per Hour
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
	{
		multiple = ((mph + DV * 100) / (DV * 100)); //Multiplying DV by 100 calculates speed in MPH
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

stock GetPlayerSpeed(playerid, get3d)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else GetPlayerVelocity(playerid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock RVN(carid)
{
    new name[32];
	switch(carid)
	{
	    case 0: format(name, sizeof(name), "None");
	    case 400: format(name, sizeof(name), "Landstalker");
	    case 401: format(name, sizeof(name), "Bravura");
	    case 402: format(name, sizeof(name), "Buffalo");
	    case 403: format(name, sizeof(name), "Linerunner");
	    case 404: format(name, sizeof(name), "Perenniel");
	    case 405: format(name, sizeof(name), "Sentinel");
	    case 406: format(name, sizeof(name), "Dumper");
	    case 407: format(name, sizeof(name), "Fire Truck");
	    case 408: format(name, sizeof(name), "Trashmaster");
	    case 409: format(name, sizeof(name), "Stretch");
	    case 410: format(name, sizeof(name), "Manana");
	    case 411: format(name, sizeof(name), "Infernus");
        case 412: format(name, sizeof(name), "Voodoo");
        case 413: format(name, sizeof(name), "Pony");
        case 414: format(name, sizeof(name), "Mule");
        case 415: format(name, sizeof(name), "Cheetah");
        case 416: format(name, sizeof(name), "Ambulance");
        case 417: format(name, sizeof(name), "Leviathan");
        case 418: format(name, sizeof(name), "Moonbeam");
        case 419: format(name, sizeof(name), "Esperanto");
        case 420: format(name, sizeof(name), "Taxi");
        case 421: format(name, sizeof(name), "Washington");
        case 422: format(name, sizeof(name), "Bobcat");
        case 423: format(name, sizeof(name), "Mr Whoopee");
        case 424: format(name, sizeof(name), "BF Injection");
        case 425: format(name, sizeof(name), "Hunter");
        case 426: format(name, sizeof(name), "Premier");
        case 427: format(name, sizeof(name), "Enforcer");
        case 428: format(name, sizeof(name), "Securicar");
        case 429: format(name, sizeof(name), "Banshee");
        case 430: format(name, sizeof(name), "Predator");
        case 431: format(name, sizeof(name), "Bus");
        case 432: format(name, sizeof(name), "Rhino");
        case 433: format(name, sizeof(name), "Barracks");
        case 434: format(name, sizeof(name), "Hotknife");
        case 435: format(name, sizeof(name), "Article Trailer");
        case 436: format(name, sizeof(name), "Previon");
        case 437: format(name, sizeof(name), "Coach");
        case 438: format(name, sizeof(name), "Cabbie");
        case 439: format(name, sizeof(name), "Stallion");
        case 440: format(name, sizeof(name), "Rumpo");
        case 441: format(name, sizeof(name), "RC Bandit");
        case 442: format(name, sizeof(name), "Romero");
        case 443: format(name, sizeof(name), "Packer");
        case 444: format(name, sizeof(name), "Monster");
        case 445: format(name, sizeof(name), "Admiral");
        case 446: format(name, sizeof(name), "Squallo");
        case 447: format(name, sizeof(name), "Seasparrow");
        case 448: format(name, sizeof(name), "Pizzaboy");
        case 449: format(name, sizeof(name), "Tram");
        case 450: format(name, sizeof(name), "Article Trailer 2");
        case 451: format(name, sizeof(name), "Turismo");
        case 452: format(name, sizeof(name), "Speeder");
        case 453: format(name, sizeof(name), "Reefer");
        case 454: format(name, sizeof(name), "Tropic");
        case 455: format(name, sizeof(name), "Flatbed");
        case 456: format(name, sizeof(name), "Yankee");
        case 457: format(name, sizeof(name), "Caddy");
        case 458: format(name, sizeof(name), "Solair");
        case 459: format(name, sizeof(name), "Topfun Van");
        case 460: format(name, sizeof(name), "Skimmer");
        case 461: format(name, sizeof(name), "PCJ-600");
        case 462: format(name, sizeof(name), "Faggio");
        case 463: format(name, sizeof(name), "Freeway");
        case 464: format(name, sizeof(name), "RC Baron");
        case 465: format(name, sizeof(name), "RC Raider");
        case 466: format(name, sizeof(name), "Glendale");
        case 467: format(name, sizeof(name), "Oceanic");
        case 468: format(name, sizeof(name), "Sanchez");
        case 469: format(name, sizeof(name), "Sparrow");
        case 470: format(name, sizeof(name), "Patriot");
        case 471: format(name, sizeof(name), "Quad");
        case 472: format(name, sizeof(name), "Coastguard");
        case 473: format(name, sizeof(name), "Dinghy");
        case 474: format(name, sizeof(name), "Hermes");
        case 475: format(name, sizeof(name), "Sabre");
        case 476: format(name, sizeof(name), "Rustler");
        case 477: format(name, sizeof(name), "ZR-350");
        case 478: format(name, sizeof(name), "Walton");
        case 479: format(name, sizeof(name), "Regina");
        case 480: format(name, sizeof(name), "Comet");
	    case 481: format(name, sizeof(name), "BMX");
	    case 495: format(name, sizeof(name), "Sandking");
	    case 506: format(name, sizeof(name), "Super GT");
	    case 521: format(name, sizeof(name), "FCR-900");
	    case 522: format(name, sizeof(name), "NRG-500");
	    case 533: format(name, sizeof(name), "Feltzer");
	    case 555: format(name, sizeof(name), "Windsor");
	    case 579: format(name, sizeof(name), "Huntley");
	    case 560: format(name, sizeof(name), "Sultan");
	    case 541: format(name, sizeof(name), "Bullet");
	    case 559: format(name, sizeof(name), "Jester");
	    case 536: format(name, sizeof(name), "Blade");
	    case 575: format(name, sizeof(name), "Broadway");
	    case 534: format(name, sizeof(name), "Remington");
	    case 567: format(name, sizeof(name), "Savanna");
        case 535: format(name, sizeof(name), "Slamvan");
        case 576: format(name, sizeof(name), "Tornado");
	}
    return name;
}

// BEGIN OF VIP TUNING
stock CarmodDialog(playerid)
{
	ShowPlayerDialog(playerid,1111,DIALOG_STYLE_LIST,"Select things to put in your car","Nitro\nCar Color\nWheels\nStereo\nHydraulics\nCar Components","Select","Cancel");
	return 1;
}
stock Lowrider(playerid)
{
    ShowPlayerDialog(playerid,1001,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\n{FF0000}Back","Select","Cancel");
    return 1;
}
stock RegularCarDialog(playerid)
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
 	new string[128];
	if(vehmd == 401 || vehmd == 496 || vehmd == 518 || vehmd == 540 || vehmd == 546 || vehmd == 589)
	{string = "Spoiler\nHood\nRoof\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 549)
	{string = "Spoiler\nHood\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 550)
	{string = "Spoiler\nHood\nRoof\nVents\nLights\n{FF0000}Back";}
	else if(vehmd == 585 || vehmd == 603)
	{string = "Spoiler\nRoof\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 410 || vehmd == 436)
	{string = "Spoiler\nRoof\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 439 || vehmd == 458)
	{string = "Spoiler\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 551 || vehmd == 492 || vehmd == 529)
	{string = "Spoiler\nHood\nRoof\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 489 || vehmd == 505)
	{string = "Spoiler\nHood\nRoof\nLights\n{FF0000}Back";}
	else if(vehmd == 516)
	{string = "Spoiler\nHood\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 491 || vehmd == 517)
	{string = "Spoiler\nVents\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 418 || vehmd == 527 || vehmd == 580)
	{string = "Spoiler\nRoof\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 420 || vehmd == 587)
	{string = "Spoiler\nHood\n{FF0000}Back";}
	else if(vehmd == 547)
	{string = "Spoiler\nVents\n{FF0000}Back";}
	else if(vehmd == 415)
	{string = "Spoiler\nSideskirt\n{FF0000}Back";}

    ShowPlayerDialog(playerid,1004,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancel");
    return 1;
}
stock Mod(playerid)//Alien
{
    ShowPlayerDialog(playerid,1511,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Back","Select","Cancle");
    return 1;
}
stock Mod1(playerid)//X-Flow
{
	ShowPlayerDialog(playerid,1512,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Back","Select","Cancle");
	return 1;
}
stock Mod2(playerid)//Chrome
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    new string[128];
	if(vehmd == 576 || vehmd == 575)
	{string = "Right Sideskirt\nLeft Sideskirt\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}
	else if(vehmd == 535)
	{string = "Front Bullbars\nRear Bullbars\nExhaust\nFront Bumper\nRight Sideskirt\nLeft Sideskirt\n{FF0000}Back";}
	else if(vehmd == 567 || vehmd == 536)
	{string = "Exhaust\nRight Sideskirt\nLeft Sideskirt\nRear Bumper\nFront Bumper\n{FF0000}Back";}
	else if(vehmd == 534)
	{string = "Grill\nBars\nLights\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}

    ShowPlayerDialog(playerid,1513,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancle");
	return 1;
}
stock Mod3(playerid)//Slamin
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    new string[128];
    if(vehmd == 575 || vehmd == 576)
	{string = "Exhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}
	else if(vehmd == 535)
	{string = "Rear Bullbars\nFront Bullbars\nExhaust\nRight Sideskirt\nLeft Sidedkirt\n{FF0000}Back";}
	else if(vehmd == 567 || vehmd == 536 || vehmd == 534)
	{string = "Front Bumper\nRear Bumper\nExhaust\n{FF0000}Back";}
    ShowPlayerDialog(playerid,1514,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancle");
    return 1;
}
// END OF VIP TUNING

/*// Anti CS
forward OnPlayerCBug(playerid);
public OnPlayerCBug(playerid) {
	if(PlayerPaintballing[playerid] == 1) return 1;
	if(!Event[playerid])
	{
	    new string[128], fCell;
		new fH;
		GetPlayerHealth(playerid, H);
		SetPlayerHealth(playerid, H-5);
	}
	if(PlayerPaintballing[playerid] == 1)
	{
	    new fH;
	    GetPlayerHealth(playerid, H);
	    SetPlayerHealth(playerid, H);
	    ClearDodWantedLevels(playerid);
	    ResetPlayerWeapons(playerid);
		ResetDodWeapons(playerid);
	    SetPlayerColor(playerid, TRANSPARENT_ORANGE);
		PlayerInfo[playerid][pPrison] = 2;
		PlayerInfo[playerid][pPrisonTime] = 600;
		format(PlayerInfo[playerid][pPrisonReason], 64, "crackshooting");
		format(PlayerInfo[playerid][pPrisonBy], 32, "Auto-prison");
		SetPlayerInterior(playerid, 2);
		SetPlayerVirtualWorld(playerid, 1);
		fCell = f(sizeof(fPrison));
		SetPlayerFacingAngle(playerid, fPrison[fCell][3]);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
		SetPlayerPos(playerid, fPrison[fCell][0], fPrison[fCell][1], fPrison[fCell][2]);
		SetCameraBehindPlayer(playerid);
		format(string, sizeof(string), "AdmCmd: %s has been Auto-prisoned by MOLE, Reason: Crack-Shooting", RPN(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		Log("logs/prison.log", string);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have been auto-prisoned by MOLE for Crack-Shooting.");
		GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
		TogglePlayerControllable(playerid, 0);
        SetTimerEx("f", 5000, false, "i", playerid);
        PlayerInfo[playerid][pSpawnFreeze] = 1;
	}
	return 1;
}
forward CrouchCheck(playerid);
public CrouchCheck(playerid) {
	CheckCrouch[playerid] = 0;
	return 1;
}*/
forward GetOff(playerid);
public GetOff(playerid)
{
	SendClientMessage(playerid, COLOR_PURPLE, "* 5 minutes later, the passengers are off the plane.");
	SendClientMessage(playerid, COLOR_YELLOW, "Fly the plane back to the Los Santos Airport to collect your reward.");
	CP[playerid] = 2426;
	SetPlayerCheckpoint(playerid, 1705.1187, -2492.6309, 13.5547, 15.0);
	TogglePlayerControllable(playerid, 1);
	return 1;
}
/*public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if(listid == f)
    {
        if(response)
        {
            //SendClientMessage(playerid, 0xFF0000FF, "Car have been spawned");
                new Float:pos[3]; GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
                CreateVehicle(modelid, pos[0] + 2.5, pos[1], pos[2] + 2.5, 0.0, random(128), random(128), -1);
		    	//cVeh[i] = f(id, pos[0], pos[1], pos[2], pos[3], col[0], col[1], 1200);
		     	SendClientMessage(playerid, 0xFF0000FF, "Car have been spawned");
        }
        else SendClientMessage(playerid, 0xFF0000FF, "Canceled vehicle selection");
        return 1;
    }
    new idx = GetPlayerVirtualWorld(playerid)-100;
	if(listid == skinlist)
	{
	    if(response)
	    {
		    SendClientMessage(playerid, 0xFF0000FF, "You've bought a new clothes and paid 100$");
	    	SetPlayerSkin(playerid, modelid);
	    }
	    else SendClientMessage(playerid, 0xFF0000FF, "You've choosed to leave that clothes shop");
	    BizInfo[idx][bMoney] += 100;
    	BizInfo[idx][bProducts] --;
    	GiveDodMoney(playerid, -100);
    	return 1;
	}
	return 1;
}*/
forward OnPlayerCleoDetected(playerid);
public OnPlayerCleoDetected(playerid)
{
    return 1;
}

stock SaveToys(playerid, file[])
{
	// Toys Model
	dini_IntSet(file, "tModel0", PlayerInfo[playerid][pToyModel][0]);
	dini_IntSet(file, "tModel1", PlayerInfo[playerid][pToyModel][1]);
	dini_IntSet(file, "tModel2", PlayerInfo[playerid][pToyModel][2]);
	dini_IntSet(file, "tModel3", PlayerInfo[playerid][pToyModel][3]);
	dini_IntSet(file, "tModel4", PlayerInfo[playerid][pToyModel][4]);
	dini_IntSet(file, "tModel5", PlayerInfo[playerid][pToyModel][5]);
	dini_IntSet(file, "tModel6", PlayerInfo[playerid][pToyModel][6]);
	dini_IntSet(file, "tModel7", PlayerInfo[playerid][pToyModel][7]);
	dini_IntSet(file, "tModel8", PlayerInfo[playerid][pToyModel][8]);
	dini_IntSet(file, "tModel9", PlayerInfo[playerid][pToyModel][9]);
	// Toys X
	dini_FloatSet(file, "tX0", PlayerInfo[playerid][pToyX][0]);	dini_FloatSet(file, "tX1", PlayerInfo[playerid][pToyX][1]);	dini_FloatSet(file, "tX2", PlayerInfo[playerid][pToyX][2]);	dini_FloatSet(file, "tX3", PlayerInfo[playerid][pToyX][3]);
	dini_FloatSet(file, "tX4", PlayerInfo[playerid][pToyX][4]);	dini_FloatSet(file, "tX5", PlayerInfo[playerid][pToyX][5]);	dini_FloatSet(file, "tX6", PlayerInfo[playerid][pToyX][6]);	dini_FloatSet(file, "tX7", PlayerInfo[playerid][pToyX][7]);
	dini_FloatSet(file, "tX8", PlayerInfo[playerid][pToyX][8]);	dini_FloatSet(file, "tX9", PlayerInfo[playerid][pToyX][9]);
	// Toys Y
	dini_FloatSet(file, "tY0", PlayerInfo[playerid][pToyY][0]);	dini_FloatSet(file, "tY1", PlayerInfo[playerid][pToyY][1]);	dini_FloatSet(file, "tY2", PlayerInfo[playerid][pToyY][2]);	dini_FloatSet(file, "tY3", PlayerInfo[playerid][pToyY][3]);
	dini_FloatSet(file, "tY4", PlayerInfo[playerid][pToyY][4]);	dini_FloatSet(file, "tY5", PlayerInfo[playerid][pToyY][5]);	dini_FloatSet(file, "tY6", PlayerInfo[playerid][pToyY][6]);	dini_FloatSet(file, "tY7", PlayerInfo[playerid][pToyY][7]);
	dini_FloatSet(file, "tY8", PlayerInfo[playerid][pToyY][8]); dini_FloatSet(file, "tY9", PlayerInfo[playerid][pToyY][9]);
	// Toy Z
	dini_FloatSet(file, "tZ0", PlayerInfo[playerid][pToyZ][0]);	dini_FloatSet(file, "tZ1", PlayerInfo[playerid][pToyZ][1]);	dini_FloatSet(file, "tZ2", PlayerInfo[playerid][pToyZ][2]);	dini_FloatSet(file, "tZ3", PlayerInfo[playerid][pToyZ][3]);
	dini_FloatSet(file, "tZ4", PlayerInfo[playerid][pToyZ][4]);	dini_FloatSet(file, "tZ5", PlayerInfo[playerid][pToyZ][5]);	dini_FloatSet(file, "tZ6", PlayerInfo[playerid][pToyZ][6]);	dini_FloatSet(file, "tZ7", PlayerInfo[playerid][pToyZ][7]);
	dini_FloatSet(file, "tZ8", PlayerInfo[playerid][pToyZ][8]);	dini_FloatSet(file, "tZ9", PlayerInfo[playerid][pToyZ][9]);
	// Toy RX
	dini_FloatSet(file, "tRX0", PlayerInfo[playerid][pToyRX][0]); dini_FloatSet(file, "tRX1", PlayerInfo[playerid][pToyRX][1]);	dini_FloatSet(file, "tRX2", PlayerInfo[playerid][pToyRX][2]); dini_FloatSet(file, "tRX3", PlayerInfo[playerid][pToyRX][3]);
	dini_FloatSet(file, "tRX4", PlayerInfo[playerid][pToyRX][4]); dini_FloatSet(file, "tRX5", PlayerInfo[playerid][pToyRX][5]);	dini_FloatSet(file, "tRX6", PlayerInfo[playerid][pToyRX][6]); dini_FloatSet(file, "tRX7", PlayerInfo[playerid][pToyRX][7]);
	dini_FloatSet(file, "tRX8", PlayerInfo[playerid][pToyRX][8]); dini_FloatSet(file, "tRX9", PlayerInfo[playerid][pToyRX][9]);
	// Toy RY
	dini_FloatSet(file, "tRY0", PlayerInfo[playerid][pToyRY][0]); dini_FloatSet(file, "tRY1", PlayerInfo[playerid][pToyRY][1]);	dini_FloatSet(file, "tRY2", PlayerInfo[playerid][pToyRY][2]); dini_FloatSet(file, "tRY3", PlayerInfo[playerid][pToyRY][3]);
	dini_FloatSet(file, "tRY4", PlayerInfo[playerid][pToyRY][4]); dini_FloatSet(file, "tRY5", PlayerInfo[playerid][pToyRY][5]);	dini_FloatSet(file, "tRY6", PlayerInfo[playerid][pToyRY][6]); dini_FloatSet(file, "tRY7", PlayerInfo[playerid][pToyRY][7]);
	dini_FloatSet(file, "tRY8", PlayerInfo[playerid][pToyRY][8]); dini_FloatSet(file, "tRY9", PlayerInfo[playerid][pToyRY][9]);
	// Toy RZ
	dini_FloatSet(file, "tRZ0", PlayerInfo[playerid][pToyRZ][0]); dini_FloatSet(file, "tRZ1", PlayerInfo[playerid][pToyRZ][1]);	dini_FloatSet(file, "tRZ2", PlayerInfo[playerid][pToyRZ][2]); dini_FloatSet(file, "tRZ3", PlayerInfo[playerid][pToyRZ][3]);
	dini_FloatSet(file, "tRZ4", PlayerInfo[playerid][pToyRZ][4]); dini_FloatSet(file, "tRZ5", PlayerInfo[playerid][pToyRZ][5]);	dini_FloatSet(file, "tRZ6", PlayerInfo[playerid][pToyRZ][6]); dini_FloatSet(file, "tRZ7", PlayerInfo[playerid][pToyRZ][7]);
	dini_FloatSet(file, "tRZ8", PlayerInfo[playerid][pToyRZ][8]); dini_FloatSet(file, "tRZ9", PlayerInfo[playerid][pToyRZ][9]);
	// Toy SX
	dini_FloatSet(file, "tSX0", PlayerInfo[playerid][pToySX][0]); dini_FloatSet(file, "tSX1", PlayerInfo[playerid][pToySX][1]);	dini_FloatSet(file, "tSX2", PlayerInfo[playerid][pToySX][2]); dini_FloatSet(file, "tSX3", PlayerInfo[playerid][pToySX][3]);
	dini_FloatSet(file, "tSX4", PlayerInfo[playerid][pToySX][4]); dini_FloatSet(file, "tSX5", PlayerInfo[playerid][pToySX][5]);	dini_FloatSet(file, "tSX6", PlayerInfo[playerid][pToySX][6]); dini_FloatSet(file, "tSX7", PlayerInfo[playerid][pToySX][7]);
	dini_FloatSet(file, "tSX8", PlayerInfo[playerid][pToySX][8]); dini_FloatSet(file, "tSX9", PlayerInfo[playerid][pToySX][9]);
	// Toy SY
	dini_FloatSet(file, "tSY0", PlayerInfo[playerid][pToySY][0]); dini_FloatSet(file, "tSY1", PlayerInfo[playerid][pToySY][1]);	dini_FloatSet(file, "tSY2", PlayerInfo[playerid][pToySY][2]); dini_FloatSet(file, "tSY3", PlayerInfo[playerid][pToySY][3]);
	dini_FloatSet(file, "tSY4", PlayerInfo[playerid][pToySY][4]); dini_FloatSet(file, "tSY5", PlayerInfo[playerid][pToySY][5]);	dini_FloatSet(file, "tSY6", PlayerInfo[playerid][pToySY][6]); dini_FloatSet(file, "tSY7", PlayerInfo[playerid][pToySY][7]);
	dini_FloatSet(file, "tSY8", PlayerInfo[playerid][pToySY][8]); dini_FloatSet(file, "tSY9", PlayerInfo[playerid][pToySY][9]);
	// Toy SZ
	dini_FloatSet(file, "tSZ0", PlayerInfo[playerid][pToySZ][0]); dini_FloatSet(file, "tSZ1", PlayerInfo[playerid][pToySZ][1]);	dini_FloatSet(file, "tSZ2", PlayerInfo[playerid][pToySZ][2]); dini_FloatSet(file, "tSZ3", PlayerInfo[playerid][pToySZ][3]);
	dini_FloatSet(file, "tSZ4", PlayerInfo[playerid][pToySZ][4]); dini_FloatSet(file, "tSZ5", PlayerInfo[playerid][pToySZ][5]);	dini_FloatSet(file, "tSZ6", PlayerInfo[playerid][pToySZ][6]); dini_FloatSet(file, "tSZ7", PlayerInfo[playerid][pToySZ][7]);
	dini_FloatSet(file, "tSZ8", PlayerInfo[playerid][pToySZ][8]); dini_FloatSet(file, "tSZ9", PlayerInfo[playerid][pToySZ][9]);
	return 1;
}

stock LoadToys(playerid, file[])
{
	// Toys
	PlayerInfo[playerid][pToyModel][0] = dini_Int(file, "tModel0");
	PlayerInfo[playerid][pToyModel][1] = dini_Int(file, "tModel1");
	PlayerInfo[playerid][pToyModel][2] = dini_Int(file, "tModel2");
	PlayerInfo[playerid][pToyModel][3] = dini_Int(file, "tModel3");
	PlayerInfo[playerid][pToyModel][4] = dini_Int(file, "tModel4");
	PlayerInfo[playerid][pToyModel][5] = dini_Int(file, "tModel5");
	PlayerInfo[playerid][pToyModel][6] = dini_Int(file, "tModel6");
	PlayerInfo[playerid][pToyModel][7] = dini_Int(file, "tModel7");
	PlayerInfo[playerid][pToyModel][8] = dini_Int(file, "tModel8");
	PlayerInfo[playerid][pToyModel][9] = dini_Int(file, "tModel9");
	// Toys X
	PlayerInfo[playerid][pToyX][0] = dini_Float(file, "tX0"); PlayerInfo[playerid][pToyX][1] = dini_Float(file, "tX1");	PlayerInfo[playerid][pToyX][2] = dini_Float(file, "tX2"); PlayerInfo[playerid][pToyX][3] = dini_Float(file, "tX3");
	PlayerInfo[playerid][pToyX][4] = dini_Float(file, "tX4"); PlayerInfo[playerid][pToyX][5] = dini_Float(file, "tX5");	PlayerInfo[playerid][pToyX][6] = dini_Float(file, "tX6"); PlayerInfo[playerid][pToyX][7] = dini_Float(file, "tX7");
	PlayerInfo[playerid][pToyX][8] = dini_Float(file, "tX8"); PlayerInfo[playerid][pToyX][9] = dini_Float(file, "tX9");
	// Toys Y
	PlayerInfo[playerid][pToyY][0] = dini_Float(file, "tY0"); PlayerInfo[playerid][pToyY][1] = dini_Float(file, "tY1");	PlayerInfo[playerid][pToyY][2] = dini_Float(file, "tY2"); PlayerInfo[playerid][pToyY][3] = dini_Float(file, "tY3");
	PlayerInfo[playerid][pToyY][4] = dini_Float(file, "tY4"); PlayerInfo[playerid][pToyY][5] = dini_Float(file, "tY5");	PlayerInfo[playerid][pToyY][6] = dini_Float(file, "tY6"); PlayerInfo[playerid][pToyY][7] = dini_Float(file, "tY7");
	PlayerInfo[playerid][pToyY][8] = dini_Float(file, "tY8"); PlayerInfo[playerid][pToyY][9] = dini_Float(file, "tY9");
	// Toy Z
	PlayerInfo[playerid][pToyZ][0] = dini_Float(file, "tZ0"); PlayerInfo[playerid][pToyZ][1] = dini_Float(file, "tZ1");	PlayerInfo[playerid][pToyZ][2] = dini_Float(file, "tZ2"); PlayerInfo[playerid][pToyZ][3] = dini_Float(file, "tZ3");
	PlayerInfo[playerid][pToyZ][4] = dini_Float(file, "tZ4"); PlayerInfo[playerid][pToyZ][5] = dini_Float(file, "tZ5");	PlayerInfo[playerid][pToyZ][6] = dini_Float(file, "tZ6"); PlayerInfo[playerid][pToyZ][7] = dini_Float(file, "tZ7");
	PlayerInfo[playerid][pToyZ][8] = dini_Float(file, "tZ8"); PlayerInfo[playerid][pToyZ][9] = dini_Float(file, "tZ9");
	// Toy RX
	PlayerInfo[playerid][pToyRX][0] = dini_Float(file, "tRX0"); PlayerInfo[playerid][pToyRX][1] = dini_Float(file, "tRX1");	PlayerInfo[playerid][pToyRX][2] = dini_Float(file, "tRX2"); PlayerInfo[playerid][pToyRX][3] = dini_Float(file, "tRX3");
	PlayerInfo[playerid][pToyRX][4] = dini_Float(file, "tRX4"); PlayerInfo[playerid][pToyRX][5] = dini_Float(file, "tRX5");	PlayerInfo[playerid][pToyRX][6] = dini_Float(file, "tRX6"); PlayerInfo[playerid][pToyRX][7] = dini_Float(file, "tRX7");
	PlayerInfo[playerid][pToyRX][8] = dini_Float(file, "tRX8"); PlayerInfo[playerid][pToyRX][9] = dini_Float(file, "tRX9");
	// Toy RY
	PlayerInfo[playerid][pToyRY][0] = dini_Float(file, "tRY0");	PlayerInfo[playerid][pToyRY][1] = dini_Float(file, "tRY1");	PlayerInfo[playerid][pToyRY][2] = dini_Float(file, "tRY2");	PlayerInfo[playerid][pToyRY][3] = dini_Float(file, "tRY3");
	PlayerInfo[playerid][pToyRY][4] = dini_Float(file, "tRY4");	PlayerInfo[playerid][pToyRY][5] = dini_Float(file, "tRY5");	PlayerInfo[playerid][pToyRY][6] = dini_Float(file, "tRY6");	PlayerInfo[playerid][pToyRY][7] = dini_Float(file, "tRY7");
	PlayerInfo[playerid][pToyRY][8] = dini_Float(file, "tRY8");	PlayerInfo[playerid][pToyRY][9] = dini_Float(file, "tRY9");
	// Toy RZ
	PlayerInfo[playerid][pToyRZ][0] = dini_Float(file, "tRZ0");	PlayerInfo[playerid][pToyRZ][1] = dini_Float(file, "tRZ1");	PlayerInfo[playerid][pToyRZ][2] = dini_Float(file, "tRZ2");	PlayerInfo[playerid][pToyRZ][3] = dini_Float(file, "tRZ3");
	PlayerInfo[playerid][pToyRZ][4] = dini_Float(file, "tRZ4");	PlayerInfo[playerid][pToyRZ][5] = dini_Float(file, "tRZ5");	PlayerInfo[playerid][pToyRZ][6] = dini_Float(file, "tRZ6");	PlayerInfo[playerid][pToyRZ][7] = dini_Float(file, "tRZ7");
	PlayerInfo[playerid][pToyRZ][8] = dini_Float(file, "tRZ8");	PlayerInfo[playerid][pToyRZ][9] = dini_Float(file, "tRZ9");
	// Toy SX
	PlayerInfo[playerid][pToySX][0] = dini_Float(file, "tSX0");	PlayerInfo[playerid][pToySX][1] = dini_Float(file, "tSX1");	PlayerInfo[playerid][pToySX][2] = dini_Float(file, "tSX2");	PlayerInfo[playerid][pToySX][3] = dini_Float(file, "tSX3");
	PlayerInfo[playerid][pToySX][4] = dini_Float(file, "tSX4");	PlayerInfo[playerid][pToySX][5] = dini_Float(file, "tSX5");	PlayerInfo[playerid][pToySX][6] = dini_Float(file, "tSX6");	PlayerInfo[playerid][pToySX][7] = dini_Float(file, "tSX7");
	PlayerInfo[playerid][pToySX][8] = dini_Float(file, "tSX8");	PlayerInfo[playerid][pToySX][9] = dini_Float(file, "tSX9");
	// Toy SY
	PlayerInfo[playerid][pToySY][0] = dini_Float(file, "tSY0");	PlayerInfo[playerid][pToySY][1] = dini_Float(file, "tSY1");	PlayerInfo[playerid][pToySY][2] = dini_Float(file, "tSY2");	PlayerInfo[playerid][pToySY][3] = dini_Float(file, "tSY3");
	PlayerInfo[playerid][pToySY][4] = dini_Float(file, "tSY4");	PlayerInfo[playerid][pToySY][5] = dini_Float(file, "tSY5");	PlayerInfo[playerid][pToySY][6] = dini_Float(file, "tSY6");	PlayerInfo[playerid][pToySY][7] = dini_Float(file, "tSY7");
	PlayerInfo[playerid][pToySY][8] = dini_Float(file, "tSY8");	PlayerInfo[playerid][pToySY][9] = dini_Float(file, "tSY9");
	// Toy SZ
	PlayerInfo[playerid][pToySZ][0] = dini_Float(file, "tSZ0");	PlayerInfo[playerid][pToySZ][1] = dini_Float(file, "tSZ1");	PlayerInfo[playerid][pToySZ][2] = dini_Float(file, "tSZ2");	PlayerInfo[playerid][pToySZ][3] = dini_Float(file, "tSZ3");
	PlayerInfo[playerid][pToySZ][4] = dini_Float(file, "tSZ4");	PlayerInfo[playerid][pToySZ][5] = dini_Float(file, "tSZ5");	PlayerInfo[playerid][pToySZ][6] = dini_Float(file, "tSZ6");	PlayerInfo[playerid][pToySZ][7] = dini_Float(file, "tSZ7");
	PlayerInfo[playerid][pToySZ][8] = dini_Float(file, "tSZ8");	PlayerInfo[playerid][pToySZ][9] = dini_Float(file, "tSZ9");
	for(new i=0; i<10; i++) // Toys
    {
	 	if(PlayerInfo[playerid][pToySX][i] == 0) PlayerInfo[playerid][pToySX][i] = 1;
	    if(PlayerInfo[playerid][pToySY][i] == 0) PlayerInfo[playerid][pToySY][i] = 1;
	    if(PlayerInfo[playerid][pToySZ][i] == 0) PlayerInfo[playerid][pToySZ][i] = 1;
    }
	return 1;
}
/*Stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++) { if (string[i] > '9' || string[i] < '0') return 0; }
	return 1;
}
stock ReturnVehicleModelID(string[])
{
	if(IsNumeric(string))
	{
		new id = strval(string);
		if(id >= 400 && id <= 611)
		{
		    return id;
		}
	}
	for(new i = 0;i < sizeof(vehName);i++)
    {
        if(strfind(vehName[i],string,true) != -1)
        {
            return i + 400;
        }
    }
    return 0;
}*/
stock RPTN(playerid, slot)
{
    new name[24], toy = PlayerInfo[playerid][pToyModel][slot];
    format(name, sizeof(name), "None");
    // Model assigning
	if(toy >= 19006 && toy <= 19035) format(name, sizeof(name), "Glasses");
	else if(toy >= 19039 && toy <= 19053) format(name, sizeof(name), "Watch");
	else if(toy >= 18891 && toy <= 18910) format(name, sizeof(name), "Bandana");
	else if(toy >= 18926 && toy <= 18935) format(name, sizeof(name), "Hat");
	else if(toy >= 18911 && toy <= 18920) format(name, sizeof(name), "Mask");
	else if(toy == 18640 || toy == 18975 || toy == 19077 || toy == 19136 || toy == 19274) format(name, sizeof(name), "Hair");
	else if(toy == 18643 || toy >= 19080 && toy <= 19084) format(name, sizeof(name), "Iaser");
	else if(toy >= 19421 && toy <= 19424) format(name, sizeof(name), "Headphones");
	else if(toy == 19317) format(name, sizeof(name), "Guitar");
	else if(toy == 19352) format(name, sizeof(name), "TopHat");
	else if(toy == 18645 || toy >= 18976 && toy <= 18979) format(name, sizeof(name), "Motorcycle Helmet");
	else if(toy == 18675) format(name, sizeof(name), "Smoke Puff");
	else if(toy == 19142) format(name, sizeof(name), "Police Vest");
	else if(toy == 19141) format(name, sizeof(name), "Swat Helmet");
	else if(toy == 18637) format(name, sizeof(name), "Police Shield");
	else if(toy == 18642) format(name, sizeof(name), "Tazer");
	else if(toy == 330) format(name, sizeof(name), "Tazer");
	return name;
}

